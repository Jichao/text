// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_152_000)
{
    // FD0D 0062;	
    // (‎‎ﴍ‎‎) ARABIC LIGATURE SHEEN WITH REH ISOLATED FORM	[23C0 23AC 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0D, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_001)
{
    // FD30 0021;	
    // (‎‎ﴰ‎‎) ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM	[23C0 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD30, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_002)
{
    // FCE9 0021;	
    // (‎‎ﳩ‎‎) ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM	[23C0 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE9, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_003)
{
    // FD28 0021;	
    // (‎‎ﴨ‎‎) ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM	[23C0 2409 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD28, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_004)
{
    // FD0C 0021;	
    // (‎‎ﴌ‎‎) ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM	[23C0 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0C, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_005)
{
    // FD30 003F;	
    // (‎‎ﴰ‎‎) ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM	[23C0 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD30, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_006)
{
    // FCE9 003F;	
    // (‎‎ﳩ‎‎) ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM	[23C0 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE9, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_007)
{
    // FD28 003F;	
    // (‎‎ﴨ‎‎) ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM	[23C0 2409 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD28, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_008)
{
    // FD0C 003F;	
    // (‎‎ﴌ‎‎) ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM	[23C0 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0C, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_009)
{
    // FD30 0061;	
    // (‎‎ﴰ‎‎) ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD30, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_010)
{
    // FD30 0041;	
    // (‎‎ﴰ‎‎) ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD30, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_011)
{
    // FCE9 0061;	
    // (‎‎ﳩ‎‎) ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE9, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_012)
{
    // FCE9 0041;	
    // (‎‎ﳩ‎‎) ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCE9, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_013)
{
    // FD28 0061;	
    // (‎‎ﴨ‎‎) ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD28, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_014)
{
    // FD28 0041;	
    // (‎‎ﴨ‎‎) ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM	[23C0 2409 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD28, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_015)
{
    // FD0C 0061;	
    // (‎‎ﴌ‎‎) ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM	[23C0 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0C, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_016)
{
    // FD0C 0041;	
    // (‎‎ﴌ‎‎) ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM	[23C0 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0C, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_017)
{
    // FD30 0062;	
    // (‎‎ﴰ‎‎) ARABIC LIGATURE SHEEN WITH MEEM INITIAL FORM	[23C0 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD30, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_018)
{
    // FCE9 0062;	
    // (‎‎ﳩ‎‎) ARABIC LIGATURE SHEEN WITH MEEM MEDIAL FORM	[23C0 2409 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCE9, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_019)
{
    // FD28 0062;	
    // (‎‎ﴨ‎‎) ARABIC LIGATURE SHEEN WITH MEEM FINAL FORM	[23C0 2409 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD28, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_020)
{
    // FD0C 0062;	
    // (‎‎ﴌ‎‎) ARABIC LIGATURE SHEEN WITH MEEM ISOLATED FORM	[23C0 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0C, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_021)
{
    // FD6B 0021;	
    // (‎‎ﵫ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM	[23C0 2409 2393 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6B, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_022)
{
    // FD6A 0021;	
    // (‎‎ﵪ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM	[23C0 2409 2393 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6A, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_023)
{
    // FD6B 003F;	
    // (‎‎ﵫ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM	[23C0 2409 2393 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6B, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_024)
{
    // FD6A 003F;	
    // (‎‎ﵪ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM	[23C0 2409 2393 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6A, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_025)
{
    // FD6B 0061;	
    // (‎‎ﵫ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM	[23C0 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6B, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_026)
{
    // FD6B 0041;	
    // (‎‎ﵫ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM	[23C0 2409 2393 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD6B, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_027)
{
    // FD6A 0061;	
    // (‎‎ﵪ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM	[23C0 2409 2393 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6A, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_028)
{
    // FD6A 0041;	
    // (‎‎ﵪ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM	[23C0 2409 2393 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD6A, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_029)
{
    // FD6B 0062;	
    // (‎‎ﵫ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH INITIAL FORM	[23C0 2409 2393 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6B, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_030)
{
    // FD6A 0062;	
    // (‎‎ﵪ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH KHAH FINAL FORM	[23C0 2409 2393 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6A, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_031)
{
    // FD6D 0021;	
    // (‎‎ﵭ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM	[23C0 2409 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6D, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_032)
{
    // FD6C 0021;	
    // (‎‎ﵬ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM	[23C0 2409 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6C, 0x0021 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_033)
{
    // FD6D 003F;	
    // (‎‎ﵭ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM	[23C0 2409 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6D, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_034)
{
    // FD6C 003F;	
    // (‎‎ﵬ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM	[23C0 2409 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6C, 0x003F };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_035)
{
    // FD6D 0061;	
    // (‎‎ﵭ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM	[23C0 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6D, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_036)
{
    // FD6D 0041;	
    // (‎‎ﵭ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM	[23C0 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD6D, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_037)
{
    // FD6C 0061;	
    // (‎‎ﵬ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM	[23C0 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6C, 0x0061 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_038)
{
    // FD6C 0041;	
    // (‎‎ﵬ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM	[23C0 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD6C, 0x0041 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_039)
{
    // FD6D 0062;	
    // (‎‎ﵭ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM INITIAL FORM	[23C0 2409 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD6D, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_040)
{
    // FD6C 0062;	
    // (‎‎ﵬ‎‎) ARABIC LIGATURE SHEEN WITH MEEM WITH MEEM FINAL FORM	[23C0 2409 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6C, 0x0062 };
    uint32_t const ces[15] = { 0x23C0, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_041)
{
    // FD32 0021;	
    // (‎‎ﴲ‎‎) ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM	[23C0 2417 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD32, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_042)
{
    // FCEA 0021;	
    // (‎‎ﳪ‎‎) ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM	[23C0 2417 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEA, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_043)
{
    // FD32 003F;	
    // (‎‎ﴲ‎‎) ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM	[23C0 2417 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD32, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_044)
{
    // FCEA 003F;	
    // (‎‎ﳪ‎‎) ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM	[23C0 2417 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEA, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_045)
{
    // FD32 0061;	
    // (‎‎ﴲ‎‎) ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM	[23C0 2417 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD32, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_046)
{
    // FD32 0041;	
    // (‎‎ﴲ‎‎) ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM	[23C0 2417 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD32, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_047)
{
    // FCEA 0061;	
    // (‎‎ﳪ‎‎) ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM	[23C0 2417 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEA, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_048)
{
    // FCEA 0041;	
    // (‎‎ﳪ‎‎) ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM	[23C0 2417 1CAD | 0020 0020 0020 | 0018 0018 0008 |]

    uint32_t cps[2] = { 0xFCEA, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_049)
{
    // FD32 0062;	
    // (‎‎ﴲ‎‎) ARABIC LIGATURE SHEEN WITH HEH INITIAL FORM	[23C0 2417 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD32, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_050)
{
    // FCEA 0062;	
    // (‎‎ﳪ‎‎) ARABIC LIGATURE SHEEN WITH HEH MEDIAL FORM	[23C0 2417 1CC6 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFCEA, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x2417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_051)
{
    // FD19 0021;	
    // (‎‎ﴙ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM	[23C0 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD19, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_052)
{
    // FCFD 0021;	
    // (‎‎ﳽ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM	[23C0 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFD, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_053)
{
    // FD19 003F;	
    // (‎‎ﴙ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM	[23C0 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD19, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_054)
{
    // FCFD 003F;	
    // (‎‎ﳽ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM	[23C0 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFD, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_055)
{
    // FD19 0061;	
    // (‎‎ﴙ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM	[23C0 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD19, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_056)
{
    // FD19 0041;	
    // (‎‎ﴙ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM	[23C0 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD19, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_057)
{
    // FCFD 0061;	
    // (‎‎ﳽ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM	[23C0 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFD, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_058)
{
    // FCFD 0041;	
    // (‎‎ﳽ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM	[23C0 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFCFD, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_059)
{
    // FD19 0062;	
    // (‎‎ﴙ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA FINAL FORM	[23C0 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD19, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_060)
{
    // FCFD 0062;	
    // (‎‎ﳽ‎‎) ARABIC LIGATURE SHEEN WITH ALEF MAKSURA ISOLATED FORM	[23C0 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFD, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_061)
{
    // FD1A 0021;	
    // (‎‎ﴚ‎‎) ARABIC LIGATURE SHEEN WITH YEH FINAL FORM	[23C0 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1A, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_062)
{
    // FCFE 0021;	
    // (‎‎ﳾ‎‎) ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM	[23C0 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFE, 0x0021 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_063)
{
    // FD1A 003F;	
    // (‎‎ﴚ‎‎) ARABIC LIGATURE SHEEN WITH YEH FINAL FORM	[23C0 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1A, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_064)
{
    // FCFE 003F;	
    // (‎‎ﳾ‎‎) ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM	[23C0 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFE, 0x003F };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_065)
{
    // FD1A 0061;	
    // (‎‎ﴚ‎‎) ARABIC LIGATURE SHEEN WITH YEH FINAL FORM	[23C0 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1A, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_066)
{
    // FD1A 0041;	
    // (‎‎ﴚ‎‎) ARABIC LIGATURE SHEEN WITH YEH FINAL FORM	[23C0 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD1A, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_067)
{
    // FCFE 0061;	
    // (‎‎ﳾ‎‎) ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM	[23C0 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFE, 0x0061 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_068)
{
    // FCFE 0041;	
    // (‎‎ﳾ‎‎) ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM	[23C0 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFCFE, 0x0041 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_069)
{
    // FD1A 0062;	
    // (‎‎ﴚ‎‎) ARABIC LIGATURE SHEEN WITH YEH FINAL FORM	[23C0 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD1A, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_070)
{
    // FCFE 0062;	
    // (‎‎ﳾ‎‎) ARABIC LIGATURE SHEEN WITH YEH ISOLATED FORM	[23C0 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFCFE, 0x0062 };
    uint32_t const ces[12] = { 0x23C0, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_071)
{
    // 069A 0021;	
    // (‎‎ښ‎‎) ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE	[23C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069A, 0x0021 };
    uint32_t const ces[9] = { 0x23C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_072)
{
    // 069A 003F;	
    // (‎‎ښ‎‎) ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE	[23C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069A, 0x003F };
    uint32_t const ces[9] = { 0x23C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_073)
{
    // 069A 0061;	
    // (‎‎ښ‎‎) ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE	[23C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069A, 0x0061 };
    uint32_t const ces[9] = { 0x23C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_074)
{
    // 069A 0041;	
    // (‎‎ښ‎‎) ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE	[23C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x069A, 0x0041 };
    uint32_t const ces[9] = { 0x23C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_075)
{
    // 069A 0062;	
    // (‎‎ښ‎‎) ARABIC LETTER SEEN WITH DOT BELOW AND DOT ABOVE	[23C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069A, 0x0062 };
    uint32_t const ces[9] = { 0x23C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_076)
{
    // 069B 0021;	
    // (‎‎ڛ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW	[23C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069B, 0x0021 };
    uint32_t const ces[9] = { 0x23C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_077)
{
    // 069B 003F;	
    // (‎‎ڛ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW	[23C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069B, 0x003F };
    uint32_t const ces[9] = { 0x23C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_078)
{
    // 069B 0061;	
    // (‎‎ڛ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW	[23C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069B, 0x0061 };
    uint32_t const ces[9] = { 0x23C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_079)
{
    // 069B 0041;	
    // (‎‎ڛ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW	[23C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x069B, 0x0041 };
    uint32_t const ces[9] = { 0x23C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_080)
{
    // 069B 0062;	
    // (‎‎ڛ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW	[23C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069B, 0x0062 };
    uint32_t const ces[9] = { 0x23C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_081)
{
    // 069C 0021;	
    // (‎‎ڜ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE	[23C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069C, 0x0021 };
    uint32_t const ces[9] = { 0x23C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_082)
{
    // 069C 003F;	
    // (‎‎ڜ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE	[23C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069C, 0x003F };
    uint32_t const ces[9] = { 0x23C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_083)
{
    // 069C 0061;	
    // (‎‎ڜ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE	[23C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069C, 0x0061 };
    uint32_t const ces[9] = { 0x23C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_084)
{
    // 069C 0041;	
    // (‎‎ڜ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE	[23C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x069C, 0x0041 };
    uint32_t const ces[9] = { 0x23C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_085)
{
    // 069C 0062;	
    // (‎‎ڜ‎‎) ARABIC LETTER SEEN WITH THREE DOTS BELOW AND THREE DOTS ABOVE	[23C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069C, 0x0062 };
    uint32_t const ces[9] = { 0x23C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_086)
{
    // 06FA 0021;	
    // (‎‎ۺ‎‎) ARABIC LETTER SHEEN WITH DOT BELOW	[23C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FA, 0x0021 };
    uint32_t const ces[9] = { 0x23C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_087)
{
    // 06FA 003F;	
    // (‎‎ۺ‎‎) ARABIC LETTER SHEEN WITH DOT BELOW	[23C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FA, 0x003F };
    uint32_t const ces[9] = { 0x23C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_088)
{
    // 06FA 0061;	
    // (‎‎ۺ‎‎) ARABIC LETTER SHEEN WITH DOT BELOW	[23C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FA, 0x0061 };
    uint32_t const ces[9] = { 0x23C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_089)
{
    // 06FA 0041;	
    // (‎‎ۺ‎‎) ARABIC LETTER SHEEN WITH DOT BELOW	[23C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06FA, 0x0041 };
    uint32_t const ces[9] = { 0x23C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_090)
{
    // 06FA 0062;	
    // (‎‎ۺ‎‎) ARABIC LETTER SHEEN WITH DOT BELOW	[23C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FA, 0x0062 };
    uint32_t const ces[9] = { 0x23C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_091)
{
    // 075C 0021;	
    // (‎‎ݜ‎‎) ARABIC LETTER SEEN WITH FOUR DOTS ABOVE	[23C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075C, 0x0021 };
    uint32_t const ces[9] = { 0x23C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_092)
{
    // 075C 003F;	
    // (‎‎ݜ‎‎) ARABIC LETTER SEEN WITH FOUR DOTS ABOVE	[23C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075C, 0x003F };
    uint32_t const ces[9] = { 0x23C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_093)
{
    // 075C 0061;	
    // (‎‎ݜ‎‎) ARABIC LETTER SEEN WITH FOUR DOTS ABOVE	[23C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075C, 0x0061 };
    uint32_t const ces[9] = { 0x23C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_094)
{
    // 075C 0041;	
    // (‎‎ݜ‎‎) ARABIC LETTER SEEN WITH FOUR DOTS ABOVE	[23C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x075C, 0x0041 };
    uint32_t const ces[9] = { 0x23C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_095)
{
    // 075C 0062;	
    // (‎‎ݜ‎‎) ARABIC LETTER SEEN WITH FOUR DOTS ABOVE	[23C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x075C, 0x0062 };
    uint32_t const ces[9] = { 0x23C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_096)
{
    // 076D 0021;	
    // (‎‎ݭ‎‎) ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE	[23C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076D, 0x0021 };
    uint32_t const ces[9] = { 0x23C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_097)
{
    // 076D 003F;	
    // (‎‎ݭ‎‎) ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE	[23C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076D, 0x003F };
    uint32_t const ces[9] = { 0x23C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_098)
{
    // 076D 0061;	
    // (‎‎ݭ‎‎) ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE	[23C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076D, 0x0061 };
    uint32_t const ces[9] = { 0x23C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_099)
{
    // 076D 0041;	
    // (‎‎ݭ‎‎) ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE	[23C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x076D, 0x0041 };
    uint32_t const ces[9] = { 0x23C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_100)
{
    // 076D 0062;	
    // (‎‎ݭ‎‎) ARABIC LETTER SEEN WITH TWO DOTS VERTICALLY ABOVE	[23C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x076D, 0x0062 };
    uint32_t const ces[9] = { 0x23C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_101)
{
    // 0770 0021;	
    // (‎‎ݰ‎‎) ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0770, 0x0021 };
    uint32_t const ces[9] = { 0x23C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_102)
{
    // 0770 003F;	
    // (‎‎ݰ‎‎) ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0770, 0x003F };
    uint32_t const ces[9] = { 0x23C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_103)
{
    // 0770 0061;	
    // (‎‎ݰ‎‎) ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0770, 0x0061 };
    uint32_t const ces[9] = { 0x23C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_104)
{
    // 0770 0041;	
    // (‎‎ݰ‎‎) ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0770, 0x0041 };
    uint32_t const ces[9] = { 0x23C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_105)
{
    // 0770 0062;	
    // (‎‎ݰ‎‎) ARABIC LETTER SEEN WITH SMALL ARABIC LETTER TAH AND TWO DOTS	[23C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0770, 0x0062 };
    uint32_t const ces[9] = { 0x23C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_106)
{
    // 077D 0021;	
    // (‎‎ݽ‎‎) ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE	[23C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077D, 0x0021 };
    uint32_t const ces[9] = { 0x23C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_107)
{
    // 077D 003F;	
    // (‎‎ݽ‎‎) ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE	[23C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077D, 0x003F };
    uint32_t const ces[9] = { 0x23C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_108)
{
    // 077D 0061;	
    // (‎‎ݽ‎‎) ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE	[23C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077D, 0x0061 };
    uint32_t const ces[9] = { 0x23C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_109)
{
    // 077D 0041;	
    // (‎‎ݽ‎‎) ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE	[23C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x077D, 0x0041 };
    uint32_t const ces[9] = { 0x23C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_110)
{
    // 077D 0062;	
    // (‎‎ݽ‎‎) ARABIC LETTER SEEN WITH EXTENDED ARABIC-INDIC DIGIT FOUR ABOVE	[23C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077D, 0x0062 };
    uint32_t const ces[9] = { 0x23C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_111)
{
    // 077E 0021;	
    // (‎‎ݾ‎‎) ARABIC LETTER SEEN WITH INVERTED V	[23C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077E, 0x0021 };
    uint32_t const ces[9] = { 0x23C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_112)
{
    // 077E 003F;	
    // (‎‎ݾ‎‎) ARABIC LETTER SEEN WITH INVERTED V	[23C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077E, 0x003F };
    uint32_t const ces[9] = { 0x23C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_113)
{
    // 077E 0061;	
    // (‎‎ݾ‎‎) ARABIC LETTER SEEN WITH INVERTED V	[23C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077E, 0x0061 };
    uint32_t const ces[9] = { 0x23C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_114)
{
    // 077E 0041;	
    // (‎‎ݾ‎‎) ARABIC LETTER SEEN WITH INVERTED V	[23C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x077E, 0x0041 };
    uint32_t const ces[9] = { 0x23C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_115)
{
    // 077E 0062;	
    // (‎‎ݾ‎‎) ARABIC LETTER SEEN WITH INVERTED V	[23C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x077E, 0x0062 };
    uint32_t const ces[9] = { 0x23C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_116)
{
    // 0635 0021;	
    // (‎‎ص‎‎) ARABIC LETTER SAD	[23CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0635, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_117)
{
    // 1EE11 0021;	
    // (‎‎𞸑‎‎) ARABIC MATHEMATICAL SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE11, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_118)
{
    // 1EE31 0021;	
    // (‎‎𞸱‎‎) ARABIC MATHEMATICAL INITIAL SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE31, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_119)
{
    // 1EE51 0021;	
    // (‎‎𞹑‎‎) ARABIC MATHEMATICAL TAILED SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE51, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_120)
{
    // 1EE71 0021;	
    // (‎‎𞹱‎‎) ARABIC MATHEMATICAL STRETCHED SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE71, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_121)
{
    // 1EE91 0021;	
    // (‎‎𞺑‎‎) ARABIC MATHEMATICAL LOOPED SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE91, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_122)
{
    // 1EEB1 0021;	
    // (‎‎𞺱‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SAD	[23CA 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB1, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_123)
{
    // FEBB 0021;	
    // (‎‎ﺻ‎‎) ARABIC LETTER SAD INITIAL FORM	[23CA 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBB, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_124)
{
    // FEBC 0021;	
    // (‎‎ﺼ‎‎) ARABIC LETTER SAD MEDIAL FORM	[23CA 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEBC, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_125)
{
    // FEBA 0021;	
    // (‎‎ﺺ‎‎) ARABIC LETTER SAD FINAL FORM	[23CA 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBA, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_126)
{
    // FEB9 0021;	
    // (‎‎ﺹ‎‎) ARABIC LETTER SAD ISOLATED FORM	[23CA 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB9, 0x0021 };
    uint32_t const ces[9] = { 0x23CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_127)
{
    // 0635 003F;	
    // (‎‎ص‎‎) ARABIC LETTER SAD	[23CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0635, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_128)
{
    // 1EE11 003F;	
    // (‎‎𞸑‎‎) ARABIC MATHEMATICAL SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE11, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_129)
{
    // 1EE31 003F;	
    // (‎‎𞸱‎‎) ARABIC MATHEMATICAL INITIAL SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE31, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_130)
{
    // 1EE51 003F;	
    // (‎‎𞹑‎‎) ARABIC MATHEMATICAL TAILED SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE51, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_131)
{
    // 1EE71 003F;	
    // (‎‎𞹱‎‎) ARABIC MATHEMATICAL STRETCHED SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE71, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_132)
{
    // 1EE91 003F;	
    // (‎‎𞺑‎‎) ARABIC MATHEMATICAL LOOPED SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE91, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_133)
{
    // 1EEB1 003F;	
    // (‎‎𞺱‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SAD	[23CA 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB1, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_134)
{
    // FEBB 003F;	
    // (‎‎ﺻ‎‎) ARABIC LETTER SAD INITIAL FORM	[23CA 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBB, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_135)
{
    // FEBC 003F;	
    // (‎‎ﺼ‎‎) ARABIC LETTER SAD MEDIAL FORM	[23CA 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEBC, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_136)
{
    // FEBA 003F;	
    // (‎‎ﺺ‎‎) ARABIC LETTER SAD FINAL FORM	[23CA 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBA, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_137)
{
    // FEB9 003F;	
    // (‎‎ﺹ‎‎) ARABIC LETTER SAD ISOLATED FORM	[23CA 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB9, 0x003F };
    uint32_t const ces[9] = { 0x23CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_138)
{
    // 0635 0061;	
    // (‎‎ص‎‎) ARABIC LETTER SAD	[23CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0635, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_139)
{
    // 0635 0041;	
    // (‎‎ص‎‎) ARABIC LETTER SAD	[23CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0635, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_140)
{
    // 1EE11 0061;	
    // (‎‎𞸑‎‎) ARABIC MATHEMATICAL SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE11, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_141)
{
    // 1EE31 0061;	
    // (‎‎𞸱‎‎) ARABIC MATHEMATICAL INITIAL SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE31, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_142)
{
    // 1EE51 0061;	
    // (‎‎𞹑‎‎) ARABIC MATHEMATICAL TAILED SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE51, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_143)
{
    // 1EE71 0061;	
    // (‎‎𞹱‎‎) ARABIC MATHEMATICAL STRETCHED SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE71, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_144)
{
    // 1EE91 0061;	
    // (‎‎𞺑‎‎) ARABIC MATHEMATICAL LOOPED SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE91, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_145)
{
    // 1EEB1 0061;	
    // (‎‎𞺱‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SAD	[23CA 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB1, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_146)
{
    // 1EE11 0041;	
    // (‎‎𞸑‎‎) ARABIC MATHEMATICAL SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE11, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_147)
{
    // 1EE31 0041;	
    // (‎‎𞸱‎‎) ARABIC MATHEMATICAL INITIAL SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE31, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_148)
{
    // 1EE51 0041;	
    // (‎‎𞹑‎‎) ARABIC MATHEMATICAL TAILED SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE51, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_149)
{
    // 1EE71 0041;	
    // (‎‎𞹱‎‎) ARABIC MATHEMATICAL STRETCHED SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE71, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_150)
{
    // 1EE91 0041;	
    // (‎‎𞺑‎‎) ARABIC MATHEMATICAL LOOPED SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE91, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_151)
{
    // 1EEB1 0041;	
    // (‎‎𞺱‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SAD	[23CA 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB1, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_152)
{
    // FEBB 0061;	
    // (‎‎ﺻ‎‎) ARABIC LETTER SAD INITIAL FORM	[23CA 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBB, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_153)
{
    // FEBB 0041;	
    // (‎‎ﺻ‎‎) ARABIC LETTER SAD INITIAL FORM	[23CA 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEBB, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_154)
{
    // FEBC 0061;	
    // (‎‎ﺼ‎‎) ARABIC LETTER SAD MEDIAL FORM	[23CA 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEBC, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_155)
{
    // FEBC 0041;	
    // (‎‎ﺼ‎‎) ARABIC LETTER SAD MEDIAL FORM	[23CA 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEBC, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_156)
{
    // FEBA 0061;	
    // (‎‎ﺺ‎‎) ARABIC LETTER SAD FINAL FORM	[23CA 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBA, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_157)
{
    // FEBA 0041;	
    // (‎‎ﺺ‎‎) ARABIC LETTER SAD FINAL FORM	[23CA 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEBA, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_158)
{
    // FEB9 0061;	
    // (‎‎ﺹ‎‎) ARABIC LETTER SAD ISOLATED FORM	[23CA 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB9, 0x0061 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_159)
{
    // FEB9 0041;	
    // (‎‎ﺹ‎‎) ARABIC LETTER SAD ISOLATED FORM	[23CA 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEB9, 0x0041 };
    uint32_t const ces[9] = { 0x23CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_160)
{
    // 0635 0062;	
    // (‎‎ص‎‎) ARABIC LETTER SAD	[23CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0635, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_161)
{
    // 1EE11 0062;	
    // (‎‎𞸑‎‎) ARABIC MATHEMATICAL SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE11, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_162)
{
    // 1EE31 0062;	
    // (‎‎𞸱‎‎) ARABIC MATHEMATICAL INITIAL SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE31, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_163)
{
    // 1EE51 0062;	
    // (‎‎𞹑‎‎) ARABIC MATHEMATICAL TAILED SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE51, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_164)
{
    // 1EE71 0062;	
    // (‎‎𞹱‎‎) ARABIC MATHEMATICAL STRETCHED SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE71, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_165)
{
    // 1EE91 0062;	
    // (‎‎𞺑‎‎) ARABIC MATHEMATICAL LOOPED SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE91, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_166)
{
    // 1EEB1 0062;	
    // (‎‎𞺱‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK SAD	[23CA 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB1, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_167)
{
    // FEBB 0062;	
    // (‎‎ﺻ‎‎) ARABIC LETTER SAD INITIAL FORM	[23CA 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBB, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_168)
{
    // FEBC 0062;	
    // (‎‎ﺼ‎‎) ARABIC LETTER SAD MEDIAL FORM	[23CA 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEBC, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_169)
{
    // FEBA 0062;	
    // (‎‎ﺺ‎‎) ARABIC LETTER SAD FINAL FORM	[23CA 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBA, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_170)
{
    // FEB9 0062;	
    // (‎‎ﺹ‎‎) ARABIC LETTER SAD ISOLATED FORM	[23CA 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEB9, 0x0062 };
    uint32_t const ces[9] = { 0x23CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_171)
{
    // FCB1 0021;	
    // (‎‎ﲱ‎‎) ARABIC LIGATURE SAD WITH HAH INITIAL FORM	[23CA 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB1, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_172)
{
    // FC20 0021;	
    // (‎‎ﰠ‎‎) ARABIC LIGATURE SAD WITH HAH ISOLATED FORM	[23CA 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC20, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_173)
{
    // FCB1 003F;	
    // (‎‎ﲱ‎‎) ARABIC LIGATURE SAD WITH HAH INITIAL FORM	[23CA 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB1, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_174)
{
    // FC20 003F;	
    // (‎‎ﰠ‎‎) ARABIC LIGATURE SAD WITH HAH ISOLATED FORM	[23CA 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC20, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_175)
{
    // FCB1 0061;	
    // (‎‎ﲱ‎‎) ARABIC LIGATURE SAD WITH HAH INITIAL FORM	[23CA 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB1, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_176)
{
    // FCB1 0041;	
    // (‎‎ﲱ‎‎) ARABIC LIGATURE SAD WITH HAH INITIAL FORM	[23CA 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB1, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_177)
{
    // FC20 0061;	
    // (‎‎ﰠ‎‎) ARABIC LIGATURE SAD WITH HAH ISOLATED FORM	[23CA 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC20, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_178)
{
    // FC20 0041;	
    // (‎‎ﰠ‎‎) ARABIC LIGATURE SAD WITH HAH ISOLATED FORM	[23CA 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC20, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_179)
{
    // FCB1 0062;	
    // (‎‎ﲱ‎‎) ARABIC LIGATURE SAD WITH HAH INITIAL FORM	[23CA 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB1, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_180)
{
    // FC20 0062;	
    // (‎‎ﰠ‎‎) ARABIC LIGATURE SAD WITH HAH ISOLATED FORM	[23CA 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC20, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_181)
{
    // FD65 0021;	
    // (‎‎ﵥ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM	[23CA 2392 2392 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD65, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_182)
{
    // FD64 0021;	
    // (‎‎ﵤ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM	[23CA 2392 2392 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD64, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_183)
{
    // FD65 003F;	
    // (‎‎ﵥ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM	[23CA 2392 2392 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD65, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_184)
{
    // FD64 003F;	
    // (‎‎ﵤ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM	[23CA 2392 2392 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD64, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_185)
{
    // FD65 0061;	
    // (‎‎ﵥ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM	[23CA 2392 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD65, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_186)
{
    // FD65 0041;	
    // (‎‎ﵥ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM	[23CA 2392 2392 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD65, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_187)
{
    // FD64 0061;	
    // (‎‎ﵤ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM	[23CA 2392 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD64, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_188)
{
    // FD64 0041;	
    // (‎‎ﵤ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM	[23CA 2392 2392 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD64, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_189)
{
    // FD65 0062;	
    // (‎‎ﵥ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH INITIAL FORM	[23CA 2392 2392 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD65, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_190)
{
    // FD64 0062;	
    // (‎‎ﵤ‎‎) ARABIC LIGATURE SAD WITH HAH WITH HAH FINAL FORM	[23CA 2392 2392 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD64, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_191)
{
    // FDA9 0021;	
    // (‎‎ﶩ‎‎) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM	[23CA 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA9, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_192)
{
    // FDA9 003F;	
    // (‎‎ﶩ‎‎) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM	[23CA 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA9, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_193)
{
    // FDA9 0061;	
    // (‎‎ﶩ‎‎) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM	[23CA 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA9, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_194)
{
    // FDA9 0041;	
    // (‎‎ﶩ‎‎) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM	[23CA 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDA9, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_195)
{
    // FDA9 0062;	
    // (‎‎ﶩ‎‎) ARABIC LIGATURE SAD WITH HAH WITH YEH FINAL FORM	[23CA 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDA9, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_196)
{
    // FCB2 0021;	
    // (‎‎ﲲ‎‎) ARABIC LIGATURE SAD WITH KHAH INITIAL FORM	[23CA 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB2, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_197)
{
    // FCB2 003F;	
    // (‎‎ﲲ‎‎) ARABIC LIGATURE SAD WITH KHAH INITIAL FORM	[23CA 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB2, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_198)
{
    // FCB2 0061;	
    // (‎‎ﲲ‎‎) ARABIC LIGATURE SAD WITH KHAH INITIAL FORM	[23CA 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB2, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_199)
{
    // FCB2 0041;	
    // (‎‎ﲲ‎‎) ARABIC LIGATURE SAD WITH KHAH INITIAL FORM	[23CA 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB2, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_200)
{
    // FCB2 0062;	
    // (‎‎ﲲ‎‎) ARABIC LIGATURE SAD WITH KHAH INITIAL FORM	[23CA 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB2, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_201)
{
    // FD2B 0021;	
    // (‎‎ﴫ‎‎) ARABIC LIGATURE SAD WITH REH FINAL FORM	[23CA 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2B, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_202)
{
    // FD0F 0021;	
    // (‎‎ﴏ‎‎) ARABIC LIGATURE SAD WITH REH ISOLATED FORM	[23CA 23AC 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0F, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_203)
{
    // FD2B 003F;	
    // (‎‎ﴫ‎‎) ARABIC LIGATURE SAD WITH REH FINAL FORM	[23CA 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2B, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_204)
{
    // FD0F 003F;	
    // (‎‎ﴏ‎‎) ARABIC LIGATURE SAD WITH REH ISOLATED FORM	[23CA 23AC 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0F, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_205)
{
    // FD2B 0061;	
    // (‎‎ﴫ‎‎) ARABIC LIGATURE SAD WITH REH FINAL FORM	[23CA 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2B, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_206)
{
    // FD2B 0041;	
    // (‎‎ﴫ‎‎) ARABIC LIGATURE SAD WITH REH FINAL FORM	[23CA 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD2B, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_207)
{
    // FD0F 0061;	
    // (‎‎ﴏ‎‎) ARABIC LIGATURE SAD WITH REH ISOLATED FORM	[23CA 23AC 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0F, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_208)
{
    // FD0F 0041;	
    // (‎‎ﴏ‎‎) ARABIC LIGATURE SAD WITH REH ISOLATED FORM	[23CA 23AC 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD0F, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_209)
{
    // FD2B 0062;	
    // (‎‎ﴫ‎‎) ARABIC LIGATURE SAD WITH REH FINAL FORM	[23CA 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2B, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_210)
{
    // FD0F 0062;	
    // (‎‎ﴏ‎‎) ARABIC LIGATURE SAD WITH REH ISOLATED FORM	[23CA 23AC 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD0F, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_211)
{
    // FDF5 0021;	
    // (‎‎ﷵ‎‎) ARABIC LIGATURE SALAM ISOLATED FORM	[23CA 2402 23D4 2409 0261 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF5, 0x0021 };
    uint32_t const ces[18] = { 0x23CA, 0x2402, 0x23D4, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_212)
{
    // FDF5 003F;	
    // (‎‎ﷵ‎‎) ARABIC LIGATURE SALAM ISOLATED FORM	[23CA 2402 23D4 2409 0267 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF5, 0x003F };
    uint32_t const ces[18] = { 0x23CA, 0x2402, 0x23D4, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_213)
{
    // FDF5 0061;	
    // (‎‎ﷵ‎‎) ARABIC LIGATURE SALAM ISOLATED FORM	[23CA 2402 23D4 2409 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF5, 0x0061 };
    uint32_t const ces[18] = { 0x23CA, 0x2402, 0x23D4, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_214)
{
    // FDF5 0041;	
    // (‎‎ﷵ‎‎) ARABIC LIGATURE SALAM ISOLATED FORM	[23CA 2402 23D4 2409 1CAD | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF5, 0x0041 };
    uint32_t const ces[18] = { 0x23CA, 0x2402, 0x23D4, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_215)
{
    // FDF5 0062;	
    // (‎‎ﷵ‎‎) ARABIC LIGATURE SALAM ISOLATED FORM	[23CA 2402 23D4 2409 1CC6 | 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF5, 0x0062 };
    uint32_t const ces[18] = { 0x23CA, 0x2402, 0x23D4, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_216)
{
    // FDFA 0021;	
    // (‎‎ﷺ‎‎) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM	[23CA 2402 242B 0209 2371 2402 2402 2417 0209 23D4 2402 242C 2417 0209 241D 23BF 2402 2409 0261 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFA, 0x0021 };
    uint32_t const ces[60] = { 0x23CA, 0x2402, 0x242B, 0x0209, 0x2371, 0x2402, 0x2402, 0x2417, 0x0209, 0x23D4, 0x2402, 0x242C, 0x2417, 0x0209, 0x241D, 0x23BF, 0x2402, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 60);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 60))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_217)
{
    // FDFA 003F;	
    // (‎‎ﷺ‎‎) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM	[23CA 2402 242B 0209 2371 2402 2402 2417 0209 23D4 2402 242C 2417 0209 241D 23BF 2402 2409 0267 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFA, 0x003F };
    uint32_t const ces[60] = { 0x23CA, 0x2402, 0x242B, 0x0209, 0x2371, 0x2402, 0x2402, 0x2417, 0x0209, 0x23D4, 0x2402, 0x242C, 0x2417, 0x0209, 0x241D, 0x23BF, 0x2402, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 60);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 60))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_218)
{
    // FDFA 0061;	
    // (‎‎ﷺ‎‎) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM	[23CA 2402 242B 0209 2371 2402 2402 2417 0209 23D4 2402 242C 2417 0209 241D 23BF 2402 2409 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFA, 0x0061 };
    uint32_t const ces[60] = { 0x23CA, 0x2402, 0x242B, 0x0209, 0x2371, 0x2402, 0x2402, 0x2417, 0x0209, 0x23D4, 0x2402, 0x242C, 0x2417, 0x0209, 0x241D, 0x23BF, 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 60);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 60))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_219)
{
    // FDFA 0041;	
    // (‎‎ﷺ‎‎) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM	[23CA 2402 242B 0209 2371 2402 2402 2417 0209 23D4 2402 242C 2417 0209 241D 23BF 2402 2409 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDFA, 0x0041 };
    uint32_t const ces[60] = { 0x23CA, 0x2402, 0x242B, 0x0209, 0x2371, 0x2402, 0x2402, 0x2417, 0x0209, 0x23D4, 0x2402, 0x242C, 0x2417, 0x0209, 0x241D, 0x23BF, 0x2402, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 60);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 60))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_220)
{
    // FDFA 0062;	
    // (‎‎ﷺ‎‎) ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM	[23CA 2402 242B 0209 2371 2402 2402 2417 0209 23D4 2402 242C 2417 0209 241D 23BF 2402 2409 1CC6 | 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 0020 | 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDFA, 0x0062 };
    uint32_t const ces[60] = { 0x23CA, 0x2402, 0x242B, 0x0209, 0x2371, 0x2402, 0x2402, 0x2417, 0x0209, 0x23D4, 0x2402, 0x242C, 0x2417, 0x0209, 0x241D, 0x23BF, 0x2402, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 60);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 60))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_221)
{
    // FDF9 0021;	
    // (‎‎ﷹ‎‎) ARABIC LIGATURE SALLA ISOLATED FORM	[23CA 2402 242B 0261 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF9, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_222)
{
    // FDF9 003F;	
    // (‎‎ﷹ‎‎) ARABIC LIGATURE SALLA ISOLATED FORM	[23CA 2402 242B 0267 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF9, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_223)
{
    // FDF9 0061;	
    // (‎‎ﷹ‎‎) ARABIC LIGATURE SALLA ISOLATED FORM	[23CA 2402 242B 1CAD | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF9, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_224)
{
    // FDF9 0041;	
    // (‎‎ﷹ‎‎) ARABIC LIGATURE SALLA ISOLATED FORM	[23CA 2402 242B 1CAD | 0020 0020 0020 0020 | 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF9, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_225)
{
    // FDF9 0062;	
    // (‎‎ﷹ‎‎) ARABIC LIGATURE SALLA ISOLATED FORM	[23CA 2402 242B 1CC6 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF9, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_226)
{
    // FDF0 0021;	
    // (‎‎ﷰ‎‎) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM	[23CA 2402 243A 0261 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF0, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x243A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_227)
{
    // FDF0 003F;	
    // (‎‎ﷰ‎‎) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM	[23CA 2402 243A 0267 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF0, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x243A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_228)
{
    // FDF0 0061;	
    // (‎‎ﷰ‎‎) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM	[23CA 2402 243A 1CAD | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF0, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_229)
{
    // FDF0 0041;	
    // (‎‎ﷰ‎‎) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM	[23CA 2402 243A 1CAD | 0020 0020 0020 0020 | 001A 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFDF0, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x243A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_230)
{
    // FDF0 0062;	
    // (‎‎ﷰ‎‎) ARABIC LIGATURE SALLA USED AS KORANIC STOP SIGN ISOLATED FORM	[23CA 2402 243A 1CC6 | 0020 0020 0020 0020 | 001A 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFDF0, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2402, 0x243A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_231)
{
    // FCB3 0021;	
    // (‎‎ﲳ‎‎) ARABIC LIGATURE SAD WITH MEEM INITIAL FORM	[23CA 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB3, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_232)
{
    // FC21 0021;	
    // (‎‎ﰡ‎‎) ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM	[23CA 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC21, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_233)
{
    // FCB3 003F;	
    // (‎‎ﲳ‎‎) ARABIC LIGATURE SAD WITH MEEM INITIAL FORM	[23CA 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB3, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_234)
{
    // FC21 003F;	
    // (‎‎ﰡ‎‎) ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM	[23CA 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC21, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_235)
{
    // FCB3 0061;	
    // (‎‎ﲳ‎‎) ARABIC LIGATURE SAD WITH MEEM INITIAL FORM	[23CA 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB3, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_236)
{
    // FCB3 0041;	
    // (‎‎ﲳ‎‎) ARABIC LIGATURE SAD WITH MEEM INITIAL FORM	[23CA 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB3, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_237)
{
    // FC21 0061;	
    // (‎‎ﰡ‎‎) ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM	[23CA 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC21, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_238)
{
    // FC21 0041;	
    // (‎‎ﰡ‎‎) ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM	[23CA 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC21, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_239)
{
    // FCB3 0062;	
    // (‎‎ﲳ‎‎) ARABIC LIGATURE SAD WITH MEEM INITIAL FORM	[23CA 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB3, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_240)
{
    // FC21 0062;	
    // (‎‎ﰡ‎‎) ARABIC LIGATURE SAD WITH MEEM ISOLATED FORM	[23CA 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC21, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_241)
{
    // FDC5 0021;	
    // (‎‎ﷅ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM	[23CA 2409 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDC5, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_242)
{
    // FD66 0021;	
    // (‎‎ﵦ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM	[23CA 2409 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD66, 0x0021 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_243)
{
    // FDC5 003F;	
    // (‎‎ﷅ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM	[23CA 2409 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDC5, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_244)
{
    // FD66 003F;	
    // (‎‎ﵦ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM	[23CA 2409 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD66, 0x003F };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_245)
{
    // FDC5 0061;	
    // (‎‎ﷅ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM	[23CA 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDC5, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_246)
{
    // FDC5 0041;	
    // (‎‎ﷅ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM	[23CA 2409 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFDC5, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_247)
{
    // FD66 0061;	
    // (‎‎ﵦ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM	[23CA 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD66, 0x0061 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_248)
{
    // FD66 0041;	
    // (‎‎ﵦ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM	[23CA 2409 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD66, 0x0041 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_249)
{
    // FDC5 0062;	
    // (‎‎ﷅ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM INITIAL FORM	[23CA 2409 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFDC5, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_250)
{
    // FD66 0062;	
    // (‎‎ﵦ‎‎) ARABIC LIGATURE SAD WITH MEEM WITH MEEM FINAL FORM	[23CA 2409 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD66, 0x0062 };
    uint32_t const ces[15] = { 0x23CA, 0x2409, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_251)
{
    // FD21 0021;	
    // (‎‎ﴡ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM	[23CA 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD21, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_252)
{
    // FD05 0021;	
    // (‎‎ﴅ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM	[23CA 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD05, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_253)
{
    // FD21 003F;	
    // (‎‎ﴡ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM	[23CA 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD21, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_254)
{
    // FD05 003F;	
    // (‎‎ﴅ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM	[23CA 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD05, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_255)
{
    // FD21 0061;	
    // (‎‎ﴡ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM	[23CA 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD21, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_256)
{
    // FD21 0041;	
    // (‎‎ﴡ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM	[23CA 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD21, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_257)
{
    // FD05 0061;	
    // (‎‎ﴅ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM	[23CA 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD05, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_258)
{
    // FD05 0041;	
    // (‎‎ﴅ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM	[23CA 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD05, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_259)
{
    // FD21 0062;	
    // (‎‎ﴡ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA FINAL FORM	[23CA 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD21, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_260)
{
    // FD05 0062;	
    // (‎‎ﴅ‎‎) ARABIC LIGATURE SAD WITH ALEF MAKSURA ISOLATED FORM	[23CA 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD05, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_261)
{
    // FD22 0021;	
    // (‎‎ﴢ‎‎) ARABIC LIGATURE SAD WITH YEH FINAL FORM	[23CA 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD22, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_262)
{
    // FD06 0021;	
    // (‎‎ﴆ‎‎) ARABIC LIGATURE SAD WITH YEH ISOLATED FORM	[23CA 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD06, 0x0021 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_263)
{
    // FD22 003F;	
    // (‎‎ﴢ‎‎) ARABIC LIGATURE SAD WITH YEH FINAL FORM	[23CA 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD22, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_264)
{
    // FD06 003F;	
    // (‎‎ﴆ‎‎) ARABIC LIGATURE SAD WITH YEH ISOLATED FORM	[23CA 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD06, 0x003F };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_265)
{
    // FD22 0061;	
    // (‎‎ﴢ‎‎) ARABIC LIGATURE SAD WITH YEH FINAL FORM	[23CA 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD22, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_266)
{
    // FD22 0041;	
    // (‎‎ﴢ‎‎) ARABIC LIGATURE SAD WITH YEH FINAL FORM	[23CA 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD22, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_267)
{
    // FD06 0061;	
    // (‎‎ﴆ‎‎) ARABIC LIGATURE SAD WITH YEH ISOLATED FORM	[23CA 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD06, 0x0061 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_268)
{
    // FD06 0041;	
    // (‎‎ﴆ‎‎) ARABIC LIGATURE SAD WITH YEH ISOLATED FORM	[23CA 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD06, 0x0041 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_269)
{
    // FD22 0062;	
    // (‎‎ﴢ‎‎) ARABIC LIGATURE SAD WITH YEH FINAL FORM	[23CA 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD22, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_270)
{
    // FD06 0062;	
    // (‎‎ﴆ‎‎) ARABIC LIGATURE SAD WITH YEH ISOLATED FORM	[23CA 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD06, 0x0062 };
    uint32_t const ces[12] = { 0x23CA, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_271)
{
    // 0636 0021;	
    // (‎‎ض‎‎) ARABIC LETTER DAD	[23CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0636, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_272)
{
    // 1EE19 0021;	
    // (‎‎𞸙‎‎) ARABIC MATHEMATICAL DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE19, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_273)
{
    // 1EE39 0021;	
    // (‎‎𞸹‎‎) ARABIC MATHEMATICAL INITIAL DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE39, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_274)
{
    // 1EE59 0021;	
    // (‎‎𞹙‎‎) ARABIC MATHEMATICAL TAILED DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE59, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_275)
{
    // 1EE79 0021;	
    // (‎‎𞹹‎‎) ARABIC MATHEMATICAL STRETCHED DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE79, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_276)
{
    // 1EE99 0021;	
    // (‎‎𞺙‎‎) ARABIC MATHEMATICAL LOOPED DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE99, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_277)
{
    // 1EEB9 0021;	
    // (‎‎𞺹‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAD	[23CB 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB9, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_278)
{
    // FEBF 0021;	
    // (‎‎ﺿ‎‎) ARABIC LETTER DAD INITIAL FORM	[23CB 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBF, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_279)
{
    // FEC0 0021;	
    // (‎‎ﻀ‎‎) ARABIC LETTER DAD MEDIAL FORM	[23CB 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC0, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_280)
{
    // FEBE 0021;	
    // (‎‎ﺾ‎‎) ARABIC LETTER DAD FINAL FORM	[23CB 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBE, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_281)
{
    // FEBD 0021;	
    // (‎‎ﺽ‎‎) ARABIC LETTER DAD ISOLATED FORM	[23CB 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEBD, 0x0021 };
    uint32_t const ces[9] = { 0x23CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_282)
{
    // 0636 003F;	
    // (‎‎ض‎‎) ARABIC LETTER DAD	[23CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0636, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_283)
{
    // 1EE19 003F;	
    // (‎‎𞸙‎‎) ARABIC MATHEMATICAL DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE19, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_284)
{
    // 1EE39 003F;	
    // (‎‎𞸹‎‎) ARABIC MATHEMATICAL INITIAL DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE39, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_285)
{
    // 1EE59 003F;	
    // (‎‎𞹙‎‎) ARABIC MATHEMATICAL TAILED DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE59, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_286)
{
    // 1EE79 003F;	
    // (‎‎𞹹‎‎) ARABIC MATHEMATICAL STRETCHED DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE79, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_287)
{
    // 1EE99 003F;	
    // (‎‎𞺙‎‎) ARABIC MATHEMATICAL LOOPED DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE99, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_288)
{
    // 1EEB9 003F;	
    // (‎‎𞺹‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAD	[23CB 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB9, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_289)
{
    // FEBF 003F;	
    // (‎‎ﺿ‎‎) ARABIC LETTER DAD INITIAL FORM	[23CB 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBF, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_290)
{
    // FEC0 003F;	
    // (‎‎ﻀ‎‎) ARABIC LETTER DAD MEDIAL FORM	[23CB 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC0, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_291)
{
    // FEBE 003F;	
    // (‎‎ﺾ‎‎) ARABIC LETTER DAD FINAL FORM	[23CB 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBE, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_292)
{
    // FEBD 003F;	
    // (‎‎ﺽ‎‎) ARABIC LETTER DAD ISOLATED FORM	[23CB 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEBD, 0x003F };
    uint32_t const ces[9] = { 0x23CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_293)
{
    // 0636 0061;	
    // (‎‎ض‎‎) ARABIC LETTER DAD	[23CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0636, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_294)
{
    // 0636 0041;	
    // (‎‎ض‎‎) ARABIC LETTER DAD	[23CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0636, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_295)
{
    // 1EE19 0061;	
    // (‎‎𞸙‎‎) ARABIC MATHEMATICAL DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE19, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_296)
{
    // 1EE39 0061;	
    // (‎‎𞸹‎‎) ARABIC MATHEMATICAL INITIAL DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE39, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_297)
{
    // 1EE59 0061;	
    // (‎‎𞹙‎‎) ARABIC MATHEMATICAL TAILED DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE59, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_298)
{
    // 1EE79 0061;	
    // (‎‎𞹹‎‎) ARABIC MATHEMATICAL STRETCHED DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE79, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_299)
{
    // 1EE99 0061;	
    // (‎‎𞺙‎‎) ARABIC MATHEMATICAL LOOPED DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE99, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_300)
{
    // 1EEB9 0061;	
    // (‎‎𞺹‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAD	[23CB 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB9, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_301)
{
    // 1EE19 0041;	
    // (‎‎𞸙‎‎) ARABIC MATHEMATICAL DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE19, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_302)
{
    // 1EE39 0041;	
    // (‎‎𞸹‎‎) ARABIC MATHEMATICAL INITIAL DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE39, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_303)
{
    // 1EE59 0041;	
    // (‎‎𞹙‎‎) ARABIC MATHEMATICAL TAILED DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE59, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_304)
{
    // 1EE79 0041;	
    // (‎‎𞹹‎‎) ARABIC MATHEMATICAL STRETCHED DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE79, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_305)
{
    // 1EE99 0041;	
    // (‎‎𞺙‎‎) ARABIC MATHEMATICAL LOOPED DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE99, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_306)
{
    // 1EEB9 0041;	
    // (‎‎𞺹‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAD	[23CB 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEB9, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_307)
{
    // FEBF 0061;	
    // (‎‎ﺿ‎‎) ARABIC LETTER DAD INITIAL FORM	[23CB 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBF, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_308)
{
    // FEBF 0041;	
    // (‎‎ﺿ‎‎) ARABIC LETTER DAD INITIAL FORM	[23CB 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEBF, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_309)
{
    // FEC0 0061;	
    // (‎‎ﻀ‎‎) ARABIC LETTER DAD MEDIAL FORM	[23CB 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC0, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_310)
{
    // FEC0 0041;	
    // (‎‎ﻀ‎‎) ARABIC LETTER DAD MEDIAL FORM	[23CB 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEC0, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_311)
{
    // FEBE 0061;	
    // (‎‎ﺾ‎‎) ARABIC LETTER DAD FINAL FORM	[23CB 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBE, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_312)
{
    // FEBE 0041;	
    // (‎‎ﺾ‎‎) ARABIC LETTER DAD FINAL FORM	[23CB 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEBE, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_313)
{
    // FEBD 0061;	
    // (‎‎ﺽ‎‎) ARABIC LETTER DAD ISOLATED FORM	[23CB 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEBD, 0x0061 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_314)
{
    // FEBD 0041;	
    // (‎‎ﺽ‎‎) ARABIC LETTER DAD ISOLATED FORM	[23CB 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEBD, 0x0041 };
    uint32_t const ces[9] = { 0x23CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_315)
{
    // 0636 0062;	
    // (‎‎ض‎‎) ARABIC LETTER DAD	[23CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0636, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_316)
{
    // 1EE19 0062;	
    // (‎‎𞸙‎‎) ARABIC MATHEMATICAL DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE19, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_317)
{
    // 1EE39 0062;	
    // (‎‎𞸹‎‎) ARABIC MATHEMATICAL INITIAL DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE39, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_318)
{
    // 1EE59 0062;	
    // (‎‎𞹙‎‎) ARABIC MATHEMATICAL TAILED DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE59, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_319)
{
    // 1EE79 0062;	
    // (‎‎𞹹‎‎) ARABIC MATHEMATICAL STRETCHED DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE79, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_320)
{
    // 1EE99 0062;	
    // (‎‎𞺙‎‎) ARABIC MATHEMATICAL LOOPED DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE99, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_321)
{
    // 1EEB9 0062;	
    // (‎‎𞺹‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK DAD	[23CB 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEB9, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_322)
{
    // FEBF 0062;	
    // (‎‎ﺿ‎‎) ARABIC LETTER DAD INITIAL FORM	[23CB 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEBF, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_323)
{
    // FEC0 0062;	
    // (‎‎ﻀ‎‎) ARABIC LETTER DAD MEDIAL FORM	[23CB 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC0, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_324)
{
    // FEBE 0062;	
    // (‎‎ﺾ‎‎) ARABIC LETTER DAD FINAL FORM	[23CB 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEBE, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_325)
{
    // FEBD 0062;	
    // (‎‎ﺽ‎‎) ARABIC LETTER DAD ISOLATED FORM	[23CB 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEBD, 0x0062 };
    uint32_t const ces[9] = { 0x23CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_326)
{
    // FCB4 0021;	
    // (‎‎ﲴ‎‎) ARABIC LIGATURE DAD WITH JEEM INITIAL FORM	[23CB 238B 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB4, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_327)
{
    // FC22 0021;	
    // (‎‎ﰢ‎‎) ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM	[23CB 238B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC22, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_328)
{
    // FCB4 003F;	
    // (‎‎ﲴ‎‎) ARABIC LIGATURE DAD WITH JEEM INITIAL FORM	[23CB 238B 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB4, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_329)
{
    // FC22 003F;	
    // (‎‎ﰢ‎‎) ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM	[23CB 238B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC22, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_330)
{
    // FCB4 0061;	
    // (‎‎ﲴ‎‎) ARABIC LIGATURE DAD WITH JEEM INITIAL FORM	[23CB 238B 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB4, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_331)
{
    // FCB4 0041;	
    // (‎‎ﲴ‎‎) ARABIC LIGATURE DAD WITH JEEM INITIAL FORM	[23CB 238B 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB4, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_332)
{
    // FC22 0061;	
    // (‎‎ﰢ‎‎) ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM	[23CB 238B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC22, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_333)
{
    // FC22 0041;	
    // (‎‎ﰢ‎‎) ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM	[23CB 238B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC22, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_334)
{
    // FCB4 0062;	
    // (‎‎ﲴ‎‎) ARABIC LIGATURE DAD WITH JEEM INITIAL FORM	[23CB 238B 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB4, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_335)
{
    // FC22 0062;	
    // (‎‎ﰢ‎‎) ARABIC LIGATURE DAD WITH JEEM ISOLATED FORM	[23CB 238B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC22, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x238B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_336)
{
    // FCB5 0021;	
    // (‎‎ﲵ‎‎) ARABIC LIGATURE DAD WITH HAH INITIAL FORM	[23CB 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB5, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_337)
{
    // FC23 0021;	
    // (‎‎ﰣ‎‎) ARABIC LIGATURE DAD WITH HAH ISOLATED FORM	[23CB 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC23, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_338)
{
    // FCB5 003F;	
    // (‎‎ﲵ‎‎) ARABIC LIGATURE DAD WITH HAH INITIAL FORM	[23CB 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB5, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_339)
{
    // FC23 003F;	
    // (‎‎ﰣ‎‎) ARABIC LIGATURE DAD WITH HAH ISOLATED FORM	[23CB 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC23, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_340)
{
    // FCB5 0061;	
    // (‎‎ﲵ‎‎) ARABIC LIGATURE DAD WITH HAH INITIAL FORM	[23CB 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB5, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_341)
{
    // FCB5 0041;	
    // (‎‎ﲵ‎‎) ARABIC LIGATURE DAD WITH HAH INITIAL FORM	[23CB 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB5, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_342)
{
    // FC23 0061;	
    // (‎‎ﰣ‎‎) ARABIC LIGATURE DAD WITH HAH ISOLATED FORM	[23CB 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC23, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_343)
{
    // FC23 0041;	
    // (‎‎ﰣ‎‎) ARABIC LIGATURE DAD WITH HAH ISOLATED FORM	[23CB 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC23, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_344)
{
    // FCB5 0062;	
    // (‎‎ﲵ‎‎) ARABIC LIGATURE DAD WITH HAH INITIAL FORM	[23CB 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB5, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_345)
{
    // FC23 0062;	
    // (‎‎ﰣ‎‎) ARABIC LIGATURE DAD WITH HAH ISOLATED FORM	[23CB 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC23, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_346)
{
    // FD6E 0021;	
    // (‎‎ﵮ‎‎) ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM	[23CB 2392 242B 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6E, 0x0021 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_347)
{
    // FD6E 003F;	
    // (‎‎ﵮ‎‎) ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM	[23CB 2392 242B 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6E, 0x003F };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_348)
{
    // FD6E 0061;	
    // (‎‎ﵮ‎‎) ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM	[23CB 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6E, 0x0061 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_349)
{
    // FD6E 0041;	
    // (‎‎ﵮ‎‎) ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM	[23CB 2392 242B 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD6E, 0x0041 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_350)
{
    // FD6E 0062;	
    // (‎‎ﵮ‎‎) ARABIC LIGATURE DAD WITH HAH WITH ALEF MAKSURA FINAL FORM	[23CB 2392 242B 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6E, 0x0062 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_351)
{
    // FDAB 0021;	
    // (‎‎ﶫ‎‎) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM	[23CB 2392 242C 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAB, 0x0021 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_352)
{
    // FDAB 003F;	
    // (‎‎ﶫ‎‎) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM	[23CB 2392 242C 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAB, 0x003F };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_353)
{
    // FDAB 0061;	
    // (‎‎ﶫ‎‎) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM	[23CB 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAB, 0x0061 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_354)
{
    // FDAB 0041;	
    // (‎‎ﶫ‎‎) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM	[23CB 2392 242C 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFDAB, 0x0041 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_355)
{
    // FDAB 0062;	
    // (‎‎ﶫ‎‎) ARABIC LIGATURE DAD WITH HAH WITH YEH FINAL FORM	[23CB 2392 242C 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFDAB, 0x0062 };
    uint32_t const ces[15] = { 0x23CB, 0x2392, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_356)
{
    // FCB6 0021;	
    // (‎‎ﲶ‎‎) ARABIC LIGATURE DAD WITH KHAH INITIAL FORM	[23CB 2393 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB6, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_357)
{
    // FC24 0021;	
    // (‎‎ﰤ‎‎) ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM	[23CB 2393 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC24, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_358)
{
    // FCB6 003F;	
    // (‎‎ﲶ‎‎) ARABIC LIGATURE DAD WITH KHAH INITIAL FORM	[23CB 2393 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB6, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_359)
{
    // FC24 003F;	
    // (‎‎ﰤ‎‎) ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM	[23CB 2393 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC24, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_360)
{
    // FCB6 0061;	
    // (‎‎ﲶ‎‎) ARABIC LIGATURE DAD WITH KHAH INITIAL FORM	[23CB 2393 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB6, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_361)
{
    // FCB6 0041;	
    // (‎‎ﲶ‎‎) ARABIC LIGATURE DAD WITH KHAH INITIAL FORM	[23CB 2393 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB6, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_362)
{
    // FC24 0061;	
    // (‎‎ﰤ‎‎) ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM	[23CB 2393 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC24, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_363)
{
    // FC24 0041;	
    // (‎‎ﰤ‎‎) ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM	[23CB 2393 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC24, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_364)
{
    // FCB6 0062;	
    // (‎‎ﲶ‎‎) ARABIC LIGATURE DAD WITH KHAH INITIAL FORM	[23CB 2393 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB6, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_365)
{
    // FC24 0062;	
    // (‎‎ﰤ‎‎) ARABIC LIGATURE DAD WITH KHAH ISOLATED FORM	[23CB 2393 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC24, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_366)
{
    // FD70 0021;	
    // (‎‎ﵰ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM	[23CB 2393 2409 0261 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD70, 0x0021 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_367)
{
    // FD6F 0021;	
    // (‎‎ﵯ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM	[23CB 2393 2409 0261 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6F, 0x0021 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_368)
{
    // FD70 003F;	
    // (‎‎ﵰ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM	[23CB 2393 2409 0267 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD70, 0x003F };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_369)
{
    // FD6F 003F;	
    // (‎‎ﵯ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM	[23CB 2393 2409 0267 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6F, 0x003F };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_370)
{
    // FD70 0061;	
    // (‎‎ﵰ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM	[23CB 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD70, 0x0061 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_371)
{
    // FD70 0041;	
    // (‎‎ﵰ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM	[23CB 2393 2409 1CAD | 0020 0020 0020 0020 | 0017 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD70, 0x0041 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_372)
{
    // FD6F 0061;	
    // (‎‎ﵯ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM	[23CB 2393 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6F, 0x0061 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_373)
{
    // FD6F 0041;	
    // (‎‎ﵯ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM	[23CB 2393 2409 1CAD | 0020 0020 0020 0020 | 0019 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD6F, 0x0041 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_374)
{
    // FD70 0062;	
    // (‎‎ﵰ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM INITIAL FORM	[23CB 2393 2409 1CC6 | 0020 0020 0020 0020 | 0017 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD70, 0x0062 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_375)
{
    // FD6F 0062;	
    // (‎‎ﵯ‎‎) ARABIC LIGATURE DAD WITH KHAH WITH MEEM FINAL FORM	[23CB 2393 2409 1CC6 | 0020 0020 0020 0020 | 0019 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD6F, 0x0062 };
    uint32_t const ces[15] = { 0x23CB, 0x2393, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_376)
{
    // FD2C 0021;	
    // (‎‎ﴬ‎‎) ARABIC LIGATURE DAD WITH REH FINAL FORM	[23CB 23AC 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2C, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_377)
{
    // FD10 0021;	
    // (‎‎ﴐ‎‎) ARABIC LIGATURE DAD WITH REH ISOLATED FORM	[23CB 23AC 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD10, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_378)
{
    // FD2C 003F;	
    // (‎‎ﴬ‎‎) ARABIC LIGATURE DAD WITH REH FINAL FORM	[23CB 23AC 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2C, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_379)
{
    // FD10 003F;	
    // (‎‎ﴐ‎‎) ARABIC LIGATURE DAD WITH REH ISOLATED FORM	[23CB 23AC 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD10, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_380)
{
    // FD2C 0061;	
    // (‎‎ﴬ‎‎) ARABIC LIGATURE DAD WITH REH FINAL FORM	[23CB 23AC 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2C, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_381)
{
    // FD2C 0041;	
    // (‎‎ﴬ‎‎) ARABIC LIGATURE DAD WITH REH FINAL FORM	[23CB 23AC 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD2C, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_382)
{
    // FD10 0061;	
    // (‎‎ﴐ‎‎) ARABIC LIGATURE DAD WITH REH ISOLATED FORM	[23CB 23AC 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD10, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_383)
{
    // FD10 0041;	
    // (‎‎ﴐ‎‎) ARABIC LIGATURE DAD WITH REH ISOLATED FORM	[23CB 23AC 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD10, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_384)
{
    // FD2C 0062;	
    // (‎‎ﴬ‎‎) ARABIC LIGATURE DAD WITH REH FINAL FORM	[23CB 23AC 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD2C, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_385)
{
    // FD10 0062;	
    // (‎‎ﴐ‎‎) ARABIC LIGATURE DAD WITH REH ISOLATED FORM	[23CB 23AC 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD10, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x23AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_386)
{
    // FCB7 0021;	
    // (‎‎ﲷ‎‎) ARABIC LIGATURE DAD WITH MEEM INITIAL FORM	[23CB 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB7, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_387)
{
    // FC25 0021;	
    // (‎‎ﰥ‎‎) ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM	[23CB 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC25, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_388)
{
    // FCB7 003F;	
    // (‎‎ﲷ‎‎) ARABIC LIGATURE DAD WITH MEEM INITIAL FORM	[23CB 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB7, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_389)
{
    // FC25 003F;	
    // (‎‎ﰥ‎‎) ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM	[23CB 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC25, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_390)
{
    // FCB7 0061;	
    // (‎‎ﲷ‎‎) ARABIC LIGATURE DAD WITH MEEM INITIAL FORM	[23CB 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB7, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_391)
{
    // FCB7 0041;	
    // (‎‎ﲷ‎‎) ARABIC LIGATURE DAD WITH MEEM INITIAL FORM	[23CB 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB7, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_392)
{
    // FC25 0061;	
    // (‎‎ﰥ‎‎) ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM	[23CB 2409 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC25, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_393)
{
    // FC25 0041;	
    // (‎‎ﰥ‎‎) ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM	[23CB 2409 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC25, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_394)
{
    // FCB7 0062;	
    // (‎‎ﲷ‎‎) ARABIC LIGATURE DAD WITH MEEM INITIAL FORM	[23CB 2409 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB7, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_395)
{
    // FC25 0062;	
    // (‎‎ﰥ‎‎) ARABIC LIGATURE DAD WITH MEEM ISOLATED FORM	[23CB 2409 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC25, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x2409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_396)
{
    // FD23 0021;	
    // (‎‎ﴣ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM	[23CB 242B 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD23, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_397)
{
    // FD07 0021;	
    // (‎‎ﴇ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM	[23CB 242B 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD07, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_398)
{
    // FD23 003F;	
    // (‎‎ﴣ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM	[23CB 242B 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD23, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_399)
{
    // FD07 003F;	
    // (‎‎ﴇ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM	[23CB 242B 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD07, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_400)
{
    // FD23 0061;	
    // (‎‎ﴣ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM	[23CB 242B 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD23, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_401)
{
    // FD23 0041;	
    // (‎‎ﴣ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM	[23CB 242B 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD23, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_402)
{
    // FD07 0061;	
    // (‎‎ﴇ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM	[23CB 242B 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD07, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_403)
{
    // FD07 0041;	
    // (‎‎ﴇ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM	[23CB 242B 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD07, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_404)
{
    // FD23 0062;	
    // (‎‎ﴣ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA FINAL FORM	[23CB 242B 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD23, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_405)
{
    // FD07 0062;	
    // (‎‎ﴇ‎‎) ARABIC LIGATURE DAD WITH ALEF MAKSURA ISOLATED FORM	[23CB 242B 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD07, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x242B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_406)
{
    // FD24 0021;	
    // (‎‎ﴤ‎‎) ARABIC LIGATURE DAD WITH YEH FINAL FORM	[23CB 242C 0261 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD24, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_407)
{
    // FD08 0021;	
    // (‎‎ﴈ‎‎) ARABIC LIGATURE DAD WITH YEH ISOLATED FORM	[23CB 242C 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD08, 0x0021 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_408)
{
    // FD24 003F;	
    // (‎‎ﴤ‎‎) ARABIC LIGATURE DAD WITH YEH FINAL FORM	[23CB 242C 0267 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD24, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_409)
{
    // FD08 003F;	
    // (‎‎ﴈ‎‎) ARABIC LIGATURE DAD WITH YEH ISOLATED FORM	[23CB 242C 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD08, 0x003F };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_410)
{
    // FD24 0061;	
    // (‎‎ﴤ‎‎) ARABIC LIGATURE DAD WITH YEH FINAL FORM	[23CB 242C 1CAD | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD24, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_411)
{
    // FD24 0041;	
    // (‎‎ﴤ‎‎) ARABIC LIGATURE DAD WITH YEH FINAL FORM	[23CB 242C 1CAD | 0020 0020 0020 | 0019 0019 0008 |]

    uint32_t cps[2] = { 0xFD24, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_412)
{
    // FD08 0061;	
    // (‎‎ﴈ‎‎) ARABIC LIGATURE DAD WITH YEH ISOLATED FORM	[23CB 242C 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD08, 0x0061 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_413)
{
    // FD08 0041;	
    // (‎‎ﴈ‎‎) ARABIC LIGATURE DAD WITH YEH ISOLATED FORM	[23CB 242C 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFD08, 0x0041 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_414)
{
    // FD24 0062;	
    // (‎‎ﴤ‎‎) ARABIC LIGATURE DAD WITH YEH FINAL FORM	[23CB 242C 1CC6 | 0020 0020 0020 | 0019 0019 0002 |]

    uint32_t cps[2] = { 0xFD24, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0019, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_415)
{
    // FD08 0062;	
    // (‎‎ﴈ‎‎) ARABIC LIGATURE DAD WITH YEH ISOLATED FORM	[23CB 242C 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFD08, 0x0062 };
    uint32_t const ces[12] = { 0x23CB, 0x242C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_416)
{
    // 069D 0021;	
    // (‎‎ڝ‎‎) ARABIC LETTER SAD WITH TWO DOTS BELOW	[23CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069D, 0x0021 };
    uint32_t const ces[9] = { 0x23CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_417)
{
    // 069D 003F;	
    // (‎‎ڝ‎‎) ARABIC LETTER SAD WITH TWO DOTS BELOW	[23CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069D, 0x003F };
    uint32_t const ces[9] = { 0x23CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_418)
{
    // 069D 0061;	
    // (‎‎ڝ‎‎) ARABIC LETTER SAD WITH TWO DOTS BELOW	[23CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069D, 0x0061 };
    uint32_t const ces[9] = { 0x23CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_419)
{
    // 069D 0041;	
    // (‎‎ڝ‎‎) ARABIC LETTER SAD WITH TWO DOTS BELOW	[23CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x069D, 0x0041 };
    uint32_t const ces[9] = { 0x23CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_420)
{
    // 069D 0062;	
    // (‎‎ڝ‎‎) ARABIC LETTER SAD WITH TWO DOTS BELOW	[23CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069D, 0x0062 };
    uint32_t const ces[9] = { 0x23CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_421)
{
    // 08AF 0021;	
    // (‎‎ࢯ‎‎) ARABIC LETTER SAD WITH THREE DOTS BELOW	[23CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AF, 0x0021 };
    uint32_t const ces[9] = { 0x23CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_422)
{
    // 08AF 003F;	
    // (‎‎ࢯ‎‎) ARABIC LETTER SAD WITH THREE DOTS BELOW	[23CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AF, 0x003F };
    uint32_t const ces[9] = { 0x23CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_423)
{
    // 08AF 0061;	
    // (‎‎ࢯ‎‎) ARABIC LETTER SAD WITH THREE DOTS BELOW	[23CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AF, 0x0061 };
    uint32_t const ces[9] = { 0x23CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_424)
{
    // 08AF 0041;	
    // (‎‎ࢯ‎‎) ARABIC LETTER SAD WITH THREE DOTS BELOW	[23CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x08AF, 0x0041 };
    uint32_t const ces[9] = { 0x23CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_425)
{
    // 08AF 0062;	
    // (‎‎ࢯ‎‎) ARABIC LETTER SAD WITH THREE DOTS BELOW	[23CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x08AF, 0x0062 };
    uint32_t const ces[9] = { 0x23CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_426)
{
    // 069E 0021;	
    // (‎‎ڞ‎‎) ARABIC LETTER SAD WITH THREE DOTS ABOVE	[23CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069E, 0x0021 };
    uint32_t const ces[9] = { 0x23CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_427)
{
    // 069E 003F;	
    // (‎‎ڞ‎‎) ARABIC LETTER SAD WITH THREE DOTS ABOVE	[23CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069E, 0x003F };
    uint32_t const ces[9] = { 0x23CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_428)
{
    // 069E 0061;	
    // (‎‎ڞ‎‎) ARABIC LETTER SAD WITH THREE DOTS ABOVE	[23CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069E, 0x0061 };
    uint32_t const ces[9] = { 0x23CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_429)
{
    // 069E 0041;	
    // (‎‎ڞ‎‎) ARABIC LETTER SAD WITH THREE DOTS ABOVE	[23CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x069E, 0x0041 };
    uint32_t const ces[9] = { 0x23CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_430)
{
    // 069E 0062;	
    // (‎‎ڞ‎‎) ARABIC LETTER SAD WITH THREE DOTS ABOVE	[23CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x069E, 0x0062 };
    uint32_t const ces[9] = { 0x23CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_431)
{
    // 06FB 0021;	
    // (‎‎ۻ‎‎) ARABIC LETTER DAD WITH DOT BELOW	[23CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FB, 0x0021 };
    uint32_t const ces[9] = { 0x23CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_432)
{
    // 06FB 003F;	
    // (‎‎ۻ‎‎) ARABIC LETTER DAD WITH DOT BELOW	[23CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FB, 0x003F };
    uint32_t const ces[9] = { 0x23CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_433)
{
    // 06FB 0061;	
    // (‎‎ۻ‎‎) ARABIC LETTER DAD WITH DOT BELOW	[23CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FB, 0x0061 };
    uint32_t const ces[9] = { 0x23CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_434)
{
    // 06FB 0041;	
    // (‎‎ۻ‎‎) ARABIC LETTER DAD WITH DOT BELOW	[23CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x06FB, 0x0041 };
    uint32_t const ces[9] = { 0x23CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_435)
{
    // 06FB 0062;	
    // (‎‎ۻ‎‎) ARABIC LETTER DAD WITH DOT BELOW	[23CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x06FB, 0x0062 };
    uint32_t const ces[9] = { 0x23CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_436)
{
    // 0637 0021;	
    // (‎‎ط‎‎) ARABIC LETTER TAH	[23D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0637, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_437)
{
    // 1EE08 0021;	
    // (‎‎𞸈‎‎) ARABIC MATHEMATICAL TAH	[23D0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE08, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_438)
{
    // 1EE68 0021;	
    // (‎‎𞹨‎‎) ARABIC MATHEMATICAL STRETCHED TAH	[23D0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE68, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_439)
{
    // 1EE88 0021;	
    // (‎‎𞺈‎‎) ARABIC MATHEMATICAL LOOPED TAH	[23D0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE88, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_440)
{
    // 1EEA8 0021;	
    // (‎‎𞺨‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TAH	[23D0 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA8, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_441)
{
    // FEC3 0021;	
    // (‎‎ﻃ‎‎) ARABIC LETTER TAH INITIAL FORM	[23D0 0261 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEC3, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_442)
{
    // FEC4 0021;	
    // (‎‎ﻄ‎‎) ARABIC LETTER TAH MEDIAL FORM	[23D0 0261 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC4, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_443)
{
    // FEC2 0021;	
    // (‎‎ﻂ‎‎) ARABIC LETTER TAH FINAL FORM	[23D0 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEC2, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_444)
{
    // FEC1 0021;	
    // (‎‎ﻁ‎‎) ARABIC LETTER TAH ISOLATED FORM	[23D0 0261 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEC1, 0x0021 };
    uint32_t const ces[9] = { 0x23D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_445)
{
    // 0637 003F;	
    // (‎‎ط‎‎) ARABIC LETTER TAH	[23D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0637, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_446)
{
    // 1EE08 003F;	
    // (‎‎𞸈‎‎) ARABIC MATHEMATICAL TAH	[23D0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE08, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_447)
{
    // 1EE68 003F;	
    // (‎‎𞹨‎‎) ARABIC MATHEMATICAL STRETCHED TAH	[23D0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE68, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_448)
{
    // 1EE88 003F;	
    // (‎‎𞺈‎‎) ARABIC MATHEMATICAL LOOPED TAH	[23D0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE88, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_449)
{
    // 1EEA8 003F;	
    // (‎‎𞺨‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TAH	[23D0 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA8, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_450)
{
    // FEC3 003F;	
    // (‎‎ﻃ‎‎) ARABIC LETTER TAH INITIAL FORM	[23D0 0267 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEC3, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_451)
{
    // FEC4 003F;	
    // (‎‎ﻄ‎‎) ARABIC LETTER TAH MEDIAL FORM	[23D0 0267 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC4, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_452)
{
    // FEC2 003F;	
    // (‎‎ﻂ‎‎) ARABIC LETTER TAH FINAL FORM	[23D0 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEC2, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_453)
{
    // FEC1 003F;	
    // (‎‎ﻁ‎‎) ARABIC LETTER TAH ISOLATED FORM	[23D0 0267 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEC1, 0x003F };
    uint32_t const ces[9] = { 0x23D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_454)
{
    // 0637 0061;	
    // (‎‎ط‎‎) ARABIC LETTER TAH	[23D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0637, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_455)
{
    // 0637 0041;	
    // (‎‎ط‎‎) ARABIC LETTER TAH	[23D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0637, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_456)
{
    // 1EE08 0061;	
    // (‎‎𞸈‎‎) ARABIC MATHEMATICAL TAH	[23D0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE08, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_457)
{
    // 1EE68 0061;	
    // (‎‎𞹨‎‎) ARABIC MATHEMATICAL STRETCHED TAH	[23D0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE68, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_458)
{
    // 1EE88 0061;	
    // (‎‎𞺈‎‎) ARABIC MATHEMATICAL LOOPED TAH	[23D0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE88, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_459)
{
    // 1EEA8 0061;	
    // (‎‎𞺨‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TAH	[23D0 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA8, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_460)
{
    // 1EE08 0041;	
    // (‎‎𞸈‎‎) ARABIC MATHEMATICAL TAH	[23D0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE08, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_461)
{
    // 1EE68 0041;	
    // (‎‎𞹨‎‎) ARABIC MATHEMATICAL STRETCHED TAH	[23D0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE68, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_462)
{
    // 1EE88 0041;	
    // (‎‎𞺈‎‎) ARABIC MATHEMATICAL LOOPED TAH	[23D0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EE88, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_463)
{
    // 1EEA8 0041;	
    // (‎‎𞺨‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TAH	[23D0 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1EEA8, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_464)
{
    // FEC3 0061;	
    // (‎‎ﻃ‎‎) ARABIC LETTER TAH INITIAL FORM	[23D0 1CAD | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEC3, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_465)
{
    // FEC3 0041;	
    // (‎‎ﻃ‎‎) ARABIC LETTER TAH INITIAL FORM	[23D0 1CAD | 0020 0020 | 0017 0008 |]

    uint32_t cps[2] = { 0xFEC3, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_466)
{
    // FEC4 0061;	
    // (‎‎ﻄ‎‎) ARABIC LETTER TAH MEDIAL FORM	[23D0 1CAD | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC4, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_467)
{
    // FEC4 0041;	
    // (‎‎ﻄ‎‎) ARABIC LETTER TAH MEDIAL FORM	[23D0 1CAD | 0020 0020 | 0018 0008 |]

    uint32_t cps[2] = { 0xFEC4, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_468)
{
    // FEC2 0061;	
    // (‎‎ﻂ‎‎) ARABIC LETTER TAH FINAL FORM	[23D0 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEC2, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_469)
{
    // FEC2 0041;	
    // (‎‎ﻂ‎‎) ARABIC LETTER TAH FINAL FORM	[23D0 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0xFEC2, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_470)
{
    // FEC1 0061;	
    // (‎‎ﻁ‎‎) ARABIC LETTER TAH ISOLATED FORM	[23D0 1CAD | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEC1, 0x0061 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_471)
{
    // FEC1 0041;	
    // (‎‎ﻁ‎‎) ARABIC LETTER TAH ISOLATED FORM	[23D0 1CAD | 0020 0020 | 001A 0008 |]

    uint32_t cps[2] = { 0xFEC1, 0x0041 };
    uint32_t const ces[9] = { 0x23D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_472)
{
    // 0637 0062;	
    // (‎‎ط‎‎) ARABIC LETTER TAH	[23D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0637, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_473)
{
    // 1EE08 0062;	
    // (‎‎𞸈‎‎) ARABIC MATHEMATICAL TAH	[23D0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE08, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_474)
{
    // 1EE68 0062;	
    // (‎‎𞹨‎‎) ARABIC MATHEMATICAL STRETCHED TAH	[23D0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE68, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_475)
{
    // 1EE88 0062;	
    // (‎‎𞺈‎‎) ARABIC MATHEMATICAL LOOPED TAH	[23D0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EE88, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_476)
{
    // 1EEA8 0062;	
    // (‎‎𞺨‎‎) ARABIC MATHEMATICAL DOUBLE-STRUCK TAH	[23D0 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1EEA8, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_477)
{
    // FEC3 0062;	
    // (‎‎ﻃ‎‎) ARABIC LETTER TAH INITIAL FORM	[23D0 1CC6 | 0020 0020 | 0017 0002 |]

    uint32_t cps[2] = { 0xFEC3, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_478)
{
    // FEC4 0062;	
    // (‎‎ﻄ‎‎) ARABIC LETTER TAH MEDIAL FORM	[23D0 1CC6 | 0020 0020 | 0018 0002 |]

    uint32_t cps[2] = { 0xFEC4, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_479)
{
    // FEC2 0062;	
    // (‎‎ﻂ‎‎) ARABIC LETTER TAH FINAL FORM	[23D0 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0xFEC2, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_480)
{
    // FEC1 0062;	
    // (‎‎ﻁ‎‎) ARABIC LETTER TAH ISOLATED FORM	[23D0 1CC6 | 0020 0020 | 001A 0002 |]

    uint32_t cps[2] = { 0xFEC1, 0x0062 };
    uint32_t const ces[9] = { 0x23D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_481)
{
    // FCB8 0021;	
    // (‎‎ﲸ‎‎) ARABIC LIGATURE TAH WITH HAH INITIAL FORM	[23D0 2392 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB8, 0x0021 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_482)
{
    // FC26 0021;	
    // (‎‎ﰦ‎‎) ARABIC LIGATURE TAH WITH HAH ISOLATED FORM	[23D0 2392 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC26, 0x0021 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_483)
{
    // FCB8 003F;	
    // (‎‎ﲸ‎‎) ARABIC LIGATURE TAH WITH HAH INITIAL FORM	[23D0 2392 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB8, 0x003F };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_484)
{
    // FC26 003F;	
    // (‎‎ﰦ‎‎) ARABIC LIGATURE TAH WITH HAH ISOLATED FORM	[23D0 2392 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC26, 0x003F };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_485)
{
    // FCB8 0061;	
    // (‎‎ﲸ‎‎) ARABIC LIGATURE TAH WITH HAH INITIAL FORM	[23D0 2392 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB8, 0x0061 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_486)
{
    // FCB8 0041;	
    // (‎‎ﲸ‎‎) ARABIC LIGATURE TAH WITH HAH INITIAL FORM	[23D0 2392 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFCB8, 0x0041 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_487)
{
    // FC26 0061;	
    // (‎‎ﰦ‎‎) ARABIC LIGATURE TAH WITH HAH ISOLATED FORM	[23D0 2392 1CAD | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC26, 0x0061 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_488)
{
    // FC26 0041;	
    // (‎‎ﰦ‎‎) ARABIC LIGATURE TAH WITH HAH ISOLATED FORM	[23D0 2392 1CAD | 0020 0020 0020 | 001A 001A 0008 |]

    uint32_t cps[2] = { 0xFC26, 0x0041 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_489)
{
    // FCB8 0062;	
    // (‎‎ﲸ‎‎) ARABIC LIGATURE TAH WITH HAH INITIAL FORM	[23D0 2392 1CC6 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFCB8, 0x0062 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_490)
{
    // FC26 0062;	
    // (‎‎ﰦ‎‎) ARABIC LIGATURE TAH WITH HAH ISOLATED FORM	[23D0 2392 1CC6 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC26, 0x0062 };
    uint32_t const ces[12] = { 0x23D0, 0x2392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_491)
{
    // FD33 0021;	
    // (‎‎ﴳ‎‎) ARABIC LIGATURE TAH WITH MEEM INITIAL FORM	[23D0 2409 0261 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD33, 0x0021 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_492)
{
    // FD3A 0021;	
    // (‎‎ﴺ‎‎) ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM	[23D0 2409 0261 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD3A, 0x0021 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_493)
{
    // FC27 0021;	
    // (‎‎ﰧ‎‎) ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM	[23D0 2409 0261 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC27, 0x0021 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_494)
{
    // FD33 003F;	
    // (‎‎ﴳ‎‎) ARABIC LIGATURE TAH WITH MEEM INITIAL FORM	[23D0 2409 0267 | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD33, 0x003F };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_495)
{
    // FD3A 003F;	
    // (‎‎ﴺ‎‎) ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM	[23D0 2409 0267 | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD3A, 0x003F };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_496)
{
    // FC27 003F;	
    // (‎‎ﰧ‎‎) ARABIC LIGATURE TAH WITH MEEM ISOLATED FORM	[23D0 2409 0267 | 0020 0020 0020 | 001A 001A 0002 |]

    uint32_t cps[2] = { 0xFC27, 0x003F };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001A, 0x001A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_497)
{
    // FD33 0061;	
    // (‎‎ﴳ‎‎) ARABIC LIGATURE TAH WITH MEEM INITIAL FORM	[23D0 2409 1CAD | 0020 0020 0020 | 0017 0017 0002 |]

    uint32_t cps[2] = { 0xFD33, 0x0061 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_498)
{
    // FD33 0041;	
    // (‎‎ﴳ‎‎) ARABIC LIGATURE TAH WITH MEEM INITIAL FORM	[23D0 2409 1CAD | 0020 0020 0020 | 0017 0017 0008 |]

    uint32_t cps[2] = { 0xFD33, 0x0041 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0017, 0x0017, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_152_499)
{
    // FD3A 0061;	
    // (‎‎ﴺ‎‎) ARABIC LIGATURE TAH WITH MEEM MEDIAL FORM	[23D0 2409 1CAD | 0020 0020 0020 | 0018 0018 0002 |]

    uint32_t cps[2] = { 0xFD3A, 0x0061 };
    uint32_t const ces[12] = { 0x23D0, 0x2409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0018, 0x0018, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

