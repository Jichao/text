// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_101_000)
{
    // AA59  ; [.1CAC.0020.0002] 
    // CHAM DIGIT NINE

    uint32_t const cps[1] = { 0xaa59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_001)
{
    // AA5C  ; [*0447.0020.0002] 
    // CHAM PUNCTUATION SPIRAL

    uint32_t const cps[1] = { 0xaa5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x447), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_002)
{
    // AA5D  ; [*02A6.0020.0002] 
    // CHAM PUNCTUATION DANDA

    uint32_t const cps[1] = { 0xaa5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_003)
{
    // AA5E  ; [*02A7.0020.0002] 
    // CHAM PUNCTUATION DOUBLE DANDA

    uint32_t const cps[1] = { 0xaa5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_004)
{
    // AA5F  ; [*02A8.0020.0002] 
    // CHAM PUNCTUATION TRIPLE DANDA

    uint32_t const cps[1] = { 0xaa5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_005)
{
    // AA60  ; [.3152.0020.0002] 
    // MYANMAR LETTER KHAMTI GA

    uint32_t const cps[1] = { 0xaa60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3152), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_006)
{
    // AA61  ; [.315B.0020.0002] 
    // MYANMAR LETTER KHAMTI CA

    uint32_t const cps[1] = { 0xaa61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x315b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_007)
{
    // AA62  ; [.315E.0020.0002] 
    // MYANMAR LETTER KHAMTI CHA

    uint32_t const cps[1] = { 0xaa62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x315e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_008)
{
    // AA63  ; [.3161.0020.0002] 
    // MYANMAR LETTER KHAMTI JA

    uint32_t const cps[1] = { 0xaa63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3161), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_009)
{
    // AA64  ; [.3168.0020.0002] 
    // MYANMAR LETTER KHAMTI JHA

    uint32_t const cps[1] = { 0xaa64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3168), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_010)
{
    // AA65  ; [.316E.0020.0002] 
    // MYANMAR LETTER KHAMTI NYA

    uint32_t const cps[1] = { 0xaa65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x316e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_011)
{
    // AA66  ; [.3172.0020.0002] 
    // MYANMAR LETTER KHAMTI TTA

    uint32_t const cps[1] = { 0xaa66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3172), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_012)
{
    // AA67  ; [.3174.0020.0002] 
    // MYANMAR LETTER KHAMTI TTHA

    uint32_t const cps[1] = { 0xaa67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3174), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_013)
{
    // AA68  ; [.3176.0020.0002] 
    // MYANMAR LETTER KHAMTI DDA

    uint32_t const cps[1] = { 0xaa68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3176), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_014)
{
    // AA69  ; [.3179.0020.0002] 
    // MYANMAR LETTER KHAMTI DDHA

    uint32_t const cps[1] = { 0xaa69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3179), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_015)
{
    // AA6A  ; [.3185.0020.0002] 
    // MYANMAR LETTER KHAMTI DHA

    uint32_t const cps[1] = { 0xaa6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3185), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_016)
{
    // AA6B  ; [.3189.0020.0002] 
    // MYANMAR LETTER KHAMTI NA

    uint32_t const cps[1] = { 0xaa6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3189), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_017)
{
    // AA6C  ; [.31AA.0020.0002] 
    // MYANMAR LETTER KHAMTI SA

    uint32_t const cps[1] = { 0xaa6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_018)
{
    // AA6D  ; [.31AD.0020.0002] 
    // MYANMAR LETTER KHAMTI HA

    uint32_t const cps[1] = { 0xaa6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_019)
{
    // AA6E  ; [.31AF.0020.0002] 
    // MYANMAR LETTER KHAMTI HHA

    uint32_t const cps[1] = { 0xaa6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_020)
{
    // AA6F  ; [.318F.0020.0002] 
    // MYANMAR LETTER KHAMTI FA

    uint32_t const cps[1] = { 0xaa6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_021)
{
    // AA70  ; [.1C65.0020.0002] 
    // MYANMAR MODIFIER LETTER KHAMTI REDUPLICATION

    uint32_t const cps[1] = { 0xaa70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c65), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_022)
{
    // AA71  ; [.31B0.0020.0002] 
    // MYANMAR LETTER KHAMTI XA

    uint32_t const cps[1] = { 0xaa71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_023)
{
    // AA72  ; [.3164.0020.0002] 
    // MYANMAR LETTER KHAMTI ZA

    uint32_t const cps[1] = { 0xaa72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3164), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_024)
{
    // AA73  ; [.319D.0020.0002] 
    // MYANMAR LETTER KHAMTI RA

    uint32_t const cps[1] = { 0xaa73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_025)
{
    // AA74  ; [.31F8.0020.0002] 
    // MYANMAR LOGOGRAM KHAMTI OAY

    uint32_t const cps[1] = { 0xaa74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_026)
{
    // AA75  ; [.31F9.0020.0002] 
    // MYANMAR LOGOGRAM KHAMTI QN

    uint32_t const cps[1] = { 0xaa75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_027)
{
    // AA76  ; [.31FA.0020.0002] 
    // MYANMAR LOGOGRAM KHAMTI HM

    uint32_t const cps[1] = { 0xaa76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_028)
{
    // AA77  ; [*0563.0020.0002] 
    // MYANMAR SYMBOL AITON EXCLAMATION

    uint32_t const cps[1] = { 0xaa77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x563), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_029)
{
    // AA78  ; [*0564.0020.0002] 
    // MYANMAR SYMBOL AITON ONE

    uint32_t const cps[1] = { 0xaa78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x564), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_030)
{
    // AA79  ; [*0565.0020.0002] 
    // MYANMAR SYMBOL AITON TWO

    uint32_t const cps[1] = { 0xaa79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x565), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_031)
{
    // AA7A  ; [.319E.0020.0002] 
    // MYANMAR LETTER AITON RA

    uint32_t const cps[1] = { 0xaa7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_032)
{
    // AA7B  ; [.31F5.0020.0002] 
    // MYANMAR SIGN PAO KAREN TONE

    uint32_t const cps[1] = { 0xaa7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_033)
{
    // AA7C  ; [.31F6.0020.0002] 
    // MYANMAR SIGN TAI LAING TONE-2

    uint32_t const cps[1] = { 0xaa7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_034)
{
    // AA7D  ; [.31F7.0020.0002] 
    // MYANMAR SIGN TAI LAING TONE-5

    uint32_t const cps[1] = { 0xaa7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_035)
{
    // AA7E  ; [.315F.0020.0002] 
    // MYANMAR LETTER SHWE PALAUNG CHA

    uint32_t const cps[1] = { 0xaa7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x315f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_036)
{
    // AA7F  ; [.316B.0020.0002] 
    // MYANMAR LETTER SHWE PALAUNG SHA

    uint32_t const cps[1] = { 0xaa7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x316b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_037)
{
    // AA80  ; [.2E90.0020.0002] 
    // TAI VIET LETTER LOW KO

    uint32_t const cps[1] = { 0xaa80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e90), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_038)
{
    // AA81  ; [.2E91.0020.0002] 
    // TAI VIET LETTER HIGH KO

    uint32_t const cps[1] = { 0xaa81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e91), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_039)
{
    // AA82  ; [.2E92.0020.0002] 
    // TAI VIET LETTER LOW KHO

    uint32_t const cps[1] = { 0xaa82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e92), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_040)
{
    // AA83  ; [.2E93.0020.0002] 
    // TAI VIET LETTER HIGH KHO

    uint32_t const cps[1] = { 0xaa83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e93), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_041)
{
    // AA84  ; [.2E94.0020.0002] 
    // TAI VIET LETTER LOW KHHO

    uint32_t const cps[1] = { 0xaa84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e94), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_042)
{
    // AA85  ; [.2E95.0020.0002] 
    // TAI VIET LETTER HIGH KHHO

    uint32_t const cps[1] = { 0xaa85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e95), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_043)
{
    // AA86  ; [.2E96.0020.0002] 
    // TAI VIET LETTER LOW GO

    uint32_t const cps[1] = { 0xaa86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e96), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_044)
{
    // AA87  ; [.2E97.0020.0002] 
    // TAI VIET LETTER HIGH GO

    uint32_t const cps[1] = { 0xaa87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e97), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_045)
{
    // AA88  ; [.2E98.0020.0002] 
    // TAI VIET LETTER LOW NGO

    uint32_t const cps[1] = { 0xaa88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e98), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_046)
{
    // AA89  ; [.2E99.0020.0002] 
    // TAI VIET LETTER HIGH NGO

    uint32_t const cps[1] = { 0xaa89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e99), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_047)
{
    // AA8A  ; [.2E9A.0020.0002] 
    // TAI VIET LETTER LOW CO

    uint32_t const cps[1] = { 0xaa8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_048)
{
    // AA8B  ; [.2E9B.0020.0002] 
    // TAI VIET LETTER HIGH CO

    uint32_t const cps[1] = { 0xaa8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_049)
{
    // AA8C  ; [.2E9C.0020.0002] 
    // TAI VIET LETTER LOW CHO

    uint32_t const cps[1] = { 0xaa8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_050)
{
    // AA8D  ; [.2E9D.0020.0002] 
    // TAI VIET LETTER HIGH CHO

    uint32_t const cps[1] = { 0xaa8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_051)
{
    // AA8E  ; [.2E9E.0020.0002] 
    // TAI VIET LETTER LOW SO

    uint32_t const cps[1] = { 0xaa8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_052)
{
    // AA8F  ; [.2E9F.0020.0002] 
    // TAI VIET LETTER HIGH SO

    uint32_t const cps[1] = { 0xaa8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_053)
{
    // AA90  ; [.2EA0.0020.0002] 
    // TAI VIET LETTER LOW NYO

    uint32_t const cps[1] = { 0xaa90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_054)
{
    // AA91  ; [.2EA1.0020.0002] 
    // TAI VIET LETTER HIGH NYO

    uint32_t const cps[1] = { 0xaa91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_055)
{
    // AA92  ; [.2EA2.0020.0002] 
    // TAI VIET LETTER LOW DO

    uint32_t const cps[1] = { 0xaa92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_056)
{
    // AA93  ; [.2EA3.0020.0002] 
    // TAI VIET LETTER HIGH DO

    uint32_t const cps[1] = { 0xaa93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_057)
{
    // AA94  ; [.2EA4.0020.0002] 
    // TAI VIET LETTER LOW TO

    uint32_t const cps[1] = { 0xaa94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_058)
{
    // AA95  ; [.2EA5.0020.0002] 
    // TAI VIET LETTER HIGH TO

    uint32_t const cps[1] = { 0xaa95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_059)
{
    // AA96  ; [.2EA6.0020.0002] 
    // TAI VIET LETTER LOW THO

    uint32_t const cps[1] = { 0xaa96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_060)
{
    // AA97  ; [.2EA7.0020.0002] 
    // TAI VIET LETTER HIGH THO

    uint32_t const cps[1] = { 0xaa97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_061)
{
    // AA98  ; [.2EA8.0020.0002] 
    // TAI VIET LETTER LOW NO

    uint32_t const cps[1] = { 0xaa98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_062)
{
    // AA99  ; [.2EA9.0020.0002] 
    // TAI VIET LETTER HIGH NO

    uint32_t const cps[1] = { 0xaa99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ea9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_063)
{
    // AA9A  ; [.2EAA.0020.0002] 
    // TAI VIET LETTER LOW BO

    uint32_t const cps[1] = { 0xaa9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_064)
{
    // AA9B  ; [.2EAB.0020.0002] 
    // TAI VIET LETTER HIGH BO

    uint32_t const cps[1] = { 0xaa9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_065)
{
    // AA9C  ; [.2EAC.0020.0002] 
    // TAI VIET LETTER LOW PO

    uint32_t const cps[1] = { 0xaa9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_066)
{
    // AA9D  ; [.2EAD.0020.0002] 
    // TAI VIET LETTER HIGH PO

    uint32_t const cps[1] = { 0xaa9d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ead), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_067)
{
    // AA9E  ; [.2EAE.0020.0002] 
    // TAI VIET LETTER LOW PHO

    uint32_t const cps[1] = { 0xaa9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_068)
{
    // AA9F  ; [.2EAF.0020.0002] 
    // TAI VIET LETTER HIGH PHO

    uint32_t const cps[1] = { 0xaa9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_069)
{
    // AAA0  ; [.2EB0.0020.0002] 
    // TAI VIET LETTER LOW FO

    uint32_t const cps[1] = { 0xaaa0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_070)
{
    // AAA1  ; [.2EB1.0020.0002] 
    // TAI VIET LETTER HIGH FO

    uint32_t const cps[1] = { 0xaaa1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_071)
{
    // AAA2  ; [.2EB2.0020.0002] 
    // TAI VIET LETTER LOW MO

    uint32_t const cps[1] = { 0xaaa2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_072)
{
    // AAA3  ; [.2EB3.0020.0002] 
    // TAI VIET LETTER HIGH MO

    uint32_t const cps[1] = { 0xaaa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_073)
{
    // AAA4  ; [.2EB4.0020.0002] 
    // TAI VIET LETTER LOW YO

    uint32_t const cps[1] = { 0xaaa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_074)
{
    // AAA5  ; [.2EB5.0020.0002] 
    // TAI VIET LETTER HIGH YO

    uint32_t const cps[1] = { 0xaaa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_075)
{
    // AAA6  ; [.2EB6.0020.0002] 
    // TAI VIET LETTER LOW RO

    uint32_t const cps[1] = { 0xaaa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_076)
{
    // AAA7  ; [.2EB7.0020.0002] 
    // TAI VIET LETTER HIGH RO

    uint32_t const cps[1] = { 0xaaa7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_077)
{
    // AAA8  ; [.2EB8.0020.0002] 
    // TAI VIET LETTER LOW LO

    uint32_t const cps[1] = { 0xaaa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_078)
{
    // AAA9  ; [.2EB9.0020.0002] 
    // TAI VIET LETTER HIGH LO

    uint32_t const cps[1] = { 0xaaa9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_079)
{
    // AAAA  ; [.2EBA.0020.0002] 
    // TAI VIET LETTER LOW VO

    uint32_t const cps[1] = { 0xaaaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_080)
{
    // AAAB  ; [.2EBB.0020.0002] 
    // TAI VIET LETTER HIGH VO

    uint32_t const cps[1] = { 0xaaab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ebb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_081)
{
    // AAAC  ; [.2EBC.0020.0002] 
    // TAI VIET LETTER LOW HO

    uint32_t const cps[1] = { 0xaaac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ebc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_082)
{
    // AAAD  ; [.2EBD.0020.0002] 
    // TAI VIET LETTER HIGH HO

    uint32_t const cps[1] = { 0xaaad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ebd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_083)
{
    // AAAE  ; [.2EBE.0020.0002] 
    // TAI VIET LETTER LOW O

    uint32_t const cps[1] = { 0xaaae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ebe), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_084)
{
    // AAAF  ; [.2EBF.0020.0002] 
    // TAI VIET LETTER HIGH O

    uint32_t const cps[1] = { 0xaaaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ebf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_085)
{
    // AAB0  ; [.2EC0.0020.0002] 
    // TAI VIET MAI KANG

    uint32_t const cps[1] = { 0xaab0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_086)
{
    // AAB1  ; [.2EC1.0020.0002] 
    // TAI VIET VOWEL AA

    uint32_t const cps[1] = { 0xaab1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_087)
{
    // AAB2  ; [.2EC2.0020.0002] 
    // TAI VIET VOWEL I

    uint32_t const cps[1] = { 0xaab2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_088)
{
    // AAB3  ; [.2EC3.0020.0002] 
    // TAI VIET VOWEL UE

    uint32_t const cps[1] = { 0xaab3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_089)
{
    // AAB4  ; [.2EC4.0020.0002] 
    // TAI VIET VOWEL U

    uint32_t const cps[1] = { 0xaab4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_101_090)
{
    // AAB5  ; [.2EC5.0020.0002] 
    // TAI VIET VOWEL E

    uint32_t const cps[1] = { 0xaab5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_091)
{
    // AAB5 AA80 ; [.2E90.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW KO>

    uint32_t const cps[2] = { 0xaab5, 0xaa80 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e90), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_092)
{
    // AAB5 AA81 ; [.2E91.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH KO>

    uint32_t const cps[2] = { 0xaab5, 0xaa81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e91), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_093)
{
    // AAB5 AA82 ; [.2E92.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW KHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e92), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_094)
{
    // AAB5 AA83 ; [.2E93.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH KHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa83 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e93), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_095)
{
    // AAB5 AA84 ; [.2E94.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW KHHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e94), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_096)
{
    // AAB5 AA85 ; [.2E95.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH KHHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa85 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e95), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_097)
{
    // AAB5 AA86 ; [.2E96.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW GO>

    uint32_t const cps[2] = { 0xaab5, 0xaa86 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e96), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_098)
{
    // AAB5 AA87 ; [.2E97.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH GO>

    uint32_t const cps[2] = { 0xaab5, 0xaa87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e97), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_099)
{
    // AAB5 AA88 ; [.2E98.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW NGO>

    uint32_t const cps[2] = { 0xaab5, 0xaa88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_100)
{
    // AAB5 AA89 ; [.2E99.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH NGO>

    uint32_t const cps[2] = { 0xaab5, 0xaa89 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e99), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_101)
{
    // AAB5 AA8A ; [.2E9A.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW CO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_102)
{
    // AAB5 AA8B ; [.2E9B.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH CO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_103)
{
    // AAB5 AA8C ; [.2E9C.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW CHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9c), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_104)
{
    // AAB5 AA8D ; [.2E9D.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_105)
{
    // AAB5 AA8E ; [.2E9E.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW SO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_106)
{
    // AAB5 AA8F ; [.2E9F.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH SO>

    uint32_t const cps[2] = { 0xaab5, 0xaa8f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e9f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_107)
{
    // AAB5 AA90 ; [.2EA0.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW NYO>

    uint32_t const cps[2] = { 0xaab5, 0xaa90 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_108)
{
    // AAB5 AA91 ; [.2EA1.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO>

    uint32_t const cps[2] = { 0xaab5, 0xaa91 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_109)
{
    // AAB5 AA92 ; [.2EA2.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW DO>

    uint32_t const cps[2] = { 0xaab5, 0xaa92 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_110)
{
    // AAB5 AA93 ; [.2EA3.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH DO>

    uint32_t const cps[2] = { 0xaab5, 0xaa93 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_111)
{
    // AAB5 AA94 ; [.2EA4.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW TO>

    uint32_t const cps[2] = { 0xaab5, 0xaa94 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_112)
{
    // AAB5 AA95 ; [.2EA5.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH TO>

    uint32_t const cps[2] = { 0xaab5, 0xaa95 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_113)
{
    // AAB5 AA96 ; [.2EA6.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW THO>

    uint32_t const cps[2] = { 0xaab5, 0xaa96 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_114)
{
    // AAB5 AA97 ; [.2EA7.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH THO>

    uint32_t const cps[2] = { 0xaab5, 0xaa97 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_115)
{
    // AAB5 AA98 ; [.2EA8.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW NO>

    uint32_t const cps[2] = { 0xaab5, 0xaa98 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_116)
{
    // AAB5 AA99 ; [.2EA9.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH NO>

    uint32_t const cps[2] = { 0xaab5, 0xaa99 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ea9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_117)
{
    // AAB5 AA9A ; [.2EAA.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW BO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eaa), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_118)
{
    // AAB5 AA9B ; [.2EAB.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH BO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eab), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_119)
{
    // AAB5 AA9C ; [.2EAC.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW PO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eac), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_120)
{
    // AAB5 AA9D ; [.2EAD.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH PO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ead), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_121)
{
    // AAB5 AA9E ; [.2EAE.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW PHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eae), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_122)
{
    // AAB5 AA9F ; [.2EAF.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO>

    uint32_t const cps[2] = { 0xaab5, 0xaa9f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eaf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_123)
{
    // AAB5 AAA0 ; [.2EB0.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW FO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_124)
{
    // AAB5 AAA1 ; [.2EB1.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH FO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_125)
{
    // AAB5 AAA2 ; [.2EB2.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW MO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb2), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_126)
{
    // AAB5 AAA3 ; [.2EB3.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH MO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_127)
{
    // AAB5 AAA4 ; [.2EB4.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW YO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_128)
{
    // AAB5 AAA5 ; [.2EB5.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH YO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb5), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_129)
{
    // AAB5 AAA6 ; [.2EB6.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW RO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb6), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_130)
{
    // AAB5 AAA7 ; [.2EB7.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH RO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb7), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_131)
{
    // AAB5 AAA8 ; [.2EB8.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW LO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_132)
{
    // AAB5 AAA9 ; [.2EB9.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH LO>

    uint32_t const cps[2] = { 0xaab5, 0xaaa9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eb9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_133)
{
    // AAB5 AAAA ; [.2EBA.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW VO>

    uint32_t const cps[2] = { 0xaab5, 0xaaaa };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2eba), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_134)
{
    // AAB5 AAAB ; [.2EBB.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH VO>

    uint32_t const cps[2] = { 0xaab5, 0xaaab };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ebb), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_135)
{
    // AAB5 AAAC ; [.2EBC.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW HO>

    uint32_t const cps[2] = { 0xaab5, 0xaaac };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ebc), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_136)
{
    // AAB5 AAAD ; [.2EBD.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH HO>

    uint32_t const cps[2] = { 0xaab5, 0xaaad };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ebd), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_137)
{
    // AAB5 AAAE ; [.2EBE.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER LOW O>

    uint32_t const cps[2] = { 0xaab5, 0xaaae };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ebe), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_138)
{
    // AAB5 AAAF ; [.2EBF.0020.0002][.2EC5.0020.0002] 
    // <TAI VIET VOWEL E, TAI VIET LETTER HIGH O>

    uint32_t const cps[2] = { 0xaab5, 0xaaaf };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ebf), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_139)
{
    // AAB6  ; [.2EC6.0020.0002] 
    // TAI VIET VOWEL O

    uint32_t const cps[1] = { 0xaab6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 1));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_140)
{
    // AAB6 AA80 ; [.2E90.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER LOW KO>

    uint32_t const cps[2] = { 0xaab6, 0xaa80 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e90), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_141)
{
    // AAB6 AA81 ; [.2E91.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER HIGH KO>

    uint32_t const cps[2] = { 0xaab6, 0xaa81 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e91), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_142)
{
    // AAB6 AA82 ; [.2E92.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER LOW KHO>

    uint32_t const cps[2] = { 0xaab6, 0xaa82 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e92), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_143)
{
    // AAB6 AA83 ; [.2E93.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER HIGH KHO>

    uint32_t const cps[2] = { 0xaab6, 0xaa83 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e93), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_144)
{
    // AAB6 AA84 ; [.2E94.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER LOW KHHO>

    uint32_t const cps[2] = { 0xaab6, 0xaa84 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e94), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_145)
{
    // AAB6 AA85 ; [.2E95.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER HIGH KHHO>

    uint32_t const cps[2] = { 0xaab6, 0xaa85 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e95), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_146)
{
    // AAB6 AA86 ; [.2E96.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER LOW GO>

    uint32_t const cps[2] = { 0xaab6, 0xaa86 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e96), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_147)
{
    // AAB6 AA87 ; [.2E97.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER HIGH GO>

    uint32_t const cps[2] = { 0xaab6, 0xaa87 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e97), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_148)
{
    // AAB6 AA88 ; [.2E98.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER LOW NGO>

    uint32_t const cps[2] = { 0xaab6, 0xaa88 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e98), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

TEST(collation, table_lookup_101_149)
{
    // AAB6 AA89 ; [.2E99.0020.0002][.2EC6.0020.0002] 
    // <TAI VIET VOWEL O, TAI VIET LETTER HIGH NGO>

    uint32_t const cps[2] = { 0xaab6, 0xaa89 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2e99), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2ec6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 2);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_TRUE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(multi_coll.collation_elements_.begin(), multi_coll.collation_elements_.end(), ces, ces + 2));

    EXPECT_FALSE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 0);
}

