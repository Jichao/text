// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfkd_062_000)
{
    // D300;D300;1110 1175 11B7;D300;1110 1175 11B7; 
    // (팀; 팀; 팀; 팀; 팀; ) HANGUL SYLLABLE TIM
    {
        std::array<uint32_t, 1> const source = {{ 0xD300 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_001)
{
    // D301;D301;1110 1175 11B8;D301;1110 1175 11B8; 
    // (팁; 팁; 팁; 팁; 팁; ) HANGUL SYLLABLE TIB
    {
        std::array<uint32_t, 1> const source = {{ 0xD301 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_002)
{
    // D302;D302;1110 1175 11B9;D302;1110 1175 11B9; 
    // (팂; 팂; 팂; 팂; 팂; ) HANGUL SYLLABLE TIBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD302 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_003)
{
    // D303;D303;1110 1175 11BA;D303;1110 1175 11BA; 
    // (팃; 팃; 팃; 팃; 팃; ) HANGUL SYLLABLE TIS
    {
        std::array<uint32_t, 1> const source = {{ 0xD303 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_004)
{
    // D304;D304;1110 1175 11BB;D304;1110 1175 11BB; 
    // (팄; 팄; 팄; 팄; 팄; ) HANGUL SYLLABLE TISS
    {
        std::array<uint32_t, 1> const source = {{ 0xD304 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_005)
{
    // D305;D305;1110 1175 11BC;D305;1110 1175 11BC; 
    // (팅; 팅; 팅; 팅; 팅; ) HANGUL SYLLABLE TING
    {
        std::array<uint32_t, 1> const source = {{ 0xD305 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_006)
{
    // D306;D306;1110 1175 11BD;D306;1110 1175 11BD; 
    // (팆; 팆; 팆; 팆; 팆; ) HANGUL SYLLABLE TIJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD306 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_007)
{
    // D307;D307;1110 1175 11BE;D307;1110 1175 11BE; 
    // (팇; 팇; 팇; 팇; 팇; ) HANGUL SYLLABLE TIC
    {
        std::array<uint32_t, 1> const source = {{ 0xD307 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_008)
{
    // D308;D308;1110 1175 11BF;D308;1110 1175 11BF; 
    // (팈; 팈; 팈; 팈; 팈; ) HANGUL SYLLABLE TIK
    {
        std::array<uint32_t, 1> const source = {{ 0xD308 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_009)
{
    // D309;D309;1110 1175 11C0;D309;1110 1175 11C0; 
    // (팉; 팉; 팉; 팉; 팉; ) HANGUL SYLLABLE TIT
    {
        std::array<uint32_t, 1> const source = {{ 0xD309 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_010)
{
    // D30A;D30A;1110 1175 11C1;D30A;1110 1175 11C1; 
    // (팊; 팊; 팊; 팊; 팊; ) HANGUL SYLLABLE TIP
    {
        std::array<uint32_t, 1> const source = {{ 0xD30A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_011)
{
    // D30B;D30B;1110 1175 11C2;D30B;1110 1175 11C2; 
    // (팋; 팋; 팋; 팋; 팋; ) HANGUL SYLLABLE TIH
    {
        std::array<uint32_t, 1> const source = {{ 0xD30B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1110, 0x1175, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_012)
{
    // D30C;D30C;1111 1161;D30C;1111 1161; 
    // (파; 파; 파; 파; 파; ) HANGUL SYLLABLE PA
    {
        std::array<uint32_t, 1> const source = {{ 0xD30C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1161 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_013)
{
    // D30D;D30D;1111 1161 11A8;D30D;1111 1161 11A8; 
    // (팍; 팍; 팍; 팍; 팍; ) HANGUL SYLLABLE PAG
    {
        std::array<uint32_t, 1> const source = {{ 0xD30D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_014)
{
    // D30E;D30E;1111 1161 11A9;D30E;1111 1161 11A9; 
    // (팎; 팎; 팎; 팎; 팎; ) HANGUL SYLLABLE PAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD30E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_015)
{
    // D30F;D30F;1111 1161 11AA;D30F;1111 1161 11AA; 
    // (팏; 팏; 팏; 팏; 팏; ) HANGUL SYLLABLE PAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD30F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_016)
{
    // D310;D310;1111 1161 11AB;D310;1111 1161 11AB; 
    // (판; 판; 판; 판; 판; ) HANGUL SYLLABLE PAN
    {
        std::array<uint32_t, 1> const source = {{ 0xD310 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_017)
{
    // D311;D311;1111 1161 11AC;D311;1111 1161 11AC; 
    // (팑; 팑; 팑; 팑; 팑; ) HANGUL SYLLABLE PANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD311 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_018)
{
    // D312;D312;1111 1161 11AD;D312;1111 1161 11AD; 
    // (팒; 팒; 팒; 팒; 팒; ) HANGUL SYLLABLE PANH
    {
        std::array<uint32_t, 1> const source = {{ 0xD312 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_019)
{
    // D313;D313;1111 1161 11AE;D313;1111 1161 11AE; 
    // (팓; 팓; 팓; 팓; 팓; ) HANGUL SYLLABLE PAD
    {
        std::array<uint32_t, 1> const source = {{ 0xD313 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_020)
{
    // D314;D314;1111 1161 11AF;D314;1111 1161 11AF; 
    // (팔; 팔; 팔; 팔; 팔; ) HANGUL SYLLABLE PAL
    {
        std::array<uint32_t, 1> const source = {{ 0xD314 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_021)
{
    // D315;D315;1111 1161 11B0;D315;1111 1161 11B0; 
    // (팕; 팕; 팕; 팕; 팕; ) HANGUL SYLLABLE PALG
    {
        std::array<uint32_t, 1> const source = {{ 0xD315 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_022)
{
    // D316;D316;1111 1161 11B1;D316;1111 1161 11B1; 
    // (팖; 팖; 팖; 팖; 팖; ) HANGUL SYLLABLE PALM
    {
        std::array<uint32_t, 1> const source = {{ 0xD316 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_023)
{
    // D317;D317;1111 1161 11B2;D317;1111 1161 11B2; 
    // (팗; 팗; 팗; 팗; 팗; ) HANGUL SYLLABLE PALB
    {
        std::array<uint32_t, 1> const source = {{ 0xD317 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_024)
{
    // D318;D318;1111 1161 11B3;D318;1111 1161 11B3; 
    // (팘; 팘; 팘; 팘; 팘; ) HANGUL SYLLABLE PALS
    {
        std::array<uint32_t, 1> const source = {{ 0xD318 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_025)
{
    // D319;D319;1111 1161 11B4;D319;1111 1161 11B4; 
    // (팙; 팙; 팙; 팙; 팙; ) HANGUL SYLLABLE PALT
    {
        std::array<uint32_t, 1> const source = {{ 0xD319 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_026)
{
    // D31A;D31A;1111 1161 11B5;D31A;1111 1161 11B5; 
    // (팚; 팚; 팚; 팚; 팚; ) HANGUL SYLLABLE PALP
    {
        std::array<uint32_t, 1> const source = {{ 0xD31A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_027)
{
    // D31B;D31B;1111 1161 11B6;D31B;1111 1161 11B6; 
    // (팛; 팛; 팛; 팛; 팛; ) HANGUL SYLLABLE PALH
    {
        std::array<uint32_t, 1> const source = {{ 0xD31B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_028)
{
    // D31C;D31C;1111 1161 11B7;D31C;1111 1161 11B7; 
    // (팜; 팜; 팜; 팜; 팜; ) HANGUL SYLLABLE PAM
    {
        std::array<uint32_t, 1> const source = {{ 0xD31C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_029)
{
    // D31D;D31D;1111 1161 11B8;D31D;1111 1161 11B8; 
    // (팝; 팝; 팝; 팝; 팝; ) HANGUL SYLLABLE PAB
    {
        std::array<uint32_t, 1> const source = {{ 0xD31D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_030)
{
    // D31E;D31E;1111 1161 11B9;D31E;1111 1161 11B9; 
    // (팞; 팞; 팞; 팞; 팞; ) HANGUL SYLLABLE PABS
    {
        std::array<uint32_t, 1> const source = {{ 0xD31E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_031)
{
    // D31F;D31F;1111 1161 11BA;D31F;1111 1161 11BA; 
    // (팟; 팟; 팟; 팟; 팟; ) HANGUL SYLLABLE PAS
    {
        std::array<uint32_t, 1> const source = {{ 0xD31F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_032)
{
    // D320;D320;1111 1161 11BB;D320;1111 1161 11BB; 
    // (팠; 팠; 팠; 팠; 팠; ) HANGUL SYLLABLE PASS
    {
        std::array<uint32_t, 1> const source = {{ 0xD320 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_033)
{
    // D321;D321;1111 1161 11BC;D321;1111 1161 11BC; 
    // (팡; 팡; 팡; 팡; 팡; ) HANGUL SYLLABLE PANG
    {
        std::array<uint32_t, 1> const source = {{ 0xD321 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_034)
{
    // D322;D322;1111 1161 11BD;D322;1111 1161 11BD; 
    // (팢; 팢; 팢; 팢; 팢; ) HANGUL SYLLABLE PAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD322 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_035)
{
    // D323;D323;1111 1161 11BE;D323;1111 1161 11BE; 
    // (팣; 팣; 팣; 팣; 팣; ) HANGUL SYLLABLE PAC
    {
        std::array<uint32_t, 1> const source = {{ 0xD323 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_036)
{
    // D324;D324;1111 1161 11BF;D324;1111 1161 11BF; 
    // (팤; 팤; 팤; 팤; 팤; ) HANGUL SYLLABLE PAK
    {
        std::array<uint32_t, 1> const source = {{ 0xD324 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_037)
{
    // D325;D325;1111 1161 11C0;D325;1111 1161 11C0; 
    // (팥; 팥; 팥; 팥; 팥; ) HANGUL SYLLABLE PAT
    {
        std::array<uint32_t, 1> const source = {{ 0xD325 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_038)
{
    // D326;D326;1111 1161 11C1;D326;1111 1161 11C1; 
    // (팦; 팦; 팦; 팦; 팦; ) HANGUL SYLLABLE PAP
    {
        std::array<uint32_t, 1> const source = {{ 0xD326 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_039)
{
    // D327;D327;1111 1161 11C2;D327;1111 1161 11C2; 
    // (팧; 팧; 팧; 팧; 팧; ) HANGUL SYLLABLE PAH
    {
        std::array<uint32_t, 1> const source = {{ 0xD327 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1161, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_040)
{
    // D328;D328;1111 1162;D328;1111 1162; 
    // (패; 패; 패; 패; 패; ) HANGUL SYLLABLE PAE
    {
        std::array<uint32_t, 1> const source = {{ 0xD328 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1162 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_041)
{
    // D329;D329;1111 1162 11A8;D329;1111 1162 11A8; 
    // (팩; 팩; 팩; 팩; 팩; ) HANGUL SYLLABLE PAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD329 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_042)
{
    // D32A;D32A;1111 1162 11A9;D32A;1111 1162 11A9; 
    // (팪; 팪; 팪; 팪; 팪; ) HANGUL SYLLABLE PAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD32A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_043)
{
    // D32B;D32B;1111 1162 11AA;D32B;1111 1162 11AA; 
    // (팫; 팫; 팫; 팫; 팫; ) HANGUL SYLLABLE PAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD32B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_044)
{
    // D32C;D32C;1111 1162 11AB;D32C;1111 1162 11AB; 
    // (팬; 팬; 팬; 팬; 팬; ) HANGUL SYLLABLE PAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD32C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_045)
{
    // D32D;D32D;1111 1162 11AC;D32D;1111 1162 11AC; 
    // (팭; 팭; 팭; 팭; 팭; ) HANGUL SYLLABLE PAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD32D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_046)
{
    // D32E;D32E;1111 1162 11AD;D32E;1111 1162 11AD; 
    // (팮; 팮; 팮; 팮; 팮; ) HANGUL SYLLABLE PAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD32E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_047)
{
    // D32F;D32F;1111 1162 11AE;D32F;1111 1162 11AE; 
    // (팯; 팯; 팯; 팯; 팯; ) HANGUL SYLLABLE PAED
    {
        std::array<uint32_t, 1> const source = {{ 0xD32F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_048)
{
    // D330;D330;1111 1162 11AF;D330;1111 1162 11AF; 
    // (팰; 팰; 팰; 팰; 팰; ) HANGUL SYLLABLE PAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD330 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_049)
{
    // D331;D331;1111 1162 11B0;D331;1111 1162 11B0; 
    // (팱; 팱; 팱; 팱; 팱; ) HANGUL SYLLABLE PAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD331 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_050)
{
    // D332;D332;1111 1162 11B1;D332;1111 1162 11B1; 
    // (팲; 팲; 팲; 팲; 팲; ) HANGUL SYLLABLE PAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD332 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_051)
{
    // D333;D333;1111 1162 11B2;D333;1111 1162 11B2; 
    // (팳; 팳; 팳; 팳; 팳; ) HANGUL SYLLABLE PAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD333 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_052)
{
    // D334;D334;1111 1162 11B3;D334;1111 1162 11B3; 
    // (팴; 팴; 팴; 팴; 팴; ) HANGUL SYLLABLE PAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD334 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_053)
{
    // D335;D335;1111 1162 11B4;D335;1111 1162 11B4; 
    // (팵; 팵; 팵; 팵; 팵; ) HANGUL SYLLABLE PAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD335 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_054)
{
    // D336;D336;1111 1162 11B5;D336;1111 1162 11B5; 
    // (팶; 팶; 팶; 팶; 팶; ) HANGUL SYLLABLE PAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD336 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_055)
{
    // D337;D337;1111 1162 11B6;D337;1111 1162 11B6; 
    // (팷; 팷; 팷; 팷; 팷; ) HANGUL SYLLABLE PAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD337 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_056)
{
    // D338;D338;1111 1162 11B7;D338;1111 1162 11B7; 
    // (팸; 팸; 팸; 팸; 팸; ) HANGUL SYLLABLE PAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD338 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_057)
{
    // D339;D339;1111 1162 11B8;D339;1111 1162 11B8; 
    // (팹; 팹; 팹; 팹; 팹; ) HANGUL SYLLABLE PAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD339 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_058)
{
    // D33A;D33A;1111 1162 11B9;D33A;1111 1162 11B9; 
    // (팺; 팺; 팺; 팺; 팺; ) HANGUL SYLLABLE PAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD33A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_059)
{
    // D33B;D33B;1111 1162 11BA;D33B;1111 1162 11BA; 
    // (팻; 팻; 팻; 팻; 팻; ) HANGUL SYLLABLE PAES
    {
        std::array<uint32_t, 1> const source = {{ 0xD33B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_060)
{
    // D33C;D33C;1111 1162 11BB;D33C;1111 1162 11BB; 
    // (팼; 팼; 팼; 팼; 팼; ) HANGUL SYLLABLE PAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD33C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_061)
{
    // D33D;D33D;1111 1162 11BC;D33D;1111 1162 11BC; 
    // (팽; 팽; 팽; 팽; 팽; ) HANGUL SYLLABLE PAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD33D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_062)
{
    // D33E;D33E;1111 1162 11BD;D33E;1111 1162 11BD; 
    // (팾; 팾; 팾; 팾; 팾; ) HANGUL SYLLABLE PAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD33E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_063)
{
    // D33F;D33F;1111 1162 11BE;D33F;1111 1162 11BE; 
    // (팿; 팿; 팿; 팿; 팿; ) HANGUL SYLLABLE PAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD33F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_064)
{
    // D340;D340;1111 1162 11BF;D340;1111 1162 11BF; 
    // (퍀; 퍀; 퍀; 퍀; 퍀; ) HANGUL SYLLABLE PAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD340 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_065)
{
    // D341;D341;1111 1162 11C0;D341;1111 1162 11C0; 
    // (퍁; 퍁; 퍁; 퍁; 퍁; ) HANGUL SYLLABLE PAET
    {
        std::array<uint32_t, 1> const source = {{ 0xD341 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_066)
{
    // D342;D342;1111 1162 11C1;D342;1111 1162 11C1; 
    // (퍂; 퍂; 퍂; 퍂; 퍂; ) HANGUL SYLLABLE PAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD342 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_067)
{
    // D343;D343;1111 1162 11C2;D343;1111 1162 11C2; 
    // (퍃; 퍃; 퍃; 퍃; 퍃; ) HANGUL SYLLABLE PAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD343 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1162, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_068)
{
    // D344;D344;1111 1163;D344;1111 1163; 
    // (퍄; 퍄; 퍄; 퍄; 퍄; ) HANGUL SYLLABLE PYA
    {
        std::array<uint32_t, 1> const source = {{ 0xD344 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1163 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_069)
{
    // D345;D345;1111 1163 11A8;D345;1111 1163 11A8; 
    // (퍅; 퍅; 퍅; 퍅; 퍅; ) HANGUL SYLLABLE PYAG
    {
        std::array<uint32_t, 1> const source = {{ 0xD345 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_070)
{
    // D346;D346;1111 1163 11A9;D346;1111 1163 11A9; 
    // (퍆; 퍆; 퍆; 퍆; 퍆; ) HANGUL SYLLABLE PYAGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD346 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_071)
{
    // D347;D347;1111 1163 11AA;D347;1111 1163 11AA; 
    // (퍇; 퍇; 퍇; 퍇; 퍇; ) HANGUL SYLLABLE PYAGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD347 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_072)
{
    // D348;D348;1111 1163 11AB;D348;1111 1163 11AB; 
    // (퍈; 퍈; 퍈; 퍈; 퍈; ) HANGUL SYLLABLE PYAN
    {
        std::array<uint32_t, 1> const source = {{ 0xD348 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_073)
{
    // D349;D349;1111 1163 11AC;D349;1111 1163 11AC; 
    // (퍉; 퍉; 퍉; 퍉; 퍉; ) HANGUL SYLLABLE PYANJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD349 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_074)
{
    // D34A;D34A;1111 1163 11AD;D34A;1111 1163 11AD; 
    // (퍊; 퍊; 퍊; 퍊; 퍊; ) HANGUL SYLLABLE PYANH
    {
        std::array<uint32_t, 1> const source = {{ 0xD34A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_075)
{
    // D34B;D34B;1111 1163 11AE;D34B;1111 1163 11AE; 
    // (퍋; 퍋; 퍋; 퍋; 퍋; ) HANGUL SYLLABLE PYAD
    {
        std::array<uint32_t, 1> const source = {{ 0xD34B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_076)
{
    // D34C;D34C;1111 1163 11AF;D34C;1111 1163 11AF; 
    // (퍌; 퍌; 퍌; 퍌; 퍌; ) HANGUL SYLLABLE PYAL
    {
        std::array<uint32_t, 1> const source = {{ 0xD34C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_077)
{
    // D34D;D34D;1111 1163 11B0;D34D;1111 1163 11B0; 
    // (퍍; 퍍; 퍍; 퍍; 퍍; ) HANGUL SYLLABLE PYALG
    {
        std::array<uint32_t, 1> const source = {{ 0xD34D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_078)
{
    // D34E;D34E;1111 1163 11B1;D34E;1111 1163 11B1; 
    // (퍎; 퍎; 퍎; 퍎; 퍎; ) HANGUL SYLLABLE PYALM
    {
        std::array<uint32_t, 1> const source = {{ 0xD34E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_079)
{
    // D34F;D34F;1111 1163 11B2;D34F;1111 1163 11B2; 
    // (퍏; 퍏; 퍏; 퍏; 퍏; ) HANGUL SYLLABLE PYALB
    {
        std::array<uint32_t, 1> const source = {{ 0xD34F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_080)
{
    // D350;D350;1111 1163 11B3;D350;1111 1163 11B3; 
    // (퍐; 퍐; 퍐; 퍐; 퍐; ) HANGUL SYLLABLE PYALS
    {
        std::array<uint32_t, 1> const source = {{ 0xD350 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_081)
{
    // D351;D351;1111 1163 11B4;D351;1111 1163 11B4; 
    // (퍑; 퍑; 퍑; 퍑; 퍑; ) HANGUL SYLLABLE PYALT
    {
        std::array<uint32_t, 1> const source = {{ 0xD351 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_082)
{
    // D352;D352;1111 1163 11B5;D352;1111 1163 11B5; 
    // (퍒; 퍒; 퍒; 퍒; 퍒; ) HANGUL SYLLABLE PYALP
    {
        std::array<uint32_t, 1> const source = {{ 0xD352 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_083)
{
    // D353;D353;1111 1163 11B6;D353;1111 1163 11B6; 
    // (퍓; 퍓; 퍓; 퍓; 퍓; ) HANGUL SYLLABLE PYALH
    {
        std::array<uint32_t, 1> const source = {{ 0xD353 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_084)
{
    // D354;D354;1111 1163 11B7;D354;1111 1163 11B7; 
    // (퍔; 퍔; 퍔; 퍔; 퍔; ) HANGUL SYLLABLE PYAM
    {
        std::array<uint32_t, 1> const source = {{ 0xD354 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_085)
{
    // D355;D355;1111 1163 11B8;D355;1111 1163 11B8; 
    // (퍕; 퍕; 퍕; 퍕; 퍕; ) HANGUL SYLLABLE PYAB
    {
        std::array<uint32_t, 1> const source = {{ 0xD355 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_086)
{
    // D356;D356;1111 1163 11B9;D356;1111 1163 11B9; 
    // (퍖; 퍖; 퍖; 퍖; 퍖; ) HANGUL SYLLABLE PYABS
    {
        std::array<uint32_t, 1> const source = {{ 0xD356 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_087)
{
    // D357;D357;1111 1163 11BA;D357;1111 1163 11BA; 
    // (퍗; 퍗; 퍗; 퍗; 퍗; ) HANGUL SYLLABLE PYAS
    {
        std::array<uint32_t, 1> const source = {{ 0xD357 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_088)
{
    // D358;D358;1111 1163 11BB;D358;1111 1163 11BB; 
    // (퍘; 퍘; 퍘; 퍘; 퍘; ) HANGUL SYLLABLE PYASS
    {
        std::array<uint32_t, 1> const source = {{ 0xD358 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_089)
{
    // D359;D359;1111 1163 11BC;D359;1111 1163 11BC; 
    // (퍙; 퍙; 퍙; 퍙; 퍙; ) HANGUL SYLLABLE PYANG
    {
        std::array<uint32_t, 1> const source = {{ 0xD359 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_090)
{
    // D35A;D35A;1111 1163 11BD;D35A;1111 1163 11BD; 
    // (퍚; 퍚; 퍚; 퍚; 퍚; ) HANGUL SYLLABLE PYAJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD35A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_091)
{
    // D35B;D35B;1111 1163 11BE;D35B;1111 1163 11BE; 
    // (퍛; 퍛; 퍛; 퍛; 퍛; ) HANGUL SYLLABLE PYAC
    {
        std::array<uint32_t, 1> const source = {{ 0xD35B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_092)
{
    // D35C;D35C;1111 1163 11BF;D35C;1111 1163 11BF; 
    // (퍜; 퍜; 퍜; 퍜; 퍜; ) HANGUL SYLLABLE PYAK
    {
        std::array<uint32_t, 1> const source = {{ 0xD35C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_093)
{
    // D35D;D35D;1111 1163 11C0;D35D;1111 1163 11C0; 
    // (퍝; 퍝; 퍝; 퍝; 퍝; ) HANGUL SYLLABLE PYAT
    {
        std::array<uint32_t, 1> const source = {{ 0xD35D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_094)
{
    // D35E;D35E;1111 1163 11C1;D35E;1111 1163 11C1; 
    // (퍞; 퍞; 퍞; 퍞; 퍞; ) HANGUL SYLLABLE PYAP
    {
        std::array<uint32_t, 1> const source = {{ 0xD35E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_095)
{
    // D35F;D35F;1111 1163 11C2;D35F;1111 1163 11C2; 
    // (퍟; 퍟; 퍟; 퍟; 퍟; ) HANGUL SYLLABLE PYAH
    {
        std::array<uint32_t, 1> const source = {{ 0xD35F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1163, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_096)
{
    // D360;D360;1111 1164;D360;1111 1164; 
    // (퍠; 퍠; 퍠; 퍠; 퍠; ) HANGUL SYLLABLE PYAE
    {
        std::array<uint32_t, 1> const source = {{ 0xD360 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1164 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_097)
{
    // D361;D361;1111 1164 11A8;D361;1111 1164 11A8; 
    // (퍡; 퍡; 퍡; 퍡; 퍡; ) HANGUL SYLLABLE PYAEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD361 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_098)
{
    // D362;D362;1111 1164 11A9;D362;1111 1164 11A9; 
    // (퍢; 퍢; 퍢; 퍢; 퍢; ) HANGUL SYLLABLE PYAEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD362 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_099)
{
    // D363;D363;1111 1164 11AA;D363;1111 1164 11AA; 
    // (퍣; 퍣; 퍣; 퍣; 퍣; ) HANGUL SYLLABLE PYAEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD363 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_100)
{
    // D364;D364;1111 1164 11AB;D364;1111 1164 11AB; 
    // (퍤; 퍤; 퍤; 퍤; 퍤; ) HANGUL SYLLABLE PYAEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD364 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_101)
{
    // D365;D365;1111 1164 11AC;D365;1111 1164 11AC; 
    // (퍥; 퍥; 퍥; 퍥; 퍥; ) HANGUL SYLLABLE PYAENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD365 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_102)
{
    // D366;D366;1111 1164 11AD;D366;1111 1164 11AD; 
    // (퍦; 퍦; 퍦; 퍦; 퍦; ) HANGUL SYLLABLE PYAENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD366 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_103)
{
    // D367;D367;1111 1164 11AE;D367;1111 1164 11AE; 
    // (퍧; 퍧; 퍧; 퍧; 퍧; ) HANGUL SYLLABLE PYAED
    {
        std::array<uint32_t, 1> const source = {{ 0xD367 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_104)
{
    // D368;D368;1111 1164 11AF;D368;1111 1164 11AF; 
    // (퍨; 퍨; 퍨; 퍨; 퍨; ) HANGUL SYLLABLE PYAEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD368 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_105)
{
    // D369;D369;1111 1164 11B0;D369;1111 1164 11B0; 
    // (퍩; 퍩; 퍩; 퍩; 퍩; ) HANGUL SYLLABLE PYAELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD369 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_106)
{
    // D36A;D36A;1111 1164 11B1;D36A;1111 1164 11B1; 
    // (퍪; 퍪; 퍪; 퍪; 퍪; ) HANGUL SYLLABLE PYAELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD36A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_107)
{
    // D36B;D36B;1111 1164 11B2;D36B;1111 1164 11B2; 
    // (퍫; 퍫; 퍫; 퍫; 퍫; ) HANGUL SYLLABLE PYAELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD36B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_108)
{
    // D36C;D36C;1111 1164 11B3;D36C;1111 1164 11B3; 
    // (퍬; 퍬; 퍬; 퍬; 퍬; ) HANGUL SYLLABLE PYAELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD36C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_109)
{
    // D36D;D36D;1111 1164 11B4;D36D;1111 1164 11B4; 
    // (퍭; 퍭; 퍭; 퍭; 퍭; ) HANGUL SYLLABLE PYAELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD36D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_110)
{
    // D36E;D36E;1111 1164 11B5;D36E;1111 1164 11B5; 
    // (퍮; 퍮; 퍮; 퍮; 퍮; ) HANGUL SYLLABLE PYAELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD36E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_111)
{
    // D36F;D36F;1111 1164 11B6;D36F;1111 1164 11B6; 
    // (퍯; 퍯; 퍯; 퍯; 퍯; ) HANGUL SYLLABLE PYAELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD36F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_112)
{
    // D370;D370;1111 1164 11B7;D370;1111 1164 11B7; 
    // (퍰; 퍰; 퍰; 퍰; 퍰; ) HANGUL SYLLABLE PYAEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD370 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_113)
{
    // D371;D371;1111 1164 11B8;D371;1111 1164 11B8; 
    // (퍱; 퍱; 퍱; 퍱; 퍱; ) HANGUL SYLLABLE PYAEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD371 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_114)
{
    // D372;D372;1111 1164 11B9;D372;1111 1164 11B9; 
    // (퍲; 퍲; 퍲; 퍲; 퍲; ) HANGUL SYLLABLE PYAEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD372 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_115)
{
    // D373;D373;1111 1164 11BA;D373;1111 1164 11BA; 
    // (퍳; 퍳; 퍳; 퍳; 퍳; ) HANGUL SYLLABLE PYAES
    {
        std::array<uint32_t, 1> const source = {{ 0xD373 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_116)
{
    // D374;D374;1111 1164 11BB;D374;1111 1164 11BB; 
    // (퍴; 퍴; 퍴; 퍴; 퍴; ) HANGUL SYLLABLE PYAESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD374 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_117)
{
    // D375;D375;1111 1164 11BC;D375;1111 1164 11BC; 
    // (퍵; 퍵; 퍵; 퍵; 퍵; ) HANGUL SYLLABLE PYAENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD375 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_118)
{
    // D376;D376;1111 1164 11BD;D376;1111 1164 11BD; 
    // (퍶; 퍶; 퍶; 퍶; 퍶; ) HANGUL SYLLABLE PYAEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD376 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_119)
{
    // D377;D377;1111 1164 11BE;D377;1111 1164 11BE; 
    // (퍷; 퍷; 퍷; 퍷; 퍷; ) HANGUL SYLLABLE PYAEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD377 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_120)
{
    // D378;D378;1111 1164 11BF;D378;1111 1164 11BF; 
    // (퍸; 퍸; 퍸; 퍸; 퍸; ) HANGUL SYLLABLE PYAEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD378 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_121)
{
    // D379;D379;1111 1164 11C0;D379;1111 1164 11C0; 
    // (퍹; 퍹; 퍹; 퍹; 퍹; ) HANGUL SYLLABLE PYAET
    {
        std::array<uint32_t, 1> const source = {{ 0xD379 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_122)
{
    // D37A;D37A;1111 1164 11C1;D37A;1111 1164 11C1; 
    // (퍺; 퍺; 퍺; 퍺; 퍺; ) HANGUL SYLLABLE PYAEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD37A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_123)
{
    // D37B;D37B;1111 1164 11C2;D37B;1111 1164 11C2; 
    // (퍻; 퍻; 퍻; 퍻; 퍻; ) HANGUL SYLLABLE PYAEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD37B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1164, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_124)
{
    // D37C;D37C;1111 1165;D37C;1111 1165; 
    // (퍼; 퍼; 퍼; 퍼; 퍼; ) HANGUL SYLLABLE PEO
    {
        std::array<uint32_t, 1> const source = {{ 0xD37C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1165 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_125)
{
    // D37D;D37D;1111 1165 11A8;D37D;1111 1165 11A8; 
    // (퍽; 퍽; 퍽; 퍽; 퍽; ) HANGUL SYLLABLE PEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xD37D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_126)
{
    // D37E;D37E;1111 1165 11A9;D37E;1111 1165 11A9; 
    // (퍾; 퍾; 퍾; 퍾; 퍾; ) HANGUL SYLLABLE PEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD37E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_127)
{
    // D37F;D37F;1111 1165 11AA;D37F;1111 1165 11AA; 
    // (퍿; 퍿; 퍿; 퍿; 퍿; ) HANGUL SYLLABLE PEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD37F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_128)
{
    // D380;D380;1111 1165 11AB;D380;1111 1165 11AB; 
    // (펀; 펀; 펀; 펀; 펀; ) HANGUL SYLLABLE PEON
    {
        std::array<uint32_t, 1> const source = {{ 0xD380 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_129)
{
    // D381;D381;1111 1165 11AC;D381;1111 1165 11AC; 
    // (펁; 펁; 펁; 펁; 펁; ) HANGUL SYLLABLE PEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD381 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_130)
{
    // D382;D382;1111 1165 11AD;D382;1111 1165 11AD; 
    // (펂; 펂; 펂; 펂; 펂; ) HANGUL SYLLABLE PEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xD382 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_131)
{
    // D383;D383;1111 1165 11AE;D383;1111 1165 11AE; 
    // (펃; 펃; 펃; 펃; 펃; ) HANGUL SYLLABLE PEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xD383 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_132)
{
    // D384;D384;1111 1165 11AF;D384;1111 1165 11AF; 
    // (펄; 펄; 펄; 펄; 펄; ) HANGUL SYLLABLE PEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xD384 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_133)
{
    // D385;D385;1111 1165 11B0;D385;1111 1165 11B0; 
    // (펅; 펅; 펅; 펅; 펅; ) HANGUL SYLLABLE PEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xD385 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_134)
{
    // D386;D386;1111 1165 11B1;D386;1111 1165 11B1; 
    // (펆; 펆; 펆; 펆; 펆; ) HANGUL SYLLABLE PEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xD386 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_135)
{
    // D387;D387;1111 1165 11B2;D387;1111 1165 11B2; 
    // (펇; 펇; 펇; 펇; 펇; ) HANGUL SYLLABLE PEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xD387 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_136)
{
    // D388;D388;1111 1165 11B3;D388;1111 1165 11B3; 
    // (펈; 펈; 펈; 펈; 펈; ) HANGUL SYLLABLE PEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xD388 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_137)
{
    // D389;D389;1111 1165 11B4;D389;1111 1165 11B4; 
    // (펉; 펉; 펉; 펉; 펉; ) HANGUL SYLLABLE PEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xD389 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_138)
{
    // D38A;D38A;1111 1165 11B5;D38A;1111 1165 11B5; 
    // (펊; 펊; 펊; 펊; 펊; ) HANGUL SYLLABLE PEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xD38A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_139)
{
    // D38B;D38B;1111 1165 11B6;D38B;1111 1165 11B6; 
    // (펋; 펋; 펋; 펋; 펋; ) HANGUL SYLLABLE PEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xD38B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_140)
{
    // D38C;D38C;1111 1165 11B7;D38C;1111 1165 11B7; 
    // (펌; 펌; 펌; 펌; 펌; ) HANGUL SYLLABLE PEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xD38C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_141)
{
    // D38D;D38D;1111 1165 11B8;D38D;1111 1165 11B8; 
    // (펍; 펍; 펍; 펍; 펍; ) HANGUL SYLLABLE PEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xD38D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_142)
{
    // D38E;D38E;1111 1165 11B9;D38E;1111 1165 11B9; 
    // (펎; 펎; 펎; 펎; 펎; ) HANGUL SYLLABLE PEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD38E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_143)
{
    // D38F;D38F;1111 1165 11BA;D38F;1111 1165 11BA; 
    // (펏; 펏; 펏; 펏; 펏; ) HANGUL SYLLABLE PEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xD38F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_144)
{
    // D390;D390;1111 1165 11BB;D390;1111 1165 11BB; 
    // (펐; 펐; 펐; 펐; 펐; ) HANGUL SYLLABLE PEOSS
    {
        std::array<uint32_t, 1> const source = {{ 0xD390 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_145)
{
    // D391;D391;1111 1165 11BC;D391;1111 1165 11BC; 
    // (펑; 펑; 펑; 펑; 펑; ) HANGUL SYLLABLE PEONG
    {
        std::array<uint32_t, 1> const source = {{ 0xD391 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_146)
{
    // D392;D392;1111 1165 11BD;D392;1111 1165 11BD; 
    // (펒; 펒; 펒; 펒; 펒; ) HANGUL SYLLABLE PEOJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD392 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_147)
{
    // D393;D393;1111 1165 11BE;D393;1111 1165 11BE; 
    // (펓; 펓; 펓; 펓; 펓; ) HANGUL SYLLABLE PEOC
    {
        std::array<uint32_t, 1> const source = {{ 0xD393 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_148)
{
    // D394;D394;1111 1165 11BF;D394;1111 1165 11BF; 
    // (펔; 펔; 펔; 펔; 펔; ) HANGUL SYLLABLE PEOK
    {
        std::array<uint32_t, 1> const source = {{ 0xD394 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_149)
{
    // D395;D395;1111 1165 11C0;D395;1111 1165 11C0; 
    // (펕; 펕; 펕; 펕; 펕; ) HANGUL SYLLABLE PEOT
    {
        std::array<uint32_t, 1> const source = {{ 0xD395 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_150)
{
    // D396;D396;1111 1165 11C1;D396;1111 1165 11C1; 
    // (펖; 펖; 펖; 펖; 펖; ) HANGUL SYLLABLE PEOP
    {
        std::array<uint32_t, 1> const source = {{ 0xD396 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_151)
{
    // D397;D397;1111 1165 11C2;D397;1111 1165 11C2; 
    // (펗; 펗; 펗; 펗; 펗; ) HANGUL SYLLABLE PEOH
    {
        std::array<uint32_t, 1> const source = {{ 0xD397 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1165, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_152)
{
    // D398;D398;1111 1166;D398;1111 1166; 
    // (페; 페; 페; 페; 페; ) HANGUL SYLLABLE PE
    {
        std::array<uint32_t, 1> const source = {{ 0xD398 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1166 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_153)
{
    // D399;D399;1111 1166 11A8;D399;1111 1166 11A8; 
    // (펙; 펙; 펙; 펙; 펙; ) HANGUL SYLLABLE PEG
    {
        std::array<uint32_t, 1> const source = {{ 0xD399 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_154)
{
    // D39A;D39A;1111 1166 11A9;D39A;1111 1166 11A9; 
    // (펚; 펚; 펚; 펚; 펚; ) HANGUL SYLLABLE PEGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD39A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_155)
{
    // D39B;D39B;1111 1166 11AA;D39B;1111 1166 11AA; 
    // (펛; 펛; 펛; 펛; 펛; ) HANGUL SYLLABLE PEGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD39B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_156)
{
    // D39C;D39C;1111 1166 11AB;D39C;1111 1166 11AB; 
    // (펜; 펜; 펜; 펜; 펜; ) HANGUL SYLLABLE PEN
    {
        std::array<uint32_t, 1> const source = {{ 0xD39C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_157)
{
    // D39D;D39D;1111 1166 11AC;D39D;1111 1166 11AC; 
    // (펝; 펝; 펝; 펝; 펝; ) HANGUL SYLLABLE PENJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD39D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_158)
{
    // D39E;D39E;1111 1166 11AD;D39E;1111 1166 11AD; 
    // (펞; 펞; 펞; 펞; 펞; ) HANGUL SYLLABLE PENH
    {
        std::array<uint32_t, 1> const source = {{ 0xD39E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_159)
{
    // D39F;D39F;1111 1166 11AE;D39F;1111 1166 11AE; 
    // (펟; 펟; 펟; 펟; 펟; ) HANGUL SYLLABLE PED
    {
        std::array<uint32_t, 1> const source = {{ 0xD39F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_160)
{
    // D3A0;D3A0;1111 1166 11AF;D3A0;1111 1166 11AF; 
    // (펠; 펠; 펠; 펠; 펠; ) HANGUL SYLLABLE PEL
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_161)
{
    // D3A1;D3A1;1111 1166 11B0;D3A1;1111 1166 11B0; 
    // (펡; 펡; 펡; 펡; 펡; ) HANGUL SYLLABLE PELG
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_162)
{
    // D3A2;D3A2;1111 1166 11B1;D3A2;1111 1166 11B1; 
    // (펢; 펢; 펢; 펢; 펢; ) HANGUL SYLLABLE PELM
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_163)
{
    // D3A3;D3A3;1111 1166 11B2;D3A3;1111 1166 11B2; 
    // (펣; 펣; 펣; 펣; 펣; ) HANGUL SYLLABLE PELB
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_164)
{
    // D3A4;D3A4;1111 1166 11B3;D3A4;1111 1166 11B3; 
    // (펤; 펤; 펤; 펤; 펤; ) HANGUL SYLLABLE PELS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_165)
{
    // D3A5;D3A5;1111 1166 11B4;D3A5;1111 1166 11B4; 
    // (펥; 펥; 펥; 펥; 펥; ) HANGUL SYLLABLE PELT
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_166)
{
    // D3A6;D3A6;1111 1166 11B5;D3A6;1111 1166 11B5; 
    // (펦; 펦; 펦; 펦; 펦; ) HANGUL SYLLABLE PELP
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_167)
{
    // D3A7;D3A7;1111 1166 11B6;D3A7;1111 1166 11B6; 
    // (펧; 펧; 펧; 펧; 펧; ) HANGUL SYLLABLE PELH
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_168)
{
    // D3A8;D3A8;1111 1166 11B7;D3A8;1111 1166 11B7; 
    // (펨; 펨; 펨; 펨; 펨; ) HANGUL SYLLABLE PEM
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_169)
{
    // D3A9;D3A9;1111 1166 11B8;D3A9;1111 1166 11B8; 
    // (펩; 펩; 펩; 펩; 펩; ) HANGUL SYLLABLE PEB
    {
        std::array<uint32_t, 1> const source = {{ 0xD3A9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_170)
{
    // D3AA;D3AA;1111 1166 11B9;D3AA;1111 1166 11B9; 
    // (펪; 펪; 펪; 펪; 펪; ) HANGUL SYLLABLE PEBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_171)
{
    // D3AB;D3AB;1111 1166 11BA;D3AB;1111 1166 11BA; 
    // (펫; 펫; 펫; 펫; 펫; ) HANGUL SYLLABLE PES
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_172)
{
    // D3AC;D3AC;1111 1166 11BB;D3AC;1111 1166 11BB; 
    // (펬; 펬; 펬; 펬; 펬; ) HANGUL SYLLABLE PESS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_173)
{
    // D3AD;D3AD;1111 1166 11BC;D3AD;1111 1166 11BC; 
    // (펭; 펭; 펭; 펭; 펭; ) HANGUL SYLLABLE PENG
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_174)
{
    // D3AE;D3AE;1111 1166 11BD;D3AE;1111 1166 11BD; 
    // (펮; 펮; 펮; 펮; 펮; ) HANGUL SYLLABLE PEJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_175)
{
    // D3AF;D3AF;1111 1166 11BE;D3AF;1111 1166 11BE; 
    // (펯; 펯; 펯; 펯; 펯; ) HANGUL SYLLABLE PEC
    {
        std::array<uint32_t, 1> const source = {{ 0xD3AF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_176)
{
    // D3B0;D3B0;1111 1166 11BF;D3B0;1111 1166 11BF; 
    // (펰; 펰; 펰; 펰; 펰; ) HANGUL SYLLABLE PEK
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11BF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_177)
{
    // D3B1;D3B1;1111 1166 11C0;D3B1;1111 1166 11C0; 
    // (펱; 펱; 펱; 펱; 펱; ) HANGUL SYLLABLE PET
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11C0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_178)
{
    // D3B2;D3B2;1111 1166 11C1;D3B2;1111 1166 11C1; 
    // (펲; 펲; 펲; 펲; 펲; ) HANGUL SYLLABLE PEP
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11C1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_179)
{
    // D3B3;D3B3;1111 1166 11C2;D3B3;1111 1166 11C2; 
    // (펳; 펳; 펳; 펳; 펳; ) HANGUL SYLLABLE PEH
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1166, 0x11C2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_180)
{
    // D3B4;D3B4;1111 1167;D3B4;1111 1167; 
    // (펴; 펴; 펴; 펴; 펴; ) HANGUL SYLLABLE PYEO
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 2> const dest = {{ 0x1111, 0x1167 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_181)
{
    // D3B5;D3B5;1111 1167 11A8;D3B5;1111 1167 11A8; 
    // (펵; 펵; 펵; 펵; 펵; ) HANGUL SYLLABLE PYEOG
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11A8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_182)
{
    // D3B6;D3B6;1111 1167 11A9;D3B6;1111 1167 11A9; 
    // (펶; 펶; 펶; 펶; 펶; ) HANGUL SYLLABLE PYEOGG
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11A9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_183)
{
    // D3B7;D3B7;1111 1167 11AA;D3B7;1111 1167 11AA; 
    // (펷; 펷; 펷; 펷; 펷; ) HANGUL SYLLABLE PYEOGS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_184)
{
    // D3B8;D3B8;1111 1167 11AB;D3B8;1111 1167 11AB; 
    // (편; 편; 편; 편; 편; ) HANGUL SYLLABLE PYEON
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AB }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_185)
{
    // D3B9;D3B9;1111 1167 11AC;D3B9;1111 1167 11AC; 
    // (펹; 펹; 펹; 펹; 펹; ) HANGUL SYLLABLE PYEONJ
    {
        std::array<uint32_t, 1> const source = {{ 0xD3B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AC }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_186)
{
    // D3BA;D3BA;1111 1167 11AD;D3BA;1111 1167 11AD; 
    // (펺; 펺; 펺; 펺; 펺; ) HANGUL SYLLABLE PYEONH
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AD }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_187)
{
    // D3BB;D3BB;1111 1167 11AE;D3BB;1111 1167 11AE; 
    // (펻; 펻; 펻; 펻; 펻; ) HANGUL SYLLABLE PYEOD
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AE }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_188)
{
    // D3BC;D3BC;1111 1167 11AF;D3BC;1111 1167 11AF; 
    // (펼; 펼; 펼; 펼; 펼; ) HANGUL SYLLABLE PYEOL
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11AF }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_189)
{
    // D3BD;D3BD;1111 1167 11B0;D3BD;1111 1167 11B0; 
    // (펽; 펽; 펽; 펽; 펽; ) HANGUL SYLLABLE PYEOLG
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B0 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_190)
{
    // D3BE;D3BE;1111 1167 11B1;D3BE;1111 1167 11B1; 
    // (펾; 펾; 펾; 펾; 펾; ) HANGUL SYLLABLE PYEOLM
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B1 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_191)
{
    // D3BF;D3BF;1111 1167 11B2;D3BF;1111 1167 11B2; 
    // (펿; 펿; 펿; 펿; 펿; ) HANGUL SYLLABLE PYEOLB
    {
        std::array<uint32_t, 1> const source = {{ 0xD3BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B2 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_192)
{
    // D3C0;D3C0;1111 1167 11B3;D3C0;1111 1167 11B3; 
    // (폀; 폀; 폀; 폀; 폀; ) HANGUL SYLLABLE PYEOLS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B3 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_193)
{
    // D3C1;D3C1;1111 1167 11B4;D3C1;1111 1167 11B4; 
    // (폁; 폁; 폁; 폁; 폁; ) HANGUL SYLLABLE PYEOLT
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B4 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_194)
{
    // D3C2;D3C2;1111 1167 11B5;D3C2;1111 1167 11B5; 
    // (폂; 폂; 폂; 폂; 폂; ) HANGUL SYLLABLE PYEOLP
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B5 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_195)
{
    // D3C3;D3C3;1111 1167 11B6;D3C3;1111 1167 11B6; 
    // (폃; 폃; 폃; 폃; 폃; ) HANGUL SYLLABLE PYEOLH
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B6 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_196)
{
    // D3C4;D3C4;1111 1167 11B7;D3C4;1111 1167 11B7; 
    // (폄; 폄; 폄; 폄; 폄; ) HANGUL SYLLABLE PYEOM
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B7 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_197)
{
    // D3C5;D3C5;1111 1167 11B8;D3C5;1111 1167 11B8; 
    // (폅; 폅; 폅; 폅; 폅; ) HANGUL SYLLABLE PYEOB
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B8 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_198)
{
    // D3C6;D3C6;1111 1167 11B9;D3C6;1111 1167 11B9; 
    // (폆; 폆; 폆; 폆; 폆; ) HANGUL SYLLABLE PYEOBS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11B9 }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfkd_062_199)
{
    // D3C7;D3C7;1111 1167 11BA;D3C7;1111 1167 11BA; 
    // (폇; 폇; 폇; 폇; 폇; ) HANGUL SYLLABLE PYEOS
    {
        std::array<uint32_t, 1> const source = {{ 0xD3C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 3> const dest = {{ 0x1111, 0x1167, 0x11BA }};

        boost::text::normalize_to_nfkd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


