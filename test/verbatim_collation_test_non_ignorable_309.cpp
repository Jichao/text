// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_309_000)
{
    // 14474 003F;	
    // (𔑴) ANATOLIAN HIEROGLYPH A102A	[5508 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14474, 0x003F };
    uint32_t const ces[9] = { 0x5508, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_001)
{
    // 14474 0061;	
    // (𔑴) ANATOLIAN HIEROGLYPH A102A	[5508 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14474, 0x0061 };
    uint32_t const ces[9] = { 0x5508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_002)
{
    // 14474 0041;	
    // (𔑴) ANATOLIAN HIEROGLYPH A102A	[5508 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14474, 0x0041 };
    uint32_t const ces[9] = { 0x5508, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_003)
{
    // 14474 0062;	
    // (𔑴) ANATOLIAN HIEROGLYPH A102A	[5508 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14474, 0x0062 };
    uint32_t const ces[9] = { 0x5508, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_004)
{
    // 14475 0021;	
    // (𔑵) ANATOLIAN HIEROGLYPH A103	[5509 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14475, 0x0021 };
    uint32_t const ces[9] = { 0x5509, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_005)
{
    // 14475 003F;	
    // (𔑵) ANATOLIAN HIEROGLYPH A103	[5509 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14475, 0x003F };
    uint32_t const ces[9] = { 0x5509, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_006)
{
    // 14475 0061;	
    // (𔑵) ANATOLIAN HIEROGLYPH A103	[5509 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14475, 0x0061 };
    uint32_t const ces[9] = { 0x5509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_007)
{
    // 14475 0041;	
    // (𔑵) ANATOLIAN HIEROGLYPH A103	[5509 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14475, 0x0041 };
    uint32_t const ces[9] = { 0x5509, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_008)
{
    // 14475 0062;	
    // (𔑵) ANATOLIAN HIEROGLYPH A103	[5509 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14475, 0x0062 };
    uint32_t const ces[9] = { 0x5509, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_009)
{
    // 14476 0021;	
    // (𔑶) ANATOLIAN HIEROGLYPH A104	[550A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14476, 0x0021 };
    uint32_t const ces[9] = { 0x550A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_010)
{
    // 14476 003F;	
    // (𔑶) ANATOLIAN HIEROGLYPH A104	[550A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14476, 0x003F };
    uint32_t const ces[9] = { 0x550A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_011)
{
    // 14476 0061;	
    // (𔑶) ANATOLIAN HIEROGLYPH A104	[550A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14476, 0x0061 };
    uint32_t const ces[9] = { 0x550A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_012)
{
    // 14476 0041;	
    // (𔑶) ANATOLIAN HIEROGLYPH A104	[550A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14476, 0x0041 };
    uint32_t const ces[9] = { 0x550A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_013)
{
    // 14476 0062;	
    // (𔑶) ANATOLIAN HIEROGLYPH A104	[550A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14476, 0x0062 };
    uint32_t const ces[9] = { 0x550A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_014)
{
    // 14477 0021;	
    // (𔑷) ANATOLIAN HIEROGLYPH A104A	[550B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14477, 0x0021 };
    uint32_t const ces[9] = { 0x550B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_015)
{
    // 14477 003F;	
    // (𔑷) ANATOLIAN HIEROGLYPH A104A	[550B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14477, 0x003F };
    uint32_t const ces[9] = { 0x550B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_016)
{
    // 14477 0061;	
    // (𔑷) ANATOLIAN HIEROGLYPH A104A	[550B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14477, 0x0061 };
    uint32_t const ces[9] = { 0x550B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_017)
{
    // 14477 0041;	
    // (𔑷) ANATOLIAN HIEROGLYPH A104A	[550B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14477, 0x0041 };
    uint32_t const ces[9] = { 0x550B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_018)
{
    // 14477 0062;	
    // (𔑷) ANATOLIAN HIEROGLYPH A104A	[550B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14477, 0x0062 };
    uint32_t const ces[9] = { 0x550B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_019)
{
    // 14478 0021;	
    // (𔑸) ANATOLIAN HIEROGLYPH A104B	[550C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14478, 0x0021 };
    uint32_t const ces[9] = { 0x550C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_020)
{
    // 14478 003F;	
    // (𔑸) ANATOLIAN HIEROGLYPH A104B	[550C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14478, 0x003F };
    uint32_t const ces[9] = { 0x550C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_021)
{
    // 14478 0061;	
    // (𔑸) ANATOLIAN HIEROGLYPH A104B	[550C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14478, 0x0061 };
    uint32_t const ces[9] = { 0x550C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_022)
{
    // 14478 0041;	
    // (𔑸) ANATOLIAN HIEROGLYPH A104B	[550C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14478, 0x0041 };
    uint32_t const ces[9] = { 0x550C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_023)
{
    // 14478 0062;	
    // (𔑸) ANATOLIAN HIEROGLYPH A104B	[550C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14478, 0x0062 };
    uint32_t const ces[9] = { 0x550C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_024)
{
    // 14479 0021;	
    // (𔑹) ANATOLIAN HIEROGLYPH A104C	[550D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14479, 0x0021 };
    uint32_t const ces[9] = { 0x550D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_025)
{
    // 14479 003F;	
    // (𔑹) ANATOLIAN HIEROGLYPH A104C	[550D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14479, 0x003F };
    uint32_t const ces[9] = { 0x550D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_026)
{
    // 14479 0061;	
    // (𔑹) ANATOLIAN HIEROGLYPH A104C	[550D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14479, 0x0061 };
    uint32_t const ces[9] = { 0x550D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_027)
{
    // 14479 0041;	
    // (𔑹) ANATOLIAN HIEROGLYPH A104C	[550D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14479, 0x0041 };
    uint32_t const ces[9] = { 0x550D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_028)
{
    // 14479 0062;	
    // (𔑹) ANATOLIAN HIEROGLYPH A104C	[550D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14479, 0x0062 };
    uint32_t const ces[9] = { 0x550D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_029)
{
    // 1447A 0021;	
    // (𔑺) ANATOLIAN HIEROGLYPH A105	[550E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447A, 0x0021 };
    uint32_t const ces[9] = { 0x550E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_030)
{
    // 1447A 003F;	
    // (𔑺) ANATOLIAN HIEROGLYPH A105	[550E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447A, 0x003F };
    uint32_t const ces[9] = { 0x550E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_031)
{
    // 1447A 0061;	
    // (𔑺) ANATOLIAN HIEROGLYPH A105	[550E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447A, 0x0061 };
    uint32_t const ces[9] = { 0x550E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_032)
{
    // 1447A 0041;	
    // (𔑺) ANATOLIAN HIEROGLYPH A105	[550E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447A, 0x0041 };
    uint32_t const ces[9] = { 0x550E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_033)
{
    // 1447A 0062;	
    // (𔑺) ANATOLIAN HIEROGLYPH A105	[550E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447A, 0x0062 };
    uint32_t const ces[9] = { 0x550E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_034)
{
    // 1447B 0021;	
    // (𔑻) ANATOLIAN HIEROGLYPH A105A	[550F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447B, 0x0021 };
    uint32_t const ces[9] = { 0x550F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_035)
{
    // 1447B 003F;	
    // (𔑻) ANATOLIAN HIEROGLYPH A105A	[550F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447B, 0x003F };
    uint32_t const ces[9] = { 0x550F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_036)
{
    // 1447B 0061;	
    // (𔑻) ANATOLIAN HIEROGLYPH A105A	[550F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447B, 0x0061 };
    uint32_t const ces[9] = { 0x550F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_037)
{
    // 1447B 0041;	
    // (𔑻) ANATOLIAN HIEROGLYPH A105A	[550F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447B, 0x0041 };
    uint32_t const ces[9] = { 0x550F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_038)
{
    // 1447B 0062;	
    // (𔑻) ANATOLIAN HIEROGLYPH A105A	[550F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447B, 0x0062 };
    uint32_t const ces[9] = { 0x550F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_039)
{
    // 1447C 0021;	
    // (𔑼) ANATOLIAN HIEROGLYPH A105B	[5510 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447C, 0x0021 };
    uint32_t const ces[9] = { 0x5510, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_040)
{
    // 1447C 003F;	
    // (𔑼) ANATOLIAN HIEROGLYPH A105B	[5510 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447C, 0x003F };
    uint32_t const ces[9] = { 0x5510, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_041)
{
    // 1447C 0061;	
    // (𔑼) ANATOLIAN HIEROGLYPH A105B	[5510 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447C, 0x0061 };
    uint32_t const ces[9] = { 0x5510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_042)
{
    // 1447C 0041;	
    // (𔑼) ANATOLIAN HIEROGLYPH A105B	[5510 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447C, 0x0041 };
    uint32_t const ces[9] = { 0x5510, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_043)
{
    // 1447C 0062;	
    // (𔑼) ANATOLIAN HIEROGLYPH A105B	[5510 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447C, 0x0062 };
    uint32_t const ces[9] = { 0x5510, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_044)
{
    // 1447D 0021;	
    // (𔑽) ANATOLIAN HIEROGLYPH A106	[5511 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447D, 0x0021 };
    uint32_t const ces[9] = { 0x5511, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_045)
{
    // 1447D 003F;	
    // (𔑽) ANATOLIAN HIEROGLYPH A106	[5511 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447D, 0x003F };
    uint32_t const ces[9] = { 0x5511, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_046)
{
    // 1447D 0061;	
    // (𔑽) ANATOLIAN HIEROGLYPH A106	[5511 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447D, 0x0061 };
    uint32_t const ces[9] = { 0x5511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_047)
{
    // 1447D 0041;	
    // (𔑽) ANATOLIAN HIEROGLYPH A106	[5511 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447D, 0x0041 };
    uint32_t const ces[9] = { 0x5511, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_048)
{
    // 1447D 0062;	
    // (𔑽) ANATOLIAN HIEROGLYPH A106	[5511 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447D, 0x0062 };
    uint32_t const ces[9] = { 0x5511, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_049)
{
    // 1447E 0021;	
    // (𔑾) ANATOLIAN HIEROGLYPH A107	[5512 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447E, 0x0021 };
    uint32_t const ces[9] = { 0x5512, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_050)
{
    // 1447E 003F;	
    // (𔑾) ANATOLIAN HIEROGLYPH A107	[5512 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447E, 0x003F };
    uint32_t const ces[9] = { 0x5512, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_051)
{
    // 1447E 0061;	
    // (𔑾) ANATOLIAN HIEROGLYPH A107	[5512 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447E, 0x0061 };
    uint32_t const ces[9] = { 0x5512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_052)
{
    // 1447E 0041;	
    // (𔑾) ANATOLIAN HIEROGLYPH A107	[5512 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447E, 0x0041 };
    uint32_t const ces[9] = { 0x5512, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_053)
{
    // 1447E 0062;	
    // (𔑾) ANATOLIAN HIEROGLYPH A107	[5512 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447E, 0x0062 };
    uint32_t const ces[9] = { 0x5512, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_054)
{
    // 1447F 0021;	
    // (𔑿) ANATOLIAN HIEROGLYPH A107A	[5513 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447F, 0x0021 };
    uint32_t const ces[9] = { 0x5513, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_055)
{
    // 1447F 003F;	
    // (𔑿) ANATOLIAN HIEROGLYPH A107A	[5513 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447F, 0x003F };
    uint32_t const ces[9] = { 0x5513, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_056)
{
    // 1447F 0061;	
    // (𔑿) ANATOLIAN HIEROGLYPH A107A	[5513 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447F, 0x0061 };
    uint32_t const ces[9] = { 0x5513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_057)
{
    // 1447F 0041;	
    // (𔑿) ANATOLIAN HIEROGLYPH A107A	[5513 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1447F, 0x0041 };
    uint32_t const ces[9] = { 0x5513, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_058)
{
    // 1447F 0062;	
    // (𔑿) ANATOLIAN HIEROGLYPH A107A	[5513 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1447F, 0x0062 };
    uint32_t const ces[9] = { 0x5513, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_059)
{
    // 14480 0021;	
    // (𔒀) ANATOLIAN HIEROGLYPH A107B	[5514 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14480, 0x0021 };
    uint32_t const ces[9] = { 0x5514, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_060)
{
    // 14480 003F;	
    // (𔒀) ANATOLIAN HIEROGLYPH A107B	[5514 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14480, 0x003F };
    uint32_t const ces[9] = { 0x5514, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_061)
{
    // 14480 0061;	
    // (𔒀) ANATOLIAN HIEROGLYPH A107B	[5514 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14480, 0x0061 };
    uint32_t const ces[9] = { 0x5514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_062)
{
    // 14480 0041;	
    // (𔒀) ANATOLIAN HIEROGLYPH A107B	[5514 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14480, 0x0041 };
    uint32_t const ces[9] = { 0x5514, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_063)
{
    // 14480 0062;	
    // (𔒀) ANATOLIAN HIEROGLYPH A107B	[5514 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14480, 0x0062 };
    uint32_t const ces[9] = { 0x5514, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_064)
{
    // 14481 0021;	
    // (𔒁) ANATOLIAN HIEROGLYPH A107C	[5515 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14481, 0x0021 };
    uint32_t const ces[9] = { 0x5515, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_065)
{
    // 14481 003F;	
    // (𔒁) ANATOLIAN HIEROGLYPH A107C	[5515 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14481, 0x003F };
    uint32_t const ces[9] = { 0x5515, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_066)
{
    // 14481 0061;	
    // (𔒁) ANATOLIAN HIEROGLYPH A107C	[5515 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14481, 0x0061 };
    uint32_t const ces[9] = { 0x5515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_067)
{
    // 14481 0041;	
    // (𔒁) ANATOLIAN HIEROGLYPH A107C	[5515 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14481, 0x0041 };
    uint32_t const ces[9] = { 0x5515, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_068)
{
    // 14481 0062;	
    // (𔒁) ANATOLIAN HIEROGLYPH A107C	[5515 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14481, 0x0062 };
    uint32_t const ces[9] = { 0x5515, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_069)
{
    // 14482 0021;	
    // (𔒂) ANATOLIAN HIEROGLYPH A108	[5516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14482, 0x0021 };
    uint32_t const ces[9] = { 0x5516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_070)
{
    // 14482 003F;	
    // (𔒂) ANATOLIAN HIEROGLYPH A108	[5516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14482, 0x003F };
    uint32_t const ces[9] = { 0x5516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_071)
{
    // 14482 0061;	
    // (𔒂) ANATOLIAN HIEROGLYPH A108	[5516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14482, 0x0061 };
    uint32_t const ces[9] = { 0x5516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_072)
{
    // 14482 0041;	
    // (𔒂) ANATOLIAN HIEROGLYPH A108	[5516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14482, 0x0041 };
    uint32_t const ces[9] = { 0x5516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_073)
{
    // 14482 0062;	
    // (𔒂) ANATOLIAN HIEROGLYPH A108	[5516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14482, 0x0062 };
    uint32_t const ces[9] = { 0x5516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_074)
{
    // 14483 0021;	
    // (𔒃) ANATOLIAN HIEROGLYPH A109	[5517 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14483, 0x0021 };
    uint32_t const ces[9] = { 0x5517, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_075)
{
    // 14483 003F;	
    // (𔒃) ANATOLIAN HIEROGLYPH A109	[5517 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14483, 0x003F };
    uint32_t const ces[9] = { 0x5517, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_076)
{
    // 14483 0061;	
    // (𔒃) ANATOLIAN HIEROGLYPH A109	[5517 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14483, 0x0061 };
    uint32_t const ces[9] = { 0x5517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_077)
{
    // 14483 0041;	
    // (𔒃) ANATOLIAN HIEROGLYPH A109	[5517 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14483, 0x0041 };
    uint32_t const ces[9] = { 0x5517, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_078)
{
    // 14483 0062;	
    // (𔒃) ANATOLIAN HIEROGLYPH A109	[5517 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14483, 0x0062 };
    uint32_t const ces[9] = { 0x5517, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_079)
{
    // 14484 0021;	
    // (𔒄) ANATOLIAN HIEROGLYPH A110	[5518 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14484, 0x0021 };
    uint32_t const ces[9] = { 0x5518, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_080)
{
    // 14484 003F;	
    // (𔒄) ANATOLIAN HIEROGLYPH A110	[5518 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14484, 0x003F };
    uint32_t const ces[9] = { 0x5518, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_081)
{
    // 14484 0061;	
    // (𔒄) ANATOLIAN HIEROGLYPH A110	[5518 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14484, 0x0061 };
    uint32_t const ces[9] = { 0x5518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_082)
{
    // 14484 0041;	
    // (𔒄) ANATOLIAN HIEROGLYPH A110	[5518 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14484, 0x0041 };
    uint32_t const ces[9] = { 0x5518, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_083)
{
    // 14484 0062;	
    // (𔒄) ANATOLIAN HIEROGLYPH A110	[5518 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14484, 0x0062 };
    uint32_t const ces[9] = { 0x5518, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_084)
{
    // 14485 0021;	
    // (𔒅) ANATOLIAN HIEROGLYPH A110A	[5519 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14485, 0x0021 };
    uint32_t const ces[9] = { 0x5519, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_085)
{
    // 14485 003F;	
    // (𔒅) ANATOLIAN HIEROGLYPH A110A	[5519 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14485, 0x003F };
    uint32_t const ces[9] = { 0x5519, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_086)
{
    // 14485 0061;	
    // (𔒅) ANATOLIAN HIEROGLYPH A110A	[5519 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14485, 0x0061 };
    uint32_t const ces[9] = { 0x5519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_087)
{
    // 14485 0041;	
    // (𔒅) ANATOLIAN HIEROGLYPH A110A	[5519 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14485, 0x0041 };
    uint32_t const ces[9] = { 0x5519, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_088)
{
    // 14485 0062;	
    // (𔒅) ANATOLIAN HIEROGLYPH A110A	[5519 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14485, 0x0062 };
    uint32_t const ces[9] = { 0x5519, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_089)
{
    // 14486 0021;	
    // (𔒆) ANATOLIAN HIEROGLYPH A110B	[551A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14486, 0x0021 };
    uint32_t const ces[9] = { 0x551A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_090)
{
    // 14486 003F;	
    // (𔒆) ANATOLIAN HIEROGLYPH A110B	[551A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14486, 0x003F };
    uint32_t const ces[9] = { 0x551A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_091)
{
    // 14486 0061;	
    // (𔒆) ANATOLIAN HIEROGLYPH A110B	[551A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14486, 0x0061 };
    uint32_t const ces[9] = { 0x551A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_092)
{
    // 14486 0041;	
    // (𔒆) ANATOLIAN HIEROGLYPH A110B	[551A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14486, 0x0041 };
    uint32_t const ces[9] = { 0x551A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_093)
{
    // 14486 0062;	
    // (𔒆) ANATOLIAN HIEROGLYPH A110B	[551A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14486, 0x0062 };
    uint32_t const ces[9] = { 0x551A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_094)
{
    // 14487 0021;	
    // (𔒇) ANATOLIAN HIEROGLYPH A111	[551B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14487, 0x0021 };
    uint32_t const ces[9] = { 0x551B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_095)
{
    // 14487 003F;	
    // (𔒇) ANATOLIAN HIEROGLYPH A111	[551B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14487, 0x003F };
    uint32_t const ces[9] = { 0x551B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_096)
{
    // 14487 0061;	
    // (𔒇) ANATOLIAN HIEROGLYPH A111	[551B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14487, 0x0061 };
    uint32_t const ces[9] = { 0x551B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_097)
{
    // 14487 0041;	
    // (𔒇) ANATOLIAN HIEROGLYPH A111	[551B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14487, 0x0041 };
    uint32_t const ces[9] = { 0x551B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_098)
{
    // 14487 0062;	
    // (𔒇) ANATOLIAN HIEROGLYPH A111	[551B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14487, 0x0062 };
    uint32_t const ces[9] = { 0x551B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_099)
{
    // 14488 0021;	
    // (𔒈) ANATOLIAN HIEROGLYPH A112	[551C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14488, 0x0021 };
    uint32_t const ces[9] = { 0x551C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_100)
{
    // 14488 003F;	
    // (𔒈) ANATOLIAN HIEROGLYPH A112	[551C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14488, 0x003F };
    uint32_t const ces[9] = { 0x551C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_101)
{
    // 14488 0061;	
    // (𔒈) ANATOLIAN HIEROGLYPH A112	[551C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14488, 0x0061 };
    uint32_t const ces[9] = { 0x551C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_102)
{
    // 14488 0041;	
    // (𔒈) ANATOLIAN HIEROGLYPH A112	[551C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14488, 0x0041 };
    uint32_t const ces[9] = { 0x551C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_103)
{
    // 14488 0062;	
    // (𔒈) ANATOLIAN HIEROGLYPH A112	[551C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14488, 0x0062 };
    uint32_t const ces[9] = { 0x551C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_104)
{
    // 14489 0021;	
    // (𔒉) ANATOLIAN HIEROGLYPH A113	[551D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14489, 0x0021 };
    uint32_t const ces[9] = { 0x551D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_105)
{
    // 14489 003F;	
    // (𔒉) ANATOLIAN HIEROGLYPH A113	[551D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14489, 0x003F };
    uint32_t const ces[9] = { 0x551D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_106)
{
    // 14489 0061;	
    // (𔒉) ANATOLIAN HIEROGLYPH A113	[551D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14489, 0x0061 };
    uint32_t const ces[9] = { 0x551D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_107)
{
    // 14489 0041;	
    // (𔒉) ANATOLIAN HIEROGLYPH A113	[551D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14489, 0x0041 };
    uint32_t const ces[9] = { 0x551D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_108)
{
    // 14489 0062;	
    // (𔒉) ANATOLIAN HIEROGLYPH A113	[551D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14489, 0x0062 };
    uint32_t const ces[9] = { 0x551D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_109)
{
    // 1448A 0021;	
    // (𔒊) ANATOLIAN HIEROGLYPH A114	[551E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448A, 0x0021 };
    uint32_t const ces[9] = { 0x551E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_110)
{
    // 1448A 003F;	
    // (𔒊) ANATOLIAN HIEROGLYPH A114	[551E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448A, 0x003F };
    uint32_t const ces[9] = { 0x551E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_111)
{
    // 1448A 0061;	
    // (𔒊) ANATOLIAN HIEROGLYPH A114	[551E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448A, 0x0061 };
    uint32_t const ces[9] = { 0x551E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_112)
{
    // 1448A 0041;	
    // (𔒊) ANATOLIAN HIEROGLYPH A114	[551E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448A, 0x0041 };
    uint32_t const ces[9] = { 0x551E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_113)
{
    // 1448A 0062;	
    // (𔒊) ANATOLIAN HIEROGLYPH A114	[551E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448A, 0x0062 };
    uint32_t const ces[9] = { 0x551E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_114)
{
    // 1448B 0021;	
    // (𔒋) ANATOLIAN HIEROGLYPH A115	[551F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448B, 0x0021 };
    uint32_t const ces[9] = { 0x551F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_115)
{
    // 1448B 003F;	
    // (𔒋) ANATOLIAN HIEROGLYPH A115	[551F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448B, 0x003F };
    uint32_t const ces[9] = { 0x551F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_116)
{
    // 1448B 0061;	
    // (𔒋) ANATOLIAN HIEROGLYPH A115	[551F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448B, 0x0061 };
    uint32_t const ces[9] = { 0x551F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_117)
{
    // 1448B 0041;	
    // (𔒋) ANATOLIAN HIEROGLYPH A115	[551F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448B, 0x0041 };
    uint32_t const ces[9] = { 0x551F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_118)
{
    // 1448B 0062;	
    // (𔒋) ANATOLIAN HIEROGLYPH A115	[551F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448B, 0x0062 };
    uint32_t const ces[9] = { 0x551F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_119)
{
    // 1448C 0021;	
    // (𔒌) ANATOLIAN HIEROGLYPH A115A	[5520 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448C, 0x0021 };
    uint32_t const ces[9] = { 0x5520, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_120)
{
    // 1448C 003F;	
    // (𔒌) ANATOLIAN HIEROGLYPH A115A	[5520 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448C, 0x003F };
    uint32_t const ces[9] = { 0x5520, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_121)
{
    // 1448C 0061;	
    // (𔒌) ANATOLIAN HIEROGLYPH A115A	[5520 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448C, 0x0061 };
    uint32_t const ces[9] = { 0x5520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_122)
{
    // 1448C 0041;	
    // (𔒌) ANATOLIAN HIEROGLYPH A115A	[5520 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448C, 0x0041 };
    uint32_t const ces[9] = { 0x5520, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_123)
{
    // 1448C 0062;	
    // (𔒌) ANATOLIAN HIEROGLYPH A115A	[5520 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448C, 0x0062 };
    uint32_t const ces[9] = { 0x5520, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_124)
{
    // 1448D 0021;	
    // (𔒍) ANATOLIAN HIEROGLYPH A116	[5521 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448D, 0x0021 };
    uint32_t const ces[9] = { 0x5521, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_125)
{
    // 1448D 003F;	
    // (𔒍) ANATOLIAN HIEROGLYPH A116	[5521 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448D, 0x003F };
    uint32_t const ces[9] = { 0x5521, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_126)
{
    // 1448D 0061;	
    // (𔒍) ANATOLIAN HIEROGLYPH A116	[5521 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448D, 0x0061 };
    uint32_t const ces[9] = { 0x5521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_127)
{
    // 1448D 0041;	
    // (𔒍) ANATOLIAN HIEROGLYPH A116	[5521 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448D, 0x0041 };
    uint32_t const ces[9] = { 0x5521, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_128)
{
    // 1448D 0062;	
    // (𔒍) ANATOLIAN HIEROGLYPH A116	[5521 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448D, 0x0062 };
    uint32_t const ces[9] = { 0x5521, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_129)
{
    // 1448E 0021;	
    // (𔒎) ANATOLIAN HIEROGLYPH A117	[5522 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448E, 0x0021 };
    uint32_t const ces[9] = { 0x5522, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_130)
{
    // 1448E 003F;	
    // (𔒎) ANATOLIAN HIEROGLYPH A117	[5522 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448E, 0x003F };
    uint32_t const ces[9] = { 0x5522, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_131)
{
    // 1448E 0061;	
    // (𔒎) ANATOLIAN HIEROGLYPH A117	[5522 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448E, 0x0061 };
    uint32_t const ces[9] = { 0x5522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_132)
{
    // 1448E 0041;	
    // (𔒎) ANATOLIAN HIEROGLYPH A117	[5522 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448E, 0x0041 };
    uint32_t const ces[9] = { 0x5522, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_133)
{
    // 1448E 0062;	
    // (𔒎) ANATOLIAN HIEROGLYPH A117	[5522 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448E, 0x0062 };
    uint32_t const ces[9] = { 0x5522, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_134)
{
    // 1448F 0021;	
    // (𔒏) ANATOLIAN HIEROGLYPH A118	[5523 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448F, 0x0021 };
    uint32_t const ces[9] = { 0x5523, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_135)
{
    // 1448F 003F;	
    // (𔒏) ANATOLIAN HIEROGLYPH A118	[5523 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448F, 0x003F };
    uint32_t const ces[9] = { 0x5523, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_136)
{
    // 1448F 0061;	
    // (𔒏) ANATOLIAN HIEROGLYPH A118	[5523 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448F, 0x0061 };
    uint32_t const ces[9] = { 0x5523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_137)
{
    // 1448F 0041;	
    // (𔒏) ANATOLIAN HIEROGLYPH A118	[5523 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1448F, 0x0041 };
    uint32_t const ces[9] = { 0x5523, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_138)
{
    // 1448F 0062;	
    // (𔒏) ANATOLIAN HIEROGLYPH A118	[5523 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1448F, 0x0062 };
    uint32_t const ces[9] = { 0x5523, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_139)
{
    // 14490 0021;	
    // (𔒐) ANATOLIAN HIEROGLYPH A119	[5524 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14490, 0x0021 };
    uint32_t const ces[9] = { 0x5524, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_140)
{
    // 14490 003F;	
    // (𔒐) ANATOLIAN HIEROGLYPH A119	[5524 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14490, 0x003F };
    uint32_t const ces[9] = { 0x5524, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_141)
{
    // 14490 0061;	
    // (𔒐) ANATOLIAN HIEROGLYPH A119	[5524 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14490, 0x0061 };
    uint32_t const ces[9] = { 0x5524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_142)
{
    // 14490 0041;	
    // (𔒐) ANATOLIAN HIEROGLYPH A119	[5524 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14490, 0x0041 };
    uint32_t const ces[9] = { 0x5524, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_143)
{
    // 14490 0062;	
    // (𔒐) ANATOLIAN HIEROGLYPH A119	[5524 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14490, 0x0062 };
    uint32_t const ces[9] = { 0x5524, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_144)
{
    // 14491 0021;	
    // (𔒑) ANATOLIAN HIEROGLYPH A120	[5525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14491, 0x0021 };
    uint32_t const ces[9] = { 0x5525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_145)
{
    // 14491 003F;	
    // (𔒑) ANATOLIAN HIEROGLYPH A120	[5525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14491, 0x003F };
    uint32_t const ces[9] = { 0x5525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_146)
{
    // 14491 0061;	
    // (𔒑) ANATOLIAN HIEROGLYPH A120	[5525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14491, 0x0061 };
    uint32_t const ces[9] = { 0x5525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_147)
{
    // 14491 0041;	
    // (𔒑) ANATOLIAN HIEROGLYPH A120	[5525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14491, 0x0041 };
    uint32_t const ces[9] = { 0x5525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_148)
{
    // 14491 0062;	
    // (𔒑) ANATOLIAN HIEROGLYPH A120	[5525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14491, 0x0062 };
    uint32_t const ces[9] = { 0x5525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_149)
{
    // 14492 0021;	
    // (𔒒) ANATOLIAN HIEROGLYPH A121	[5526 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14492, 0x0021 };
    uint32_t const ces[9] = { 0x5526, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_150)
{
    // 14492 003F;	
    // (𔒒) ANATOLIAN HIEROGLYPH A121	[5526 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14492, 0x003F };
    uint32_t const ces[9] = { 0x5526, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_151)
{
    // 14492 0061;	
    // (𔒒) ANATOLIAN HIEROGLYPH A121	[5526 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14492, 0x0061 };
    uint32_t const ces[9] = { 0x5526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_152)
{
    // 14492 0041;	
    // (𔒒) ANATOLIAN HIEROGLYPH A121	[5526 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14492, 0x0041 };
    uint32_t const ces[9] = { 0x5526, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_153)
{
    // 14492 0062;	
    // (𔒒) ANATOLIAN HIEROGLYPH A121	[5526 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14492, 0x0062 };
    uint32_t const ces[9] = { 0x5526, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_154)
{
    // 14493 0021;	
    // (𔒓) ANATOLIAN HIEROGLYPH A122	[5527 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14493, 0x0021 };
    uint32_t const ces[9] = { 0x5527, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_155)
{
    // 14493 003F;	
    // (𔒓) ANATOLIAN HIEROGLYPH A122	[5527 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14493, 0x003F };
    uint32_t const ces[9] = { 0x5527, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_156)
{
    // 14493 0061;	
    // (𔒓) ANATOLIAN HIEROGLYPH A122	[5527 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14493, 0x0061 };
    uint32_t const ces[9] = { 0x5527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_157)
{
    // 14493 0041;	
    // (𔒓) ANATOLIAN HIEROGLYPH A122	[5527 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14493, 0x0041 };
    uint32_t const ces[9] = { 0x5527, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_158)
{
    // 14493 0062;	
    // (𔒓) ANATOLIAN HIEROGLYPH A122	[5527 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14493, 0x0062 };
    uint32_t const ces[9] = { 0x5527, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_159)
{
    // 14494 0021;	
    // (𔒔) ANATOLIAN HIEROGLYPH A123	[5528 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14494, 0x0021 };
    uint32_t const ces[9] = { 0x5528, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_160)
{
    // 14494 003F;	
    // (𔒔) ANATOLIAN HIEROGLYPH A123	[5528 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14494, 0x003F };
    uint32_t const ces[9] = { 0x5528, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_161)
{
    // 14494 0061;	
    // (𔒔) ANATOLIAN HIEROGLYPH A123	[5528 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14494, 0x0061 };
    uint32_t const ces[9] = { 0x5528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_162)
{
    // 14494 0041;	
    // (𔒔) ANATOLIAN HIEROGLYPH A123	[5528 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14494, 0x0041 };
    uint32_t const ces[9] = { 0x5528, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_163)
{
    // 14494 0062;	
    // (𔒔) ANATOLIAN HIEROGLYPH A123	[5528 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14494, 0x0062 };
    uint32_t const ces[9] = { 0x5528, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_164)
{
    // 14495 0021;	
    // (𔒕) ANATOLIAN HIEROGLYPH A124	[5529 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14495, 0x0021 };
    uint32_t const ces[9] = { 0x5529, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_165)
{
    // 14495 003F;	
    // (𔒕) ANATOLIAN HIEROGLYPH A124	[5529 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14495, 0x003F };
    uint32_t const ces[9] = { 0x5529, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_166)
{
    // 14495 0061;	
    // (𔒕) ANATOLIAN HIEROGLYPH A124	[5529 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14495, 0x0061 };
    uint32_t const ces[9] = { 0x5529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_167)
{
    // 14495 0041;	
    // (𔒕) ANATOLIAN HIEROGLYPH A124	[5529 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14495, 0x0041 };
    uint32_t const ces[9] = { 0x5529, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_168)
{
    // 14495 0062;	
    // (𔒕) ANATOLIAN HIEROGLYPH A124	[5529 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14495, 0x0062 };
    uint32_t const ces[9] = { 0x5529, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_169)
{
    // 14496 0021;	
    // (𔒖) ANATOLIAN HIEROGLYPH A125	[552A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14496, 0x0021 };
    uint32_t const ces[9] = { 0x552A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_170)
{
    // 14496 003F;	
    // (𔒖) ANATOLIAN HIEROGLYPH A125	[552A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14496, 0x003F };
    uint32_t const ces[9] = { 0x552A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_171)
{
    // 14496 0061;	
    // (𔒖) ANATOLIAN HIEROGLYPH A125	[552A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14496, 0x0061 };
    uint32_t const ces[9] = { 0x552A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_172)
{
    // 14496 0041;	
    // (𔒖) ANATOLIAN HIEROGLYPH A125	[552A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14496, 0x0041 };
    uint32_t const ces[9] = { 0x552A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_173)
{
    // 14496 0062;	
    // (𔒖) ANATOLIAN HIEROGLYPH A125	[552A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14496, 0x0062 };
    uint32_t const ces[9] = { 0x552A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_174)
{
    // 14497 0021;	
    // (𔒗) ANATOLIAN HIEROGLYPH A125A	[552B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14497, 0x0021 };
    uint32_t const ces[9] = { 0x552B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_175)
{
    // 14497 003F;	
    // (𔒗) ANATOLIAN HIEROGLYPH A125A	[552B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14497, 0x003F };
    uint32_t const ces[9] = { 0x552B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_176)
{
    // 14497 0061;	
    // (𔒗) ANATOLIAN HIEROGLYPH A125A	[552B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14497, 0x0061 };
    uint32_t const ces[9] = { 0x552B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_177)
{
    // 14497 0041;	
    // (𔒗) ANATOLIAN HIEROGLYPH A125A	[552B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14497, 0x0041 };
    uint32_t const ces[9] = { 0x552B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_178)
{
    // 14497 0062;	
    // (𔒗) ANATOLIAN HIEROGLYPH A125A	[552B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14497, 0x0062 };
    uint32_t const ces[9] = { 0x552B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_179)
{
    // 14498 0021;	
    // (𔒘) ANATOLIAN HIEROGLYPH A126	[552C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14498, 0x0021 };
    uint32_t const ces[9] = { 0x552C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_180)
{
    // 14498 003F;	
    // (𔒘) ANATOLIAN HIEROGLYPH A126	[552C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14498, 0x003F };
    uint32_t const ces[9] = { 0x552C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_181)
{
    // 14498 0061;	
    // (𔒘) ANATOLIAN HIEROGLYPH A126	[552C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14498, 0x0061 };
    uint32_t const ces[9] = { 0x552C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_182)
{
    // 14498 0041;	
    // (𔒘) ANATOLIAN HIEROGLYPH A126	[552C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14498, 0x0041 };
    uint32_t const ces[9] = { 0x552C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_183)
{
    // 14498 0062;	
    // (𔒘) ANATOLIAN HIEROGLYPH A126	[552C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14498, 0x0062 };
    uint32_t const ces[9] = { 0x552C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_184)
{
    // 14499 0021;	
    // (𔒙) ANATOLIAN HIEROGLYPH A127	[552D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14499, 0x0021 };
    uint32_t const ces[9] = { 0x552D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_185)
{
    // 14499 003F;	
    // (𔒙) ANATOLIAN HIEROGLYPH A127	[552D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14499, 0x003F };
    uint32_t const ces[9] = { 0x552D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_186)
{
    // 14499 0061;	
    // (𔒙) ANATOLIAN HIEROGLYPH A127	[552D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14499, 0x0061 };
    uint32_t const ces[9] = { 0x552D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_187)
{
    // 14499 0041;	
    // (𔒙) ANATOLIAN HIEROGLYPH A127	[552D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14499, 0x0041 };
    uint32_t const ces[9] = { 0x552D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_188)
{
    // 14499 0062;	
    // (𔒙) ANATOLIAN HIEROGLYPH A127	[552D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14499, 0x0062 };
    uint32_t const ces[9] = { 0x552D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_189)
{
    // 1449A 0021;	
    // (𔒚) ANATOLIAN HIEROGLYPH A128	[552E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449A, 0x0021 };
    uint32_t const ces[9] = { 0x552E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_190)
{
    // 1449A 003F;	
    // (𔒚) ANATOLIAN HIEROGLYPH A128	[552E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449A, 0x003F };
    uint32_t const ces[9] = { 0x552E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_191)
{
    // 1449A 0061;	
    // (𔒚) ANATOLIAN HIEROGLYPH A128	[552E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449A, 0x0061 };
    uint32_t const ces[9] = { 0x552E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_192)
{
    // 1449A 0041;	
    // (𔒚) ANATOLIAN HIEROGLYPH A128	[552E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449A, 0x0041 };
    uint32_t const ces[9] = { 0x552E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_193)
{
    // 1449A 0062;	
    // (𔒚) ANATOLIAN HIEROGLYPH A128	[552E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449A, 0x0062 };
    uint32_t const ces[9] = { 0x552E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_194)
{
    // 1449B 0021;	
    // (𔒛) ANATOLIAN HIEROGLYPH A129	[552F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449B, 0x0021 };
    uint32_t const ces[9] = { 0x552F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_195)
{
    // 1449B 003F;	
    // (𔒛) ANATOLIAN HIEROGLYPH A129	[552F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449B, 0x003F };
    uint32_t const ces[9] = { 0x552F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_196)
{
    // 1449B 0061;	
    // (𔒛) ANATOLIAN HIEROGLYPH A129	[552F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449B, 0x0061 };
    uint32_t const ces[9] = { 0x552F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_197)
{
    // 1449B 0041;	
    // (𔒛) ANATOLIAN HIEROGLYPH A129	[552F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449B, 0x0041 };
    uint32_t const ces[9] = { 0x552F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_198)
{
    // 1449B 0062;	
    // (𔒛) ANATOLIAN HIEROGLYPH A129	[552F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449B, 0x0062 };
    uint32_t const ces[9] = { 0x552F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_199)
{
    // 1449C 0021;	
    // (𔒜) ANATOLIAN HIEROGLYPH A130	[5530 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449C, 0x0021 };
    uint32_t const ces[9] = { 0x5530, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_200)
{
    // 1449C 003F;	
    // (𔒜) ANATOLIAN HIEROGLYPH A130	[5530 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449C, 0x003F };
    uint32_t const ces[9] = { 0x5530, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_201)
{
    // 1449C 0061;	
    // (𔒜) ANATOLIAN HIEROGLYPH A130	[5530 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449C, 0x0061 };
    uint32_t const ces[9] = { 0x5530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_202)
{
    // 1449C 0041;	
    // (𔒜) ANATOLIAN HIEROGLYPH A130	[5530 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449C, 0x0041 };
    uint32_t const ces[9] = { 0x5530, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_203)
{
    // 1449C 0062;	
    // (𔒜) ANATOLIAN HIEROGLYPH A130	[5530 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449C, 0x0062 };
    uint32_t const ces[9] = { 0x5530, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_204)
{
    // 1449D 0021;	
    // (𔒝) ANATOLIAN HIEROGLYPH A131	[5531 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449D, 0x0021 };
    uint32_t const ces[9] = { 0x5531, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_205)
{
    // 1449D 003F;	
    // (𔒝) ANATOLIAN HIEROGLYPH A131	[5531 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449D, 0x003F };
    uint32_t const ces[9] = { 0x5531, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_206)
{
    // 1449D 0061;	
    // (𔒝) ANATOLIAN HIEROGLYPH A131	[5531 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449D, 0x0061 };
    uint32_t const ces[9] = { 0x5531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_207)
{
    // 1449D 0041;	
    // (𔒝) ANATOLIAN HIEROGLYPH A131	[5531 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449D, 0x0041 };
    uint32_t const ces[9] = { 0x5531, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_208)
{
    // 1449D 0062;	
    // (𔒝) ANATOLIAN HIEROGLYPH A131	[5531 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449D, 0x0062 };
    uint32_t const ces[9] = { 0x5531, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_209)
{
    // 1449E 0021;	
    // (𔒞) ANATOLIAN HIEROGLYPH A132	[5532 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449E, 0x0021 };
    uint32_t const ces[9] = { 0x5532, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_210)
{
    // 1449E 003F;	
    // (𔒞) ANATOLIAN HIEROGLYPH A132	[5532 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449E, 0x003F };
    uint32_t const ces[9] = { 0x5532, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_211)
{
    // 1449E 0061;	
    // (𔒞) ANATOLIAN HIEROGLYPH A132	[5532 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449E, 0x0061 };
    uint32_t const ces[9] = { 0x5532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_212)
{
    // 1449E 0041;	
    // (𔒞) ANATOLIAN HIEROGLYPH A132	[5532 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449E, 0x0041 };
    uint32_t const ces[9] = { 0x5532, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_213)
{
    // 1449E 0062;	
    // (𔒞) ANATOLIAN HIEROGLYPH A132	[5532 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449E, 0x0062 };
    uint32_t const ces[9] = { 0x5532, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_214)
{
    // 1449F 0021;	
    // (𔒟) ANATOLIAN HIEROGLYPH A133	[5533 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449F, 0x0021 };
    uint32_t const ces[9] = { 0x5533, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_215)
{
    // 1449F 003F;	
    // (𔒟) ANATOLIAN HIEROGLYPH A133	[5533 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449F, 0x003F };
    uint32_t const ces[9] = { 0x5533, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_216)
{
    // 1449F 0061;	
    // (𔒟) ANATOLIAN HIEROGLYPH A133	[5533 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449F, 0x0061 };
    uint32_t const ces[9] = { 0x5533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_217)
{
    // 1449F 0041;	
    // (𔒟) ANATOLIAN HIEROGLYPH A133	[5533 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1449F, 0x0041 };
    uint32_t const ces[9] = { 0x5533, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_218)
{
    // 1449F 0062;	
    // (𔒟) ANATOLIAN HIEROGLYPH A133	[5533 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1449F, 0x0062 };
    uint32_t const ces[9] = { 0x5533, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_219)
{
    // 144A0 0021;	
    // (𔒠) ANATOLIAN HIEROGLYPH A134	[5534 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A0, 0x0021 };
    uint32_t const ces[9] = { 0x5534, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_220)
{
    // 144A0 003F;	
    // (𔒠) ANATOLIAN HIEROGLYPH A134	[5534 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A0, 0x003F };
    uint32_t const ces[9] = { 0x5534, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_221)
{
    // 144A0 0061;	
    // (𔒠) ANATOLIAN HIEROGLYPH A134	[5534 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A0, 0x0061 };
    uint32_t const ces[9] = { 0x5534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_222)
{
    // 144A0 0041;	
    // (𔒠) ANATOLIAN HIEROGLYPH A134	[5534 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A0, 0x0041 };
    uint32_t const ces[9] = { 0x5534, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_223)
{
    // 144A0 0062;	
    // (𔒠) ANATOLIAN HIEROGLYPH A134	[5534 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A0, 0x0062 };
    uint32_t const ces[9] = { 0x5534, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_224)
{
    // 144A1 0021;	
    // (𔒡) ANATOLIAN HIEROGLYPH A135	[5535 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A1, 0x0021 };
    uint32_t const ces[9] = { 0x5535, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_225)
{
    // 144A1 003F;	
    // (𔒡) ANATOLIAN HIEROGLYPH A135	[5535 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A1, 0x003F };
    uint32_t const ces[9] = { 0x5535, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_226)
{
    // 144A1 0061;	
    // (𔒡) ANATOLIAN HIEROGLYPH A135	[5535 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A1, 0x0061 };
    uint32_t const ces[9] = { 0x5535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_227)
{
    // 144A1 0041;	
    // (𔒡) ANATOLIAN HIEROGLYPH A135	[5535 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A1, 0x0041 };
    uint32_t const ces[9] = { 0x5535, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_228)
{
    // 144A1 0062;	
    // (𔒡) ANATOLIAN HIEROGLYPH A135	[5535 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A1, 0x0062 };
    uint32_t const ces[9] = { 0x5535, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_229)
{
    // 144A2 0021;	
    // (𔒢) ANATOLIAN HIEROGLYPH A135A	[5536 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A2, 0x0021 };
    uint32_t const ces[9] = { 0x5536, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_230)
{
    // 144A2 003F;	
    // (𔒢) ANATOLIAN HIEROGLYPH A135A	[5536 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A2, 0x003F };
    uint32_t const ces[9] = { 0x5536, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_231)
{
    // 144A2 0061;	
    // (𔒢) ANATOLIAN HIEROGLYPH A135A	[5536 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A2, 0x0061 };
    uint32_t const ces[9] = { 0x5536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_232)
{
    // 144A2 0041;	
    // (𔒢) ANATOLIAN HIEROGLYPH A135A	[5536 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A2, 0x0041 };
    uint32_t const ces[9] = { 0x5536, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_233)
{
    // 144A2 0062;	
    // (𔒢) ANATOLIAN HIEROGLYPH A135A	[5536 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A2, 0x0062 };
    uint32_t const ces[9] = { 0x5536, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_234)
{
    // 144A3 0021;	
    // (𔒣) ANATOLIAN HIEROGLYPH A136	[5537 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A3, 0x0021 };
    uint32_t const ces[9] = { 0x5537, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_235)
{
    // 144A3 003F;	
    // (𔒣) ANATOLIAN HIEROGLYPH A136	[5537 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A3, 0x003F };
    uint32_t const ces[9] = { 0x5537, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_236)
{
    // 144A3 0061;	
    // (𔒣) ANATOLIAN HIEROGLYPH A136	[5537 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A3, 0x0061 };
    uint32_t const ces[9] = { 0x5537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_237)
{
    // 144A3 0041;	
    // (𔒣) ANATOLIAN HIEROGLYPH A136	[5537 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A3, 0x0041 };
    uint32_t const ces[9] = { 0x5537, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_238)
{
    // 144A3 0062;	
    // (𔒣) ANATOLIAN HIEROGLYPH A136	[5537 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A3, 0x0062 };
    uint32_t const ces[9] = { 0x5537, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_239)
{
    // 144A4 0021;	
    // (𔒤) ANATOLIAN HIEROGLYPH A137	[5538 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A4, 0x0021 };
    uint32_t const ces[9] = { 0x5538, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_240)
{
    // 144A4 003F;	
    // (𔒤) ANATOLIAN HIEROGLYPH A137	[5538 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A4, 0x003F };
    uint32_t const ces[9] = { 0x5538, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_241)
{
    // 144A4 0061;	
    // (𔒤) ANATOLIAN HIEROGLYPH A137	[5538 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A4, 0x0061 };
    uint32_t const ces[9] = { 0x5538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_242)
{
    // 144A4 0041;	
    // (𔒤) ANATOLIAN HIEROGLYPH A137	[5538 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A4, 0x0041 };
    uint32_t const ces[9] = { 0x5538, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_243)
{
    // 144A4 0062;	
    // (𔒤) ANATOLIAN HIEROGLYPH A137	[5538 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A4, 0x0062 };
    uint32_t const ces[9] = { 0x5538, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_244)
{
    // 144A5 0021;	
    // (𔒥) ANATOLIAN HIEROGLYPH A138	[5539 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A5, 0x0021 };
    uint32_t const ces[9] = { 0x5539, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_245)
{
    // 144A5 003F;	
    // (𔒥) ANATOLIAN HIEROGLYPH A138	[5539 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A5, 0x003F };
    uint32_t const ces[9] = { 0x5539, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_246)
{
    // 144A5 0061;	
    // (𔒥) ANATOLIAN HIEROGLYPH A138	[5539 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A5, 0x0061 };
    uint32_t const ces[9] = { 0x5539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_247)
{
    // 144A5 0041;	
    // (𔒥) ANATOLIAN HIEROGLYPH A138	[5539 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A5, 0x0041 };
    uint32_t const ces[9] = { 0x5539, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_248)
{
    // 144A5 0062;	
    // (𔒥) ANATOLIAN HIEROGLYPH A138	[5539 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A5, 0x0062 };
    uint32_t const ces[9] = { 0x5539, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_249)
{
    // 144A6 0021;	
    // (𔒦) ANATOLIAN HIEROGLYPH A139	[553A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A6, 0x0021 };
    uint32_t const ces[9] = { 0x553A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_250)
{
    // 144A6 003F;	
    // (𔒦) ANATOLIAN HIEROGLYPH A139	[553A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A6, 0x003F };
    uint32_t const ces[9] = { 0x553A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_251)
{
    // 144A6 0061;	
    // (𔒦) ANATOLIAN HIEROGLYPH A139	[553A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A6, 0x0061 };
    uint32_t const ces[9] = { 0x553A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_252)
{
    // 144A6 0041;	
    // (𔒦) ANATOLIAN HIEROGLYPH A139	[553A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A6, 0x0041 };
    uint32_t const ces[9] = { 0x553A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_253)
{
    // 144A6 0062;	
    // (𔒦) ANATOLIAN HIEROGLYPH A139	[553A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A6, 0x0062 };
    uint32_t const ces[9] = { 0x553A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_254)
{
    // 144A7 0021;	
    // (𔒧) ANATOLIAN HIEROGLYPH A140	[553B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A7, 0x0021 };
    uint32_t const ces[9] = { 0x553B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_255)
{
    // 144A7 003F;	
    // (𔒧) ANATOLIAN HIEROGLYPH A140	[553B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A7, 0x003F };
    uint32_t const ces[9] = { 0x553B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_256)
{
    // 144A7 0061;	
    // (𔒧) ANATOLIAN HIEROGLYPH A140	[553B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A7, 0x0061 };
    uint32_t const ces[9] = { 0x553B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_257)
{
    // 144A7 0041;	
    // (𔒧) ANATOLIAN HIEROGLYPH A140	[553B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A7, 0x0041 };
    uint32_t const ces[9] = { 0x553B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_258)
{
    // 144A7 0062;	
    // (𔒧) ANATOLIAN HIEROGLYPH A140	[553B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A7, 0x0062 };
    uint32_t const ces[9] = { 0x553B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_259)
{
    // 144A8 0021;	
    // (𔒨) ANATOLIAN HIEROGLYPH A141	[553C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A8, 0x0021 };
    uint32_t const ces[9] = { 0x553C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_260)
{
    // 144A8 003F;	
    // (𔒨) ANATOLIAN HIEROGLYPH A141	[553C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A8, 0x003F };
    uint32_t const ces[9] = { 0x553C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_261)
{
    // 144A8 0061;	
    // (𔒨) ANATOLIAN HIEROGLYPH A141	[553C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A8, 0x0061 };
    uint32_t const ces[9] = { 0x553C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_262)
{
    // 144A8 0041;	
    // (𔒨) ANATOLIAN HIEROGLYPH A141	[553C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A8, 0x0041 };
    uint32_t const ces[9] = { 0x553C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_263)
{
    // 144A8 0062;	
    // (𔒨) ANATOLIAN HIEROGLYPH A141	[553C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A8, 0x0062 };
    uint32_t const ces[9] = { 0x553C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_264)
{
    // 144A9 0021;	
    // (𔒩) ANATOLIAN HIEROGLYPH A142	[553D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A9, 0x0021 };
    uint32_t const ces[9] = { 0x553D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_265)
{
    // 144A9 003F;	
    // (𔒩) ANATOLIAN HIEROGLYPH A142	[553D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A9, 0x003F };
    uint32_t const ces[9] = { 0x553D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_266)
{
    // 144A9 0061;	
    // (𔒩) ANATOLIAN HIEROGLYPH A142	[553D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A9, 0x0061 };
    uint32_t const ces[9] = { 0x553D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_267)
{
    // 144A9 0041;	
    // (𔒩) ANATOLIAN HIEROGLYPH A142	[553D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144A9, 0x0041 };
    uint32_t const ces[9] = { 0x553D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_268)
{
    // 144A9 0062;	
    // (𔒩) ANATOLIAN HIEROGLYPH A142	[553D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144A9, 0x0062 };
    uint32_t const ces[9] = { 0x553D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_269)
{
    // 144AA 0021;	
    // (𔒪) ANATOLIAN HIEROGLYPH A143	[553E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AA, 0x0021 };
    uint32_t const ces[9] = { 0x553E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_270)
{
    // 144AA 003F;	
    // (𔒪) ANATOLIAN HIEROGLYPH A143	[553E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AA, 0x003F };
    uint32_t const ces[9] = { 0x553E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_271)
{
    // 144AA 0061;	
    // (𔒪) ANATOLIAN HIEROGLYPH A143	[553E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AA, 0x0061 };
    uint32_t const ces[9] = { 0x553E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_272)
{
    // 144AA 0041;	
    // (𔒪) ANATOLIAN HIEROGLYPH A143	[553E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AA, 0x0041 };
    uint32_t const ces[9] = { 0x553E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_273)
{
    // 144AA 0062;	
    // (𔒪) ANATOLIAN HIEROGLYPH A143	[553E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AA, 0x0062 };
    uint32_t const ces[9] = { 0x553E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_274)
{
    // 144AB 0021;	
    // (𔒫) ANATOLIAN HIEROGLYPH A144	[553F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AB, 0x0021 };
    uint32_t const ces[9] = { 0x553F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_275)
{
    // 144AB 003F;	
    // (𔒫) ANATOLIAN HIEROGLYPH A144	[553F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AB, 0x003F };
    uint32_t const ces[9] = { 0x553F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_276)
{
    // 144AB 0061;	
    // (𔒫) ANATOLIAN HIEROGLYPH A144	[553F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AB, 0x0061 };
    uint32_t const ces[9] = { 0x553F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_277)
{
    // 144AB 0041;	
    // (𔒫) ANATOLIAN HIEROGLYPH A144	[553F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AB, 0x0041 };
    uint32_t const ces[9] = { 0x553F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_278)
{
    // 144AB 0062;	
    // (𔒫) ANATOLIAN HIEROGLYPH A144	[553F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AB, 0x0062 };
    uint32_t const ces[9] = { 0x553F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_279)
{
    // 144AC 0021;	
    // (𔒬) ANATOLIAN HIEROGLYPH A145	[5540 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AC, 0x0021 };
    uint32_t const ces[9] = { 0x5540, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_280)
{
    // 144AC 003F;	
    // (𔒬) ANATOLIAN HIEROGLYPH A145	[5540 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AC, 0x003F };
    uint32_t const ces[9] = { 0x5540, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_281)
{
    // 144AC 0061;	
    // (𔒬) ANATOLIAN HIEROGLYPH A145	[5540 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AC, 0x0061 };
    uint32_t const ces[9] = { 0x5540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_282)
{
    // 144AC 0041;	
    // (𔒬) ANATOLIAN HIEROGLYPH A145	[5540 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AC, 0x0041 };
    uint32_t const ces[9] = { 0x5540, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_283)
{
    // 144AC 0062;	
    // (𔒬) ANATOLIAN HIEROGLYPH A145	[5540 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AC, 0x0062 };
    uint32_t const ces[9] = { 0x5540, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_284)
{
    // 144AD 0021;	
    // (𔒭) ANATOLIAN HIEROGLYPH A146	[5541 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AD, 0x0021 };
    uint32_t const ces[9] = { 0x5541, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_285)
{
    // 144AD 003F;	
    // (𔒭) ANATOLIAN HIEROGLYPH A146	[5541 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AD, 0x003F };
    uint32_t const ces[9] = { 0x5541, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_286)
{
    // 144AD 0061;	
    // (𔒭) ANATOLIAN HIEROGLYPH A146	[5541 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AD, 0x0061 };
    uint32_t const ces[9] = { 0x5541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_287)
{
    // 144AD 0041;	
    // (𔒭) ANATOLIAN HIEROGLYPH A146	[5541 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AD, 0x0041 };
    uint32_t const ces[9] = { 0x5541, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_288)
{
    // 144AD 0062;	
    // (𔒭) ANATOLIAN HIEROGLYPH A146	[5541 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AD, 0x0062 };
    uint32_t const ces[9] = { 0x5541, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_289)
{
    // 144AE 0021;	
    // (𔒮) ANATOLIAN HIEROGLYPH A147	[5542 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AE, 0x0021 };
    uint32_t const ces[9] = { 0x5542, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_290)
{
    // 144AE 003F;	
    // (𔒮) ANATOLIAN HIEROGLYPH A147	[5542 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AE, 0x003F };
    uint32_t const ces[9] = { 0x5542, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_291)
{
    // 144AE 0061;	
    // (𔒮) ANATOLIAN HIEROGLYPH A147	[5542 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AE, 0x0061 };
    uint32_t const ces[9] = { 0x5542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_292)
{
    // 144AE 0041;	
    // (𔒮) ANATOLIAN HIEROGLYPH A147	[5542 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AE, 0x0041 };
    uint32_t const ces[9] = { 0x5542, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_293)
{
    // 144AE 0062;	
    // (𔒮) ANATOLIAN HIEROGLYPH A147	[5542 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AE, 0x0062 };
    uint32_t const ces[9] = { 0x5542, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_294)
{
    // 144AF 0021;	
    // (𔒯) ANATOLIAN HIEROGLYPH A148	[5543 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AF, 0x0021 };
    uint32_t const ces[9] = { 0x5543, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_295)
{
    // 144AF 003F;	
    // (𔒯) ANATOLIAN HIEROGLYPH A148	[5543 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AF, 0x003F };
    uint32_t const ces[9] = { 0x5543, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_296)
{
    // 144AF 0061;	
    // (𔒯) ANATOLIAN HIEROGLYPH A148	[5543 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AF, 0x0061 };
    uint32_t const ces[9] = { 0x5543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_297)
{
    // 144AF 0041;	
    // (𔒯) ANATOLIAN HIEROGLYPH A148	[5543 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144AF, 0x0041 };
    uint32_t const ces[9] = { 0x5543, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_298)
{
    // 144AF 0062;	
    // (𔒯) ANATOLIAN HIEROGLYPH A148	[5543 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144AF, 0x0062 };
    uint32_t const ces[9] = { 0x5543, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_299)
{
    // 144B0 0021;	
    // (𔒰) ANATOLIAN HIEROGLYPH A149	[5544 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B0, 0x0021 };
    uint32_t const ces[9] = { 0x5544, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_300)
{
    // 144B0 003F;	
    // (𔒰) ANATOLIAN HIEROGLYPH A149	[5544 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B0, 0x003F };
    uint32_t const ces[9] = { 0x5544, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_301)
{
    // 144B0 0061;	
    // (𔒰) ANATOLIAN HIEROGLYPH A149	[5544 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B0, 0x0061 };
    uint32_t const ces[9] = { 0x5544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_302)
{
    // 144B0 0041;	
    // (𔒰) ANATOLIAN HIEROGLYPH A149	[5544 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B0, 0x0041 };
    uint32_t const ces[9] = { 0x5544, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_303)
{
    // 144B0 0062;	
    // (𔒰) ANATOLIAN HIEROGLYPH A149	[5544 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B0, 0x0062 };
    uint32_t const ces[9] = { 0x5544, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_304)
{
    // 144B1 0021;	
    // (𔒱) ANATOLIAN HIEROGLYPH A150	[5545 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B1, 0x0021 };
    uint32_t const ces[9] = { 0x5545, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_305)
{
    // 144B1 003F;	
    // (𔒱) ANATOLIAN HIEROGLYPH A150	[5545 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B1, 0x003F };
    uint32_t const ces[9] = { 0x5545, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_306)
{
    // 144B1 0061;	
    // (𔒱) ANATOLIAN HIEROGLYPH A150	[5545 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B1, 0x0061 };
    uint32_t const ces[9] = { 0x5545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_307)
{
    // 144B1 0041;	
    // (𔒱) ANATOLIAN HIEROGLYPH A150	[5545 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B1, 0x0041 };
    uint32_t const ces[9] = { 0x5545, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_308)
{
    // 144B1 0062;	
    // (𔒱) ANATOLIAN HIEROGLYPH A150	[5545 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B1, 0x0062 };
    uint32_t const ces[9] = { 0x5545, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_309)
{
    // 144B2 0021;	
    // (𔒲) ANATOLIAN HIEROGLYPH A151	[5546 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B2, 0x0021 };
    uint32_t const ces[9] = { 0x5546, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_310)
{
    // 144B2 003F;	
    // (𔒲) ANATOLIAN HIEROGLYPH A151	[5546 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B2, 0x003F };
    uint32_t const ces[9] = { 0x5546, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_311)
{
    // 144B2 0061;	
    // (𔒲) ANATOLIAN HIEROGLYPH A151	[5546 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B2, 0x0061 };
    uint32_t const ces[9] = { 0x5546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_312)
{
    // 144B2 0041;	
    // (𔒲) ANATOLIAN HIEROGLYPH A151	[5546 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B2, 0x0041 };
    uint32_t const ces[9] = { 0x5546, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_313)
{
    // 144B2 0062;	
    // (𔒲) ANATOLIAN HIEROGLYPH A151	[5546 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B2, 0x0062 };
    uint32_t const ces[9] = { 0x5546, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_314)
{
    // 144B3 0021;	
    // (𔒳) ANATOLIAN HIEROGLYPH A152	[5547 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B3, 0x0021 };
    uint32_t const ces[9] = { 0x5547, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_315)
{
    // 144B3 003F;	
    // (𔒳) ANATOLIAN HIEROGLYPH A152	[5547 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B3, 0x003F };
    uint32_t const ces[9] = { 0x5547, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_316)
{
    // 144B3 0061;	
    // (𔒳) ANATOLIAN HIEROGLYPH A152	[5547 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B3, 0x0061 };
    uint32_t const ces[9] = { 0x5547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_317)
{
    // 144B3 0041;	
    // (𔒳) ANATOLIAN HIEROGLYPH A152	[5547 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B3, 0x0041 };
    uint32_t const ces[9] = { 0x5547, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_318)
{
    // 144B3 0062;	
    // (𔒳) ANATOLIAN HIEROGLYPH A152	[5547 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B3, 0x0062 };
    uint32_t const ces[9] = { 0x5547, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_319)
{
    // 144B4 0021;	
    // (𔒴) ANATOLIAN HIEROGLYPH A153	[5548 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B4, 0x0021 };
    uint32_t const ces[9] = { 0x5548, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_320)
{
    // 144B4 003F;	
    // (𔒴) ANATOLIAN HIEROGLYPH A153	[5548 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B4, 0x003F };
    uint32_t const ces[9] = { 0x5548, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_321)
{
    // 144B4 0061;	
    // (𔒴) ANATOLIAN HIEROGLYPH A153	[5548 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B4, 0x0061 };
    uint32_t const ces[9] = { 0x5548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_322)
{
    // 144B4 0041;	
    // (𔒴) ANATOLIAN HIEROGLYPH A153	[5548 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B4, 0x0041 };
    uint32_t const ces[9] = { 0x5548, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_323)
{
    // 144B4 0062;	
    // (𔒴) ANATOLIAN HIEROGLYPH A153	[5548 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B4, 0x0062 };
    uint32_t const ces[9] = { 0x5548, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_324)
{
    // 144B5 0021;	
    // (𔒵) ANATOLIAN HIEROGLYPH A154	[5549 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B5, 0x0021 };
    uint32_t const ces[9] = { 0x5549, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_325)
{
    // 144B5 003F;	
    // (𔒵) ANATOLIAN HIEROGLYPH A154	[5549 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B5, 0x003F };
    uint32_t const ces[9] = { 0x5549, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_326)
{
    // 144B5 0061;	
    // (𔒵) ANATOLIAN HIEROGLYPH A154	[5549 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B5, 0x0061 };
    uint32_t const ces[9] = { 0x5549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_327)
{
    // 144B5 0041;	
    // (𔒵) ANATOLIAN HIEROGLYPH A154	[5549 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B5, 0x0041 };
    uint32_t const ces[9] = { 0x5549, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_328)
{
    // 144B5 0062;	
    // (𔒵) ANATOLIAN HIEROGLYPH A154	[5549 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B5, 0x0062 };
    uint32_t const ces[9] = { 0x5549, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_329)
{
    // 144B6 0021;	
    // (𔒶) ANATOLIAN HIEROGLYPH A155	[554A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B6, 0x0021 };
    uint32_t const ces[9] = { 0x554A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_330)
{
    // 144B6 003F;	
    // (𔒶) ANATOLIAN HIEROGLYPH A155	[554A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B6, 0x003F };
    uint32_t const ces[9] = { 0x554A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_331)
{
    // 144B6 0061;	
    // (𔒶) ANATOLIAN HIEROGLYPH A155	[554A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B6, 0x0061 };
    uint32_t const ces[9] = { 0x554A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_332)
{
    // 144B6 0041;	
    // (𔒶) ANATOLIAN HIEROGLYPH A155	[554A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B6, 0x0041 };
    uint32_t const ces[9] = { 0x554A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_333)
{
    // 144B6 0062;	
    // (𔒶) ANATOLIAN HIEROGLYPH A155	[554A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B6, 0x0062 };
    uint32_t const ces[9] = { 0x554A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_334)
{
    // 144B7 0021;	
    // (𔒷) ANATOLIAN HIEROGLYPH A156	[554B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B7, 0x0021 };
    uint32_t const ces[9] = { 0x554B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_335)
{
    // 144B7 003F;	
    // (𔒷) ANATOLIAN HIEROGLYPH A156	[554B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B7, 0x003F };
    uint32_t const ces[9] = { 0x554B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_336)
{
    // 144B7 0061;	
    // (𔒷) ANATOLIAN HIEROGLYPH A156	[554B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B7, 0x0061 };
    uint32_t const ces[9] = { 0x554B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_337)
{
    // 144B7 0041;	
    // (𔒷) ANATOLIAN HIEROGLYPH A156	[554B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B7, 0x0041 };
    uint32_t const ces[9] = { 0x554B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_338)
{
    // 144B7 0062;	
    // (𔒷) ANATOLIAN HIEROGLYPH A156	[554B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B7, 0x0062 };
    uint32_t const ces[9] = { 0x554B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_339)
{
    // 144B8 0021;	
    // (𔒸) ANATOLIAN HIEROGLYPH A157	[554C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B8, 0x0021 };
    uint32_t const ces[9] = { 0x554C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_340)
{
    // 144B8 003F;	
    // (𔒸) ANATOLIAN HIEROGLYPH A157	[554C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B8, 0x003F };
    uint32_t const ces[9] = { 0x554C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_341)
{
    // 144B8 0061;	
    // (𔒸) ANATOLIAN HIEROGLYPH A157	[554C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B8, 0x0061 };
    uint32_t const ces[9] = { 0x554C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_342)
{
    // 144B8 0041;	
    // (𔒸) ANATOLIAN HIEROGLYPH A157	[554C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B8, 0x0041 };
    uint32_t const ces[9] = { 0x554C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_343)
{
    // 144B8 0062;	
    // (𔒸) ANATOLIAN HIEROGLYPH A157	[554C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B8, 0x0062 };
    uint32_t const ces[9] = { 0x554C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_344)
{
    // 144B9 0021;	
    // (𔒹) ANATOLIAN HIEROGLYPH A158	[554D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B9, 0x0021 };
    uint32_t const ces[9] = { 0x554D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_345)
{
    // 144B9 003F;	
    // (𔒹) ANATOLIAN HIEROGLYPH A158	[554D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B9, 0x003F };
    uint32_t const ces[9] = { 0x554D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_346)
{
    // 144B9 0061;	
    // (𔒹) ANATOLIAN HIEROGLYPH A158	[554D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B9, 0x0061 };
    uint32_t const ces[9] = { 0x554D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_347)
{
    // 144B9 0041;	
    // (𔒹) ANATOLIAN HIEROGLYPH A158	[554D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144B9, 0x0041 };
    uint32_t const ces[9] = { 0x554D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_348)
{
    // 144B9 0062;	
    // (𔒹) ANATOLIAN HIEROGLYPH A158	[554D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144B9, 0x0062 };
    uint32_t const ces[9] = { 0x554D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_349)
{
    // 144BA 0021;	
    // (𔒺) ANATOLIAN HIEROGLYPH A159	[554E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BA, 0x0021 };
    uint32_t const ces[9] = { 0x554E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_350)
{
    // 144BA 003F;	
    // (𔒺) ANATOLIAN HIEROGLYPH A159	[554E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BA, 0x003F };
    uint32_t const ces[9] = { 0x554E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_351)
{
    // 144BA 0061;	
    // (𔒺) ANATOLIAN HIEROGLYPH A159	[554E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BA, 0x0061 };
    uint32_t const ces[9] = { 0x554E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_352)
{
    // 144BA 0041;	
    // (𔒺) ANATOLIAN HIEROGLYPH A159	[554E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BA, 0x0041 };
    uint32_t const ces[9] = { 0x554E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_353)
{
    // 144BA 0062;	
    // (𔒺) ANATOLIAN HIEROGLYPH A159	[554E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BA, 0x0062 };
    uint32_t const ces[9] = { 0x554E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_354)
{
    // 144BB 0021;	
    // (𔒻) ANATOLIAN HIEROGLYPH A160	[554F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BB, 0x0021 };
    uint32_t const ces[9] = { 0x554F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_355)
{
    // 144BB 003F;	
    // (𔒻) ANATOLIAN HIEROGLYPH A160	[554F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BB, 0x003F };
    uint32_t const ces[9] = { 0x554F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_356)
{
    // 144BB 0061;	
    // (𔒻) ANATOLIAN HIEROGLYPH A160	[554F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BB, 0x0061 };
    uint32_t const ces[9] = { 0x554F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_357)
{
    // 144BB 0041;	
    // (𔒻) ANATOLIAN HIEROGLYPH A160	[554F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BB, 0x0041 };
    uint32_t const ces[9] = { 0x554F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_358)
{
    // 144BB 0062;	
    // (𔒻) ANATOLIAN HIEROGLYPH A160	[554F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BB, 0x0062 };
    uint32_t const ces[9] = { 0x554F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_359)
{
    // 144BC 0021;	
    // (𔒼) ANATOLIAN HIEROGLYPH A161	[5550 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BC, 0x0021 };
    uint32_t const ces[9] = { 0x5550, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_360)
{
    // 144BC 003F;	
    // (𔒼) ANATOLIAN HIEROGLYPH A161	[5550 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BC, 0x003F };
    uint32_t const ces[9] = { 0x5550, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_361)
{
    // 144BC 0061;	
    // (𔒼) ANATOLIAN HIEROGLYPH A161	[5550 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BC, 0x0061 };
    uint32_t const ces[9] = { 0x5550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_362)
{
    // 144BC 0041;	
    // (𔒼) ANATOLIAN HIEROGLYPH A161	[5550 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BC, 0x0041 };
    uint32_t const ces[9] = { 0x5550, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_363)
{
    // 144BC 0062;	
    // (𔒼) ANATOLIAN HIEROGLYPH A161	[5550 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BC, 0x0062 };
    uint32_t const ces[9] = { 0x5550, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_364)
{
    // 144BD 0021;	
    // (𔒽) ANATOLIAN HIEROGLYPH A162	[5551 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BD, 0x0021 };
    uint32_t const ces[9] = { 0x5551, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_365)
{
    // 144BD 003F;	
    // (𔒽) ANATOLIAN HIEROGLYPH A162	[5551 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BD, 0x003F };
    uint32_t const ces[9] = { 0x5551, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_366)
{
    // 144BD 0061;	
    // (𔒽) ANATOLIAN HIEROGLYPH A162	[5551 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BD, 0x0061 };
    uint32_t const ces[9] = { 0x5551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_367)
{
    // 144BD 0041;	
    // (𔒽) ANATOLIAN HIEROGLYPH A162	[5551 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BD, 0x0041 };
    uint32_t const ces[9] = { 0x5551, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_368)
{
    // 144BD 0062;	
    // (𔒽) ANATOLIAN HIEROGLYPH A162	[5551 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BD, 0x0062 };
    uint32_t const ces[9] = { 0x5551, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_369)
{
    // 144BE 0021;	
    // (𔒾) ANATOLIAN HIEROGLYPH A163	[5552 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BE, 0x0021 };
    uint32_t const ces[9] = { 0x5552, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_370)
{
    // 144BE 003F;	
    // (𔒾) ANATOLIAN HIEROGLYPH A163	[5552 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BE, 0x003F };
    uint32_t const ces[9] = { 0x5552, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_371)
{
    // 144BE 0061;	
    // (𔒾) ANATOLIAN HIEROGLYPH A163	[5552 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BE, 0x0061 };
    uint32_t const ces[9] = { 0x5552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_372)
{
    // 144BE 0041;	
    // (𔒾) ANATOLIAN HIEROGLYPH A163	[5552 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BE, 0x0041 };
    uint32_t const ces[9] = { 0x5552, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_373)
{
    // 144BE 0062;	
    // (𔒾) ANATOLIAN HIEROGLYPH A163	[5552 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BE, 0x0062 };
    uint32_t const ces[9] = { 0x5552, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_374)
{
    // 144BF 0021;	
    // (𔒿) ANATOLIAN HIEROGLYPH A164	[5553 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BF, 0x0021 };
    uint32_t const ces[9] = { 0x5553, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_375)
{
    // 144BF 003F;	
    // (𔒿) ANATOLIAN HIEROGLYPH A164	[5553 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BF, 0x003F };
    uint32_t const ces[9] = { 0x5553, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_376)
{
    // 144BF 0061;	
    // (𔒿) ANATOLIAN HIEROGLYPH A164	[5553 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BF, 0x0061 };
    uint32_t const ces[9] = { 0x5553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_377)
{
    // 144BF 0041;	
    // (𔒿) ANATOLIAN HIEROGLYPH A164	[5553 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144BF, 0x0041 };
    uint32_t const ces[9] = { 0x5553, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_378)
{
    // 144BF 0062;	
    // (𔒿) ANATOLIAN HIEROGLYPH A164	[5553 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144BF, 0x0062 };
    uint32_t const ces[9] = { 0x5553, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_379)
{
    // 144C0 0021;	
    // (𔓀) ANATOLIAN HIEROGLYPH A165	[5554 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C0, 0x0021 };
    uint32_t const ces[9] = { 0x5554, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_380)
{
    // 144C0 003F;	
    // (𔓀) ANATOLIAN HIEROGLYPH A165	[5554 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C0, 0x003F };
    uint32_t const ces[9] = { 0x5554, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_381)
{
    // 144C0 0061;	
    // (𔓀) ANATOLIAN HIEROGLYPH A165	[5554 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C0, 0x0061 };
    uint32_t const ces[9] = { 0x5554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_382)
{
    // 144C0 0041;	
    // (𔓀) ANATOLIAN HIEROGLYPH A165	[5554 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C0, 0x0041 };
    uint32_t const ces[9] = { 0x5554, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_383)
{
    // 144C0 0062;	
    // (𔓀) ANATOLIAN HIEROGLYPH A165	[5554 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C0, 0x0062 };
    uint32_t const ces[9] = { 0x5554, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_384)
{
    // 144C1 0021;	
    // (𔓁) ANATOLIAN HIEROGLYPH A166	[5555 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C1, 0x0021 };
    uint32_t const ces[9] = { 0x5555, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_385)
{
    // 144C1 003F;	
    // (𔓁) ANATOLIAN HIEROGLYPH A166	[5555 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C1, 0x003F };
    uint32_t const ces[9] = { 0x5555, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_386)
{
    // 144C1 0061;	
    // (𔓁) ANATOLIAN HIEROGLYPH A166	[5555 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C1, 0x0061 };
    uint32_t const ces[9] = { 0x5555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_387)
{
    // 144C1 0041;	
    // (𔓁) ANATOLIAN HIEROGLYPH A166	[5555 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C1, 0x0041 };
    uint32_t const ces[9] = { 0x5555, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_388)
{
    // 144C1 0062;	
    // (𔓁) ANATOLIAN HIEROGLYPH A166	[5555 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C1, 0x0062 };
    uint32_t const ces[9] = { 0x5555, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_389)
{
    // 144C2 0021;	
    // (𔓂) ANATOLIAN HIEROGLYPH A167	[5556 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C2, 0x0021 };
    uint32_t const ces[9] = { 0x5556, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_390)
{
    // 144C2 003F;	
    // (𔓂) ANATOLIAN HIEROGLYPH A167	[5556 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C2, 0x003F };
    uint32_t const ces[9] = { 0x5556, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_391)
{
    // 144C2 0061;	
    // (𔓂) ANATOLIAN HIEROGLYPH A167	[5556 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C2, 0x0061 };
    uint32_t const ces[9] = { 0x5556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_392)
{
    // 144C2 0041;	
    // (𔓂) ANATOLIAN HIEROGLYPH A167	[5556 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C2, 0x0041 };
    uint32_t const ces[9] = { 0x5556, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_393)
{
    // 144C2 0062;	
    // (𔓂) ANATOLIAN HIEROGLYPH A167	[5556 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C2, 0x0062 };
    uint32_t const ces[9] = { 0x5556, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_394)
{
    // 144C3 0021;	
    // (𔓃) ANATOLIAN HIEROGLYPH A168	[5557 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C3, 0x0021 };
    uint32_t const ces[9] = { 0x5557, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_395)
{
    // 144C3 003F;	
    // (𔓃) ANATOLIAN HIEROGLYPH A168	[5557 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C3, 0x003F };
    uint32_t const ces[9] = { 0x5557, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_396)
{
    // 144C3 0061;	
    // (𔓃) ANATOLIAN HIEROGLYPH A168	[5557 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C3, 0x0061 };
    uint32_t const ces[9] = { 0x5557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_397)
{
    // 144C3 0041;	
    // (𔓃) ANATOLIAN HIEROGLYPH A168	[5557 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C3, 0x0041 };
    uint32_t const ces[9] = { 0x5557, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_398)
{
    // 144C3 0062;	
    // (𔓃) ANATOLIAN HIEROGLYPH A168	[5557 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C3, 0x0062 };
    uint32_t const ces[9] = { 0x5557, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_399)
{
    // 144C4 0021;	
    // (𔓄) ANATOLIAN HIEROGLYPH A169	[5558 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C4, 0x0021 };
    uint32_t const ces[9] = { 0x5558, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_400)
{
    // 144C4 003F;	
    // (𔓄) ANATOLIAN HIEROGLYPH A169	[5558 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C4, 0x003F };
    uint32_t const ces[9] = { 0x5558, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_401)
{
    // 144C4 0061;	
    // (𔓄) ANATOLIAN HIEROGLYPH A169	[5558 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C4, 0x0061 };
    uint32_t const ces[9] = { 0x5558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_402)
{
    // 144C4 0041;	
    // (𔓄) ANATOLIAN HIEROGLYPH A169	[5558 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C4, 0x0041 };
    uint32_t const ces[9] = { 0x5558, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_403)
{
    // 144C4 0062;	
    // (𔓄) ANATOLIAN HIEROGLYPH A169	[5558 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C4, 0x0062 };
    uint32_t const ces[9] = { 0x5558, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_404)
{
    // 144C5 0021;	
    // (𔓅) ANATOLIAN HIEROGLYPH A170	[5559 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C5, 0x0021 };
    uint32_t const ces[9] = { 0x5559, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_405)
{
    // 144C5 003F;	
    // (𔓅) ANATOLIAN HIEROGLYPH A170	[5559 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C5, 0x003F };
    uint32_t const ces[9] = { 0x5559, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_406)
{
    // 144C5 0061;	
    // (𔓅) ANATOLIAN HIEROGLYPH A170	[5559 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C5, 0x0061 };
    uint32_t const ces[9] = { 0x5559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_407)
{
    // 144C5 0041;	
    // (𔓅) ANATOLIAN HIEROGLYPH A170	[5559 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C5, 0x0041 };
    uint32_t const ces[9] = { 0x5559, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_408)
{
    // 144C5 0062;	
    // (𔓅) ANATOLIAN HIEROGLYPH A170	[5559 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C5, 0x0062 };
    uint32_t const ces[9] = { 0x5559, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_409)
{
    // 144C6 0021;	
    // (𔓆) ANATOLIAN HIEROGLYPH A171	[555A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C6, 0x0021 };
    uint32_t const ces[9] = { 0x555A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_410)
{
    // 144C6 003F;	
    // (𔓆) ANATOLIAN HIEROGLYPH A171	[555A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C6, 0x003F };
    uint32_t const ces[9] = { 0x555A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_411)
{
    // 144C6 0061;	
    // (𔓆) ANATOLIAN HIEROGLYPH A171	[555A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C6, 0x0061 };
    uint32_t const ces[9] = { 0x555A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_412)
{
    // 144C6 0041;	
    // (𔓆) ANATOLIAN HIEROGLYPH A171	[555A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C6, 0x0041 };
    uint32_t const ces[9] = { 0x555A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_413)
{
    // 144C6 0062;	
    // (𔓆) ANATOLIAN HIEROGLYPH A171	[555A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C6, 0x0062 };
    uint32_t const ces[9] = { 0x555A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_414)
{
    // 144C7 0021;	
    // (𔓇) ANATOLIAN HIEROGLYPH A172	[555B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C7, 0x0021 };
    uint32_t const ces[9] = { 0x555B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_415)
{
    // 144C7 003F;	
    // (𔓇) ANATOLIAN HIEROGLYPH A172	[555B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C7, 0x003F };
    uint32_t const ces[9] = { 0x555B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_416)
{
    // 144C7 0061;	
    // (𔓇) ANATOLIAN HIEROGLYPH A172	[555B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C7, 0x0061 };
    uint32_t const ces[9] = { 0x555B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_417)
{
    // 144C7 0041;	
    // (𔓇) ANATOLIAN HIEROGLYPH A172	[555B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C7, 0x0041 };
    uint32_t const ces[9] = { 0x555B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_418)
{
    // 144C7 0062;	
    // (𔓇) ANATOLIAN HIEROGLYPH A172	[555B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C7, 0x0062 };
    uint32_t const ces[9] = { 0x555B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_419)
{
    // 144C8 0021;	
    // (𔓈) ANATOLIAN HIEROGLYPH A173	[555C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C8, 0x0021 };
    uint32_t const ces[9] = { 0x555C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_420)
{
    // 144C8 003F;	
    // (𔓈) ANATOLIAN HIEROGLYPH A173	[555C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C8, 0x003F };
    uint32_t const ces[9] = { 0x555C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_421)
{
    // 144C8 0061;	
    // (𔓈) ANATOLIAN HIEROGLYPH A173	[555C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C8, 0x0061 };
    uint32_t const ces[9] = { 0x555C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_422)
{
    // 144C8 0041;	
    // (𔓈) ANATOLIAN HIEROGLYPH A173	[555C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C8, 0x0041 };
    uint32_t const ces[9] = { 0x555C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_423)
{
    // 144C8 0062;	
    // (𔓈) ANATOLIAN HIEROGLYPH A173	[555C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C8, 0x0062 };
    uint32_t const ces[9] = { 0x555C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_424)
{
    // 144C9 0021;	
    // (𔓉) ANATOLIAN HIEROGLYPH A174	[555D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C9, 0x0021 };
    uint32_t const ces[9] = { 0x555D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_425)
{
    // 144C9 003F;	
    // (𔓉) ANATOLIAN HIEROGLYPH A174	[555D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C9, 0x003F };
    uint32_t const ces[9] = { 0x555D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_426)
{
    // 144C9 0061;	
    // (𔓉) ANATOLIAN HIEROGLYPH A174	[555D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C9, 0x0061 };
    uint32_t const ces[9] = { 0x555D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_427)
{
    // 144C9 0041;	
    // (𔓉) ANATOLIAN HIEROGLYPH A174	[555D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144C9, 0x0041 };
    uint32_t const ces[9] = { 0x555D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_428)
{
    // 144C9 0062;	
    // (𔓉) ANATOLIAN HIEROGLYPH A174	[555D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144C9, 0x0062 };
    uint32_t const ces[9] = { 0x555D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_429)
{
    // 144CA 0021;	
    // (𔓊) ANATOLIAN HIEROGLYPH A175	[555E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CA, 0x0021 };
    uint32_t const ces[9] = { 0x555E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_430)
{
    // 144CA 003F;	
    // (𔓊) ANATOLIAN HIEROGLYPH A175	[555E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CA, 0x003F };
    uint32_t const ces[9] = { 0x555E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_431)
{
    // 144CA 0061;	
    // (𔓊) ANATOLIAN HIEROGLYPH A175	[555E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CA, 0x0061 };
    uint32_t const ces[9] = { 0x555E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_432)
{
    // 144CA 0041;	
    // (𔓊) ANATOLIAN HIEROGLYPH A175	[555E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CA, 0x0041 };
    uint32_t const ces[9] = { 0x555E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_433)
{
    // 144CA 0062;	
    // (𔓊) ANATOLIAN HIEROGLYPH A175	[555E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CA, 0x0062 };
    uint32_t const ces[9] = { 0x555E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_434)
{
    // 144CB 0021;	
    // (𔓋) ANATOLIAN HIEROGLYPH A176	[555F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CB, 0x0021 };
    uint32_t const ces[9] = { 0x555F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_435)
{
    // 144CB 003F;	
    // (𔓋) ANATOLIAN HIEROGLYPH A176	[555F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CB, 0x003F };
    uint32_t const ces[9] = { 0x555F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_436)
{
    // 144CB 0061;	
    // (𔓋) ANATOLIAN HIEROGLYPH A176	[555F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CB, 0x0061 };
    uint32_t const ces[9] = { 0x555F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_437)
{
    // 144CB 0041;	
    // (𔓋) ANATOLIAN HIEROGLYPH A176	[555F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CB, 0x0041 };
    uint32_t const ces[9] = { 0x555F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_438)
{
    // 144CB 0062;	
    // (𔓋) ANATOLIAN HIEROGLYPH A176	[555F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CB, 0x0062 };
    uint32_t const ces[9] = { 0x555F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_439)
{
    // 144CC 0021;	
    // (𔓌) ANATOLIAN HIEROGLYPH A177	[5560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CC, 0x0021 };
    uint32_t const ces[9] = { 0x5560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_440)
{
    // 144CC 003F;	
    // (𔓌) ANATOLIAN HIEROGLYPH A177	[5560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CC, 0x003F };
    uint32_t const ces[9] = { 0x5560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_441)
{
    // 144CC 0061;	
    // (𔓌) ANATOLIAN HIEROGLYPH A177	[5560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CC, 0x0061 };
    uint32_t const ces[9] = { 0x5560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_442)
{
    // 144CC 0041;	
    // (𔓌) ANATOLIAN HIEROGLYPH A177	[5560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CC, 0x0041 };
    uint32_t const ces[9] = { 0x5560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_443)
{
    // 144CC 0062;	
    // (𔓌) ANATOLIAN HIEROGLYPH A177	[5560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CC, 0x0062 };
    uint32_t const ces[9] = { 0x5560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_444)
{
    // 144CD 0021;	
    // (𔓍) ANATOLIAN HIEROGLYPH A178	[5561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CD, 0x0021 };
    uint32_t const ces[9] = { 0x5561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_445)
{
    // 144CD 003F;	
    // (𔓍) ANATOLIAN HIEROGLYPH A178	[5561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CD, 0x003F };
    uint32_t const ces[9] = { 0x5561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_446)
{
    // 144CD 0061;	
    // (𔓍) ANATOLIAN HIEROGLYPH A178	[5561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CD, 0x0061 };
    uint32_t const ces[9] = { 0x5561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_447)
{
    // 144CD 0041;	
    // (𔓍) ANATOLIAN HIEROGLYPH A178	[5561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CD, 0x0041 };
    uint32_t const ces[9] = { 0x5561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_448)
{
    // 144CD 0062;	
    // (𔓍) ANATOLIAN HIEROGLYPH A178	[5561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CD, 0x0062 };
    uint32_t const ces[9] = { 0x5561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_449)
{
    // 144CE 0021;	
    // (𔓎) ANATOLIAN HIEROGLYPH A179	[5562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CE, 0x0021 };
    uint32_t const ces[9] = { 0x5562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_450)
{
    // 144CE 003F;	
    // (𔓎) ANATOLIAN HIEROGLYPH A179	[5562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CE, 0x003F };
    uint32_t const ces[9] = { 0x5562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_451)
{
    // 144CE 0061;	
    // (𔓎) ANATOLIAN HIEROGLYPH A179	[5562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CE, 0x0061 };
    uint32_t const ces[9] = { 0x5562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_452)
{
    // 144CE 0041;	
    // (𔓎) ANATOLIAN HIEROGLYPH A179	[5562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CE, 0x0041 };
    uint32_t const ces[9] = { 0x5562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_453)
{
    // 144CE 0062;	
    // (𔓎) ANATOLIAN HIEROGLYPH A179	[5562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CE, 0x0062 };
    uint32_t const ces[9] = { 0x5562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_454)
{
    // 144CF 0021;	
    // (𔓏) ANATOLIAN HIEROGLYPH A180	[5563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CF, 0x0021 };
    uint32_t const ces[9] = { 0x5563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_455)
{
    // 144CF 003F;	
    // (𔓏) ANATOLIAN HIEROGLYPH A180	[5563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CF, 0x003F };
    uint32_t const ces[9] = { 0x5563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_456)
{
    // 144CF 0061;	
    // (𔓏) ANATOLIAN HIEROGLYPH A180	[5563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CF, 0x0061 };
    uint32_t const ces[9] = { 0x5563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_457)
{
    // 144CF 0041;	
    // (𔓏) ANATOLIAN HIEROGLYPH A180	[5563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144CF, 0x0041 };
    uint32_t const ces[9] = { 0x5563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_458)
{
    // 144CF 0062;	
    // (𔓏) ANATOLIAN HIEROGLYPH A180	[5563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144CF, 0x0062 };
    uint32_t const ces[9] = { 0x5563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_459)
{
    // 144D0 0021;	
    // (𔓐) ANATOLIAN HIEROGLYPH A181	[5564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D0, 0x0021 };
    uint32_t const ces[9] = { 0x5564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_460)
{
    // 144D0 003F;	
    // (𔓐) ANATOLIAN HIEROGLYPH A181	[5564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D0, 0x003F };
    uint32_t const ces[9] = { 0x5564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_461)
{
    // 144D0 0061;	
    // (𔓐) ANATOLIAN HIEROGLYPH A181	[5564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D0, 0x0061 };
    uint32_t const ces[9] = { 0x5564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_462)
{
    // 144D0 0041;	
    // (𔓐) ANATOLIAN HIEROGLYPH A181	[5564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D0, 0x0041 };
    uint32_t const ces[9] = { 0x5564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_463)
{
    // 144D0 0062;	
    // (𔓐) ANATOLIAN HIEROGLYPH A181	[5564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D0, 0x0062 };
    uint32_t const ces[9] = { 0x5564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_464)
{
    // 144D1 0021;	
    // (𔓑) ANATOLIAN HIEROGLYPH A182	[5565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D1, 0x0021 };
    uint32_t const ces[9] = { 0x5565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_465)
{
    // 144D1 003F;	
    // (𔓑) ANATOLIAN HIEROGLYPH A182	[5565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D1, 0x003F };
    uint32_t const ces[9] = { 0x5565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_466)
{
    // 144D1 0061;	
    // (𔓑) ANATOLIAN HIEROGLYPH A182	[5565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D1, 0x0061 };
    uint32_t const ces[9] = { 0x5565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_467)
{
    // 144D1 0041;	
    // (𔓑) ANATOLIAN HIEROGLYPH A182	[5565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D1, 0x0041 };
    uint32_t const ces[9] = { 0x5565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_468)
{
    // 144D1 0062;	
    // (𔓑) ANATOLIAN HIEROGLYPH A182	[5565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D1, 0x0062 };
    uint32_t const ces[9] = { 0x5565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_469)
{
    // 144D2 0021;	
    // (𔓒) ANATOLIAN HIEROGLYPH A183	[5566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D2, 0x0021 };
    uint32_t const ces[9] = { 0x5566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_470)
{
    // 144D2 003F;	
    // (𔓒) ANATOLIAN HIEROGLYPH A183	[5566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D2, 0x003F };
    uint32_t const ces[9] = { 0x5566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_471)
{
    // 144D2 0061;	
    // (𔓒) ANATOLIAN HIEROGLYPH A183	[5566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D2, 0x0061 };
    uint32_t const ces[9] = { 0x5566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_472)
{
    // 144D2 0041;	
    // (𔓒) ANATOLIAN HIEROGLYPH A183	[5566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D2, 0x0041 };
    uint32_t const ces[9] = { 0x5566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_473)
{
    // 144D2 0062;	
    // (𔓒) ANATOLIAN HIEROGLYPH A183	[5566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D2, 0x0062 };
    uint32_t const ces[9] = { 0x5566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_474)
{
    // 144D3 0021;	
    // (𔓓) ANATOLIAN HIEROGLYPH A184	[5567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D3, 0x0021 };
    uint32_t const ces[9] = { 0x5567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_475)
{
    // 144D3 003F;	
    // (𔓓) ANATOLIAN HIEROGLYPH A184	[5567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D3, 0x003F };
    uint32_t const ces[9] = { 0x5567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_476)
{
    // 144D3 0061;	
    // (𔓓) ANATOLIAN HIEROGLYPH A184	[5567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D3, 0x0061 };
    uint32_t const ces[9] = { 0x5567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_477)
{
    // 144D3 0041;	
    // (𔓓) ANATOLIAN HIEROGLYPH A184	[5567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D3, 0x0041 };
    uint32_t const ces[9] = { 0x5567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_478)
{
    // 144D3 0062;	
    // (𔓓) ANATOLIAN HIEROGLYPH A184	[5567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D3, 0x0062 };
    uint32_t const ces[9] = { 0x5567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_479)
{
    // 144D4 0021;	
    // (𔓔) ANATOLIAN HIEROGLYPH A185	[5568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D4, 0x0021 };
    uint32_t const ces[9] = { 0x5568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_480)
{
    // 144D4 003F;	
    // (𔓔) ANATOLIAN HIEROGLYPH A185	[5568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D4, 0x003F };
    uint32_t const ces[9] = { 0x5568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_481)
{
    // 144D4 0061;	
    // (𔓔) ANATOLIAN HIEROGLYPH A185	[5568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D4, 0x0061 };
    uint32_t const ces[9] = { 0x5568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_482)
{
    // 144D4 0041;	
    // (𔓔) ANATOLIAN HIEROGLYPH A185	[5568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D4, 0x0041 };
    uint32_t const ces[9] = { 0x5568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_483)
{
    // 144D4 0062;	
    // (𔓔) ANATOLIAN HIEROGLYPH A185	[5568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D4, 0x0062 };
    uint32_t const ces[9] = { 0x5568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_484)
{
    // 144D5 0021;	
    // (𔓕) ANATOLIAN HIEROGLYPH A186	[5569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D5, 0x0021 };
    uint32_t const ces[9] = { 0x5569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_485)
{
    // 144D5 003F;	
    // (𔓕) ANATOLIAN HIEROGLYPH A186	[5569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D5, 0x003F };
    uint32_t const ces[9] = { 0x5569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_486)
{
    // 144D5 0061;	
    // (𔓕) ANATOLIAN HIEROGLYPH A186	[5569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D5, 0x0061 };
    uint32_t const ces[9] = { 0x5569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_487)
{
    // 144D5 0041;	
    // (𔓕) ANATOLIAN HIEROGLYPH A186	[5569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D5, 0x0041 };
    uint32_t const ces[9] = { 0x5569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_488)
{
    // 144D5 0062;	
    // (𔓕) ANATOLIAN HIEROGLYPH A186	[5569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D5, 0x0062 };
    uint32_t const ces[9] = { 0x5569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_489)
{
    // 144D6 0021;	
    // (𔓖) ANATOLIAN HIEROGLYPH A187	[556A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D6, 0x0021 };
    uint32_t const ces[9] = { 0x556A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_490)
{
    // 144D6 003F;	
    // (𔓖) ANATOLIAN HIEROGLYPH A187	[556A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D6, 0x003F };
    uint32_t const ces[9] = { 0x556A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_491)
{
    // 144D6 0061;	
    // (𔓖) ANATOLIAN HIEROGLYPH A187	[556A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D6, 0x0061 };
    uint32_t const ces[9] = { 0x556A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_492)
{
    // 144D6 0041;	
    // (𔓖) ANATOLIAN HIEROGLYPH A187	[556A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D6, 0x0041 };
    uint32_t const ces[9] = { 0x556A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_493)
{
    // 144D6 0062;	
    // (𔓖) ANATOLIAN HIEROGLYPH A187	[556A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D6, 0x0062 };
    uint32_t const ces[9] = { 0x556A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_494)
{
    // 144D7 0021;	
    // (𔓗) ANATOLIAN HIEROGLYPH A188	[556B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D7, 0x0021 };
    uint32_t const ces[9] = { 0x556B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_495)
{
    // 144D7 003F;	
    // (𔓗) ANATOLIAN HIEROGLYPH A188	[556B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D7, 0x003F };
    uint32_t const ces[9] = { 0x556B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_496)
{
    // 144D7 0061;	
    // (𔓗) ANATOLIAN HIEROGLYPH A188	[556B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D7, 0x0061 };
    uint32_t const ces[9] = { 0x556B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_497)
{
    // 144D7 0041;	
    // (𔓗) ANATOLIAN HIEROGLYPH A188	[556B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x144D7, 0x0041 };
    uint32_t const ces[9] = { 0x556B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_498)
{
    // 144D7 0062;	
    // (𔓗) ANATOLIAN HIEROGLYPH A188	[556B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D7, 0x0062 };
    uint32_t const ces[9] = { 0x556B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_309_499)
{
    // 144D8 0021;	
    // (𔓘) ANATOLIAN HIEROGLYPH A189	[556C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x144D8, 0x0021 };
    uint32_t const ces[9] = { 0x556C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

