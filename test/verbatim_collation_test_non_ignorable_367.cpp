// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_367_000)
{
    // 438D 003F;	
    // (䎍) CJK UNIFIED IDEOGRAPH-438D	[FB80 C38D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_001)
{
    // 438D 0061;	
    // (䎍) CJK UNIFIED IDEOGRAPH-438D	[FB80 C38D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_002)
{
    // 438D 0041;	
    // (䎍) CJK UNIFIED IDEOGRAPH-438D	[FB80 C38D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_003)
{
    // 438D 0062;	
    // (䎍) CJK UNIFIED IDEOGRAPH-438D	[FB80 C38D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_004)
{
    // 438E 0021;	
    // (䎎) CJK UNIFIED IDEOGRAPH-438E	[FB80 C38E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_005)
{
    // 438E 003F;	
    // (䎎) CJK UNIFIED IDEOGRAPH-438E	[FB80 C38E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_006)
{
    // 438E 0061;	
    // (䎎) CJK UNIFIED IDEOGRAPH-438E	[FB80 C38E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_007)
{
    // 438E 0041;	
    // (䎎) CJK UNIFIED IDEOGRAPH-438E	[FB80 C38E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_008)
{
    // 438E 0062;	
    // (䎎) CJK UNIFIED IDEOGRAPH-438E	[FB80 C38E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_009)
{
    // 438F 0021;	
    // (䎏) CJK UNIFIED IDEOGRAPH-438F	[FB80 C38F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC38F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_010)
{
    // 438F 003F;	
    // (䎏) CJK UNIFIED IDEOGRAPH-438F	[FB80 C38F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC38F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_011)
{
    // 438F 0061;	
    // (䎏) CJK UNIFIED IDEOGRAPH-438F	[FB80 C38F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC38F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_012)
{
    // 438F 0041;	
    // (䎏) CJK UNIFIED IDEOGRAPH-438F	[FB80 C38F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x438F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC38F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_013)
{
    // 438F 0062;	
    // (䎏) CJK UNIFIED IDEOGRAPH-438F	[FB80 C38F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x438F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC38F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_014)
{
    // 4390 0021;	
    // (䎐) CJK UNIFIED IDEOGRAPH-4390	[FB80 C390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4390, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_015)
{
    // 4390 003F;	
    // (䎐) CJK UNIFIED IDEOGRAPH-4390	[FB80 C390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4390, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_016)
{
    // 4390 0061;	
    // (䎐) CJK UNIFIED IDEOGRAPH-4390	[FB80 C390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4390, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_017)
{
    // 4390 0041;	
    // (䎐) CJK UNIFIED IDEOGRAPH-4390	[FB80 C390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4390, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_018)
{
    // 4390 0062;	
    // (䎐) CJK UNIFIED IDEOGRAPH-4390	[FB80 C390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4390, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_019)
{
    // 4391 0021;	
    // (䎑) CJK UNIFIED IDEOGRAPH-4391	[FB80 C391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4391, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_020)
{
    // 4391 003F;	
    // (䎑) CJK UNIFIED IDEOGRAPH-4391	[FB80 C391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4391, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_021)
{
    // 4391 0061;	
    // (䎑) CJK UNIFIED IDEOGRAPH-4391	[FB80 C391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4391, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_022)
{
    // 4391 0041;	
    // (䎑) CJK UNIFIED IDEOGRAPH-4391	[FB80 C391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4391, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_023)
{
    // 4391 0062;	
    // (䎑) CJK UNIFIED IDEOGRAPH-4391	[FB80 C391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4391, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_024)
{
    // 4392 0021;	
    // (䎒) CJK UNIFIED IDEOGRAPH-4392	[FB80 C392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4392, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_025)
{
    // 4392 003F;	
    // (䎒) CJK UNIFIED IDEOGRAPH-4392	[FB80 C392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4392, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_026)
{
    // 4392 0061;	
    // (䎒) CJK UNIFIED IDEOGRAPH-4392	[FB80 C392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4392, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_027)
{
    // 4392 0041;	
    // (䎒) CJK UNIFIED IDEOGRAPH-4392	[FB80 C392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4392, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_028)
{
    // 4392 0062;	
    // (䎒) CJK UNIFIED IDEOGRAPH-4392	[FB80 C392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4392, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_029)
{
    // 4393 0021;	
    // (䎓) CJK UNIFIED IDEOGRAPH-4393	[FB80 C393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4393, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_030)
{
    // 4393 003F;	
    // (䎓) CJK UNIFIED IDEOGRAPH-4393	[FB80 C393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4393, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_031)
{
    // 4393 0061;	
    // (䎓) CJK UNIFIED IDEOGRAPH-4393	[FB80 C393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4393, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_032)
{
    // 4393 0041;	
    // (䎓) CJK UNIFIED IDEOGRAPH-4393	[FB80 C393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4393, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_033)
{
    // 4393 0062;	
    // (䎓) CJK UNIFIED IDEOGRAPH-4393	[FB80 C393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4393, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_034)
{
    // 4394 0021;	
    // (䎔) CJK UNIFIED IDEOGRAPH-4394	[FB80 C394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4394, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_035)
{
    // 4394 003F;	
    // (䎔) CJK UNIFIED IDEOGRAPH-4394	[FB80 C394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4394, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_036)
{
    // 4394 0061;	
    // (䎔) CJK UNIFIED IDEOGRAPH-4394	[FB80 C394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4394, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_037)
{
    // 4394 0041;	
    // (䎔) CJK UNIFIED IDEOGRAPH-4394	[FB80 C394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4394, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_038)
{
    // 4394 0062;	
    // (䎔) CJK UNIFIED IDEOGRAPH-4394	[FB80 C394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4394, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_039)
{
    // 4395 0021;	
    // (䎕) CJK UNIFIED IDEOGRAPH-4395	[FB80 C395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4395, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_040)
{
    // 4395 003F;	
    // (䎕) CJK UNIFIED IDEOGRAPH-4395	[FB80 C395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4395, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_041)
{
    // 4395 0061;	
    // (䎕) CJK UNIFIED IDEOGRAPH-4395	[FB80 C395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4395, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_042)
{
    // 4395 0041;	
    // (䎕) CJK UNIFIED IDEOGRAPH-4395	[FB80 C395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4395, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_043)
{
    // 4395 0062;	
    // (䎕) CJK UNIFIED IDEOGRAPH-4395	[FB80 C395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4395, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_044)
{
    // 4396 0021;	
    // (䎖) CJK UNIFIED IDEOGRAPH-4396	[FB80 C396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4396, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_045)
{
    // 4396 003F;	
    // (䎖) CJK UNIFIED IDEOGRAPH-4396	[FB80 C396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4396, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_046)
{
    // 4396 0061;	
    // (䎖) CJK UNIFIED IDEOGRAPH-4396	[FB80 C396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4396, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_047)
{
    // 4396 0041;	
    // (䎖) CJK UNIFIED IDEOGRAPH-4396	[FB80 C396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4396, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_048)
{
    // 4396 0062;	
    // (䎖) CJK UNIFIED IDEOGRAPH-4396	[FB80 C396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4396, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_049)
{
    // 4397 0021;	
    // (䎗) CJK UNIFIED IDEOGRAPH-4397	[FB80 C397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4397, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_050)
{
    // 4397 003F;	
    // (䎗) CJK UNIFIED IDEOGRAPH-4397	[FB80 C397 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4397, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC397, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_051)
{
    // 4397 0061;	
    // (䎗) CJK UNIFIED IDEOGRAPH-4397	[FB80 C397 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4397, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_052)
{
    // 4397 0041;	
    // (䎗) CJK UNIFIED IDEOGRAPH-4397	[FB80 C397 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4397, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC397, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_053)
{
    // 4397 0062;	
    // (䎗) CJK UNIFIED IDEOGRAPH-4397	[FB80 C397 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4397, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC397, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_054)
{
    // 4398 0021;	
    // (䎘) CJK UNIFIED IDEOGRAPH-4398	[FB80 C398 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4398, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC398, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_055)
{
    // 4398 003F;	
    // (䎘) CJK UNIFIED IDEOGRAPH-4398	[FB80 C398 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4398, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC398, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_056)
{
    // 4398 0061;	
    // (䎘) CJK UNIFIED IDEOGRAPH-4398	[FB80 C398 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4398, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_057)
{
    // 4398 0041;	
    // (䎘) CJK UNIFIED IDEOGRAPH-4398	[FB80 C398 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4398, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC398, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_058)
{
    // 4398 0062;	
    // (䎘) CJK UNIFIED IDEOGRAPH-4398	[FB80 C398 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4398, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC398, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_059)
{
    // 4399 0021;	
    // (䎙) CJK UNIFIED IDEOGRAPH-4399	[FB80 C399 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4399, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC399, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_060)
{
    // 4399 003F;	
    // (䎙) CJK UNIFIED IDEOGRAPH-4399	[FB80 C399 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4399, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC399, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_061)
{
    // 4399 0061;	
    // (䎙) CJK UNIFIED IDEOGRAPH-4399	[FB80 C399 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4399, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_062)
{
    // 4399 0041;	
    // (䎙) CJK UNIFIED IDEOGRAPH-4399	[FB80 C399 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4399, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC399, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_063)
{
    // 4399 0062;	
    // (䎙) CJK UNIFIED IDEOGRAPH-4399	[FB80 C399 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4399, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC399, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_064)
{
    // 439A 0021;	
    // (䎚) CJK UNIFIED IDEOGRAPH-439A	[FB80 C39A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_065)
{
    // 439A 003F;	
    // (䎚) CJK UNIFIED IDEOGRAPH-439A	[FB80 C39A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_066)
{
    // 439A 0061;	
    // (䎚) CJK UNIFIED IDEOGRAPH-439A	[FB80 C39A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_067)
{
    // 439A 0041;	
    // (䎚) CJK UNIFIED IDEOGRAPH-439A	[FB80 C39A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_068)
{
    // 439A 0062;	
    // (䎚) CJK UNIFIED IDEOGRAPH-439A	[FB80 C39A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_069)
{
    // 439B 0021;	
    // (䎛) CJK UNIFIED IDEOGRAPH-439B	[FB80 C39B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_070)
{
    // 439B 003F;	
    // (䎛) CJK UNIFIED IDEOGRAPH-439B	[FB80 C39B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_071)
{
    // 439B 0061;	
    // (䎛) CJK UNIFIED IDEOGRAPH-439B	[FB80 C39B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_072)
{
    // 439B 0041;	
    // (䎛) CJK UNIFIED IDEOGRAPH-439B	[FB80 C39B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_073)
{
    // 439B 0062;	
    // (䎛) CJK UNIFIED IDEOGRAPH-439B	[FB80 C39B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_074)
{
    // 439C 0021;	
    // (䎜) CJK UNIFIED IDEOGRAPH-439C	[FB80 C39C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_075)
{
    // 439C 003F;	
    // (䎜) CJK UNIFIED IDEOGRAPH-439C	[FB80 C39C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_076)
{
    // 439C 0061;	
    // (䎜) CJK UNIFIED IDEOGRAPH-439C	[FB80 C39C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_077)
{
    // 439C 0041;	
    // (䎜) CJK UNIFIED IDEOGRAPH-439C	[FB80 C39C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_078)
{
    // 439C 0062;	
    // (䎜) CJK UNIFIED IDEOGRAPH-439C	[FB80 C39C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_079)
{
    // 439D 0021;	
    // (䎝) CJK UNIFIED IDEOGRAPH-439D	[FB80 C39D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_080)
{
    // 439D 003F;	
    // (䎝) CJK UNIFIED IDEOGRAPH-439D	[FB80 C39D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_081)
{
    // 439D 0061;	
    // (䎝) CJK UNIFIED IDEOGRAPH-439D	[FB80 C39D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_082)
{
    // 439D 0041;	
    // (䎝) CJK UNIFIED IDEOGRAPH-439D	[FB80 C39D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_083)
{
    // 439D 0062;	
    // (䎝) CJK UNIFIED IDEOGRAPH-439D	[FB80 C39D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_084)
{
    // 439E 0021;	
    // (䎞) CJK UNIFIED IDEOGRAPH-439E	[FB80 C39E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_085)
{
    // 439E 003F;	
    // (䎞) CJK UNIFIED IDEOGRAPH-439E	[FB80 C39E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_086)
{
    // 439E 0061;	
    // (䎞) CJK UNIFIED IDEOGRAPH-439E	[FB80 C39E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_087)
{
    // 439E 0041;	
    // (䎞) CJK UNIFIED IDEOGRAPH-439E	[FB80 C39E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_088)
{
    // 439E 0062;	
    // (䎞) CJK UNIFIED IDEOGRAPH-439E	[FB80 C39E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_089)
{
    // 439F 0021;	
    // (䎟) CJK UNIFIED IDEOGRAPH-439F	[FB80 C39F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC39F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_090)
{
    // 439F 003F;	
    // (䎟) CJK UNIFIED IDEOGRAPH-439F	[FB80 C39F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC39F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_091)
{
    // 439F 0061;	
    // (䎟) CJK UNIFIED IDEOGRAPH-439F	[FB80 C39F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC39F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_092)
{
    // 439F 0041;	
    // (䎟) CJK UNIFIED IDEOGRAPH-439F	[FB80 C39F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x439F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC39F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_093)
{
    // 439F 0062;	
    // (䎟) CJK UNIFIED IDEOGRAPH-439F	[FB80 C39F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x439F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC39F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_094)
{
    // 43A0 0021;	
    // (䎠) CJK UNIFIED IDEOGRAPH-43A0	[FB80 C3A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_095)
{
    // 43A0 003F;	
    // (䎠) CJK UNIFIED IDEOGRAPH-43A0	[FB80 C3A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_096)
{
    // 43A0 0061;	
    // (䎠) CJK UNIFIED IDEOGRAPH-43A0	[FB80 C3A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_097)
{
    // 43A0 0041;	
    // (䎠) CJK UNIFIED IDEOGRAPH-43A0	[FB80 C3A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_098)
{
    // 43A0 0062;	
    // (䎠) CJK UNIFIED IDEOGRAPH-43A0	[FB80 C3A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_099)
{
    // 43A1 0021;	
    // (䎡) CJK UNIFIED IDEOGRAPH-43A1	[FB80 C3A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_100)
{
    // 43A1 003F;	
    // (䎡) CJK UNIFIED IDEOGRAPH-43A1	[FB80 C3A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_101)
{
    // 43A1 0061;	
    // (䎡) CJK UNIFIED IDEOGRAPH-43A1	[FB80 C3A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_102)
{
    // 43A1 0041;	
    // (䎡) CJK UNIFIED IDEOGRAPH-43A1	[FB80 C3A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_103)
{
    // 43A1 0062;	
    // (䎡) CJK UNIFIED IDEOGRAPH-43A1	[FB80 C3A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_104)
{
    // 43A2 0021;	
    // (䎢) CJK UNIFIED IDEOGRAPH-43A2	[FB80 C3A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_105)
{
    // 43A2 003F;	
    // (䎢) CJK UNIFIED IDEOGRAPH-43A2	[FB80 C3A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_106)
{
    // 43A2 0061;	
    // (䎢) CJK UNIFIED IDEOGRAPH-43A2	[FB80 C3A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_107)
{
    // 43A2 0041;	
    // (䎢) CJK UNIFIED IDEOGRAPH-43A2	[FB80 C3A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_108)
{
    // 43A2 0062;	
    // (䎢) CJK UNIFIED IDEOGRAPH-43A2	[FB80 C3A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_109)
{
    // 43A3 0021;	
    // (䎣) CJK UNIFIED IDEOGRAPH-43A3	[FB80 C3A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_110)
{
    // 43A3 003F;	
    // (䎣) CJK UNIFIED IDEOGRAPH-43A3	[FB80 C3A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_111)
{
    // 43A3 0061;	
    // (䎣) CJK UNIFIED IDEOGRAPH-43A3	[FB80 C3A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_112)
{
    // 43A3 0041;	
    // (䎣) CJK UNIFIED IDEOGRAPH-43A3	[FB80 C3A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_113)
{
    // 43A3 0062;	
    // (䎣) CJK UNIFIED IDEOGRAPH-43A3	[FB80 C3A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_114)
{
    // 43A4 0021;	
    // (䎤) CJK UNIFIED IDEOGRAPH-43A4	[FB80 C3A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_115)
{
    // 43A4 003F;	
    // (䎤) CJK UNIFIED IDEOGRAPH-43A4	[FB80 C3A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_116)
{
    // 43A4 0061;	
    // (䎤) CJK UNIFIED IDEOGRAPH-43A4	[FB80 C3A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_117)
{
    // 43A4 0041;	
    // (䎤) CJK UNIFIED IDEOGRAPH-43A4	[FB80 C3A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_118)
{
    // 43A4 0062;	
    // (䎤) CJK UNIFIED IDEOGRAPH-43A4	[FB80 C3A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_119)
{
    // 43A5 0021;	
    // (䎥) CJK UNIFIED IDEOGRAPH-43A5	[FB80 C3A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_120)
{
    // 43A5 003F;	
    // (䎥) CJK UNIFIED IDEOGRAPH-43A5	[FB80 C3A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_121)
{
    // 43A5 0061;	
    // (䎥) CJK UNIFIED IDEOGRAPH-43A5	[FB80 C3A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_122)
{
    // 43A5 0041;	
    // (䎥) CJK UNIFIED IDEOGRAPH-43A5	[FB80 C3A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_123)
{
    // 43A5 0062;	
    // (䎥) CJK UNIFIED IDEOGRAPH-43A5	[FB80 C3A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_124)
{
    // 43A6 0021;	
    // (䎦) CJK UNIFIED IDEOGRAPH-43A6	[FB80 C3A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_125)
{
    // 43A6 003F;	
    // (䎦) CJK UNIFIED IDEOGRAPH-43A6	[FB80 C3A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_126)
{
    // 43A6 0061;	
    // (䎦) CJK UNIFIED IDEOGRAPH-43A6	[FB80 C3A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_127)
{
    // 43A6 0041;	
    // (䎦) CJK UNIFIED IDEOGRAPH-43A6	[FB80 C3A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_128)
{
    // 43A6 0062;	
    // (䎦) CJK UNIFIED IDEOGRAPH-43A6	[FB80 C3A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_129)
{
    // 43A7 0021;	
    // (䎧) CJK UNIFIED IDEOGRAPH-43A7	[FB80 C3A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_130)
{
    // 43A7 003F;	
    // (䎧) CJK UNIFIED IDEOGRAPH-43A7	[FB80 C3A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_131)
{
    // 43A7 0061;	
    // (䎧) CJK UNIFIED IDEOGRAPH-43A7	[FB80 C3A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_132)
{
    // 43A7 0041;	
    // (䎧) CJK UNIFIED IDEOGRAPH-43A7	[FB80 C3A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_133)
{
    // 43A7 0062;	
    // (䎧) CJK UNIFIED IDEOGRAPH-43A7	[FB80 C3A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_134)
{
    // 43A8 0021;	
    // (䎨) CJK UNIFIED IDEOGRAPH-43A8	[FB80 C3A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_135)
{
    // 43A8 003F;	
    // (䎨) CJK UNIFIED IDEOGRAPH-43A8	[FB80 C3A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_136)
{
    // 43A8 0061;	
    // (䎨) CJK UNIFIED IDEOGRAPH-43A8	[FB80 C3A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_137)
{
    // 43A8 0041;	
    // (䎨) CJK UNIFIED IDEOGRAPH-43A8	[FB80 C3A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_138)
{
    // 43A8 0062;	
    // (䎨) CJK UNIFIED IDEOGRAPH-43A8	[FB80 C3A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_139)
{
    // 43A9 0021;	
    // (䎩) CJK UNIFIED IDEOGRAPH-43A9	[FB80 C3A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_140)
{
    // 43A9 003F;	
    // (䎩) CJK UNIFIED IDEOGRAPH-43A9	[FB80 C3A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_141)
{
    // 43A9 0061;	
    // (䎩) CJK UNIFIED IDEOGRAPH-43A9	[FB80 C3A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_142)
{
    // 43A9 0041;	
    // (䎩) CJK UNIFIED IDEOGRAPH-43A9	[FB80 C3A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_143)
{
    // 43A9 0062;	
    // (䎩) CJK UNIFIED IDEOGRAPH-43A9	[FB80 C3A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_144)
{
    // 43AA 0021;	
    // (䎪) CJK UNIFIED IDEOGRAPH-43AA	[FB80 C3AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_145)
{
    // 43AA 003F;	
    // (䎪) CJK UNIFIED IDEOGRAPH-43AA	[FB80 C3AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_146)
{
    // 43AA 0061;	
    // (䎪) CJK UNIFIED IDEOGRAPH-43AA	[FB80 C3AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_147)
{
    // 43AA 0041;	
    // (䎪) CJK UNIFIED IDEOGRAPH-43AA	[FB80 C3AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_148)
{
    // 43AA 0062;	
    // (䎪) CJK UNIFIED IDEOGRAPH-43AA	[FB80 C3AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_149)
{
    // 43AB 0021;	
    // (䎫) CJK UNIFIED IDEOGRAPH-43AB	[FB80 C3AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_150)
{
    // 43AB 003F;	
    // (䎫) CJK UNIFIED IDEOGRAPH-43AB	[FB80 C3AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_151)
{
    // 43AB 0061;	
    // (䎫) CJK UNIFIED IDEOGRAPH-43AB	[FB80 C3AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_152)
{
    // 43AB 0041;	
    // (䎫) CJK UNIFIED IDEOGRAPH-43AB	[FB80 C3AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_153)
{
    // 43AB 0062;	
    // (䎫) CJK UNIFIED IDEOGRAPH-43AB	[FB80 C3AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_154)
{
    // 43AC 0021;	
    // (䎬) CJK UNIFIED IDEOGRAPH-43AC	[FB80 C3AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_155)
{
    // 43AC 003F;	
    // (䎬) CJK UNIFIED IDEOGRAPH-43AC	[FB80 C3AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_156)
{
    // 43AC 0061;	
    // (䎬) CJK UNIFIED IDEOGRAPH-43AC	[FB80 C3AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_157)
{
    // 43AC 0041;	
    // (䎬) CJK UNIFIED IDEOGRAPH-43AC	[FB80 C3AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_158)
{
    // 43AC 0062;	
    // (䎬) CJK UNIFIED IDEOGRAPH-43AC	[FB80 C3AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_159)
{
    // 43AD 0021;	
    // (䎭) CJK UNIFIED IDEOGRAPH-43AD	[FB80 C3AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_160)
{
    // 43AD 003F;	
    // (䎭) CJK UNIFIED IDEOGRAPH-43AD	[FB80 C3AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_161)
{
    // 43AD 0061;	
    // (䎭) CJK UNIFIED IDEOGRAPH-43AD	[FB80 C3AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_162)
{
    // 43AD 0041;	
    // (䎭) CJK UNIFIED IDEOGRAPH-43AD	[FB80 C3AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_163)
{
    // 43AD 0062;	
    // (䎭) CJK UNIFIED IDEOGRAPH-43AD	[FB80 C3AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_164)
{
    // 43AE 0021;	
    // (䎮) CJK UNIFIED IDEOGRAPH-43AE	[FB80 C3AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_165)
{
    // 43AE 003F;	
    // (䎮) CJK UNIFIED IDEOGRAPH-43AE	[FB80 C3AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_166)
{
    // 43AE 0061;	
    // (䎮) CJK UNIFIED IDEOGRAPH-43AE	[FB80 C3AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_167)
{
    // 43AE 0041;	
    // (䎮) CJK UNIFIED IDEOGRAPH-43AE	[FB80 C3AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_168)
{
    // 43AE 0062;	
    // (䎮) CJK UNIFIED IDEOGRAPH-43AE	[FB80 C3AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_169)
{
    // 43AF 0021;	
    // (䎯) CJK UNIFIED IDEOGRAPH-43AF	[FB80 C3AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_170)
{
    // 43AF 003F;	
    // (䎯) CJK UNIFIED IDEOGRAPH-43AF	[FB80 C3AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_171)
{
    // 43AF 0061;	
    // (䎯) CJK UNIFIED IDEOGRAPH-43AF	[FB80 C3AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_172)
{
    // 43AF 0041;	
    // (䎯) CJK UNIFIED IDEOGRAPH-43AF	[FB80 C3AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_173)
{
    // 43AF 0062;	
    // (䎯) CJK UNIFIED IDEOGRAPH-43AF	[FB80 C3AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_174)
{
    // 43B0 0021;	
    // (䎰) CJK UNIFIED IDEOGRAPH-43B0	[FB80 C3B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_175)
{
    // 43B0 003F;	
    // (䎰) CJK UNIFIED IDEOGRAPH-43B0	[FB80 C3B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_176)
{
    // 43B0 0061;	
    // (䎰) CJK UNIFIED IDEOGRAPH-43B0	[FB80 C3B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_177)
{
    // 43B0 0041;	
    // (䎰) CJK UNIFIED IDEOGRAPH-43B0	[FB80 C3B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_178)
{
    // 43B0 0062;	
    // (䎰) CJK UNIFIED IDEOGRAPH-43B0	[FB80 C3B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_179)
{
    // 43B1 0021;	
    // (䎱) CJK UNIFIED IDEOGRAPH-43B1	[FB80 C3B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_180)
{
    // 43B1 003F;	
    // (䎱) CJK UNIFIED IDEOGRAPH-43B1	[FB80 C3B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_181)
{
    // 43B1 0061;	
    // (䎱) CJK UNIFIED IDEOGRAPH-43B1	[FB80 C3B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_182)
{
    // 43B1 0041;	
    // (䎱) CJK UNIFIED IDEOGRAPH-43B1	[FB80 C3B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_183)
{
    // 43B1 0062;	
    // (䎱) CJK UNIFIED IDEOGRAPH-43B1	[FB80 C3B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_184)
{
    // 43B2 0021;	
    // (䎲) CJK UNIFIED IDEOGRAPH-43B2	[FB80 C3B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_185)
{
    // 43B2 003F;	
    // (䎲) CJK UNIFIED IDEOGRAPH-43B2	[FB80 C3B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_186)
{
    // 43B2 0061;	
    // (䎲) CJK UNIFIED IDEOGRAPH-43B2	[FB80 C3B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_187)
{
    // 43B2 0041;	
    // (䎲) CJK UNIFIED IDEOGRAPH-43B2	[FB80 C3B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_188)
{
    // 43B2 0062;	
    // (䎲) CJK UNIFIED IDEOGRAPH-43B2	[FB80 C3B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_189)
{
    // 43B3 0021;	
    // (䎳) CJK UNIFIED IDEOGRAPH-43B3	[FB80 C3B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_190)
{
    // 43B3 003F;	
    // (䎳) CJK UNIFIED IDEOGRAPH-43B3	[FB80 C3B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_191)
{
    // 43B3 0061;	
    // (䎳) CJK UNIFIED IDEOGRAPH-43B3	[FB80 C3B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_192)
{
    // 43B3 0041;	
    // (䎳) CJK UNIFIED IDEOGRAPH-43B3	[FB80 C3B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_193)
{
    // 43B3 0062;	
    // (䎳) CJK UNIFIED IDEOGRAPH-43B3	[FB80 C3B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_194)
{
    // 43B4 0021;	
    // (䎴) CJK UNIFIED IDEOGRAPH-43B4	[FB80 C3B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_195)
{
    // 43B4 003F;	
    // (䎴) CJK UNIFIED IDEOGRAPH-43B4	[FB80 C3B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_196)
{
    // 43B4 0061;	
    // (䎴) CJK UNIFIED IDEOGRAPH-43B4	[FB80 C3B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_197)
{
    // 43B4 0041;	
    // (䎴) CJK UNIFIED IDEOGRAPH-43B4	[FB80 C3B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_198)
{
    // 43B4 0062;	
    // (䎴) CJK UNIFIED IDEOGRAPH-43B4	[FB80 C3B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_199)
{
    // 43B5 0021;	
    // (䎵) CJK UNIFIED IDEOGRAPH-43B5	[FB80 C3B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_200)
{
    // 43B5 003F;	
    // (䎵) CJK UNIFIED IDEOGRAPH-43B5	[FB80 C3B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_201)
{
    // 43B5 0061;	
    // (䎵) CJK UNIFIED IDEOGRAPH-43B5	[FB80 C3B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_202)
{
    // 43B5 0041;	
    // (䎵) CJK UNIFIED IDEOGRAPH-43B5	[FB80 C3B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_203)
{
    // 43B5 0062;	
    // (䎵) CJK UNIFIED IDEOGRAPH-43B5	[FB80 C3B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_204)
{
    // 43B6 0021;	
    // (䎶) CJK UNIFIED IDEOGRAPH-43B6	[FB80 C3B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_205)
{
    // 43B6 003F;	
    // (䎶) CJK UNIFIED IDEOGRAPH-43B6	[FB80 C3B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_206)
{
    // 43B6 0061;	
    // (䎶) CJK UNIFIED IDEOGRAPH-43B6	[FB80 C3B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_207)
{
    // 43B6 0041;	
    // (䎶) CJK UNIFIED IDEOGRAPH-43B6	[FB80 C3B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_208)
{
    // 43B6 0062;	
    // (䎶) CJK UNIFIED IDEOGRAPH-43B6	[FB80 C3B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_209)
{
    // 43B7 0021;	
    // (䎷) CJK UNIFIED IDEOGRAPH-43B7	[FB80 C3B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_210)
{
    // 43B7 003F;	
    // (䎷) CJK UNIFIED IDEOGRAPH-43B7	[FB80 C3B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_211)
{
    // 43B7 0061;	
    // (䎷) CJK UNIFIED IDEOGRAPH-43B7	[FB80 C3B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_212)
{
    // 43B7 0041;	
    // (䎷) CJK UNIFIED IDEOGRAPH-43B7	[FB80 C3B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_213)
{
    // 43B7 0062;	
    // (䎷) CJK UNIFIED IDEOGRAPH-43B7	[FB80 C3B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_214)
{
    // 43B8 0021;	
    // (䎸) CJK UNIFIED IDEOGRAPH-43B8	[FB80 C3B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_215)
{
    // 43B8 003F;	
    // (䎸) CJK UNIFIED IDEOGRAPH-43B8	[FB80 C3B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_216)
{
    // 43B8 0061;	
    // (䎸) CJK UNIFIED IDEOGRAPH-43B8	[FB80 C3B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_217)
{
    // 43B8 0041;	
    // (䎸) CJK UNIFIED IDEOGRAPH-43B8	[FB80 C3B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_218)
{
    // 43B8 0062;	
    // (䎸) CJK UNIFIED IDEOGRAPH-43B8	[FB80 C3B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_219)
{
    // 43B9 0021;	
    // (䎹) CJK UNIFIED IDEOGRAPH-43B9	[FB80 C3B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_220)
{
    // 43B9 003F;	
    // (䎹) CJK UNIFIED IDEOGRAPH-43B9	[FB80 C3B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_221)
{
    // 43B9 0061;	
    // (䎹) CJK UNIFIED IDEOGRAPH-43B9	[FB80 C3B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_222)
{
    // 43B9 0041;	
    // (䎹) CJK UNIFIED IDEOGRAPH-43B9	[FB80 C3B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_223)
{
    // 43B9 0062;	
    // (䎹) CJK UNIFIED IDEOGRAPH-43B9	[FB80 C3B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_224)
{
    // 43BA 0021;	
    // (䎺) CJK UNIFIED IDEOGRAPH-43BA	[FB80 C3BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_225)
{
    // 43BA 003F;	
    // (䎺) CJK UNIFIED IDEOGRAPH-43BA	[FB80 C3BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_226)
{
    // 43BA 0061;	
    // (䎺) CJK UNIFIED IDEOGRAPH-43BA	[FB80 C3BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_227)
{
    // 43BA 0041;	
    // (䎺) CJK UNIFIED IDEOGRAPH-43BA	[FB80 C3BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_228)
{
    // 43BA 0062;	
    // (䎺) CJK UNIFIED IDEOGRAPH-43BA	[FB80 C3BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_229)
{
    // 43BB 0021;	
    // (䎻) CJK UNIFIED IDEOGRAPH-43BB	[FB80 C3BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_230)
{
    // 43BB 003F;	
    // (䎻) CJK UNIFIED IDEOGRAPH-43BB	[FB80 C3BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_231)
{
    // 43BB 0061;	
    // (䎻) CJK UNIFIED IDEOGRAPH-43BB	[FB80 C3BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_232)
{
    // 43BB 0041;	
    // (䎻) CJK UNIFIED IDEOGRAPH-43BB	[FB80 C3BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_233)
{
    // 43BB 0062;	
    // (䎻) CJK UNIFIED IDEOGRAPH-43BB	[FB80 C3BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_234)
{
    // 43BC 0021;	
    // (䎼) CJK UNIFIED IDEOGRAPH-43BC	[FB80 C3BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_235)
{
    // 43BC 003F;	
    // (䎼) CJK UNIFIED IDEOGRAPH-43BC	[FB80 C3BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_236)
{
    // 43BC 0061;	
    // (䎼) CJK UNIFIED IDEOGRAPH-43BC	[FB80 C3BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_237)
{
    // 43BC 0041;	
    // (䎼) CJK UNIFIED IDEOGRAPH-43BC	[FB80 C3BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_238)
{
    // 43BC 0062;	
    // (䎼) CJK UNIFIED IDEOGRAPH-43BC	[FB80 C3BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_239)
{
    // 43BD 0021;	
    // (䎽) CJK UNIFIED IDEOGRAPH-43BD	[FB80 C3BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_240)
{
    // 43BD 003F;	
    // (䎽) CJK UNIFIED IDEOGRAPH-43BD	[FB80 C3BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_241)
{
    // 43BD 0061;	
    // (䎽) CJK UNIFIED IDEOGRAPH-43BD	[FB80 C3BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_242)
{
    // 43BD 0041;	
    // (䎽) CJK UNIFIED IDEOGRAPH-43BD	[FB80 C3BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_243)
{
    // 43BD 0062;	
    // (䎽) CJK UNIFIED IDEOGRAPH-43BD	[FB80 C3BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_244)
{
    // 43BE 0021;	
    // (䎾) CJK UNIFIED IDEOGRAPH-43BE	[FB80 C3BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_245)
{
    // 43BE 003F;	
    // (䎾) CJK UNIFIED IDEOGRAPH-43BE	[FB80 C3BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_246)
{
    // 43BE 0061;	
    // (䎾) CJK UNIFIED IDEOGRAPH-43BE	[FB80 C3BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_247)
{
    // 43BE 0041;	
    // (䎾) CJK UNIFIED IDEOGRAPH-43BE	[FB80 C3BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_248)
{
    // 43BE 0062;	
    // (䎾) CJK UNIFIED IDEOGRAPH-43BE	[FB80 C3BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_249)
{
    // 43BF 0021;	
    // (䎿) CJK UNIFIED IDEOGRAPH-43BF	[FB80 C3BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_250)
{
    // 43BF 003F;	
    // (䎿) CJK UNIFIED IDEOGRAPH-43BF	[FB80 C3BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_251)
{
    // 43BF 0061;	
    // (䎿) CJK UNIFIED IDEOGRAPH-43BF	[FB80 C3BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_252)
{
    // 43BF 0041;	
    // (䎿) CJK UNIFIED IDEOGRAPH-43BF	[FB80 C3BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_253)
{
    // 43BF 0062;	
    // (䎿) CJK UNIFIED IDEOGRAPH-43BF	[FB80 C3BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_254)
{
    // 43C0 0021;	
    // (䏀) CJK UNIFIED IDEOGRAPH-43C0	[FB80 C3C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_255)
{
    // 43C0 003F;	
    // (䏀) CJK UNIFIED IDEOGRAPH-43C0	[FB80 C3C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_256)
{
    // 43C0 0061;	
    // (䏀) CJK UNIFIED IDEOGRAPH-43C0	[FB80 C3C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_257)
{
    // 43C0 0041;	
    // (䏀) CJK UNIFIED IDEOGRAPH-43C0	[FB80 C3C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_258)
{
    // 43C0 0062;	
    // (䏀) CJK UNIFIED IDEOGRAPH-43C0	[FB80 C3C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_259)
{
    // 43C1 0021;	
    // (䏁) CJK UNIFIED IDEOGRAPH-43C1	[FB80 C3C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_260)
{
    // 43C1 003F;	
    // (䏁) CJK UNIFIED IDEOGRAPH-43C1	[FB80 C3C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_261)
{
    // 43C1 0061;	
    // (䏁) CJK UNIFIED IDEOGRAPH-43C1	[FB80 C3C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_262)
{
    // 43C1 0041;	
    // (䏁) CJK UNIFIED IDEOGRAPH-43C1	[FB80 C3C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_263)
{
    // 43C1 0062;	
    // (䏁) CJK UNIFIED IDEOGRAPH-43C1	[FB80 C3C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_264)
{
    // 43C2 0021;	
    // (䏂) CJK UNIFIED IDEOGRAPH-43C2	[FB80 C3C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_265)
{
    // 43C2 003F;	
    // (䏂) CJK UNIFIED IDEOGRAPH-43C2	[FB80 C3C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_266)
{
    // 43C2 0061;	
    // (䏂) CJK UNIFIED IDEOGRAPH-43C2	[FB80 C3C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_267)
{
    // 43C2 0041;	
    // (䏂) CJK UNIFIED IDEOGRAPH-43C2	[FB80 C3C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_268)
{
    // 43C2 0062;	
    // (䏂) CJK UNIFIED IDEOGRAPH-43C2	[FB80 C3C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_269)
{
    // 43C3 0021;	
    // (䏃) CJK UNIFIED IDEOGRAPH-43C3	[FB80 C3C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_270)
{
    // 43C3 003F;	
    // (䏃) CJK UNIFIED IDEOGRAPH-43C3	[FB80 C3C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_271)
{
    // 43C3 0061;	
    // (䏃) CJK UNIFIED IDEOGRAPH-43C3	[FB80 C3C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_272)
{
    // 43C3 0041;	
    // (䏃) CJK UNIFIED IDEOGRAPH-43C3	[FB80 C3C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_273)
{
    // 43C3 0062;	
    // (䏃) CJK UNIFIED IDEOGRAPH-43C3	[FB80 C3C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_274)
{
    // 43C4 0021;	
    // (䏄) CJK UNIFIED IDEOGRAPH-43C4	[FB80 C3C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_275)
{
    // 43C4 003F;	
    // (䏄) CJK UNIFIED IDEOGRAPH-43C4	[FB80 C3C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_276)
{
    // 43C4 0061;	
    // (䏄) CJK UNIFIED IDEOGRAPH-43C4	[FB80 C3C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_277)
{
    // 43C4 0041;	
    // (䏄) CJK UNIFIED IDEOGRAPH-43C4	[FB80 C3C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_278)
{
    // 43C4 0062;	
    // (䏄) CJK UNIFIED IDEOGRAPH-43C4	[FB80 C3C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_279)
{
    // 43C5 0021;	
    // (䏅) CJK UNIFIED IDEOGRAPH-43C5	[FB80 C3C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_280)
{
    // 43C5 003F;	
    // (䏅) CJK UNIFIED IDEOGRAPH-43C5	[FB80 C3C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_281)
{
    // 43C5 0061;	
    // (䏅) CJK UNIFIED IDEOGRAPH-43C5	[FB80 C3C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_282)
{
    // 43C5 0041;	
    // (䏅) CJK UNIFIED IDEOGRAPH-43C5	[FB80 C3C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_283)
{
    // 43C5 0062;	
    // (䏅) CJK UNIFIED IDEOGRAPH-43C5	[FB80 C3C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_284)
{
    // 43C6 0021;	
    // (䏆) CJK UNIFIED IDEOGRAPH-43C6	[FB80 C3C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_285)
{
    // 43C6 003F;	
    // (䏆) CJK UNIFIED IDEOGRAPH-43C6	[FB80 C3C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_286)
{
    // 43C6 0061;	
    // (䏆) CJK UNIFIED IDEOGRAPH-43C6	[FB80 C3C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_287)
{
    // 43C6 0041;	
    // (䏆) CJK UNIFIED IDEOGRAPH-43C6	[FB80 C3C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_288)
{
    // 43C6 0062;	
    // (䏆) CJK UNIFIED IDEOGRAPH-43C6	[FB80 C3C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_289)
{
    // 43C7 0021;	
    // (䏇) CJK UNIFIED IDEOGRAPH-43C7	[FB80 C3C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_290)
{
    // 43C7 003F;	
    // (䏇) CJK UNIFIED IDEOGRAPH-43C7	[FB80 C3C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_291)
{
    // 43C7 0061;	
    // (䏇) CJK UNIFIED IDEOGRAPH-43C7	[FB80 C3C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_292)
{
    // 43C7 0041;	
    // (䏇) CJK UNIFIED IDEOGRAPH-43C7	[FB80 C3C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_293)
{
    // 43C7 0062;	
    // (䏇) CJK UNIFIED IDEOGRAPH-43C7	[FB80 C3C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_294)
{
    // 43C8 0021;	
    // (䏈) CJK UNIFIED IDEOGRAPH-43C8	[FB80 C3C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_295)
{
    // 43C8 003F;	
    // (䏈) CJK UNIFIED IDEOGRAPH-43C8	[FB80 C3C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_296)
{
    // 43C8 0061;	
    // (䏈) CJK UNIFIED IDEOGRAPH-43C8	[FB80 C3C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_297)
{
    // 43C8 0041;	
    // (䏈) CJK UNIFIED IDEOGRAPH-43C8	[FB80 C3C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_298)
{
    // 43C8 0062;	
    // (䏈) CJK UNIFIED IDEOGRAPH-43C8	[FB80 C3C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_299)
{
    // 43C9 0021;	
    // (䏉) CJK UNIFIED IDEOGRAPH-43C9	[FB80 C3C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_300)
{
    // 43C9 003F;	
    // (䏉) CJK UNIFIED IDEOGRAPH-43C9	[FB80 C3C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_301)
{
    // 43C9 0061;	
    // (䏉) CJK UNIFIED IDEOGRAPH-43C9	[FB80 C3C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_302)
{
    // 43C9 0041;	
    // (䏉) CJK UNIFIED IDEOGRAPH-43C9	[FB80 C3C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_303)
{
    // 43C9 0062;	
    // (䏉) CJK UNIFIED IDEOGRAPH-43C9	[FB80 C3C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_304)
{
    // 43CA 0021;	
    // (䏊) CJK UNIFIED IDEOGRAPH-43CA	[FB80 C3CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_305)
{
    // 43CA 003F;	
    // (䏊) CJK UNIFIED IDEOGRAPH-43CA	[FB80 C3CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_306)
{
    // 43CA 0061;	
    // (䏊) CJK UNIFIED IDEOGRAPH-43CA	[FB80 C3CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_307)
{
    // 43CA 0041;	
    // (䏊) CJK UNIFIED IDEOGRAPH-43CA	[FB80 C3CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_308)
{
    // 43CA 0062;	
    // (䏊) CJK UNIFIED IDEOGRAPH-43CA	[FB80 C3CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_309)
{
    // 43CB 0021;	
    // (䏋) CJK UNIFIED IDEOGRAPH-43CB	[FB80 C3CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_310)
{
    // 43CB 003F;	
    // (䏋) CJK UNIFIED IDEOGRAPH-43CB	[FB80 C3CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_311)
{
    // 43CB 0061;	
    // (䏋) CJK UNIFIED IDEOGRAPH-43CB	[FB80 C3CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_312)
{
    // 43CB 0041;	
    // (䏋) CJK UNIFIED IDEOGRAPH-43CB	[FB80 C3CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_313)
{
    // 43CB 0062;	
    // (䏋) CJK UNIFIED IDEOGRAPH-43CB	[FB80 C3CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_314)
{
    // 43CC 0021;	
    // (䏌) CJK UNIFIED IDEOGRAPH-43CC	[FB80 C3CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_315)
{
    // 43CC 003F;	
    // (䏌) CJK UNIFIED IDEOGRAPH-43CC	[FB80 C3CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_316)
{
    // 43CC 0061;	
    // (䏌) CJK UNIFIED IDEOGRAPH-43CC	[FB80 C3CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_317)
{
    // 43CC 0041;	
    // (䏌) CJK UNIFIED IDEOGRAPH-43CC	[FB80 C3CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_318)
{
    // 43CC 0062;	
    // (䏌) CJK UNIFIED IDEOGRAPH-43CC	[FB80 C3CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_319)
{
    // 43CD 0021;	
    // (䏍) CJK UNIFIED IDEOGRAPH-43CD	[FB80 C3CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_320)
{
    // 43CD 003F;	
    // (䏍) CJK UNIFIED IDEOGRAPH-43CD	[FB80 C3CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_321)
{
    // 43CD 0061;	
    // (䏍) CJK UNIFIED IDEOGRAPH-43CD	[FB80 C3CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_322)
{
    // 43CD 0041;	
    // (䏍) CJK UNIFIED IDEOGRAPH-43CD	[FB80 C3CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_323)
{
    // 43CD 0062;	
    // (䏍) CJK UNIFIED IDEOGRAPH-43CD	[FB80 C3CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_324)
{
    // 43CE 0021;	
    // (䏎) CJK UNIFIED IDEOGRAPH-43CE	[FB80 C3CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_325)
{
    // 43CE 003F;	
    // (䏎) CJK UNIFIED IDEOGRAPH-43CE	[FB80 C3CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_326)
{
    // 43CE 0061;	
    // (䏎) CJK UNIFIED IDEOGRAPH-43CE	[FB80 C3CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_327)
{
    // 43CE 0041;	
    // (䏎) CJK UNIFIED IDEOGRAPH-43CE	[FB80 C3CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_328)
{
    // 43CE 0062;	
    // (䏎) CJK UNIFIED IDEOGRAPH-43CE	[FB80 C3CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_329)
{
    // 43CF 0021;	
    // (䏏) CJK UNIFIED IDEOGRAPH-43CF	[FB80 C3CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_330)
{
    // 43CF 003F;	
    // (䏏) CJK UNIFIED IDEOGRAPH-43CF	[FB80 C3CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_331)
{
    // 43CF 0061;	
    // (䏏) CJK UNIFIED IDEOGRAPH-43CF	[FB80 C3CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_332)
{
    // 43CF 0041;	
    // (䏏) CJK UNIFIED IDEOGRAPH-43CF	[FB80 C3CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_333)
{
    // 43CF 0062;	
    // (䏏) CJK UNIFIED IDEOGRAPH-43CF	[FB80 C3CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_334)
{
    // 43D0 0021;	
    // (䏐) CJK UNIFIED IDEOGRAPH-43D0	[FB80 C3D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_335)
{
    // 43D0 003F;	
    // (䏐) CJK UNIFIED IDEOGRAPH-43D0	[FB80 C3D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_336)
{
    // 43D0 0061;	
    // (䏐) CJK UNIFIED IDEOGRAPH-43D0	[FB80 C3D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_337)
{
    // 43D0 0041;	
    // (䏐) CJK UNIFIED IDEOGRAPH-43D0	[FB80 C3D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_338)
{
    // 43D0 0062;	
    // (䏐) CJK UNIFIED IDEOGRAPH-43D0	[FB80 C3D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_339)
{
    // 43D1 0021;	
    // (䏑) CJK UNIFIED IDEOGRAPH-43D1	[FB80 C3D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_340)
{
    // 43D1 003F;	
    // (䏑) CJK UNIFIED IDEOGRAPH-43D1	[FB80 C3D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_341)
{
    // 43D1 0061;	
    // (䏑) CJK UNIFIED IDEOGRAPH-43D1	[FB80 C3D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_342)
{
    // 43D1 0041;	
    // (䏑) CJK UNIFIED IDEOGRAPH-43D1	[FB80 C3D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_343)
{
    // 43D1 0062;	
    // (䏑) CJK UNIFIED IDEOGRAPH-43D1	[FB80 C3D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_344)
{
    // 43D2 0021;	
    // (䏒) CJK UNIFIED IDEOGRAPH-43D2	[FB80 C3D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_345)
{
    // 43D2 003F;	
    // (䏒) CJK UNIFIED IDEOGRAPH-43D2	[FB80 C3D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_346)
{
    // 43D2 0061;	
    // (䏒) CJK UNIFIED IDEOGRAPH-43D2	[FB80 C3D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_347)
{
    // 43D2 0041;	
    // (䏒) CJK UNIFIED IDEOGRAPH-43D2	[FB80 C3D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_348)
{
    // 43D2 0062;	
    // (䏒) CJK UNIFIED IDEOGRAPH-43D2	[FB80 C3D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_349)
{
    // 43D3 0021;	
    // (䏓) CJK UNIFIED IDEOGRAPH-43D3	[FB80 C3D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_350)
{
    // 43D3 003F;	
    // (䏓) CJK UNIFIED IDEOGRAPH-43D3	[FB80 C3D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_351)
{
    // 43D3 0061;	
    // (䏓) CJK UNIFIED IDEOGRAPH-43D3	[FB80 C3D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_352)
{
    // 43D3 0041;	
    // (䏓) CJK UNIFIED IDEOGRAPH-43D3	[FB80 C3D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_353)
{
    // 43D3 0062;	
    // (䏓) CJK UNIFIED IDEOGRAPH-43D3	[FB80 C3D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_354)
{
    // 43D4 0021;	
    // (䏔) CJK UNIFIED IDEOGRAPH-43D4	[FB80 C3D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_355)
{
    // 43D4 003F;	
    // (䏔) CJK UNIFIED IDEOGRAPH-43D4	[FB80 C3D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_356)
{
    // 43D4 0061;	
    // (䏔) CJK UNIFIED IDEOGRAPH-43D4	[FB80 C3D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_357)
{
    // 43D4 0041;	
    // (䏔) CJK UNIFIED IDEOGRAPH-43D4	[FB80 C3D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_358)
{
    // 43D4 0062;	
    // (䏔) CJK UNIFIED IDEOGRAPH-43D4	[FB80 C3D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_359)
{
    // 43D5 0021;	
    // (䏕) CJK UNIFIED IDEOGRAPH-43D5	[FB80 C3D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_360)
{
    // 2F981 0021;	
    // (䏕) CJK COMPATIBILITY IDEOGRAPH-2F981	[FB80 C3D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F981, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_361)
{
    // 43D5 003F;	
    // (䏕) CJK UNIFIED IDEOGRAPH-43D5	[FB80 C3D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_362)
{
    // 2F981 003F;	
    // (䏕) CJK COMPATIBILITY IDEOGRAPH-2F981	[FB80 C3D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F981, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_363)
{
    // 43D5 0061;	
    // (䏕) CJK UNIFIED IDEOGRAPH-43D5	[FB80 C3D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_364)
{
    // 2F981 0061;	
    // (䏕) CJK COMPATIBILITY IDEOGRAPH-2F981	[FB80 C3D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F981, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_365)
{
    // 43D5 0041;	
    // (䏕) CJK UNIFIED IDEOGRAPH-43D5	[FB80 C3D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_366)
{
    // 2F981 0041;	
    // (䏕) CJK COMPATIBILITY IDEOGRAPH-2F981	[FB80 C3D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F981, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_367)
{
    // 43D5 0062;	
    // (䏕) CJK UNIFIED IDEOGRAPH-43D5	[FB80 C3D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_368)
{
    // 2F981 0062;	
    // (䏕) CJK COMPATIBILITY IDEOGRAPH-2F981	[FB80 C3D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F981, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_369)
{
    // 43D6 0021;	
    // (䏖) CJK UNIFIED IDEOGRAPH-43D6	[FB80 C3D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_370)
{
    // 43D6 003F;	
    // (䏖) CJK UNIFIED IDEOGRAPH-43D6	[FB80 C3D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_371)
{
    // 43D6 0061;	
    // (䏖) CJK UNIFIED IDEOGRAPH-43D6	[FB80 C3D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_372)
{
    // 43D6 0041;	
    // (䏖) CJK UNIFIED IDEOGRAPH-43D6	[FB80 C3D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_373)
{
    // 43D6 0062;	
    // (䏖) CJK UNIFIED IDEOGRAPH-43D6	[FB80 C3D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_374)
{
    // 43D7 0021;	
    // (䏗) CJK UNIFIED IDEOGRAPH-43D7	[FB80 C3D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_375)
{
    // 43D7 003F;	
    // (䏗) CJK UNIFIED IDEOGRAPH-43D7	[FB80 C3D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_376)
{
    // 43D7 0061;	
    // (䏗) CJK UNIFIED IDEOGRAPH-43D7	[FB80 C3D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_377)
{
    // 43D7 0041;	
    // (䏗) CJK UNIFIED IDEOGRAPH-43D7	[FB80 C3D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_378)
{
    // 43D7 0062;	
    // (䏗) CJK UNIFIED IDEOGRAPH-43D7	[FB80 C3D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_379)
{
    // 43D8 0021;	
    // (䏘) CJK UNIFIED IDEOGRAPH-43D8	[FB80 C3D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_380)
{
    // 43D8 003F;	
    // (䏘) CJK UNIFIED IDEOGRAPH-43D8	[FB80 C3D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_381)
{
    // 43D8 0061;	
    // (䏘) CJK UNIFIED IDEOGRAPH-43D8	[FB80 C3D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_382)
{
    // 43D8 0041;	
    // (䏘) CJK UNIFIED IDEOGRAPH-43D8	[FB80 C3D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_383)
{
    // 43D8 0062;	
    // (䏘) CJK UNIFIED IDEOGRAPH-43D8	[FB80 C3D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_384)
{
    // 43D9 0021;	
    // (䏙) CJK UNIFIED IDEOGRAPH-43D9	[FB80 C3D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_385)
{
    // 2F8D7 0021;	
    // (䏙) CJK COMPATIBILITY IDEOGRAPH-2F8D7	[FB80 C3D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_386)
{
    // 43D9 003F;	
    // (䏙) CJK UNIFIED IDEOGRAPH-43D9	[FB80 C3D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_387)
{
    // 2F8D7 003F;	
    // (䏙) CJK COMPATIBILITY IDEOGRAPH-2F8D7	[FB80 C3D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_388)
{
    // 43D9 0061;	
    // (䏙) CJK UNIFIED IDEOGRAPH-43D9	[FB80 C3D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_389)
{
    // 2F8D7 0061;	
    // (䏙) CJK COMPATIBILITY IDEOGRAPH-2F8D7	[FB80 C3D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_390)
{
    // 43D9 0041;	
    // (䏙) CJK UNIFIED IDEOGRAPH-43D9	[FB80 C3D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_391)
{
    // 2F8D7 0041;	
    // (䏙) CJK COMPATIBILITY IDEOGRAPH-2F8D7	[FB80 C3D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_392)
{
    // 43D9 0062;	
    // (䏙) CJK UNIFIED IDEOGRAPH-43D9	[FB80 C3D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_393)
{
    // 2F8D7 0062;	
    // (䏙) CJK COMPATIBILITY IDEOGRAPH-2F8D7	[FB80 C3D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_394)
{
    // 43DA 0021;	
    // (䏚) CJK UNIFIED IDEOGRAPH-43DA	[FB80 C3DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_395)
{
    // 43DA 003F;	
    // (䏚) CJK UNIFIED IDEOGRAPH-43DA	[FB80 C3DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_396)
{
    // 43DA 0061;	
    // (䏚) CJK UNIFIED IDEOGRAPH-43DA	[FB80 C3DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_397)
{
    // 43DA 0041;	
    // (䏚) CJK UNIFIED IDEOGRAPH-43DA	[FB80 C3DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_398)
{
    // 43DA 0062;	
    // (䏚) CJK UNIFIED IDEOGRAPH-43DA	[FB80 C3DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_399)
{
    // 43DB 0021;	
    // (䏛) CJK UNIFIED IDEOGRAPH-43DB	[FB80 C3DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_400)
{
    // 43DB 003F;	
    // (䏛) CJK UNIFIED IDEOGRAPH-43DB	[FB80 C3DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_401)
{
    // 43DB 0061;	
    // (䏛) CJK UNIFIED IDEOGRAPH-43DB	[FB80 C3DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_402)
{
    // 43DB 0041;	
    // (䏛) CJK UNIFIED IDEOGRAPH-43DB	[FB80 C3DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_403)
{
    // 43DB 0062;	
    // (䏛) CJK UNIFIED IDEOGRAPH-43DB	[FB80 C3DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_404)
{
    // 43DC 0021;	
    // (䏜) CJK UNIFIED IDEOGRAPH-43DC	[FB80 C3DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_405)
{
    // 43DC 003F;	
    // (䏜) CJK UNIFIED IDEOGRAPH-43DC	[FB80 C3DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_406)
{
    // 43DC 0061;	
    // (䏜) CJK UNIFIED IDEOGRAPH-43DC	[FB80 C3DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_407)
{
    // 43DC 0041;	
    // (䏜) CJK UNIFIED IDEOGRAPH-43DC	[FB80 C3DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_408)
{
    // 43DC 0062;	
    // (䏜) CJK UNIFIED IDEOGRAPH-43DC	[FB80 C3DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_409)
{
    // 43DD 0021;	
    // (䏝) CJK UNIFIED IDEOGRAPH-43DD	[FB80 C3DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_410)
{
    // 43DD 003F;	
    // (䏝) CJK UNIFIED IDEOGRAPH-43DD	[FB80 C3DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_411)
{
    // 43DD 0061;	
    // (䏝) CJK UNIFIED IDEOGRAPH-43DD	[FB80 C3DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_412)
{
    // 43DD 0041;	
    // (䏝) CJK UNIFIED IDEOGRAPH-43DD	[FB80 C3DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_413)
{
    // 43DD 0062;	
    // (䏝) CJK UNIFIED IDEOGRAPH-43DD	[FB80 C3DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_414)
{
    // 43DE 0021;	
    // (䏞) CJK UNIFIED IDEOGRAPH-43DE	[FB80 C3DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_415)
{
    // 43DE 003F;	
    // (䏞) CJK UNIFIED IDEOGRAPH-43DE	[FB80 C3DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_416)
{
    // 43DE 0061;	
    // (䏞) CJK UNIFIED IDEOGRAPH-43DE	[FB80 C3DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_417)
{
    // 43DE 0041;	
    // (䏞) CJK UNIFIED IDEOGRAPH-43DE	[FB80 C3DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_418)
{
    // 43DE 0062;	
    // (䏞) CJK UNIFIED IDEOGRAPH-43DE	[FB80 C3DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_419)
{
    // 43DF 0021;	
    // (䏟) CJK UNIFIED IDEOGRAPH-43DF	[FB80 C3DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_420)
{
    // 43DF 003F;	
    // (䏟) CJK UNIFIED IDEOGRAPH-43DF	[FB80 C3DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_421)
{
    // 43DF 0061;	
    // (䏟) CJK UNIFIED IDEOGRAPH-43DF	[FB80 C3DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_422)
{
    // 43DF 0041;	
    // (䏟) CJK UNIFIED IDEOGRAPH-43DF	[FB80 C3DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_423)
{
    // 43DF 0062;	
    // (䏟) CJK UNIFIED IDEOGRAPH-43DF	[FB80 C3DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_424)
{
    // 43E0 0021;	
    // (䏠) CJK UNIFIED IDEOGRAPH-43E0	[FB80 C3E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_425)
{
    // 43E0 003F;	
    // (䏠) CJK UNIFIED IDEOGRAPH-43E0	[FB80 C3E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_426)
{
    // 43E0 0061;	
    // (䏠) CJK UNIFIED IDEOGRAPH-43E0	[FB80 C3E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_427)
{
    // 43E0 0041;	
    // (䏠) CJK UNIFIED IDEOGRAPH-43E0	[FB80 C3E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_428)
{
    // 43E0 0062;	
    // (䏠) CJK UNIFIED IDEOGRAPH-43E0	[FB80 C3E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_429)
{
    // 43E1 0021;	
    // (䏡) CJK UNIFIED IDEOGRAPH-43E1	[FB80 C3E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_430)
{
    // 43E1 003F;	
    // (䏡) CJK UNIFIED IDEOGRAPH-43E1	[FB80 C3E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_431)
{
    // 43E1 0061;	
    // (䏡) CJK UNIFIED IDEOGRAPH-43E1	[FB80 C3E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_432)
{
    // 43E1 0041;	
    // (䏡) CJK UNIFIED IDEOGRAPH-43E1	[FB80 C3E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_433)
{
    // 43E1 0062;	
    // (䏡) CJK UNIFIED IDEOGRAPH-43E1	[FB80 C3E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_434)
{
    // 43E2 0021;	
    // (䏢) CJK UNIFIED IDEOGRAPH-43E2	[FB80 C3E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_435)
{
    // 43E2 003F;	
    // (䏢) CJK UNIFIED IDEOGRAPH-43E2	[FB80 C3E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_436)
{
    // 43E2 0061;	
    // (䏢) CJK UNIFIED IDEOGRAPH-43E2	[FB80 C3E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_437)
{
    // 43E2 0041;	
    // (䏢) CJK UNIFIED IDEOGRAPH-43E2	[FB80 C3E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_438)
{
    // 43E2 0062;	
    // (䏢) CJK UNIFIED IDEOGRAPH-43E2	[FB80 C3E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_439)
{
    // 43E3 0021;	
    // (䏣) CJK UNIFIED IDEOGRAPH-43E3	[FB80 C3E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_440)
{
    // 43E3 003F;	
    // (䏣) CJK UNIFIED IDEOGRAPH-43E3	[FB80 C3E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_441)
{
    // 43E3 0061;	
    // (䏣) CJK UNIFIED IDEOGRAPH-43E3	[FB80 C3E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_442)
{
    // 43E3 0041;	
    // (䏣) CJK UNIFIED IDEOGRAPH-43E3	[FB80 C3E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_443)
{
    // 43E3 0062;	
    // (䏣) CJK UNIFIED IDEOGRAPH-43E3	[FB80 C3E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_444)
{
    // 43E4 0021;	
    // (䏤) CJK UNIFIED IDEOGRAPH-43E4	[FB80 C3E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_445)
{
    // 43E4 003F;	
    // (䏤) CJK UNIFIED IDEOGRAPH-43E4	[FB80 C3E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_446)
{
    // 43E4 0061;	
    // (䏤) CJK UNIFIED IDEOGRAPH-43E4	[FB80 C3E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_447)
{
    // 43E4 0041;	
    // (䏤) CJK UNIFIED IDEOGRAPH-43E4	[FB80 C3E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_448)
{
    // 43E4 0062;	
    // (䏤) CJK UNIFIED IDEOGRAPH-43E4	[FB80 C3E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_449)
{
    // 43E5 0021;	
    // (䏥) CJK UNIFIED IDEOGRAPH-43E5	[FB80 C3E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_450)
{
    // 43E5 003F;	
    // (䏥) CJK UNIFIED IDEOGRAPH-43E5	[FB80 C3E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_451)
{
    // 43E5 0061;	
    // (䏥) CJK UNIFIED IDEOGRAPH-43E5	[FB80 C3E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_452)
{
    // 43E5 0041;	
    // (䏥) CJK UNIFIED IDEOGRAPH-43E5	[FB80 C3E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_453)
{
    // 43E5 0062;	
    // (䏥) CJK UNIFIED IDEOGRAPH-43E5	[FB80 C3E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_454)
{
    // 43E6 0021;	
    // (䏦) CJK UNIFIED IDEOGRAPH-43E6	[FB80 C3E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_455)
{
    // 43E6 003F;	
    // (䏦) CJK UNIFIED IDEOGRAPH-43E6	[FB80 C3E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_456)
{
    // 43E6 0061;	
    // (䏦) CJK UNIFIED IDEOGRAPH-43E6	[FB80 C3E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_457)
{
    // 43E6 0041;	
    // (䏦) CJK UNIFIED IDEOGRAPH-43E6	[FB80 C3E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_458)
{
    // 43E6 0062;	
    // (䏦) CJK UNIFIED IDEOGRAPH-43E6	[FB80 C3E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_459)
{
    // 43E7 0021;	
    // (䏧) CJK UNIFIED IDEOGRAPH-43E7	[FB80 C3E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_460)
{
    // 43E7 003F;	
    // (䏧) CJK UNIFIED IDEOGRAPH-43E7	[FB80 C3E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_461)
{
    // 43E7 0061;	
    // (䏧) CJK UNIFIED IDEOGRAPH-43E7	[FB80 C3E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_462)
{
    // 43E7 0041;	
    // (䏧) CJK UNIFIED IDEOGRAPH-43E7	[FB80 C3E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_463)
{
    // 43E7 0062;	
    // (䏧) CJK UNIFIED IDEOGRAPH-43E7	[FB80 C3E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_464)
{
    // 43E8 0021;	
    // (䏨) CJK UNIFIED IDEOGRAPH-43E8	[FB80 C3E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_465)
{
    // 43E8 003F;	
    // (䏨) CJK UNIFIED IDEOGRAPH-43E8	[FB80 C3E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_466)
{
    // 43E8 0061;	
    // (䏨) CJK UNIFIED IDEOGRAPH-43E8	[FB80 C3E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_467)
{
    // 43E8 0041;	
    // (䏨) CJK UNIFIED IDEOGRAPH-43E8	[FB80 C3E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_468)
{
    // 43E8 0062;	
    // (䏨) CJK UNIFIED IDEOGRAPH-43E8	[FB80 C3E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_469)
{
    // 43E9 0021;	
    // (䏩) CJK UNIFIED IDEOGRAPH-43E9	[FB80 C3E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_470)
{
    // 43E9 003F;	
    // (䏩) CJK UNIFIED IDEOGRAPH-43E9	[FB80 C3E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_471)
{
    // 43E9 0061;	
    // (䏩) CJK UNIFIED IDEOGRAPH-43E9	[FB80 C3E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_472)
{
    // 43E9 0041;	
    // (䏩) CJK UNIFIED IDEOGRAPH-43E9	[FB80 C3E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_473)
{
    // 43E9 0062;	
    // (䏩) CJK UNIFIED IDEOGRAPH-43E9	[FB80 C3E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_474)
{
    // 43EA 0021;	
    // (䏪) CJK UNIFIED IDEOGRAPH-43EA	[FB80 C3EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_475)
{
    // 43EA 003F;	
    // (䏪) CJK UNIFIED IDEOGRAPH-43EA	[FB80 C3EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_476)
{
    // 43EA 0061;	
    // (䏪) CJK UNIFIED IDEOGRAPH-43EA	[FB80 C3EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_477)
{
    // 43EA 0041;	
    // (䏪) CJK UNIFIED IDEOGRAPH-43EA	[FB80 C3EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_478)
{
    // 43EA 0062;	
    // (䏪) CJK UNIFIED IDEOGRAPH-43EA	[FB80 C3EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_479)
{
    // 43EB 0021;	
    // (䏫) CJK UNIFIED IDEOGRAPH-43EB	[FB80 C3EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_480)
{
    // 43EB 003F;	
    // (䏫) CJK UNIFIED IDEOGRAPH-43EB	[FB80 C3EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_481)
{
    // 43EB 0061;	
    // (䏫) CJK UNIFIED IDEOGRAPH-43EB	[FB80 C3EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_482)
{
    // 43EB 0041;	
    // (䏫) CJK UNIFIED IDEOGRAPH-43EB	[FB80 C3EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_483)
{
    // 43EB 0062;	
    // (䏫) CJK UNIFIED IDEOGRAPH-43EB	[FB80 C3EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_484)
{
    // 43EC 0021;	
    // (䏬) CJK UNIFIED IDEOGRAPH-43EC	[FB80 C3EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_485)
{
    // 43EC 003F;	
    // (䏬) CJK UNIFIED IDEOGRAPH-43EC	[FB80 C3EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_486)
{
    // 43EC 0061;	
    // (䏬) CJK UNIFIED IDEOGRAPH-43EC	[FB80 C3EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_487)
{
    // 43EC 0041;	
    // (䏬) CJK UNIFIED IDEOGRAPH-43EC	[FB80 C3EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_488)
{
    // 43EC 0062;	
    // (䏬) CJK UNIFIED IDEOGRAPH-43EC	[FB80 C3EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_489)
{
    // 43ED 0021;	
    // (䏭) CJK UNIFIED IDEOGRAPH-43ED	[FB80 C3ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_490)
{
    // 43ED 003F;	
    // (䏭) CJK UNIFIED IDEOGRAPH-43ED	[FB80 C3ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_491)
{
    // 43ED 0061;	
    // (䏭) CJK UNIFIED IDEOGRAPH-43ED	[FB80 C3ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_492)
{
    // 43ED 0041;	
    // (䏭) CJK UNIFIED IDEOGRAPH-43ED	[FB80 C3ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_493)
{
    // 43ED 0062;	
    // (䏭) CJK UNIFIED IDEOGRAPH-43ED	[FB80 C3ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_494)
{
    // 43EE 0021;	
    // (䏮) CJK UNIFIED IDEOGRAPH-43EE	[FB80 C3EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_495)
{
    // 43EE 003F;	
    // (䏮) CJK UNIFIED IDEOGRAPH-43EE	[FB80 C3EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC3EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_496)
{
    // 43EE 0061;	
    // (䏮) CJK UNIFIED IDEOGRAPH-43EE	[FB80 C3EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_497)
{
    // 43EE 0041;	
    // (䏮) CJK UNIFIED IDEOGRAPH-43EE	[FB80 C3EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x43EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_498)
{
    // 43EE 0062;	
    // (䏮) CJK UNIFIED IDEOGRAPH-43EE	[FB80 C3EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_367_499)
{
    // 43EF 0021;	
    // (䏯) CJK UNIFIED IDEOGRAPH-43EF	[FB80 C3EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x43EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC3EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

