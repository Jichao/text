// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_247_000)
{
    // 3052 003F;	
    // (げ) HIRAGANA LETTER GE	[3E7A 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3052, 0x003F };
    uint32_t const ces[11] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_001)
{
    // 30B2 003F;	
    // (ゲ) KATAKANA LETTER GE	[3E7A 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B2, 0x003F };
    uint32_t const ces[11] = { 0x3E7A, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_002)
{
    // 331C 0021;	
    // (㌜) SQUARE KEESU	[3E7A 1C73 3E7E 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331C, 0x0021 };
    uint32_t const ces[15] = { 0x3E7A, 0x1C73, 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_003)
{
    // 331C 003F;	
    // (㌜) SQUARE KEESU	[3E7A 1C73 3E7E 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331C, 0x003F };
    uint32_t const ces[15] = { 0x3E7A, 0x1C73, 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_004)
{
    // 331C 0061;	
    // (㌜) SQUARE KEESU	[3E7A 1C73 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331C, 0x0061 };
    uint32_t const ces[15] = { 0x3E7A, 0x1C73, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_005)
{
    // 331C 0041;	
    // (㌜) SQUARE KEESU	[3E7A 1C73 3E7E 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x331C, 0x0041 };
    uint32_t const ces[15] = { 0x3E7A, 0x1C73, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_006)
{
    // 331C 0062;	
    // (㌜) SQUARE KEESU	[3E7A 1C73 3E7E 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331C, 0x0062 };
    uint32_t const ces[15] = { 0x3E7A, 0x1C73, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_007)
{
    // 3096 0061;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A 1CAD | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3096, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_008)
{
    // 3096 0041;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A 1CAD | 0020 0020 | 000D 0008 |]

    uint32_t cps[2] = { 0x3096, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_009)
{
    // 3051 0061;	
    // (け) HIRAGANA LETTER KE	[3E7A 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3051, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_010)
{
    // 3051 0041;	
    // (け) HIRAGANA LETTER KE	[3E7A 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3051, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_011)
{
    // 30F6 0061;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30F6, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_012)
{
    // 30F6 0041;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x30F6, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_013)
{
    // 30B1 0061;	
    // (ケ) KATAKANA LETTER KE	[3E7A 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B1, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_014)
{
    // 30B1 0041;	
    // (ケ) KATAKANA LETTER KE	[3E7A 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30B1, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_015)
{
    // FF79 0061;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF79, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_016)
{
    // FF79 0041;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF79, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_017)
{
    // 32D8 0061;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D8, 0x0061 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_018)
{
    // 32D8 0041;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32D8, 0x0041 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_019)
{
    // 3052 0061;	
    // (げ) HIRAGANA LETTER GE	[3E7A 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3052, 0x0061 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_020)
{
    // 3052 0041;	
    // (げ) HIRAGANA LETTER GE	[3E7A 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3052, 0x0041 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_021)
{
    // 30B2 0061;	
    // (ゲ) KATAKANA LETTER GE	[3E7A 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B2, 0x0061 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_022)
{
    // 30B2 0041;	
    // (ゲ) KATAKANA LETTER GE	[3E7A 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30B2, 0x0041 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_023)
{
    // 3096 0062;	
    // (ゖ) HIRAGANA LETTER SMALL KE	[3E7A 1CC6 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3096, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_024)
{
    // 3051 0062;	
    // (け) HIRAGANA LETTER KE	[3E7A 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3051, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_025)
{
    // 30F6 0062;	
    // (ヶ) KATAKANA LETTER SMALL KE	[3E7A 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30F6, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_026)
{
    // 30B1 0062;	
    // (ケ) KATAKANA LETTER KE	[3E7A 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B1, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_027)
{
    // FF79 0062;	
    // (ｹ) HALFWIDTH KATAKANA LETTER KE	[3E7A 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF79, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_028)
{
    // 32D8 0062;	
    // (㋘) CIRCLED KATAKANA KE	[3E7A 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D8, 0x0062 };
    uint32_t const ces[9] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_029)
{
    // 3052 0062;	
    // (げ) HIRAGANA LETTER GE	[3E7A 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3052, 0x0062 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_030)
{
    // 30B2 0062;	
    // (ゲ) KATAKANA LETTER GE	[3E7A 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B2, 0x0062 };
    uint32_t const ces[11] = { 0x3E7A, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_031)
{
    // 3053 0334 3099;	
    // (こ̴) HIRAGANA LETTER KO, COMBINING TILDE OVERLAY	[3E7B | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3053, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_032)
{
    // 3053 3099 0334;	
    // (ご) HIRAGANA LETTER KO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7B | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3053, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_033)
{
    // 3054 0334;	
    // (ご) HIRAGANA LETTER GO	[3E7B | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3054, 0x0334 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_034)
{
    // 30B3 0334 3099;	
    // (コ̴) KATAKANA LETTER KO, COMBINING TILDE OVERLAY	[3E7B | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B3, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_035)
{
    // 30B3 3099 0334;	
    // (ゴ) KATAKANA LETTER KO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7B | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B3, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_036)
{
    // 30B4 0334;	
    // (ゴ) KATAKANA LETTER GO	[3E7B | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B4, 0x0334 };
    uint32_t const ces[10] = { 0x3E7B, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_037)
{
    // 3053 0021;	
    // (こ) HIRAGANA LETTER KO	[3E7B 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3053, 0x0021 };
    uint32_t const ces[9] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_038)
{
    // 30B3 0021;	
    // (コ) KATAKANA LETTER KO	[3E7B 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B3, 0x0021 };
    uint32_t const ces[9] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_039)
{
    // FF7A 0021;	
    // (ｺ) HALFWIDTH KATAKANA LETTER KO	[3E7B 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7A, 0x0021 };
    uint32_t const ces[9] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_040)
{
    // 32D9 0021;	
    // (㋙) CIRCLED KATAKANA KO	[3E7B 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D9, 0x0021 };
    uint32_t const ces[9] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_041)
{
    // 3054 0021;	
    // (ご) HIRAGANA LETTER GO	[3E7B 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3054, 0x0021 };
    uint32_t const ces[11] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_042)
{
    // 30B4 0021;	
    // (ゴ) KATAKANA LETTER GO	[3E7B 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B4, 0x0021 };
    uint32_t const ces[11] = { 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_043)
{
    // 3053 003F;	
    // (こ) HIRAGANA LETTER KO	[3E7B 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3053, 0x003F };
    uint32_t const ces[9] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_044)
{
    // 30B3 003F;	
    // (コ) KATAKANA LETTER KO	[3E7B 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B3, 0x003F };
    uint32_t const ces[9] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_045)
{
    // FF7A 003F;	
    // (ｺ) HALFWIDTH KATAKANA LETTER KO	[3E7B 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7A, 0x003F };
    uint32_t const ces[9] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_046)
{
    // 32D9 003F;	
    // (㋙) CIRCLED KATAKANA KO	[3E7B 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D9, 0x003F };
    uint32_t const ces[9] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_047)
{
    // 3054 003F;	
    // (ご) HIRAGANA LETTER GO	[3E7B 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3054, 0x003F };
    uint32_t const ces[11] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_048)
{
    // 30B4 003F;	
    // (ゴ) KATAKANA LETTER GO	[3E7B 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B4, 0x003F };
    uint32_t const ces[11] = { 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_049)
{
    // 331E 0021;	
    // (㌞) SQUARE KOOPO	[3E7B 1C73 3E8F 0261 | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331E, 0x0021 };
    uint32_t const ces[17] = { 0x3E7B, 0x1C73, 0x3E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_050)
{
    // 331E 003F;	
    // (㌞) SQUARE KOOPO	[3E7B 1C73 3E8F 0267 | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331E, 0x003F };
    uint32_t const ces[17] = { 0x3E7B, 0x1C73, 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_051)
{
    // 331E 0061;	
    // (㌞) SQUARE KOOPO	[3E7B 1C73 3E8F 1CAD | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331E, 0x0061 };
    uint32_t const ces[17] = { 0x3E7B, 0x1C73, 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_052)
{
    // 331E 0041;	
    // (㌞) SQUARE KOOPO	[3E7B 1C73 3E8F 1CAD | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x331E, 0x0041 };
    uint32_t const ces[17] = { 0x3E7B, 0x1C73, 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_053)
{
    // 331E 0062;	
    // (㌞) SQUARE KOOPO	[3E7B 1C73 3E8F 1CC6 | 0020 0020 0020 0038 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331E, 0x0062 };
    uint32_t const ces[17] = { 0x3E7B, 0x1C73, 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0038, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_054)
{
    // 3053 0061;	
    // (こ) HIRAGANA LETTER KO	[3E7B 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3053, 0x0061 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_055)
{
    // 3053 0041;	
    // (こ) HIRAGANA LETTER KO	[3E7B 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3053, 0x0041 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_056)
{
    // 30B3 0061;	
    // (コ) KATAKANA LETTER KO	[3E7B 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B3, 0x0061 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_057)
{
    // 30B3 0041;	
    // (コ) KATAKANA LETTER KO	[3E7B 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30B3, 0x0041 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_058)
{
    // FF7A 0061;	
    // (ｺ) HALFWIDTH KATAKANA LETTER KO	[3E7B 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7A, 0x0061 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_059)
{
    // FF7A 0041;	
    // (ｺ) HALFWIDTH KATAKANA LETTER KO	[3E7B 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7A, 0x0041 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_060)
{
    // 32D9 0061;	
    // (㋙) CIRCLED KATAKANA KO	[3E7B 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D9, 0x0061 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_061)
{
    // 32D9 0041;	
    // (㋙) CIRCLED KATAKANA KO	[3E7B 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32D9, 0x0041 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_062)
{
    // 3054 0061;	
    // (ご) HIRAGANA LETTER GO	[3E7B 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3054, 0x0061 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_063)
{
    // 3054 0041;	
    // (ご) HIRAGANA LETTER GO	[3E7B 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3054, 0x0041 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_064)
{
    // 30B4 0061;	
    // (ゴ) KATAKANA LETTER GO	[3E7B 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B4, 0x0061 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_065)
{
    // 30B4 0041;	
    // (ゴ) KATAKANA LETTER GO	[3E7B 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30B4, 0x0041 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_066)
{
    // 3053 0062;	
    // (こ) HIRAGANA LETTER KO	[3E7B 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3053, 0x0062 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_067)
{
    // 30B3 0062;	
    // (コ) KATAKANA LETTER KO	[3E7B 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B3, 0x0062 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_068)
{
    // FF7A 0062;	
    // (ｺ) HALFWIDTH KATAKANA LETTER KO	[3E7B 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7A, 0x0062 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_069)
{
    // 32D9 0062;	
    // (㋙) CIRCLED KATAKANA KO	[3E7B 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32D9, 0x0062 };
    uint32_t const ces[9] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_070)
{
    // 3054 0062;	
    // (ご) HIRAGANA LETTER GO	[3E7B 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3054, 0x0062 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_071)
{
    // 30B4 0062;	
    // (ゴ) KATAKANA LETTER GO	[3E7B 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B4, 0x0062 };
    uint32_t const ces[11] = { 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_072)
{
    // 1F201 0021;	
    // (🈁) SQUARED KATAKANA KOKO	[3E7B 3E7B 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F201, 0x0021 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_073)
{
    // 1F201 003F;	
    // (🈁) SQUARED KATAKANA KOKO	[3E7B 3E7B 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F201, 0x003F };
    uint32_t const ces[12] = { 0x3E7B, 0x3E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_074)
{
    // 1F201 0061;	
    // (🈁) SQUARED KATAKANA KOKO	[3E7B 3E7B 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F201, 0x0061 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_075)
{
    // 1F201 0041;	
    // (🈁) SQUARED KATAKANA KOKO	[3E7B 3E7B 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F201, 0x0041 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_076)
{
    // 1F201 0062;	
    // (🈁) SQUARED KATAKANA KOKO	[3E7B 3E7B 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F201, 0x0062 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_077)
{
    // 30FF 0021;	
    // (ヿ) KATAKANA DIGRAPH KOTO	[3E7B 3E85 0261 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x30FF, 0x0021 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_078)
{
    // 30FF 003F;	
    // (ヿ) KATAKANA DIGRAPH KOTO	[3E7B 3E85 0267 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x30FF, 0x003F };
    uint32_t const ces[12] = { 0x3E7B, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_079)
{
    // 30FF 0061;	
    // (ヿ) KATAKANA DIGRAPH KOTO	[3E7B 3E85 1CAD | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x30FF, 0x0061 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_080)
{
    // 30FF 0041;	
    // (ヿ) KATAKANA DIGRAPH KOTO	[3E7B 3E85 1CAD | 0020 0020 0020 | 0016 0016 0008 |]

    uint32_t cps[2] = { 0x30FF, 0x0041 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_081)
{
    // 30FF 0062;	
    // (ヿ) KATAKANA DIGRAPH KOTO	[3E7B 3E85 1CC6 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x30FF, 0x0062 };
    uint32_t const ces[12] = { 0x3E7B, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_082)
{
    // 331D 0021;	
    // (㌝) SQUARE KORUNA	[3E7B 3E9A 3E86 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331D, 0x0021 };
    uint32_t const ces[15] = { 0x3E7B, 0x3E9A, 0x3E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_083)
{
    // 331D 003F;	
    // (㌝) SQUARE KORUNA	[3E7B 3E9A 3E86 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331D, 0x003F };
    uint32_t const ces[15] = { 0x3E7B, 0x3E9A, 0x3E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_084)
{
    // 331D 0061;	
    // (㌝) SQUARE KORUNA	[3E7B 3E9A 3E86 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331D, 0x0061 };
    uint32_t const ces[15] = { 0x3E7B, 0x3E9A, 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_085)
{
    // 331D 0041;	
    // (㌝) SQUARE KORUNA	[3E7B 3E9A 3E86 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x331D, 0x0041 };
    uint32_t const ces[15] = { 0x3E7B, 0x3E9A, 0x3E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_086)
{
    // 331D 0062;	
    // (㌝) SQUARE KORUNA	[3E7B 3E9A 3E86 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331D, 0x0062 };
    uint32_t const ces[15] = { 0x3E7B, 0x3E9A, 0x3E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_087)
{
    // 3055 0334 3099;	
    // (さ̴) HIRAGANA LETTER SA, COMBINING TILDE OVERLAY	[3E7C | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3055, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_088)
{
    // 3055 3099 0334;	
    // (ざ) HIRAGANA LETTER SA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7C | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3055, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_089)
{
    // 3056 0334;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3056, 0x0334 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_090)
{
    // 30B5 0334 3099;	
    // (サ̴) KATAKANA LETTER SA, COMBINING TILDE OVERLAY	[3E7C | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B5, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_091)
{
    // 30B5 3099 0334;	
    // (ザ) KATAKANA LETTER SA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7C | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B5, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_092)
{
    // 30B6 0334;	
    // (ザ) KATAKANA LETTER ZA	[3E7C | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B6, 0x0334 };
    uint32_t const ces[10] = { 0x3E7C, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_093)
{
    // 3055 0021;	
    // (さ) HIRAGANA LETTER SA	[3E7C 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3055, 0x0021 };
    uint32_t const ces[9] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_094)
{
    // 30B5 0021;	
    // (サ) KATAKANA LETTER SA	[3E7C 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B5, 0x0021 };
    uint32_t const ces[9] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_095)
{
    // FF7B 0021;	
    // (ｻ) HALFWIDTH KATAKANA LETTER SA	[3E7C 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7B, 0x0021 };
    uint32_t const ces[9] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_096)
{
    // 32DA 0021;	
    // (㋚) CIRCLED KATAKANA SA	[3E7C 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DA, 0x0021 };
    uint32_t const ces[9] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_097)
{
    // 1F202 0021;	
    // (🈂) SQUARED KATAKANA SA	[3E7C 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F202, 0x0021 };
    uint32_t const ces[9] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_098)
{
    // 3056 0021;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3056, 0x0021 };
    uint32_t const ces[11] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_099)
{
    // 30B6 0021;	
    // (ザ) KATAKANA LETTER ZA	[3E7C 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B6, 0x0021 };
    uint32_t const ces[11] = { 0x3E7C, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_100)
{
    // 3055 003F;	
    // (さ) HIRAGANA LETTER SA	[3E7C 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3055, 0x003F };
    uint32_t const ces[9] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_101)
{
    // 30B5 003F;	
    // (サ) KATAKANA LETTER SA	[3E7C 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B5, 0x003F };
    uint32_t const ces[9] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_102)
{
    // FF7B 003F;	
    // (ｻ) HALFWIDTH KATAKANA LETTER SA	[3E7C 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7B, 0x003F };
    uint32_t const ces[9] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_103)
{
    // 32DA 003F;	
    // (㋚) CIRCLED KATAKANA SA	[3E7C 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DA, 0x003F };
    uint32_t const ces[9] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_104)
{
    // 1F202 003F;	
    // (🈂) SQUARED KATAKANA SA	[3E7C 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F202, 0x003F };
    uint32_t const ces[9] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_105)
{
    // 3056 003F;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3056, 0x003F };
    uint32_t const ces[11] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_106)
{
    // 30B6 003F;	
    // (ザ) KATAKANA LETTER ZA	[3E7C 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B6, 0x003F };
    uint32_t const ces[11] = { 0x3E7C, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_107)
{
    // 3055 0061;	
    // (さ) HIRAGANA LETTER SA	[3E7C 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3055, 0x0061 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_108)
{
    // 3055 0041;	
    // (さ) HIRAGANA LETTER SA	[3E7C 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3055, 0x0041 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_109)
{
    // 30B5 0061;	
    // (サ) KATAKANA LETTER SA	[3E7C 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B5, 0x0061 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_110)
{
    // 30B5 0041;	
    // (サ) KATAKANA LETTER SA	[3E7C 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30B5, 0x0041 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_111)
{
    // FF7B 0061;	
    // (ｻ) HALFWIDTH KATAKANA LETTER SA	[3E7C 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7B, 0x0061 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_112)
{
    // FF7B 0041;	
    // (ｻ) HALFWIDTH KATAKANA LETTER SA	[3E7C 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7B, 0x0041 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_113)
{
    // 32DA 0061;	
    // (㋚) CIRCLED KATAKANA SA	[3E7C 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DA, 0x0061 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_114)
{
    // 32DA 0041;	
    // (㋚) CIRCLED KATAKANA SA	[3E7C 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DA, 0x0041 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_115)
{
    // 1F202 0061;	
    // (🈂) SQUARED KATAKANA SA	[3E7C 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F202, 0x0061 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_116)
{
    // 1F202 0041;	
    // (🈂) SQUARED KATAKANA SA	[3E7C 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F202, 0x0041 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_117)
{
    // 3056 0061;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3056, 0x0061 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_118)
{
    // 3056 0041;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3056, 0x0041 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_119)
{
    // 30B6 0061;	
    // (ザ) KATAKANA LETTER ZA	[3E7C 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B6, 0x0061 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_120)
{
    // 30B6 0041;	
    // (ザ) KATAKANA LETTER ZA	[3E7C 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30B6, 0x0041 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_121)
{
    // 3055 0062;	
    // (さ) HIRAGANA LETTER SA	[3E7C 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3055, 0x0062 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_122)
{
    // 30B5 0062;	
    // (サ) KATAKANA LETTER SA	[3E7C 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B5, 0x0062 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_123)
{
    // FF7B 0062;	
    // (ｻ) HALFWIDTH KATAKANA LETTER SA	[3E7C 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7B, 0x0062 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_124)
{
    // 32DA 0062;	
    // (㋚) CIRCLED KATAKANA SA	[3E7C 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DA, 0x0062 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_125)
{
    // 1F202 0062;	
    // (🈂) SQUARED KATAKANA SA	[3E7C 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F202, 0x0062 };
    uint32_t const ces[9] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_126)
{
    // 3056 0062;	
    // (ざ) HIRAGANA LETTER ZA	[3E7C 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3056, 0x0062 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_127)
{
    // 30B6 0062;	
    // (ザ) KATAKANA LETTER ZA	[3E7C 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B6, 0x0062 };
    uint32_t const ces[11] = { 0x3E7C, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_128)
{
    // 331F 0021;	
    // (㌟) SQUARE SAIKURU	[3E7C 3E72 3E79 3E9A 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331F, 0x0021 };
    uint32_t const ces[18] = { 0x3E7C, 0x3E72, 0x3E79, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_129)
{
    // 331F 003F;	
    // (㌟) SQUARE SAIKURU	[3E7C 3E72 3E79 3E9A 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331F, 0x003F };
    uint32_t const ces[18] = { 0x3E7C, 0x3E72, 0x3E79, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_130)
{
    // 331F 0061;	
    // (㌟) SQUARE SAIKURU	[3E7C 3E72 3E79 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331F, 0x0061 };
    uint32_t const ces[18] = { 0x3E7C, 0x3E72, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_131)
{
    // 331F 0041;	
    // (㌟) SQUARE SAIKURU	[3E7C 3E72 3E79 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x331F, 0x0041 };
    uint32_t const ces[18] = { 0x3E7C, 0x3E72, 0x3E79, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_132)
{
    // 331F 0062;	
    // (㌟) SQUARE SAIKURU	[3E7C 3E72 3E79 3E9A 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x331F, 0x0062 };
    uint32_t const ces[18] = { 0x3E7C, 0x3E72, 0x3E79, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_133)
{
    // 3320 0021;	
    // (㌠) SQUARE SANTIIMU	[3E7C 3EA1 3E82 1C73 3E92 0261 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3320, 0x0021 };
    uint32_t const ces[21] = { 0x3E7C, 0x3EA1, 0x3E82, 0x1C73, 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_134)
{
    // 3320 003F;	
    // (㌠) SQUARE SANTIIMU	[3E7C 3EA1 3E82 1C73 3E92 0267 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3320, 0x003F };
    uint32_t const ces[21] = { 0x3E7C, 0x3EA1, 0x3E82, 0x1C73, 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_135)
{
    // 3320 0061;	
    // (㌠) SQUARE SANTIIMU	[3E7C 3EA1 3E82 1C73 3E92 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3320, 0x0061 };
    uint32_t const ces[21] = { 0x3E7C, 0x3EA1, 0x3E82, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_136)
{
    // 3320 0041;	
    // (㌠) SQUARE SANTIIMU	[3E7C 3EA1 3E82 1C73 3E92 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3320, 0x0041 };
    uint32_t const ces[21] = { 0x3E7C, 0x3EA1, 0x3E82, 0x1C73, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_137)
{
    // 3320 0062;	
    // (㌠) SQUARE SANTIIMU	[3E7C 3EA1 3E82 1C73 3E92 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3320, 0x0062 };
    uint32_t const ces[21] = { 0x3E7C, 0x3EA1, 0x3E82, 0x1C73, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_138)
{
    // 3057 0334 3099;	
    // (し̴) HIRAGANA LETTER SI, COMBINING TILDE OVERLAY	[3E7D | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3057, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_139)
{
    // 3057 3099 0334;	
    // (じ) HIRAGANA LETTER SI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7D | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3057, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_140)
{
    // 3058 0334;	
    // (じ) HIRAGANA LETTER ZI	[3E7D | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3058, 0x0334 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_141)
{
    // 30B7 0334 3099;	
    // (シ̴) KATAKANA LETTER SI, COMBINING TILDE OVERLAY	[3E7D | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B7, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_142)
{
    // 30B7 3099 0334;	
    // (ジ) KATAKANA LETTER SI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7D | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B7, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_143)
{
    // 30B8 0334;	
    // (ジ) KATAKANA LETTER ZI	[3E7D | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B8, 0x0334 };
    uint32_t const ces[10] = { 0x3E7D, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_144)
{
    // 3057 0021;	
    // (し) HIRAGANA LETTER SI	[3E7D 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3057, 0x0021 };
    uint32_t const ces[9] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_145)
{
    // 31F1 0021;	
    // (ㇱ) KATAKANA LETTER SMALL SI	[3E7D 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F1, 0x0021 };
    uint32_t const ces[9] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_146)
{
    // 30B7 0021;	
    // (シ) KATAKANA LETTER SI	[3E7D 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B7, 0x0021 };
    uint32_t const ces[9] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_147)
{
    // FF7C 0021;	
    // (ｼ) HALFWIDTH KATAKANA LETTER SI	[3E7D 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7C, 0x0021 };
    uint32_t const ces[9] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_148)
{
    // 32DB 0021;	
    // (㋛) CIRCLED KATAKANA SI	[3E7D 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DB, 0x0021 };
    uint32_t const ces[9] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_149)
{
    // 3058 0021;	
    // (じ) HIRAGANA LETTER ZI	[3E7D 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3058, 0x0021 };
    uint32_t const ces[11] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_150)
{
    // 30B8 0021;	
    // (ジ) KATAKANA LETTER ZI	[3E7D 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B8, 0x0021 };
    uint32_t const ces[11] = { 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_151)
{
    // 3057 003F;	
    // (し) HIRAGANA LETTER SI	[3E7D 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3057, 0x003F };
    uint32_t const ces[9] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_152)
{
    // 31F1 003F;	
    // (ㇱ) KATAKANA LETTER SMALL SI	[3E7D 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F1, 0x003F };
    uint32_t const ces[9] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_153)
{
    // 30B7 003F;	
    // (シ) KATAKANA LETTER SI	[3E7D 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B7, 0x003F };
    uint32_t const ces[9] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_154)
{
    // FF7C 003F;	
    // (ｼ) HALFWIDTH KATAKANA LETTER SI	[3E7D 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7C, 0x003F };
    uint32_t const ces[9] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_155)
{
    // 32DB 003F;	
    // (㋛) CIRCLED KATAKANA SI	[3E7D 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DB, 0x003F };
    uint32_t const ces[9] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_156)
{
    // 3058 003F;	
    // (じ) HIRAGANA LETTER ZI	[3E7D 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3058, 0x003F };
    uint32_t const ces[11] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_157)
{
    // 30B8 003F;	
    // (ジ) KATAKANA LETTER ZI	[3E7D 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B8, 0x003F };
    uint32_t const ces[11] = { 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_158)
{
    // 3057 0061;	
    // (し) HIRAGANA LETTER SI	[3E7D 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3057, 0x0061 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_159)
{
    // 3057 0041;	
    // (し) HIRAGANA LETTER SI	[3E7D 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3057, 0x0041 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_160)
{
    // 31F1 0061;	
    // (ㇱ) KATAKANA LETTER SMALL SI	[3E7D 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F1, 0x0061 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_161)
{
    // 31F1 0041;	
    // (ㇱ) KATAKANA LETTER SMALL SI	[3E7D 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31F1, 0x0041 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_162)
{
    // 30B7 0061;	
    // (シ) KATAKANA LETTER SI	[3E7D 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B7, 0x0061 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_163)
{
    // 30B7 0041;	
    // (シ) KATAKANA LETTER SI	[3E7D 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30B7, 0x0041 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_164)
{
    // FF7C 0061;	
    // (ｼ) HALFWIDTH KATAKANA LETTER SI	[3E7D 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7C, 0x0061 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_165)
{
    // FF7C 0041;	
    // (ｼ) HALFWIDTH KATAKANA LETTER SI	[3E7D 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7C, 0x0041 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_166)
{
    // 32DB 0061;	
    // (㋛) CIRCLED KATAKANA SI	[3E7D 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DB, 0x0061 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_167)
{
    // 32DB 0041;	
    // (㋛) CIRCLED KATAKANA SI	[3E7D 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DB, 0x0041 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_168)
{
    // 3058 0061;	
    // (じ) HIRAGANA LETTER ZI	[3E7D 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3058, 0x0061 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_169)
{
    // 3058 0041;	
    // (じ) HIRAGANA LETTER ZI	[3E7D 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3058, 0x0041 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_170)
{
    // 30B8 0061;	
    // (ジ) KATAKANA LETTER ZI	[3E7D 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B8, 0x0061 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_171)
{
    // 30B8 0041;	
    // (ジ) KATAKANA LETTER ZI	[3E7D 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30B8, 0x0041 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_172)
{
    // 3057 0062;	
    // (し) HIRAGANA LETTER SI	[3E7D 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3057, 0x0062 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_173)
{
    // 31F1 0062;	
    // (ㇱ) KATAKANA LETTER SMALL SI	[3E7D 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F1, 0x0062 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_174)
{
    // 30B7 0062;	
    // (シ) KATAKANA LETTER SI	[3E7D 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B7, 0x0062 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_175)
{
    // FF7C 0062;	
    // (ｼ) HALFWIDTH KATAKANA LETTER SI	[3E7D 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7C, 0x0062 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_176)
{
    // 32DB 0062;	
    // (㋛) CIRCLED KATAKANA SI	[3E7D 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DB, 0x0062 };
    uint32_t const ces[9] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_177)
{
    // 3058 0062;	
    // (じ) HIRAGANA LETTER ZI	[3E7D 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3058, 0x0062 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_178)
{
    // 30B8 0062;	
    // (ジ) KATAKANA LETTER ZI	[3E7D 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30B8, 0x0062 };
    uint32_t const ces[11] = { 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_179)
{
    // 3006 0021;	
    // (〆) IDEOGRAPHIC CLOSING MARK	[3E7D 3E93 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3006, 0x0021 };
    uint32_t const ces[12] = { 0x3E7D, 0x3E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_180)
{
    // 3006 003F;	
    // (〆) IDEOGRAPHIC CLOSING MARK	[3E7D 3E93 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3006, 0x003F };
    uint32_t const ces[12] = { 0x3E7D, 0x3E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_181)
{
    // 3006 0061;	
    // (〆) IDEOGRAPHIC CLOSING MARK	[3E7D 3E93 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3006, 0x0061 };
    uint32_t const ces[12] = { 0x3E7D, 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_182)
{
    // 3006 0041;	
    // (〆) IDEOGRAPHIC CLOSING MARK	[3E7D 3E93 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x3006, 0x0041 };
    uint32_t const ces[12] = { 0x3E7D, 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_183)
{
    // 3006 0062;	
    // (〆) IDEOGRAPHIC CLOSING MARK	[3E7D 3E93 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x3006, 0x0062 };
    uint32_t const ces[12] = { 0x3E7D, 0x3E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_184)
{
    // 3321 0021;	
    // (㌡) SQUARE SIRINGU	[3E7D 3E99 3EA1 3E79 0261 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3321, 0x0021 };
    uint32_t const ces[20] = { 0x3E7D, 0x3E99, 0x3EA1, 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_185)
{
    // 3321 003F;	
    // (㌡) SQUARE SIRINGU	[3E7D 3E99 3EA1 3E79 0267 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3321, 0x003F };
    uint32_t const ces[20] = { 0x3E7D, 0x3E99, 0x3EA1, 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_186)
{
    // 3321 0061;	
    // (㌡) SQUARE SIRINGU	[3E7D 3E99 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3321, 0x0061 };
    uint32_t const ces[20] = { 0x3E7D, 0x3E99, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_187)
{
    // 3321 0041;	
    // (㌡) SQUARE SIRINGU	[3E7D 3E99 3EA1 3E79 1CAD | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3321, 0x0041 };
    uint32_t const ces[20] = { 0x3E7D, 0x3E99, 0x3EA1, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_188)
{
    // 3321 0062;	
    // (㌡) SQUARE SIRINGU	[3E7D 3E99 3EA1 3E79 1CC6 | 0020 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3321, 0x0062 };
    uint32_t const ces[20] = { 0x3E7D, 0x3E99, 0x3EA1, 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_189)
{
    // 3059 0334 3099;	
    // (す̴) HIRAGANA LETTER SU, COMBINING TILDE OVERLAY	[3E7E | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3059, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_190)
{
    // 3059 3099 0334;	
    // (ず) HIRAGANA LETTER SU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7E | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3059, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_191)
{
    // 305A 0334;	
    // (ず) HIRAGANA LETTER ZU	[3E7E | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305A, 0x0334 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_192)
{
    // 30B9 0334 3099;	
    // (ス̴) KATAKANA LETTER SU, COMBINING TILDE OVERLAY	[3E7E | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B9, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_193)
{
    // 30B9 3099 0334;	
    // (ズ) KATAKANA LETTER SU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7E | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30B9, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_194)
{
    // 30BA 0334;	
    // (ズ) KATAKANA LETTER ZU	[3E7E | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BA, 0x0334 };
    uint32_t const ces[10] = { 0x3E7E, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_195)
{
    // 3059 0021;	
    // (す) HIRAGANA LETTER SU	[3E7E 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3059, 0x0021 };
    uint32_t const ces[9] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_196)
{
    // 31F2 0021;	
    // (ㇲ) KATAKANA LETTER SMALL SU	[3E7E 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F2, 0x0021 };
    uint32_t const ces[9] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_197)
{
    // 30B9 0021;	
    // (ス) KATAKANA LETTER SU	[3E7E 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B9, 0x0021 };
    uint32_t const ces[9] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_198)
{
    // FF7D 0021;	
    // (ｽ) HALFWIDTH KATAKANA LETTER SU	[3E7E 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7D, 0x0021 };
    uint32_t const ces[9] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_199)
{
    // 32DC 0021;	
    // (㋜) CIRCLED KATAKANA SU	[3E7E 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DC, 0x0021 };
    uint32_t const ces[9] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_200)
{
    // 305A 0021;	
    // (ず) HIRAGANA LETTER ZU	[3E7E 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305A, 0x0021 };
    uint32_t const ces[11] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_201)
{
    // 30BA 0021;	
    // (ズ) KATAKANA LETTER ZU	[3E7E 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BA, 0x0021 };
    uint32_t const ces[11] = { 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_202)
{
    // 3059 003F;	
    // (す) HIRAGANA LETTER SU	[3E7E 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3059, 0x003F };
    uint32_t const ces[9] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_203)
{
    // 31F2 003F;	
    // (ㇲ) KATAKANA LETTER SMALL SU	[3E7E 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F2, 0x003F };
    uint32_t const ces[9] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_204)
{
    // 30B9 003F;	
    // (ス) KATAKANA LETTER SU	[3E7E 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B9, 0x003F };
    uint32_t const ces[9] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_205)
{
    // FF7D 003F;	
    // (ｽ) HALFWIDTH KATAKANA LETTER SU	[3E7E 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7D, 0x003F };
    uint32_t const ces[9] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_206)
{
    // 32DC 003F;	
    // (㋜) CIRCLED KATAKANA SU	[3E7E 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DC, 0x003F };
    uint32_t const ces[9] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_207)
{
    // 305A 003F;	
    // (ず) HIRAGANA LETTER ZU	[3E7E 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305A, 0x003F };
    uint32_t const ces[11] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_208)
{
    // 30BA 003F;	
    // (ズ) KATAKANA LETTER ZU	[3E7E 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BA, 0x003F };
    uint32_t const ces[11] = { 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_209)
{
    // 3059 0061;	
    // (す) HIRAGANA LETTER SU	[3E7E 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3059, 0x0061 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_210)
{
    // 3059 0041;	
    // (す) HIRAGANA LETTER SU	[3E7E 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3059, 0x0041 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_211)
{
    // 31F2 0061;	
    // (ㇲ) KATAKANA LETTER SMALL SU	[3E7E 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F2, 0x0061 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_212)
{
    // 31F2 0041;	
    // (ㇲ) KATAKANA LETTER SMALL SU	[3E7E 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31F2, 0x0041 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_213)
{
    // 30B9 0061;	
    // (ス) KATAKANA LETTER SU	[3E7E 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B9, 0x0061 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_214)
{
    // 30B9 0041;	
    // (ス) KATAKANA LETTER SU	[3E7E 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30B9, 0x0041 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_215)
{
    // FF7D 0061;	
    // (ｽ) HALFWIDTH KATAKANA LETTER SU	[3E7E 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7D, 0x0061 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_216)
{
    // FF7D 0041;	
    // (ｽ) HALFWIDTH KATAKANA LETTER SU	[3E7E 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7D, 0x0041 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_217)
{
    // 32DC 0061;	
    // (㋜) CIRCLED KATAKANA SU	[3E7E 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DC, 0x0061 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_218)
{
    // 32DC 0041;	
    // (㋜) CIRCLED KATAKANA SU	[3E7E 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DC, 0x0041 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_219)
{
    // 305A 0061;	
    // (ず) HIRAGANA LETTER ZU	[3E7E 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305A, 0x0061 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_220)
{
    // 305A 0041;	
    // (ず) HIRAGANA LETTER ZU	[3E7E 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x305A, 0x0041 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_221)
{
    // 30BA 0061;	
    // (ズ) KATAKANA LETTER ZU	[3E7E 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BA, 0x0061 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_222)
{
    // 30BA 0041;	
    // (ズ) KATAKANA LETTER ZU	[3E7E 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30BA, 0x0041 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_223)
{
    // 3059 0062;	
    // (す) HIRAGANA LETTER SU	[3E7E 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3059, 0x0062 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_224)
{
    // 31F2 0062;	
    // (ㇲ) KATAKANA LETTER SMALL SU	[3E7E 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F2, 0x0062 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_225)
{
    // 30B9 0062;	
    // (ス) KATAKANA LETTER SU	[3E7E 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30B9, 0x0062 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_226)
{
    // FF7D 0062;	
    // (ｽ) HALFWIDTH KATAKANA LETTER SU	[3E7E 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7D, 0x0062 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_227)
{
    // 32DC 0062;	
    // (㋜) CIRCLED KATAKANA SU	[3E7E 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DC, 0x0062 };
    uint32_t const ces[9] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_228)
{
    // 305A 0062;	
    // (ず) HIRAGANA LETTER ZU	[3E7E 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305A, 0x0062 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_229)
{
    // 30BA 0062;	
    // (ズ) KATAKANA LETTER ZU	[3E7E 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BA, 0x0062 };
    uint32_t const ces[11] = { 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_230)
{
    // 305B 0334 3099;	
    // (せ̴) HIRAGANA LETTER SE, COMBINING TILDE OVERLAY	[3E7F | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305B, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_231)
{
    // 305B 3099 0334;	
    // (ぜ) HIRAGANA LETTER SE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7F | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305B, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_232)
{
    // 305C 0334;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305C, 0x0334 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_233)
{
    // 30BB 0334 3099;	
    // (セ̴) KATAKANA LETTER SE, COMBINING TILDE OVERLAY	[3E7F | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BB, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_234)
{
    // 30BB 3099 0334;	
    // (ゼ) KATAKANA LETTER SE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E7F | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BB, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_235)
{
    // 30BC 0334;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BC, 0x0334 };
    uint32_t const ces[10] = { 0x3E7F, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_236)
{
    // 305B 0021;	
    // (せ) HIRAGANA LETTER SE	[3E7F 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305B, 0x0021 };
    uint32_t const ces[9] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_237)
{
    // 30BB 0021;	
    // (セ) KATAKANA LETTER SE	[3E7F 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BB, 0x0021 };
    uint32_t const ces[9] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_238)
{
    // FF7E 0021;	
    // (ｾ) HALFWIDTH KATAKANA LETTER SE	[3E7F 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7E, 0x0021 };
    uint32_t const ces[9] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_239)
{
    // 32DD 0021;	
    // (㋝) CIRCLED KATAKANA SE	[3E7F 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DD, 0x0021 };
    uint32_t const ces[9] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_240)
{
    // 305C 0021;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305C, 0x0021 };
    uint32_t const ces[11] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_241)
{
    // 30BC 0021;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BC, 0x0021 };
    uint32_t const ces[11] = { 0x3E7F, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_242)
{
    // 305B 003F;	
    // (せ) HIRAGANA LETTER SE	[3E7F 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305B, 0x003F };
    uint32_t const ces[9] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_243)
{
    // 30BB 003F;	
    // (セ) KATAKANA LETTER SE	[3E7F 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BB, 0x003F };
    uint32_t const ces[9] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_244)
{
    // FF7E 003F;	
    // (ｾ) HALFWIDTH KATAKANA LETTER SE	[3E7F 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7E, 0x003F };
    uint32_t const ces[9] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_245)
{
    // 32DD 003F;	
    // (㋝) CIRCLED KATAKANA SE	[3E7F 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DD, 0x003F };
    uint32_t const ces[9] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_246)
{
    // 305C 003F;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305C, 0x003F };
    uint32_t const ces[11] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_247)
{
    // 30BC 003F;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BC, 0x003F };
    uint32_t const ces[11] = { 0x3E7F, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_248)
{
    // 305B 0061;	
    // (せ) HIRAGANA LETTER SE	[3E7F 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305B, 0x0061 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_249)
{
    // 305B 0041;	
    // (せ) HIRAGANA LETTER SE	[3E7F 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x305B, 0x0041 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_250)
{
    // 30BB 0061;	
    // (セ) KATAKANA LETTER SE	[3E7F 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BB, 0x0061 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_251)
{
    // 30BB 0041;	
    // (セ) KATAKANA LETTER SE	[3E7F 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30BB, 0x0041 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_252)
{
    // FF7E 0061;	
    // (ｾ) HALFWIDTH KATAKANA LETTER SE	[3E7F 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7E, 0x0061 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_253)
{
    // FF7E 0041;	
    // (ｾ) HALFWIDTH KATAKANA LETTER SE	[3E7F 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7E, 0x0041 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_254)
{
    // 32DD 0061;	
    // (㋝) CIRCLED KATAKANA SE	[3E7F 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DD, 0x0061 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_255)
{
    // 32DD 0041;	
    // (㋝) CIRCLED KATAKANA SE	[3E7F 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DD, 0x0041 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_256)
{
    // 305C 0061;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305C, 0x0061 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_257)
{
    // 305C 0041;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x305C, 0x0041 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_258)
{
    // 30BC 0061;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BC, 0x0061 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_259)
{
    // 30BC 0041;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30BC, 0x0041 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_260)
{
    // 305B 0062;	
    // (せ) HIRAGANA LETTER SE	[3E7F 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305B, 0x0062 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_261)
{
    // 30BB 0062;	
    // (セ) KATAKANA LETTER SE	[3E7F 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BB, 0x0062 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_262)
{
    // FF7E 0062;	
    // (ｾ) HALFWIDTH KATAKANA LETTER SE	[3E7F 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7E, 0x0062 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_263)
{
    // 32DD 0062;	
    // (㋝) CIRCLED KATAKANA SE	[3E7F 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DD, 0x0062 };
    uint32_t const ces[9] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_264)
{
    // 305C 0062;	
    // (ぜ) HIRAGANA LETTER ZE	[3E7F 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305C, 0x0062 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_265)
{
    // 30BC 0062;	
    // (ゼ) KATAKANA LETTER ZE	[3E7F 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BC, 0x0062 };
    uint32_t const ces[11] = { 0x3E7F, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_266)
{
    // 3322 0021;	
    // (㌢) SQUARE SENTI	[3E7F 3EA1 3E82 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3322, 0x0021 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_267)
{
    // 3322 003F;	
    // (㌢) SQUARE SENTI	[3E7F 3EA1 3E82 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3322, 0x003F };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_268)
{
    // 3322 0061;	
    // (㌢) SQUARE SENTI	[3E7F 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3322, 0x0061 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_269)
{
    // 3322 0041;	
    // (㌢) SQUARE SENTI	[3E7F 3EA1 3E82 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3322, 0x0041 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_270)
{
    // 3322 0062;	
    // (㌢) SQUARE SENTI	[3E7F 3EA1 3E82 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3322, 0x0062 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_271)
{
    // 3323 0021;	
    // (㌣) SQUARE SENTO	[3E7F 3EA1 3E85 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3323, 0x0021 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_272)
{
    // 3323 003F;	
    // (㌣) SQUARE SENTO	[3E7F 3EA1 3E85 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3323, 0x003F };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_273)
{
    // 3323 0061;	
    // (㌣) SQUARE SENTO	[3E7F 3EA1 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3323, 0x0061 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_274)
{
    // 3323 0041;	
    // (㌣) SQUARE SENTO	[3E7F 3EA1 3E85 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3323, 0x0041 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_275)
{
    // 3323 0062;	
    // (㌣) SQUARE SENTO	[3E7F 3EA1 3E85 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3323, 0x0062 };
    uint32_t const ces[15] = { 0x3E7F, 0x3EA1, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_276)
{
    // 305D 0334 3099;	
    // (そ̴) HIRAGANA LETTER SO, COMBINING TILDE OVERLAY	[3E80 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305D, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_277)
{
    // 305D 3099 0334;	
    // (ぞ) HIRAGANA LETTER SO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E80 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305D, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_278)
{
    // 305E 0334;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305E, 0x0334 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_279)
{
    // 30BD 0334 3099;	
    // (ソ̴) KATAKANA LETTER SO, COMBINING TILDE OVERLAY	[3E80 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BD, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_280)
{
    // 30BD 3099 0334;	
    // (ゾ) KATAKANA LETTER SO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E80 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BD, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_281)
{
    // 30BE 0334;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BE, 0x0334 };
    uint32_t const ces[10] = { 0x3E80, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_282)
{
    // 305D 0021;	
    // (そ) HIRAGANA LETTER SO	[3E80 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305D, 0x0021 };
    uint32_t const ces[9] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_283)
{
    // 30BD 0021;	
    // (ソ) KATAKANA LETTER SO	[3E80 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BD, 0x0021 };
    uint32_t const ces[9] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_284)
{
    // FF7F 0021;	
    // (ｿ) HALFWIDTH KATAKANA LETTER SO	[3E80 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7F, 0x0021 };
    uint32_t const ces[9] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_285)
{
    // 32DE 0021;	
    // (㋞) CIRCLED KATAKANA SO	[3E80 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DE, 0x0021 };
    uint32_t const ces[9] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_286)
{
    // 305E 0021;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305E, 0x0021 };
    uint32_t const ces[11] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_287)
{
    // 30BE 0021;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BE, 0x0021 };
    uint32_t const ces[11] = { 0x3E80, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_288)
{
    // 305D 003F;	
    // (そ) HIRAGANA LETTER SO	[3E80 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305D, 0x003F };
    uint32_t const ces[9] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_289)
{
    // 30BD 003F;	
    // (ソ) KATAKANA LETTER SO	[3E80 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BD, 0x003F };
    uint32_t const ces[9] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_290)
{
    // FF7F 003F;	
    // (ｿ) HALFWIDTH KATAKANA LETTER SO	[3E80 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7F, 0x003F };
    uint32_t const ces[9] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_291)
{
    // 32DE 003F;	
    // (㋞) CIRCLED KATAKANA SO	[3E80 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DE, 0x003F };
    uint32_t const ces[9] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_292)
{
    // 305E 003F;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305E, 0x003F };
    uint32_t const ces[11] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_293)
{
    // 30BE 003F;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BE, 0x003F };
    uint32_t const ces[11] = { 0x3E80, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_294)
{
    // 305D 0061;	
    // (そ) HIRAGANA LETTER SO	[3E80 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305D, 0x0061 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_295)
{
    // 305D 0041;	
    // (そ) HIRAGANA LETTER SO	[3E80 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x305D, 0x0041 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_296)
{
    // 30BD 0061;	
    // (ソ) KATAKANA LETTER SO	[3E80 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BD, 0x0061 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_297)
{
    // 30BD 0041;	
    // (ソ) KATAKANA LETTER SO	[3E80 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30BD, 0x0041 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_298)
{
    // FF7F 0061;	
    // (ｿ) HALFWIDTH KATAKANA LETTER SO	[3E80 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7F, 0x0061 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_299)
{
    // FF7F 0041;	
    // (ｿ) HALFWIDTH KATAKANA LETTER SO	[3E80 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF7F, 0x0041 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_300)
{
    // 32DE 0061;	
    // (㋞) CIRCLED KATAKANA SO	[3E80 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DE, 0x0061 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_301)
{
    // 32DE 0041;	
    // (㋞) CIRCLED KATAKANA SO	[3E80 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DE, 0x0041 };
    uint32_t const ces[9] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_302)
{
    // 305E 0061;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305E, 0x0061 };
    uint32_t const ces[11] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_303)
{
    // 305E 0041;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x305E, 0x0041 };
    uint32_t const ces[11] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_304)
{
    // 30BE 0061;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BE, 0x0061 };
    uint32_t const ces[11] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_305)
{
    // 30BE 0041;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30BE, 0x0041 };
    uint32_t const ces[11] = { 0x3E80, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_306)
{
    // 305D 0062;	
    // (そ) HIRAGANA LETTER SO	[3E80 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305D, 0x0062 };
    uint32_t const ces[9] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_307)
{
    // 30BD 0062;	
    // (ソ) KATAKANA LETTER SO	[3E80 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BD, 0x0062 };
    uint32_t const ces[9] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_308)
{
    // FF7F 0062;	
    // (ｿ) HALFWIDTH KATAKANA LETTER SO	[3E80 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF7F, 0x0062 };
    uint32_t const ces[9] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_309)
{
    // 32DE 0062;	
    // (㋞) CIRCLED KATAKANA SO	[3E80 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DE, 0x0062 };
    uint32_t const ces[9] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_310)
{
    // 305E 0062;	
    // (ぞ) HIRAGANA LETTER ZO	[3E80 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x305E, 0x0062 };
    uint32_t const ces[11] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_311)
{
    // 30BE 0062;	
    // (ゾ) KATAKANA LETTER ZO	[3E80 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30BE, 0x0062 };
    uint32_t const ces[11] = { 0x3E80, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_312)
{
    // 305F 0334 3099;	
    // (た̴) HIRAGANA LETTER TA, COMBINING TILDE OVERLAY	[3E81 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305F, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_313)
{
    // 305F 3099 0334;	
    // (だ) HIRAGANA LETTER TA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E81 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x305F, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_314)
{
    // 3060 0334;	
    // (だ) HIRAGANA LETTER DA	[3E81 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3060, 0x0334 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_315)
{
    // 30BF 0334 3099;	
    // (タ̴) KATAKANA LETTER TA, COMBINING TILDE OVERLAY	[3E81 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BF, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_316)
{
    // 30BF 3099 0334;	
    // (ダ) KATAKANA LETTER TA, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E81 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30BF, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_317)
{
    // 30C0 0334;	
    // (ダ) KATAKANA LETTER DA	[3E81 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C0, 0x0334 };
    uint32_t const ces[10] = { 0x3E81, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_318)
{
    // 305F 0021;	
    // (た) HIRAGANA LETTER TA	[3E81 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305F, 0x0021 };
    uint32_t const ces[9] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_319)
{
    // 30BF 0021;	
    // (タ) KATAKANA LETTER TA	[3E81 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BF, 0x0021 };
    uint32_t const ces[9] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_320)
{
    // FF80 0021;	
    // (ﾀ) HALFWIDTH KATAKANA LETTER TA	[3E81 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF80, 0x0021 };
    uint32_t const ces[9] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_321)
{
    // 32DF 0021;	
    // (㋟) CIRCLED KATAKANA TA	[3E81 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DF, 0x0021 };
    uint32_t const ces[9] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_322)
{
    // 3060 0021;	
    // (だ) HIRAGANA LETTER DA	[3E81 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3060, 0x0021 };
    uint32_t const ces[11] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_323)
{
    // 30C0 0021;	
    // (ダ) KATAKANA LETTER DA	[3E81 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C0, 0x0021 };
    uint32_t const ces[11] = { 0x3E81, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_324)
{
    // 305F 003F;	
    // (た) HIRAGANA LETTER TA	[3E81 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305F, 0x003F };
    uint32_t const ces[9] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_325)
{
    // 30BF 003F;	
    // (タ) KATAKANA LETTER TA	[3E81 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BF, 0x003F };
    uint32_t const ces[9] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_326)
{
    // FF80 003F;	
    // (ﾀ) HALFWIDTH KATAKANA LETTER TA	[3E81 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF80, 0x003F };
    uint32_t const ces[9] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_327)
{
    // 32DF 003F;	
    // (㋟) CIRCLED KATAKANA TA	[3E81 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DF, 0x003F };
    uint32_t const ces[9] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_328)
{
    // 3060 003F;	
    // (だ) HIRAGANA LETTER DA	[3E81 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3060, 0x003F };
    uint32_t const ces[11] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_329)
{
    // 30C0 003F;	
    // (ダ) KATAKANA LETTER DA	[3E81 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C0, 0x003F };
    uint32_t const ces[11] = { 0x3E81, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_330)
{
    // 3324 0021;	
    // (㌤) SQUARE DAASU	[3E81 1C73 3E7E 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3324, 0x0021 };
    uint32_t const ces[17] = { 0x3E81, 0x1C73, 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_331)
{
    // 3324 003F;	
    // (㌤) SQUARE DAASU	[3E81 1C73 3E7E 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3324, 0x003F };
    uint32_t const ces[17] = { 0x3E81, 0x1C73, 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_332)
{
    // 3324 0061;	
    // (㌤) SQUARE DAASU	[3E81 1C73 3E7E 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3324, 0x0061 };
    uint32_t const ces[17] = { 0x3E81, 0x1C73, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_333)
{
    // 3324 0041;	
    // (㌤) SQUARE DAASU	[3E81 1C73 3E7E 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3324, 0x0041 };
    uint32_t const ces[17] = { 0x3E81, 0x1C73, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_334)
{
    // 3324 0062;	
    // (㌤) SQUARE DAASU	[3E81 1C73 3E7E 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3324, 0x0062 };
    uint32_t const ces[17] = { 0x3E81, 0x1C73, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_335)
{
    // 305F 0061;	
    // (た) HIRAGANA LETTER TA	[3E81 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305F, 0x0061 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_336)
{
    // 305F 0041;	
    // (た) HIRAGANA LETTER TA	[3E81 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x305F, 0x0041 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_337)
{
    // 30BF 0061;	
    // (タ) KATAKANA LETTER TA	[3E81 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BF, 0x0061 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_338)
{
    // 30BF 0041;	
    // (タ) KATAKANA LETTER TA	[3E81 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30BF, 0x0041 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_339)
{
    // FF80 0061;	
    // (ﾀ) HALFWIDTH KATAKANA LETTER TA	[3E81 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF80, 0x0061 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_340)
{
    // FF80 0041;	
    // (ﾀ) HALFWIDTH KATAKANA LETTER TA	[3E81 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF80, 0x0041 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_341)
{
    // 32DF 0061;	
    // (㋟) CIRCLED KATAKANA TA	[3E81 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DF, 0x0061 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_342)
{
    // 32DF 0041;	
    // (㋟) CIRCLED KATAKANA TA	[3E81 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32DF, 0x0041 };
    uint32_t const ces[9] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_343)
{
    // 3060 0061;	
    // (だ) HIRAGANA LETTER DA	[3E81 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3060, 0x0061 };
    uint32_t const ces[11] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_344)
{
    // 3060 0041;	
    // (だ) HIRAGANA LETTER DA	[3E81 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3060, 0x0041 };
    uint32_t const ces[11] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_345)
{
    // 30C0 0061;	
    // (ダ) KATAKANA LETTER DA	[3E81 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C0, 0x0061 };
    uint32_t const ces[11] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_346)
{
    // 30C0 0041;	
    // (ダ) KATAKANA LETTER DA	[3E81 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30C0, 0x0041 };
    uint32_t const ces[11] = { 0x3E81, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_347)
{
    // 305F 0062;	
    // (た) HIRAGANA LETTER TA	[3E81 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x305F, 0x0062 };
    uint32_t const ces[9] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_348)
{
    // 30BF 0062;	
    // (タ) KATAKANA LETTER TA	[3E81 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30BF, 0x0062 };
    uint32_t const ces[9] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_349)
{
    // FF80 0062;	
    // (ﾀ) HALFWIDTH KATAKANA LETTER TA	[3E81 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF80, 0x0062 };
    uint32_t const ces[9] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_350)
{
    // 32DF 0062;	
    // (㋟) CIRCLED KATAKANA TA	[3E81 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32DF, 0x0062 };
    uint32_t const ces[9] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_351)
{
    // 3060 0062;	
    // (だ) HIRAGANA LETTER DA	[3E81 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3060, 0x0062 };
    uint32_t const ces[11] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_352)
{
    // 30C0 0062;	
    // (ダ) KATAKANA LETTER DA	[3E81 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C0, 0x0062 };
    uint32_t const ces[11] = { 0x3E81, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_353)
{
    // 3061 0334 3099;	
    // (ち̴) HIRAGANA LETTER TI, COMBINING TILDE OVERLAY	[3E82 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3061, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_354)
{
    // 3061 3099 0334;	
    // (ぢ) HIRAGANA LETTER TI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E82 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3061, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_355)
{
    // 3062 0334;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3062, 0x0334 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_356)
{
    // 30C1 0334 3099;	
    // (チ̴) KATAKANA LETTER TI, COMBINING TILDE OVERLAY	[3E82 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C1, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_357)
{
    // 30C1 3099 0334;	
    // (ヂ) KATAKANA LETTER TI, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E82 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C1, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_358)
{
    // 30C2 0334;	
    // (ヂ) KATAKANA LETTER DI	[3E82 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C2, 0x0334 };
    uint32_t const ces[10] = { 0x3E82, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_359)
{
    // 3061 0021;	
    // (ち) HIRAGANA LETTER TI	[3E82 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3061, 0x0021 };
    uint32_t const ces[9] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_360)
{
    // 30C1 0021;	
    // (チ) KATAKANA LETTER TI	[3E82 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C1, 0x0021 };
    uint32_t const ces[9] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_361)
{
    // FF81 0021;	
    // (ﾁ) HALFWIDTH KATAKANA LETTER TI	[3E82 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF81, 0x0021 };
    uint32_t const ces[9] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_362)
{
    // 32E0 0021;	
    // (㋠) CIRCLED KATAKANA TI	[3E82 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E0, 0x0021 };
    uint32_t const ces[9] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_363)
{
    // 3062 0021;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3062, 0x0021 };
    uint32_t const ces[11] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_364)
{
    // 30C2 0021;	
    // (ヂ) KATAKANA LETTER DI	[3E82 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C2, 0x0021 };
    uint32_t const ces[11] = { 0x3E82, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_365)
{
    // 3061 003F;	
    // (ち) HIRAGANA LETTER TI	[3E82 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3061, 0x003F };
    uint32_t const ces[9] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_366)
{
    // 30C1 003F;	
    // (チ) KATAKANA LETTER TI	[3E82 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C1, 0x003F };
    uint32_t const ces[9] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_367)
{
    // FF81 003F;	
    // (ﾁ) HALFWIDTH KATAKANA LETTER TI	[3E82 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF81, 0x003F };
    uint32_t const ces[9] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_368)
{
    // 32E0 003F;	
    // (㋠) CIRCLED KATAKANA TI	[3E82 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E0, 0x003F };
    uint32_t const ces[9] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_369)
{
    // 3062 003F;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3062, 0x003F };
    uint32_t const ces[11] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_370)
{
    // 30C2 003F;	
    // (ヂ) KATAKANA LETTER DI	[3E82 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C2, 0x003F };
    uint32_t const ces[11] = { 0x3E82, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_371)
{
    // 3061 0061;	
    // (ち) HIRAGANA LETTER TI	[3E82 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3061, 0x0061 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_372)
{
    // 3061 0041;	
    // (ち) HIRAGANA LETTER TI	[3E82 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3061, 0x0041 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_373)
{
    // 30C1 0061;	
    // (チ) KATAKANA LETTER TI	[3E82 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C1, 0x0061 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_374)
{
    // 30C1 0041;	
    // (チ) KATAKANA LETTER TI	[3E82 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30C1, 0x0041 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_375)
{
    // FF81 0061;	
    // (ﾁ) HALFWIDTH KATAKANA LETTER TI	[3E82 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF81, 0x0061 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_376)
{
    // FF81 0041;	
    // (ﾁ) HALFWIDTH KATAKANA LETTER TI	[3E82 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF81, 0x0041 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_377)
{
    // 32E0 0061;	
    // (㋠) CIRCLED KATAKANA TI	[3E82 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E0, 0x0061 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_378)
{
    // 32E0 0041;	
    // (㋠) CIRCLED KATAKANA TI	[3E82 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32E0, 0x0041 };
    uint32_t const ces[9] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_379)
{
    // 3062 0061;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3062, 0x0061 };
    uint32_t const ces[11] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_380)
{
    // 3062 0041;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3062, 0x0041 };
    uint32_t const ces[11] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_381)
{
    // 30C2 0061;	
    // (ヂ) KATAKANA LETTER DI	[3E82 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C2, 0x0061 };
    uint32_t const ces[11] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_382)
{
    // 30C2 0041;	
    // (ヂ) KATAKANA LETTER DI	[3E82 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30C2, 0x0041 };
    uint32_t const ces[11] = { 0x3E82, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_383)
{
    // 3061 0062;	
    // (ち) HIRAGANA LETTER TI	[3E82 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3061, 0x0062 };
    uint32_t const ces[9] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_384)
{
    // 30C1 0062;	
    // (チ) KATAKANA LETTER TI	[3E82 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C1, 0x0062 };
    uint32_t const ces[9] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_385)
{
    // FF81 0062;	
    // (ﾁ) HALFWIDTH KATAKANA LETTER TI	[3E82 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF81, 0x0062 };
    uint32_t const ces[9] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_386)
{
    // 32E0 0062;	
    // (㋠) CIRCLED KATAKANA TI	[3E82 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E0, 0x0062 };
    uint32_t const ces[9] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_387)
{
    // 3062 0062;	
    // (ぢ) HIRAGANA LETTER DI	[3E82 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3062, 0x0062 };
    uint32_t const ces[11] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_388)
{
    // 30C2 0062;	
    // (ヂ) KATAKANA LETTER DI	[3E82 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C2, 0x0062 };
    uint32_t const ces[11] = { 0x3E82, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_389)
{
    // 3064 0334 3099;	
    // (つ̴) HIRAGANA LETTER TU, COMBINING TILDE OVERLAY	[3E83 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3064, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_390)
{
    // 3064 3099 0334;	
    // (づ) HIRAGANA LETTER TU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E83 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3064, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_391)
{
    // 3065 0334;	
    // (づ) HIRAGANA LETTER DU	[3E83 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3065, 0x0334 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_392)
{
    // 30C4 0334 3099;	
    // (ツ̴) KATAKANA LETTER TU, COMBINING TILDE OVERLAY	[3E83 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C4, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_393)
{
    // 30C4 3099 0334;	
    // (ヅ) KATAKANA LETTER TU, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E83 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C4, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_394)
{
    // 30C5 0334;	
    // (ヅ) KATAKANA LETTER DU	[3E83 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C5, 0x0334 };
    uint32_t const ces[10] = { 0x3E83, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_395)
{
    // 3063 0021;	
    // (っ) HIRAGANA LETTER SMALL TU	[3E83 0261 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3063, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_396)
{
    // 3064 0021;	
    // (つ) HIRAGANA LETTER TU	[3E83 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3064, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_397)
{
    // 30C3 0021;	
    // (ッ) KATAKANA LETTER SMALL TU	[3E83 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30C3, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_398)
{
    // FF6F 0021;	
    // (ｯ) HALFWIDTH KATAKANA LETTER SMALL TU	[3E83 0261 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6F, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_399)
{
    // 30C4 0021;	
    // (ツ) KATAKANA LETTER TU	[3E83 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C4, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_400)
{
    // FF82 0021;	
    // (ﾂ) HALFWIDTH KATAKANA LETTER TU	[3E83 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF82, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_401)
{
    // 32E1 0021;	
    // (㋡) CIRCLED KATAKANA TU	[3E83 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E1, 0x0021 };
    uint32_t const ces[9] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_402)
{
    // 3065 0021;	
    // (づ) HIRAGANA LETTER DU	[3E83 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3065, 0x0021 };
    uint32_t const ces[11] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_403)
{
    // 30C5 0021;	
    // (ヅ) KATAKANA LETTER DU	[3E83 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C5, 0x0021 };
    uint32_t const ces[11] = { 0x3E83, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_404)
{
    // 3063 003F;	
    // (っ) HIRAGANA LETTER SMALL TU	[3E83 0267 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3063, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_405)
{
    // 3064 003F;	
    // (つ) HIRAGANA LETTER TU	[3E83 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3064, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_406)
{
    // 30C3 003F;	
    // (ッ) KATAKANA LETTER SMALL TU	[3E83 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30C3, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_407)
{
    // FF6F 003F;	
    // (ｯ) HALFWIDTH KATAKANA LETTER SMALL TU	[3E83 0267 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6F, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_408)
{
    // 30C4 003F;	
    // (ツ) KATAKANA LETTER TU	[3E83 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C4, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_409)
{
    // FF82 003F;	
    // (ﾂ) HALFWIDTH KATAKANA LETTER TU	[3E83 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF82, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_410)
{
    // 32E1 003F;	
    // (㋡) CIRCLED KATAKANA TU	[3E83 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E1, 0x003F };
    uint32_t const ces[9] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_411)
{
    // 3065 003F;	
    // (づ) HIRAGANA LETTER DU	[3E83 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3065, 0x003F };
    uint32_t const ces[11] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_412)
{
    // 30C5 003F;	
    // (ヅ) KATAKANA LETTER DU	[3E83 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C5, 0x003F };
    uint32_t const ces[11] = { 0x3E83, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_413)
{
    // 3063 0061;	
    // (っ) HIRAGANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3063, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_414)
{
    // 3063 0041;	
    // (っ) HIRAGANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 000D 0008 |]

    uint32_t cps[2] = { 0x3063, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_415)
{
    // 3064 0061;	
    // (つ) HIRAGANA LETTER TU	[3E83 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3064, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_416)
{
    // 3064 0041;	
    // (つ) HIRAGANA LETTER TU	[3E83 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3064, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_417)
{
    // 30C3 0061;	
    // (ッ) KATAKANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30C3, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_418)
{
    // 30C3 0041;	
    // (ッ) KATAKANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x30C3, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_419)
{
    // FF6F 0061;	
    // (ｯ) HALFWIDTH KATAKANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6F, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_420)
{
    // FF6F 0041;	
    // (ｯ) HALFWIDTH KATAKANA LETTER SMALL TU	[3E83 1CAD | 0020 0020 | 0010 0008 |]

    uint32_t cps[2] = { 0xFF6F, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_421)
{
    // 30C4 0061;	
    // (ツ) KATAKANA LETTER TU	[3E83 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C4, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_422)
{
    // 30C4 0041;	
    // (ツ) KATAKANA LETTER TU	[3E83 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30C4, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_423)
{
    // FF82 0061;	
    // (ﾂ) HALFWIDTH KATAKANA LETTER TU	[3E83 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF82, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_424)
{
    // FF82 0041;	
    // (ﾂ) HALFWIDTH KATAKANA LETTER TU	[3E83 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF82, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_425)
{
    // 32E1 0061;	
    // (㋡) CIRCLED KATAKANA TU	[3E83 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E1, 0x0061 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_426)
{
    // 32E1 0041;	
    // (㋡) CIRCLED KATAKANA TU	[3E83 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32E1, 0x0041 };
    uint32_t const ces[9] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_427)
{
    // 3065 0061;	
    // (づ) HIRAGANA LETTER DU	[3E83 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3065, 0x0061 };
    uint32_t const ces[11] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_428)
{
    // 3065 0041;	
    // (づ) HIRAGANA LETTER DU	[3E83 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3065, 0x0041 };
    uint32_t const ces[11] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_429)
{
    // 30C5 0061;	
    // (ヅ) KATAKANA LETTER DU	[3E83 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C5, 0x0061 };
    uint32_t const ces[11] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_430)
{
    // 30C5 0041;	
    // (ヅ) KATAKANA LETTER DU	[3E83 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30C5, 0x0041 };
    uint32_t const ces[11] = { 0x3E83, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_431)
{
    // 3063 0062;	
    // (っ) HIRAGANA LETTER SMALL TU	[3E83 1CC6 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3063, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_432)
{
    // 3064 0062;	
    // (つ) HIRAGANA LETTER TU	[3E83 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3064, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_433)
{
    // 30C3 0062;	
    // (ッ) KATAKANA LETTER SMALL TU	[3E83 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30C3, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_434)
{
    // FF6F 0062;	
    // (ｯ) HALFWIDTH KATAKANA LETTER SMALL TU	[3E83 1CC6 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6F, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_435)
{
    // 30C4 0062;	
    // (ツ) KATAKANA LETTER TU	[3E83 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C4, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_436)
{
    // FF82 0062;	
    // (ﾂ) HALFWIDTH KATAKANA LETTER TU	[3E83 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF82, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_437)
{
    // 32E1 0062;	
    // (㋡) CIRCLED KATAKANA TU	[3E83 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E1, 0x0062 };
    uint32_t const ces[9] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_438)
{
    // 3065 0062;	
    // (づ) HIRAGANA LETTER DU	[3E83 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3065, 0x0062 };
    uint32_t const ces[11] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_439)
{
    // 30C5 0062;	
    // (ヅ) KATAKANA LETTER DU	[3E83 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C5, 0x0062 };
    uint32_t const ces[11] = { 0x3E83, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_440)
{
    // 3066 0334 3099;	
    // (て̴) HIRAGANA LETTER TE, COMBINING TILDE OVERLAY	[3E84 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3066, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_441)
{
    // 3066 3099 0334;	
    // (で) HIRAGANA LETTER TE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E84 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3066, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_442)
{
    // 3067 0334;	
    // (で) HIRAGANA LETTER DE	[3E84 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3067, 0x0334 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_443)
{
    // 30C6 0334 3099;	
    // (テ̴) KATAKANA LETTER TE, COMBINING TILDE OVERLAY	[3E84 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C6, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_444)
{
    // 30C6 3099 0334;	
    // (デ) KATAKANA LETTER TE, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E84 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C6, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_445)
{
    // 30C7 0334;	
    // (デ) KATAKANA LETTER DE	[3E84 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C7, 0x0334 };
    uint32_t const ces[10] = { 0x3E84, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_446)
{
    // 3066 0021;	
    // (て) HIRAGANA LETTER TE	[3E84 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3066, 0x0021 };
    uint32_t const ces[9] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_447)
{
    // 30C6 0021;	
    // (テ) KATAKANA LETTER TE	[3E84 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C6, 0x0021 };
    uint32_t const ces[9] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_448)
{
    // FF83 0021;	
    // (ﾃ) HALFWIDTH KATAKANA LETTER TE	[3E84 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF83, 0x0021 };
    uint32_t const ces[9] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_449)
{
    // 32E2 0021;	
    // (㋢) CIRCLED KATAKANA TE	[3E84 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E2, 0x0021 };
    uint32_t const ces[9] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_450)
{
    // 3067 0021;	
    // (で) HIRAGANA LETTER DE	[3E84 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3067, 0x0021 };
    uint32_t const ces[11] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_451)
{
    // 30C7 0021;	
    // (デ) KATAKANA LETTER DE	[3E84 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C7, 0x0021 };
    uint32_t const ces[11] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_452)
{
    // 1F213 0021;	
    // (🈓) SQUARED KATAKANA DE	[3E84 0261 | 0020 0037 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F213, 0x0021 };
    uint32_t const ces[11] = { 0x3E84, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_453)
{
    // 3066 003F;	
    // (て) HIRAGANA LETTER TE	[3E84 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3066, 0x003F };
    uint32_t const ces[9] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_454)
{
    // 30C6 003F;	
    // (テ) KATAKANA LETTER TE	[3E84 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C6, 0x003F };
    uint32_t const ces[9] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_455)
{
    // FF83 003F;	
    // (ﾃ) HALFWIDTH KATAKANA LETTER TE	[3E84 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF83, 0x003F };
    uint32_t const ces[9] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_456)
{
    // 32E2 003F;	
    // (㋢) CIRCLED KATAKANA TE	[3E84 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E2, 0x003F };
    uint32_t const ces[9] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_457)
{
    // 3067 003F;	
    // (で) HIRAGANA LETTER DE	[3E84 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3067, 0x003F };
    uint32_t const ces[11] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_458)
{
    // 30C7 003F;	
    // (デ) KATAKANA LETTER DE	[3E84 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C7, 0x003F };
    uint32_t const ces[11] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_459)
{
    // 1F213 003F;	
    // (🈓) SQUARED KATAKANA DE	[3E84 0267 | 0020 0037 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F213, 0x003F };
    uint32_t const ces[11] = { 0x3E84, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_460)
{
    // 3066 0061;	
    // (て) HIRAGANA LETTER TE	[3E84 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3066, 0x0061 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_461)
{
    // 3066 0041;	
    // (て) HIRAGANA LETTER TE	[3E84 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3066, 0x0041 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_462)
{
    // 30C6 0061;	
    // (テ) KATAKANA LETTER TE	[3E84 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C6, 0x0061 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_463)
{
    // 30C6 0041;	
    // (テ) KATAKANA LETTER TE	[3E84 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30C6, 0x0041 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_464)
{
    // FF83 0061;	
    // (ﾃ) HALFWIDTH KATAKANA LETTER TE	[3E84 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF83, 0x0061 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_465)
{
    // FF83 0041;	
    // (ﾃ) HALFWIDTH KATAKANA LETTER TE	[3E84 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF83, 0x0041 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_466)
{
    // 32E2 0061;	
    // (㋢) CIRCLED KATAKANA TE	[3E84 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E2, 0x0061 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_467)
{
    // 32E2 0041;	
    // (㋢) CIRCLED KATAKANA TE	[3E84 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32E2, 0x0041 };
    uint32_t const ces[9] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_468)
{
    // 3067 0061;	
    // (で) HIRAGANA LETTER DE	[3E84 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3067, 0x0061 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_469)
{
    // 3067 0041;	
    // (で) HIRAGANA LETTER DE	[3E84 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x3067, 0x0041 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_470)
{
    // 30C7 0061;	
    // (デ) KATAKANA LETTER DE	[3E84 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C7, 0x0061 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_471)
{
    // 30C7 0041;	
    // (デ) KATAKANA LETTER DE	[3E84 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30C7, 0x0041 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_472)
{
    // 1F213 0061;	
    // (🈓) SQUARED KATAKANA DE	[3E84 1CAD | 0020 0037 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F213, 0x0061 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_473)
{
    // 1F213 0041;	
    // (🈓) SQUARED KATAKANA DE	[3E84 1CAD | 0020 0037 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F213, 0x0041 };
    uint32_t const ces[11] = { 0x3E84, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_474)
{
    // 3066 0062;	
    // (て) HIRAGANA LETTER TE	[3E84 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3066, 0x0062 };
    uint32_t const ces[9] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_475)
{
    // 30C6 0062;	
    // (テ) KATAKANA LETTER TE	[3E84 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C6, 0x0062 };
    uint32_t const ces[9] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_476)
{
    // FF83 0062;	
    // (ﾃ) HALFWIDTH KATAKANA LETTER TE	[3E84 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF83, 0x0062 };
    uint32_t const ces[9] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_477)
{
    // 32E2 0062;	
    // (㋢) CIRCLED KATAKANA TE	[3E84 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E2, 0x0062 };
    uint32_t const ces[9] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_478)
{
    // 3067 0062;	
    // (で) HIRAGANA LETTER DE	[3E84 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3067, 0x0062 };
    uint32_t const ces[11] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_479)
{
    // 30C7 0062;	
    // (デ) KATAKANA LETTER DE	[3E84 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C7, 0x0062 };
    uint32_t const ces[11] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_480)
{
    // 1F213 0062;	
    // (🈓) SQUARED KATAKANA DE	[3E84 1CC6 | 0020 0037 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F213, 0x0062 };
    uint32_t const ces[11] = { 0x3E84, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_481)
{
    // 3325 0021;	
    // (㌥) SQUARE DESI	[3E84 3E7D 0261 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3325, 0x0021 };
    uint32_t const ces[14] = { 0x3E84, 0x3E7D, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_482)
{
    // 3325 003F;	
    // (㌥) SQUARE DESI	[3E84 3E7D 0267 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3325, 0x003F };
    uint32_t const ces[14] = { 0x3E84, 0x3E7D, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_483)
{
    // 3325 0061;	
    // (㌥) SQUARE DESI	[3E84 3E7D 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3325, 0x0061 };
    uint32_t const ces[14] = { 0x3E84, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_484)
{
    // 3325 0041;	
    // (㌥) SQUARE DESI	[3E84 3E7D 1CAD | 0020 0037 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3325, 0x0041 };
    uint32_t const ces[14] = { 0x3E84, 0x3E7D, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_485)
{
    // 3325 0062;	
    // (㌥) SQUARE DESI	[3E84 3E7D 1CC6 | 0020 0037 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3325, 0x0062 };
    uint32_t const ces[14] = { 0x3E84, 0x3E7D, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_486)
{
    // 3068 0334 3099;	
    // (と̴) HIRAGANA LETTER TO, COMBINING TILDE OVERLAY	[3E85 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3068, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_487)
{
    // 3068 3099 0334;	
    // (ど) HIRAGANA LETTER TO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E85 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[3] = { 0x3068, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_488)
{
    // 3069 0334;	
    // (ど) HIRAGANA LETTER DO	[3E85 | 0020 004A 0037 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3069, 0x0334 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_489)
{
    // 30C8 0334 3099;	
    // (ト̴) KATAKANA LETTER TO, COMBINING TILDE OVERLAY	[3E85 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C8, 0x0334, 0x3099 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_490)
{
    // 30C8 3099 0334;	
    // (ド) KATAKANA LETTER TO, COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK	[3E85 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[3] = { 0x30C8, 0x3099, 0x0334 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_491)
{
    // 30C9 0334;	
    // (ド) KATAKANA LETTER DO	[3E85 | 0020 004A 0037 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C9, 0x0334 };
    uint32_t const ces[10] = { 0x3E85, 0x0000, 0x0020, 0x004A, 0x0037, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_492)
{
    // 3068 0021;	
    // (と) HIRAGANA LETTER TO	[3E85 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3068, 0x0021 };
    uint32_t const ces[9] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_493)
{
    // 31F3 0021;	
    // (ㇳ) KATAKANA LETTER SMALL TO	[3E85 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F3, 0x0021 };
    uint32_t const ces[9] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_494)
{
    // 30C8 0021;	
    // (ト) KATAKANA LETTER TO	[3E85 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30C8, 0x0021 };
    uint32_t const ces[9] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_495)
{
    // FF84 0021;	
    // (ﾄ) HALFWIDTH KATAKANA LETTER TO	[3E85 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF84, 0x0021 };
    uint32_t const ces[9] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_496)
{
    // 32E3 0021;	
    // (㋣) CIRCLED KATAKANA TO	[3E85 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32E3, 0x0021 };
    uint32_t const ces[9] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_497)
{
    // 3069 0021;	
    // (ど) HIRAGANA LETTER DO	[3E85 0261 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x3069, 0x0021 };
    uint32_t const ces[11] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_498)
{
    // 30C9 0021;	
    // (ド) KATAKANA LETTER DO	[3E85 0261 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30C9, 0x0021 };
    uint32_t const ces[11] = { 0x3E85, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_247_499)
{
    // 3068 003F;	
    // (と) HIRAGANA LETTER TO	[3E85 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3068, 0x003F };
    uint32_t const ces[9] = { 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

