// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_219_000)
{
    // 1450 0041;	
    // (ᑐ) CANADIAN SYLLABICS TO	[355F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1450, 0x0041 };
    uint32_t const ces[9] = { 0x355F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_001)
{
    // 1450 0062;	
    // (ᑐ) CANADIAN SYLLABICS TO	[355F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1450, 0x0062 };
    uint32_t const ces[9] = { 0x355F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_002)
{
    // 1451 0021;	
    // (ᑑ) CANADIAN SYLLABICS TOO	[3560 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1451, 0x0021 };
    uint32_t const ces[9] = { 0x3560, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_003)
{
    // 1451 003F;	
    // (ᑑ) CANADIAN SYLLABICS TOO	[3560 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1451, 0x003F };
    uint32_t const ces[9] = { 0x3560, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_004)
{
    // 1451 0061;	
    // (ᑑ) CANADIAN SYLLABICS TOO	[3560 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1451, 0x0061 };
    uint32_t const ces[9] = { 0x3560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_005)
{
    // 1451 0041;	
    // (ᑑ) CANADIAN SYLLABICS TOO	[3560 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1451, 0x0041 };
    uint32_t const ces[9] = { 0x3560, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_006)
{
    // 1451 0062;	
    // (ᑑ) CANADIAN SYLLABICS TOO	[3560 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1451, 0x0062 };
    uint32_t const ces[9] = { 0x3560, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_007)
{
    // 1452 0021;	
    // (ᑒ) CANADIAN SYLLABICS Y-CREE TOO	[3561 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1452, 0x0021 };
    uint32_t const ces[9] = { 0x3561, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_008)
{
    // 1452 003F;	
    // (ᑒ) CANADIAN SYLLABICS Y-CREE TOO	[3561 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1452, 0x003F };
    uint32_t const ces[9] = { 0x3561, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_009)
{
    // 1452 0061;	
    // (ᑒ) CANADIAN SYLLABICS Y-CREE TOO	[3561 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1452, 0x0061 };
    uint32_t const ces[9] = { 0x3561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_010)
{
    // 1452 0041;	
    // (ᑒ) CANADIAN SYLLABICS Y-CREE TOO	[3561 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1452, 0x0041 };
    uint32_t const ces[9] = { 0x3561, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_011)
{
    // 1452 0062;	
    // (ᑒ) CANADIAN SYLLABICS Y-CREE TOO	[3561 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1452, 0x0062 };
    uint32_t const ces[9] = { 0x3561, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_012)
{
    // 1453 0021;	
    // (ᑓ) CANADIAN SYLLABICS CARRIER DEE	[3562 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453, 0x0021 };
    uint32_t const ces[9] = { 0x3562, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_013)
{
    // 1453 003F;	
    // (ᑓ) CANADIAN SYLLABICS CARRIER DEE	[3562 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453, 0x003F };
    uint32_t const ces[9] = { 0x3562, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_014)
{
    // 1453 0061;	
    // (ᑓ) CANADIAN SYLLABICS CARRIER DEE	[3562 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453, 0x0061 };
    uint32_t const ces[9] = { 0x3562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_015)
{
    // 1453 0041;	
    // (ᑓ) CANADIAN SYLLABICS CARRIER DEE	[3562 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1453, 0x0041 };
    uint32_t const ces[9] = { 0x3562, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_016)
{
    // 1453 0062;	
    // (ᑓ) CANADIAN SYLLABICS CARRIER DEE	[3562 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1453, 0x0062 };
    uint32_t const ces[9] = { 0x3562, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_017)
{
    // 1454 0021;	
    // (ᑔ) CANADIAN SYLLABICS CARRIER DI	[3563 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454, 0x0021 };
    uint32_t const ces[9] = { 0x3563, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_018)
{
    // 1454 003F;	
    // (ᑔ) CANADIAN SYLLABICS CARRIER DI	[3563 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454, 0x003F };
    uint32_t const ces[9] = { 0x3563, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_019)
{
    // 1454 0061;	
    // (ᑔ) CANADIAN SYLLABICS CARRIER DI	[3563 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454, 0x0061 };
    uint32_t const ces[9] = { 0x3563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_020)
{
    // 1454 0041;	
    // (ᑔ) CANADIAN SYLLABICS CARRIER DI	[3563 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1454, 0x0041 };
    uint32_t const ces[9] = { 0x3563, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_021)
{
    // 1454 0062;	
    // (ᑔ) CANADIAN SYLLABICS CARRIER DI	[3563 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1454, 0x0062 };
    uint32_t const ces[9] = { 0x3563, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_022)
{
    // 1455 0021;	
    // (ᑕ) CANADIAN SYLLABICS TA	[3564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455, 0x0021 };
    uint32_t const ces[9] = { 0x3564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_023)
{
    // 1455 003F;	
    // (ᑕ) CANADIAN SYLLABICS TA	[3564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455, 0x003F };
    uint32_t const ces[9] = { 0x3564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_024)
{
    // 1455 0061;	
    // (ᑕ) CANADIAN SYLLABICS TA	[3564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455, 0x0061 };
    uint32_t const ces[9] = { 0x3564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_025)
{
    // 1455 0041;	
    // (ᑕ) CANADIAN SYLLABICS TA	[3564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1455, 0x0041 };
    uint32_t const ces[9] = { 0x3564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_026)
{
    // 1455 0062;	
    // (ᑕ) CANADIAN SYLLABICS TA	[3564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1455, 0x0062 };
    uint32_t const ces[9] = { 0x3564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_027)
{
    // 1456 0021;	
    // (ᑖ) CANADIAN SYLLABICS TAA	[3565 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456, 0x0021 };
    uint32_t const ces[9] = { 0x3565, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_028)
{
    // 1456 003F;	
    // (ᑖ) CANADIAN SYLLABICS TAA	[3565 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456, 0x003F };
    uint32_t const ces[9] = { 0x3565, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_029)
{
    // 1456 0061;	
    // (ᑖ) CANADIAN SYLLABICS TAA	[3565 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456, 0x0061 };
    uint32_t const ces[9] = { 0x3565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_030)
{
    // 1456 0041;	
    // (ᑖ) CANADIAN SYLLABICS TAA	[3565 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1456, 0x0041 };
    uint32_t const ces[9] = { 0x3565, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_031)
{
    // 1456 0062;	
    // (ᑖ) CANADIAN SYLLABICS TAA	[3565 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1456, 0x0062 };
    uint32_t const ces[9] = { 0x3565, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_032)
{
    // 1457 0021;	
    // (ᑗ) CANADIAN SYLLABICS TWE	[3566 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457, 0x0021 };
    uint32_t const ces[9] = { 0x3566, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_033)
{
    // 1457 003F;	
    // (ᑗ) CANADIAN SYLLABICS TWE	[3566 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457, 0x003F };
    uint32_t const ces[9] = { 0x3566, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_034)
{
    // 1457 0061;	
    // (ᑗ) CANADIAN SYLLABICS TWE	[3566 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457, 0x0061 };
    uint32_t const ces[9] = { 0x3566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_035)
{
    // 1457 0041;	
    // (ᑗ) CANADIAN SYLLABICS TWE	[3566 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1457, 0x0041 };
    uint32_t const ces[9] = { 0x3566, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_036)
{
    // 1457 0062;	
    // (ᑗ) CANADIAN SYLLABICS TWE	[3566 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1457, 0x0062 };
    uint32_t const ces[9] = { 0x3566, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_037)
{
    // 1458 0021;	
    // (ᑘ) CANADIAN SYLLABICS WEST-CREE TWE	[3567 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458, 0x0021 };
    uint32_t const ces[9] = { 0x3567, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_038)
{
    // 1458 003F;	
    // (ᑘ) CANADIAN SYLLABICS WEST-CREE TWE	[3567 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458, 0x003F };
    uint32_t const ces[9] = { 0x3567, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_039)
{
    // 1458 0061;	
    // (ᑘ) CANADIAN SYLLABICS WEST-CREE TWE	[3567 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458, 0x0061 };
    uint32_t const ces[9] = { 0x3567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_040)
{
    // 1458 0041;	
    // (ᑘ) CANADIAN SYLLABICS WEST-CREE TWE	[3567 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1458, 0x0041 };
    uint32_t const ces[9] = { 0x3567, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_041)
{
    // 1458 0062;	
    // (ᑘ) CANADIAN SYLLABICS WEST-CREE TWE	[3567 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1458, 0x0062 };
    uint32_t const ces[9] = { 0x3567, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_042)
{
    // 1459 0021;	
    // (ᑙ) CANADIAN SYLLABICS TWI	[3568 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459, 0x0021 };
    uint32_t const ces[9] = { 0x3568, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_043)
{
    // 1459 003F;	
    // (ᑙ) CANADIAN SYLLABICS TWI	[3568 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459, 0x003F };
    uint32_t const ces[9] = { 0x3568, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_044)
{
    // 1459 0061;	
    // (ᑙ) CANADIAN SYLLABICS TWI	[3568 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459, 0x0061 };
    uint32_t const ces[9] = { 0x3568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_045)
{
    // 1459 0041;	
    // (ᑙ) CANADIAN SYLLABICS TWI	[3568 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1459, 0x0041 };
    uint32_t const ces[9] = { 0x3568, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_046)
{
    // 1459 0062;	
    // (ᑙ) CANADIAN SYLLABICS TWI	[3568 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1459, 0x0062 };
    uint32_t const ces[9] = { 0x3568, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_047)
{
    // 145A 0021;	
    // (ᑚ) CANADIAN SYLLABICS WEST-CREE TWI	[3569 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145A, 0x0021 };
    uint32_t const ces[9] = { 0x3569, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_048)
{
    // 145A 003F;	
    // (ᑚ) CANADIAN SYLLABICS WEST-CREE TWI	[3569 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145A, 0x003F };
    uint32_t const ces[9] = { 0x3569, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_049)
{
    // 145A 0061;	
    // (ᑚ) CANADIAN SYLLABICS WEST-CREE TWI	[3569 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145A, 0x0061 };
    uint32_t const ces[9] = { 0x3569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_050)
{
    // 145A 0041;	
    // (ᑚ) CANADIAN SYLLABICS WEST-CREE TWI	[3569 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145A, 0x0041 };
    uint32_t const ces[9] = { 0x3569, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_051)
{
    // 145A 0062;	
    // (ᑚ) CANADIAN SYLLABICS WEST-CREE TWI	[3569 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145A, 0x0062 };
    uint32_t const ces[9] = { 0x3569, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_052)
{
    // 145B 0021;	
    // (ᑛ) CANADIAN SYLLABICS TWII	[356A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145B, 0x0021 };
    uint32_t const ces[9] = { 0x356A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_053)
{
    // 145B 003F;	
    // (ᑛ) CANADIAN SYLLABICS TWII	[356A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145B, 0x003F };
    uint32_t const ces[9] = { 0x356A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_054)
{
    // 145B 0061;	
    // (ᑛ) CANADIAN SYLLABICS TWII	[356A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145B, 0x0061 };
    uint32_t const ces[9] = { 0x356A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_055)
{
    // 145B 0041;	
    // (ᑛ) CANADIAN SYLLABICS TWII	[356A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145B, 0x0041 };
    uint32_t const ces[9] = { 0x356A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_056)
{
    // 145B 0062;	
    // (ᑛ) CANADIAN SYLLABICS TWII	[356A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145B, 0x0062 };
    uint32_t const ces[9] = { 0x356A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_057)
{
    // 145C 0021;	
    // (ᑜ) CANADIAN SYLLABICS WEST-CREE TWII	[356B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145C, 0x0021 };
    uint32_t const ces[9] = { 0x356B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_058)
{
    // 145C 003F;	
    // (ᑜ) CANADIAN SYLLABICS WEST-CREE TWII	[356B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145C, 0x003F };
    uint32_t const ces[9] = { 0x356B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_059)
{
    // 145C 0061;	
    // (ᑜ) CANADIAN SYLLABICS WEST-CREE TWII	[356B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145C, 0x0061 };
    uint32_t const ces[9] = { 0x356B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_060)
{
    // 145C 0041;	
    // (ᑜ) CANADIAN SYLLABICS WEST-CREE TWII	[356B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145C, 0x0041 };
    uint32_t const ces[9] = { 0x356B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_061)
{
    // 145C 0062;	
    // (ᑜ) CANADIAN SYLLABICS WEST-CREE TWII	[356B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145C, 0x0062 };
    uint32_t const ces[9] = { 0x356B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_062)
{
    // 145D 0021;	
    // (ᑝ) CANADIAN SYLLABICS TWO	[356C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145D, 0x0021 };
    uint32_t const ces[9] = { 0x356C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_063)
{
    // 145D 003F;	
    // (ᑝ) CANADIAN SYLLABICS TWO	[356C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145D, 0x003F };
    uint32_t const ces[9] = { 0x356C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_064)
{
    // 145D 0061;	
    // (ᑝ) CANADIAN SYLLABICS TWO	[356C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145D, 0x0061 };
    uint32_t const ces[9] = { 0x356C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_065)
{
    // 145D 0041;	
    // (ᑝ) CANADIAN SYLLABICS TWO	[356C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145D, 0x0041 };
    uint32_t const ces[9] = { 0x356C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_066)
{
    // 145D 0062;	
    // (ᑝ) CANADIAN SYLLABICS TWO	[356C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145D, 0x0062 };
    uint32_t const ces[9] = { 0x356C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_067)
{
    // 145E 0021;	
    // (ᑞ) CANADIAN SYLLABICS WEST-CREE TWO	[356D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145E, 0x0021 };
    uint32_t const ces[9] = { 0x356D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_068)
{
    // 145E 003F;	
    // (ᑞ) CANADIAN SYLLABICS WEST-CREE TWO	[356D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145E, 0x003F };
    uint32_t const ces[9] = { 0x356D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_069)
{
    // 145E 0061;	
    // (ᑞ) CANADIAN SYLLABICS WEST-CREE TWO	[356D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145E, 0x0061 };
    uint32_t const ces[9] = { 0x356D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_070)
{
    // 145E 0041;	
    // (ᑞ) CANADIAN SYLLABICS WEST-CREE TWO	[356D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145E, 0x0041 };
    uint32_t const ces[9] = { 0x356D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_071)
{
    // 145E 0062;	
    // (ᑞ) CANADIAN SYLLABICS WEST-CREE TWO	[356D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145E, 0x0062 };
    uint32_t const ces[9] = { 0x356D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_072)
{
    // 145F 0021;	
    // (ᑟ) CANADIAN SYLLABICS TWOO	[356E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145F, 0x0021 };
    uint32_t const ces[9] = { 0x356E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_073)
{
    // 145F 003F;	
    // (ᑟ) CANADIAN SYLLABICS TWOO	[356E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145F, 0x003F };
    uint32_t const ces[9] = { 0x356E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_074)
{
    // 145F 0061;	
    // (ᑟ) CANADIAN SYLLABICS TWOO	[356E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145F, 0x0061 };
    uint32_t const ces[9] = { 0x356E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_075)
{
    // 145F 0041;	
    // (ᑟ) CANADIAN SYLLABICS TWOO	[356E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x145F, 0x0041 };
    uint32_t const ces[9] = { 0x356E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_076)
{
    // 145F 0062;	
    // (ᑟ) CANADIAN SYLLABICS TWOO	[356E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x145F, 0x0062 };
    uint32_t const ces[9] = { 0x356E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_077)
{
    // 1460 0021;	
    // (ᑠ) CANADIAN SYLLABICS WEST-CREE TWOO	[356F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460, 0x0021 };
    uint32_t const ces[9] = { 0x356F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_078)
{
    // 1460 003F;	
    // (ᑠ) CANADIAN SYLLABICS WEST-CREE TWOO	[356F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460, 0x003F };
    uint32_t const ces[9] = { 0x356F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_079)
{
    // 1460 0061;	
    // (ᑠ) CANADIAN SYLLABICS WEST-CREE TWOO	[356F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460, 0x0061 };
    uint32_t const ces[9] = { 0x356F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_080)
{
    // 1460 0041;	
    // (ᑠ) CANADIAN SYLLABICS WEST-CREE TWOO	[356F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1460, 0x0041 };
    uint32_t const ces[9] = { 0x356F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_081)
{
    // 1460 0062;	
    // (ᑠ) CANADIAN SYLLABICS WEST-CREE TWOO	[356F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1460, 0x0062 };
    uint32_t const ces[9] = { 0x356F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_082)
{
    // 1461 0021;	
    // (ᑡ) CANADIAN SYLLABICS TWA	[3570 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461, 0x0021 };
    uint32_t const ces[9] = { 0x3570, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_083)
{
    // 1461 003F;	
    // (ᑡ) CANADIAN SYLLABICS TWA	[3570 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461, 0x003F };
    uint32_t const ces[9] = { 0x3570, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_084)
{
    // 1461 0061;	
    // (ᑡ) CANADIAN SYLLABICS TWA	[3570 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461, 0x0061 };
    uint32_t const ces[9] = { 0x3570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_085)
{
    // 1461 0041;	
    // (ᑡ) CANADIAN SYLLABICS TWA	[3570 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1461, 0x0041 };
    uint32_t const ces[9] = { 0x3570, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_086)
{
    // 1461 0062;	
    // (ᑡ) CANADIAN SYLLABICS TWA	[3570 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1461, 0x0062 };
    uint32_t const ces[9] = { 0x3570, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_087)
{
    // 1462 0021;	
    // (ᑢ) CANADIAN SYLLABICS WEST-CREE TWA	[3571 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462, 0x0021 };
    uint32_t const ces[9] = { 0x3571, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_088)
{
    // 1462 003F;	
    // (ᑢ) CANADIAN SYLLABICS WEST-CREE TWA	[3571 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462, 0x003F };
    uint32_t const ces[9] = { 0x3571, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_089)
{
    // 1462 0061;	
    // (ᑢ) CANADIAN SYLLABICS WEST-CREE TWA	[3571 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462, 0x0061 };
    uint32_t const ces[9] = { 0x3571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_090)
{
    // 1462 0041;	
    // (ᑢ) CANADIAN SYLLABICS WEST-CREE TWA	[3571 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1462, 0x0041 };
    uint32_t const ces[9] = { 0x3571, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_091)
{
    // 1462 0062;	
    // (ᑢ) CANADIAN SYLLABICS WEST-CREE TWA	[3571 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1462, 0x0062 };
    uint32_t const ces[9] = { 0x3571, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_092)
{
    // 1463 0021;	
    // (ᑣ) CANADIAN SYLLABICS TWAA	[3572 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463, 0x0021 };
    uint32_t const ces[9] = { 0x3572, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_093)
{
    // 1463 003F;	
    // (ᑣ) CANADIAN SYLLABICS TWAA	[3572 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463, 0x003F };
    uint32_t const ces[9] = { 0x3572, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_094)
{
    // 1463 0061;	
    // (ᑣ) CANADIAN SYLLABICS TWAA	[3572 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463, 0x0061 };
    uint32_t const ces[9] = { 0x3572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_095)
{
    // 1463 0041;	
    // (ᑣ) CANADIAN SYLLABICS TWAA	[3572 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1463, 0x0041 };
    uint32_t const ces[9] = { 0x3572, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_096)
{
    // 1463 0062;	
    // (ᑣ) CANADIAN SYLLABICS TWAA	[3572 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1463, 0x0062 };
    uint32_t const ces[9] = { 0x3572, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_097)
{
    // 1464 0021;	
    // (ᑤ) CANADIAN SYLLABICS WEST-CREE TWAA	[3573 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1464, 0x0021 };
    uint32_t const ces[9] = { 0x3573, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_098)
{
    // 1464 003F;	
    // (ᑤ) CANADIAN SYLLABICS WEST-CREE TWAA	[3573 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1464, 0x003F };
    uint32_t const ces[9] = { 0x3573, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_099)
{
    // 1464 0061;	
    // (ᑤ) CANADIAN SYLLABICS WEST-CREE TWAA	[3573 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1464, 0x0061 };
    uint32_t const ces[9] = { 0x3573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_100)
{
    // 1464 0041;	
    // (ᑤ) CANADIAN SYLLABICS WEST-CREE TWAA	[3573 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1464, 0x0041 };
    uint32_t const ces[9] = { 0x3573, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_101)
{
    // 1464 0062;	
    // (ᑤ) CANADIAN SYLLABICS WEST-CREE TWAA	[3573 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1464, 0x0062 };
    uint32_t const ces[9] = { 0x3573, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_102)
{
    // 1465 0021;	
    // (ᑥ) CANADIAN SYLLABICS NASKAPI TWAA	[3574 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1465, 0x0021 };
    uint32_t const ces[9] = { 0x3574, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_103)
{
    // 1465 003F;	
    // (ᑥ) CANADIAN SYLLABICS NASKAPI TWAA	[3574 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1465, 0x003F };
    uint32_t const ces[9] = { 0x3574, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_104)
{
    // 1465 0061;	
    // (ᑥ) CANADIAN SYLLABICS NASKAPI TWAA	[3574 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1465, 0x0061 };
    uint32_t const ces[9] = { 0x3574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_105)
{
    // 1465 0041;	
    // (ᑥ) CANADIAN SYLLABICS NASKAPI TWAA	[3574 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1465, 0x0041 };
    uint32_t const ces[9] = { 0x3574, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_106)
{
    // 1465 0062;	
    // (ᑥ) CANADIAN SYLLABICS NASKAPI TWAA	[3574 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1465, 0x0062 };
    uint32_t const ces[9] = { 0x3574, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_107)
{
    // 1466 0021;	
    // (ᑦ) CANADIAN SYLLABICS T	[3575 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1466, 0x0021 };
    uint32_t const ces[9] = { 0x3575, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_108)
{
    // 1466 003F;	
    // (ᑦ) CANADIAN SYLLABICS T	[3575 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1466, 0x003F };
    uint32_t const ces[9] = { 0x3575, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_109)
{
    // 1466 0061;	
    // (ᑦ) CANADIAN SYLLABICS T	[3575 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1466, 0x0061 };
    uint32_t const ces[9] = { 0x3575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_110)
{
    // 1466 0041;	
    // (ᑦ) CANADIAN SYLLABICS T	[3575 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1466, 0x0041 };
    uint32_t const ces[9] = { 0x3575, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_111)
{
    // 1466 0062;	
    // (ᑦ) CANADIAN SYLLABICS T	[3575 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1466, 0x0062 };
    uint32_t const ces[9] = { 0x3575, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_112)
{
    // 1467 0021;	
    // (ᑧ) CANADIAN SYLLABICS TTE	[3576 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1467, 0x0021 };
    uint32_t const ces[9] = { 0x3576, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_113)
{
    // 1467 003F;	
    // (ᑧ) CANADIAN SYLLABICS TTE	[3576 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1467, 0x003F };
    uint32_t const ces[9] = { 0x3576, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_114)
{
    // 1467 0061;	
    // (ᑧ) CANADIAN SYLLABICS TTE	[3576 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1467, 0x0061 };
    uint32_t const ces[9] = { 0x3576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_115)
{
    // 1467 0041;	
    // (ᑧ) CANADIAN SYLLABICS TTE	[3576 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1467, 0x0041 };
    uint32_t const ces[9] = { 0x3576, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_116)
{
    // 1467 0062;	
    // (ᑧ) CANADIAN SYLLABICS TTE	[3576 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1467, 0x0062 };
    uint32_t const ces[9] = { 0x3576, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_117)
{
    // 1468 0021;	
    // (ᑨ) CANADIAN SYLLABICS TTI	[3577 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1468, 0x0021 };
    uint32_t const ces[9] = { 0x3577, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_118)
{
    // 1468 003F;	
    // (ᑨ) CANADIAN SYLLABICS TTI	[3577 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1468, 0x003F };
    uint32_t const ces[9] = { 0x3577, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_119)
{
    // 1468 0061;	
    // (ᑨ) CANADIAN SYLLABICS TTI	[3577 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1468, 0x0061 };
    uint32_t const ces[9] = { 0x3577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_120)
{
    // 1468 0041;	
    // (ᑨ) CANADIAN SYLLABICS TTI	[3577 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1468, 0x0041 };
    uint32_t const ces[9] = { 0x3577, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_121)
{
    // 1468 0062;	
    // (ᑨ) CANADIAN SYLLABICS TTI	[3577 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1468, 0x0062 };
    uint32_t const ces[9] = { 0x3577, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_122)
{
    // 1469 0021;	
    // (ᑩ) CANADIAN SYLLABICS TTO	[3578 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1469, 0x0021 };
    uint32_t const ces[9] = { 0x3578, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_123)
{
    // 1469 003F;	
    // (ᑩ) CANADIAN SYLLABICS TTO	[3578 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1469, 0x003F };
    uint32_t const ces[9] = { 0x3578, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_124)
{
    // 1469 0061;	
    // (ᑩ) CANADIAN SYLLABICS TTO	[3578 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1469, 0x0061 };
    uint32_t const ces[9] = { 0x3578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_125)
{
    // 1469 0041;	
    // (ᑩ) CANADIAN SYLLABICS TTO	[3578 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1469, 0x0041 };
    uint32_t const ces[9] = { 0x3578, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_126)
{
    // 1469 0062;	
    // (ᑩ) CANADIAN SYLLABICS TTO	[3578 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1469, 0x0062 };
    uint32_t const ces[9] = { 0x3578, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_127)
{
    // 146A 0021;	
    // (ᑪ) CANADIAN SYLLABICS TTA	[3579 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146A, 0x0021 };
    uint32_t const ces[9] = { 0x3579, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_128)
{
    // 146A 003F;	
    // (ᑪ) CANADIAN SYLLABICS TTA	[3579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146A, 0x003F };
    uint32_t const ces[9] = { 0x3579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_129)
{
    // 146A 0061;	
    // (ᑪ) CANADIAN SYLLABICS TTA	[3579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146A, 0x0061 };
    uint32_t const ces[9] = { 0x3579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_130)
{
    // 146A 0041;	
    // (ᑪ) CANADIAN SYLLABICS TTA	[3579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146A, 0x0041 };
    uint32_t const ces[9] = { 0x3579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_131)
{
    // 146A 0062;	
    // (ᑪ) CANADIAN SYLLABICS TTA	[3579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146A, 0x0062 };
    uint32_t const ces[9] = { 0x3579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_132)
{
    // 146B 0021;	
    // (ᑫ) CANADIAN SYLLABICS KE	[357A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146B, 0x0021 };
    uint32_t const ces[9] = { 0x357A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_133)
{
    // 146B 003F;	
    // (ᑫ) CANADIAN SYLLABICS KE	[357A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146B, 0x003F };
    uint32_t const ces[9] = { 0x357A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_134)
{
    // 146B 0061;	
    // (ᑫ) CANADIAN SYLLABICS KE	[357A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146B, 0x0061 };
    uint32_t const ces[9] = { 0x357A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_135)
{
    // 146B 0041;	
    // (ᑫ) CANADIAN SYLLABICS KE	[357A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146B, 0x0041 };
    uint32_t const ces[9] = { 0x357A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_136)
{
    // 146B 0062;	
    // (ᑫ) CANADIAN SYLLABICS KE	[357A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146B, 0x0062 };
    uint32_t const ces[9] = { 0x357A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_137)
{
    // 146C 0021;	
    // (ᑬ) CANADIAN SYLLABICS KAAI	[357B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146C, 0x0021 };
    uint32_t const ces[9] = { 0x357B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_138)
{
    // 146C 003F;	
    // (ᑬ) CANADIAN SYLLABICS KAAI	[357B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146C, 0x003F };
    uint32_t const ces[9] = { 0x357B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_139)
{
    // 146C 0061;	
    // (ᑬ) CANADIAN SYLLABICS KAAI	[357B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146C, 0x0061 };
    uint32_t const ces[9] = { 0x357B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_140)
{
    // 146C 0041;	
    // (ᑬ) CANADIAN SYLLABICS KAAI	[357B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146C, 0x0041 };
    uint32_t const ces[9] = { 0x357B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_141)
{
    // 146C 0062;	
    // (ᑬ) CANADIAN SYLLABICS KAAI	[357B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146C, 0x0062 };
    uint32_t const ces[9] = { 0x357B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_142)
{
    // 146D 0021;	
    // (ᑭ) CANADIAN SYLLABICS KI	[357C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146D, 0x0021 };
    uint32_t const ces[9] = { 0x357C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_143)
{
    // 146D 003F;	
    // (ᑭ) CANADIAN SYLLABICS KI	[357C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146D, 0x003F };
    uint32_t const ces[9] = { 0x357C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_144)
{
    // 146D 0061;	
    // (ᑭ) CANADIAN SYLLABICS KI	[357C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146D, 0x0061 };
    uint32_t const ces[9] = { 0x357C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_145)
{
    // 146D 0041;	
    // (ᑭ) CANADIAN SYLLABICS KI	[357C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146D, 0x0041 };
    uint32_t const ces[9] = { 0x357C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_146)
{
    // 146D 0062;	
    // (ᑭ) CANADIAN SYLLABICS KI	[357C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146D, 0x0062 };
    uint32_t const ces[9] = { 0x357C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_147)
{
    // 146E 0021;	
    // (ᑮ) CANADIAN SYLLABICS KII	[357D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146E, 0x0021 };
    uint32_t const ces[9] = { 0x357D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_148)
{
    // 146E 003F;	
    // (ᑮ) CANADIAN SYLLABICS KII	[357D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146E, 0x003F };
    uint32_t const ces[9] = { 0x357D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_149)
{
    // 146E 0061;	
    // (ᑮ) CANADIAN SYLLABICS KII	[357D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146E, 0x0061 };
    uint32_t const ces[9] = { 0x357D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_150)
{
    // 146E 0041;	
    // (ᑮ) CANADIAN SYLLABICS KII	[357D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146E, 0x0041 };
    uint32_t const ces[9] = { 0x357D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_151)
{
    // 146E 0062;	
    // (ᑮ) CANADIAN SYLLABICS KII	[357D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146E, 0x0062 };
    uint32_t const ces[9] = { 0x357D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_152)
{
    // 146F 0021;	
    // (ᑯ) CANADIAN SYLLABICS KO	[357E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146F, 0x0021 };
    uint32_t const ces[9] = { 0x357E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_153)
{
    // 146F 003F;	
    // (ᑯ) CANADIAN SYLLABICS KO	[357E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146F, 0x003F };
    uint32_t const ces[9] = { 0x357E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_154)
{
    // 146F 0061;	
    // (ᑯ) CANADIAN SYLLABICS KO	[357E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146F, 0x0061 };
    uint32_t const ces[9] = { 0x357E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_155)
{
    // 146F 0041;	
    // (ᑯ) CANADIAN SYLLABICS KO	[357E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x146F, 0x0041 };
    uint32_t const ces[9] = { 0x357E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_156)
{
    // 146F 0062;	
    // (ᑯ) CANADIAN SYLLABICS KO	[357E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x146F, 0x0062 };
    uint32_t const ces[9] = { 0x357E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_157)
{
    // 1470 0021;	
    // (ᑰ) CANADIAN SYLLABICS KOO	[357F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1470, 0x0021 };
    uint32_t const ces[9] = { 0x357F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_158)
{
    // 1470 003F;	
    // (ᑰ) CANADIAN SYLLABICS KOO	[357F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1470, 0x003F };
    uint32_t const ces[9] = { 0x357F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_159)
{
    // 1470 0061;	
    // (ᑰ) CANADIAN SYLLABICS KOO	[357F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1470, 0x0061 };
    uint32_t const ces[9] = { 0x357F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_160)
{
    // 1470 0041;	
    // (ᑰ) CANADIAN SYLLABICS KOO	[357F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1470, 0x0041 };
    uint32_t const ces[9] = { 0x357F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_161)
{
    // 1470 0062;	
    // (ᑰ) CANADIAN SYLLABICS KOO	[357F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1470, 0x0062 };
    uint32_t const ces[9] = { 0x357F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_162)
{
    // 1471 0021;	
    // (ᑱ) CANADIAN SYLLABICS Y-CREE KOO	[3580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1471, 0x0021 };
    uint32_t const ces[9] = { 0x3580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_163)
{
    // 1471 003F;	
    // (ᑱ) CANADIAN SYLLABICS Y-CREE KOO	[3580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1471, 0x003F };
    uint32_t const ces[9] = { 0x3580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_164)
{
    // 1471 0061;	
    // (ᑱ) CANADIAN SYLLABICS Y-CREE KOO	[3580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1471, 0x0061 };
    uint32_t const ces[9] = { 0x3580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_165)
{
    // 1471 0041;	
    // (ᑱ) CANADIAN SYLLABICS Y-CREE KOO	[3580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1471, 0x0041 };
    uint32_t const ces[9] = { 0x3580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_166)
{
    // 1471 0062;	
    // (ᑱ) CANADIAN SYLLABICS Y-CREE KOO	[3580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1471, 0x0062 };
    uint32_t const ces[9] = { 0x3580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_167)
{
    // 1472 0021;	
    // (ᑲ) CANADIAN SYLLABICS KA	[3581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1472, 0x0021 };
    uint32_t const ces[9] = { 0x3581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_168)
{
    // 1472 003F;	
    // (ᑲ) CANADIAN SYLLABICS KA	[3581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1472, 0x003F };
    uint32_t const ces[9] = { 0x3581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_169)
{
    // 1472 0061;	
    // (ᑲ) CANADIAN SYLLABICS KA	[3581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1472, 0x0061 };
    uint32_t const ces[9] = { 0x3581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_170)
{
    // 1472 0041;	
    // (ᑲ) CANADIAN SYLLABICS KA	[3581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1472, 0x0041 };
    uint32_t const ces[9] = { 0x3581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_171)
{
    // 1472 0062;	
    // (ᑲ) CANADIAN SYLLABICS KA	[3581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1472, 0x0062 };
    uint32_t const ces[9] = { 0x3581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_172)
{
    // 1473 0021;	
    // (ᑳ) CANADIAN SYLLABICS KAA	[3582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1473, 0x0021 };
    uint32_t const ces[9] = { 0x3582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_173)
{
    // 1473 003F;	
    // (ᑳ) CANADIAN SYLLABICS KAA	[3582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1473, 0x003F };
    uint32_t const ces[9] = { 0x3582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_174)
{
    // 1473 0061;	
    // (ᑳ) CANADIAN SYLLABICS KAA	[3582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1473, 0x0061 };
    uint32_t const ces[9] = { 0x3582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_175)
{
    // 1473 0041;	
    // (ᑳ) CANADIAN SYLLABICS KAA	[3582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1473, 0x0041 };
    uint32_t const ces[9] = { 0x3582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_176)
{
    // 1473 0062;	
    // (ᑳ) CANADIAN SYLLABICS KAA	[3582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1473, 0x0062 };
    uint32_t const ces[9] = { 0x3582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_177)
{
    // 1474 0021;	
    // (ᑴ) CANADIAN SYLLABICS KWE	[3583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1474, 0x0021 };
    uint32_t const ces[9] = { 0x3583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_178)
{
    // 1474 003F;	
    // (ᑴ) CANADIAN SYLLABICS KWE	[3583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1474, 0x003F };
    uint32_t const ces[9] = { 0x3583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_179)
{
    // 1474 0061;	
    // (ᑴ) CANADIAN SYLLABICS KWE	[3583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1474, 0x0061 };
    uint32_t const ces[9] = { 0x3583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_180)
{
    // 1474 0041;	
    // (ᑴ) CANADIAN SYLLABICS KWE	[3583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1474, 0x0041 };
    uint32_t const ces[9] = { 0x3583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_181)
{
    // 1474 0062;	
    // (ᑴ) CANADIAN SYLLABICS KWE	[3583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1474, 0x0062 };
    uint32_t const ces[9] = { 0x3583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_182)
{
    // 1475 0021;	
    // (ᑵ) CANADIAN SYLLABICS WEST-CREE KWE	[3584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1475, 0x0021 };
    uint32_t const ces[9] = { 0x3584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_183)
{
    // 1475 003F;	
    // (ᑵ) CANADIAN SYLLABICS WEST-CREE KWE	[3584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1475, 0x003F };
    uint32_t const ces[9] = { 0x3584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_184)
{
    // 1475 0061;	
    // (ᑵ) CANADIAN SYLLABICS WEST-CREE KWE	[3584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1475, 0x0061 };
    uint32_t const ces[9] = { 0x3584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_185)
{
    // 1475 0041;	
    // (ᑵ) CANADIAN SYLLABICS WEST-CREE KWE	[3584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1475, 0x0041 };
    uint32_t const ces[9] = { 0x3584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_186)
{
    // 1475 0062;	
    // (ᑵ) CANADIAN SYLLABICS WEST-CREE KWE	[3584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1475, 0x0062 };
    uint32_t const ces[9] = { 0x3584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_187)
{
    // 1476 0021;	
    // (ᑶ) CANADIAN SYLLABICS KWI	[3585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1476, 0x0021 };
    uint32_t const ces[9] = { 0x3585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_188)
{
    // 1476 003F;	
    // (ᑶ) CANADIAN SYLLABICS KWI	[3585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1476, 0x003F };
    uint32_t const ces[9] = { 0x3585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_189)
{
    // 1476 0061;	
    // (ᑶ) CANADIAN SYLLABICS KWI	[3585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1476, 0x0061 };
    uint32_t const ces[9] = { 0x3585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_190)
{
    // 1476 0041;	
    // (ᑶ) CANADIAN SYLLABICS KWI	[3585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1476, 0x0041 };
    uint32_t const ces[9] = { 0x3585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_191)
{
    // 1476 0062;	
    // (ᑶ) CANADIAN SYLLABICS KWI	[3585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1476, 0x0062 };
    uint32_t const ces[9] = { 0x3585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_192)
{
    // 1477 0021;	
    // (ᑷ) CANADIAN SYLLABICS WEST-CREE KWI	[3586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1477, 0x0021 };
    uint32_t const ces[9] = { 0x3586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_193)
{
    // 1477 003F;	
    // (ᑷ) CANADIAN SYLLABICS WEST-CREE KWI	[3586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1477, 0x003F };
    uint32_t const ces[9] = { 0x3586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_194)
{
    // 1477 0061;	
    // (ᑷ) CANADIAN SYLLABICS WEST-CREE KWI	[3586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1477, 0x0061 };
    uint32_t const ces[9] = { 0x3586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_195)
{
    // 1477 0041;	
    // (ᑷ) CANADIAN SYLLABICS WEST-CREE KWI	[3586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1477, 0x0041 };
    uint32_t const ces[9] = { 0x3586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_196)
{
    // 1477 0062;	
    // (ᑷ) CANADIAN SYLLABICS WEST-CREE KWI	[3586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1477, 0x0062 };
    uint32_t const ces[9] = { 0x3586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_197)
{
    // 1478 0021;	
    // (ᑸ) CANADIAN SYLLABICS KWII	[3587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1478, 0x0021 };
    uint32_t const ces[9] = { 0x3587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_198)
{
    // 1478 003F;	
    // (ᑸ) CANADIAN SYLLABICS KWII	[3587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1478, 0x003F };
    uint32_t const ces[9] = { 0x3587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_199)
{
    // 1478 0061;	
    // (ᑸ) CANADIAN SYLLABICS KWII	[3587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1478, 0x0061 };
    uint32_t const ces[9] = { 0x3587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_200)
{
    // 1478 0041;	
    // (ᑸ) CANADIAN SYLLABICS KWII	[3587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1478, 0x0041 };
    uint32_t const ces[9] = { 0x3587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_201)
{
    // 1478 0062;	
    // (ᑸ) CANADIAN SYLLABICS KWII	[3587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1478, 0x0062 };
    uint32_t const ces[9] = { 0x3587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_202)
{
    // 1479 0021;	
    // (ᑹ) CANADIAN SYLLABICS WEST-CREE KWII	[3588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1479, 0x0021 };
    uint32_t const ces[9] = { 0x3588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_203)
{
    // 1479 003F;	
    // (ᑹ) CANADIAN SYLLABICS WEST-CREE KWII	[3588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1479, 0x003F };
    uint32_t const ces[9] = { 0x3588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_204)
{
    // 1479 0061;	
    // (ᑹ) CANADIAN SYLLABICS WEST-CREE KWII	[3588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1479, 0x0061 };
    uint32_t const ces[9] = { 0x3588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_205)
{
    // 1479 0041;	
    // (ᑹ) CANADIAN SYLLABICS WEST-CREE KWII	[3588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1479, 0x0041 };
    uint32_t const ces[9] = { 0x3588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_206)
{
    // 1479 0062;	
    // (ᑹ) CANADIAN SYLLABICS WEST-CREE KWII	[3588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1479, 0x0062 };
    uint32_t const ces[9] = { 0x3588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_207)
{
    // 147A 0021;	
    // (ᑺ) CANADIAN SYLLABICS KWO	[3589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147A, 0x0021 };
    uint32_t const ces[9] = { 0x3589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_208)
{
    // 147A 003F;	
    // (ᑺ) CANADIAN SYLLABICS KWO	[3589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147A, 0x003F };
    uint32_t const ces[9] = { 0x3589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_209)
{
    // 147A 0061;	
    // (ᑺ) CANADIAN SYLLABICS KWO	[3589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147A, 0x0061 };
    uint32_t const ces[9] = { 0x3589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_210)
{
    // 147A 0041;	
    // (ᑺ) CANADIAN SYLLABICS KWO	[3589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147A, 0x0041 };
    uint32_t const ces[9] = { 0x3589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_211)
{
    // 147A 0062;	
    // (ᑺ) CANADIAN SYLLABICS KWO	[3589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147A, 0x0062 };
    uint32_t const ces[9] = { 0x3589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_212)
{
    // 147B 0021;	
    // (ᑻ) CANADIAN SYLLABICS WEST-CREE KWO	[358A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147B, 0x0021 };
    uint32_t const ces[9] = { 0x358A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_213)
{
    // 147B 003F;	
    // (ᑻ) CANADIAN SYLLABICS WEST-CREE KWO	[358A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147B, 0x003F };
    uint32_t const ces[9] = { 0x358A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_214)
{
    // 147B 0061;	
    // (ᑻ) CANADIAN SYLLABICS WEST-CREE KWO	[358A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147B, 0x0061 };
    uint32_t const ces[9] = { 0x358A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_215)
{
    // 147B 0041;	
    // (ᑻ) CANADIAN SYLLABICS WEST-CREE KWO	[358A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147B, 0x0041 };
    uint32_t const ces[9] = { 0x358A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_216)
{
    // 147B 0062;	
    // (ᑻ) CANADIAN SYLLABICS WEST-CREE KWO	[358A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147B, 0x0062 };
    uint32_t const ces[9] = { 0x358A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_217)
{
    // 147C 0021;	
    // (ᑼ) CANADIAN SYLLABICS KWOO	[358B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147C, 0x0021 };
    uint32_t const ces[9] = { 0x358B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_218)
{
    // 147C 003F;	
    // (ᑼ) CANADIAN SYLLABICS KWOO	[358B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147C, 0x003F };
    uint32_t const ces[9] = { 0x358B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_219)
{
    // 147C 0061;	
    // (ᑼ) CANADIAN SYLLABICS KWOO	[358B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147C, 0x0061 };
    uint32_t const ces[9] = { 0x358B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_220)
{
    // 147C 0041;	
    // (ᑼ) CANADIAN SYLLABICS KWOO	[358B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147C, 0x0041 };
    uint32_t const ces[9] = { 0x358B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_221)
{
    // 147C 0062;	
    // (ᑼ) CANADIAN SYLLABICS KWOO	[358B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147C, 0x0062 };
    uint32_t const ces[9] = { 0x358B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_222)
{
    // 147D 0021;	
    // (ᑽ) CANADIAN SYLLABICS WEST-CREE KWOO	[358C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147D, 0x0021 };
    uint32_t const ces[9] = { 0x358C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_223)
{
    // 147D 003F;	
    // (ᑽ) CANADIAN SYLLABICS WEST-CREE KWOO	[358C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147D, 0x003F };
    uint32_t const ces[9] = { 0x358C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_224)
{
    // 147D 0061;	
    // (ᑽ) CANADIAN SYLLABICS WEST-CREE KWOO	[358C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147D, 0x0061 };
    uint32_t const ces[9] = { 0x358C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_225)
{
    // 147D 0041;	
    // (ᑽ) CANADIAN SYLLABICS WEST-CREE KWOO	[358C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147D, 0x0041 };
    uint32_t const ces[9] = { 0x358C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_226)
{
    // 147D 0062;	
    // (ᑽ) CANADIAN SYLLABICS WEST-CREE KWOO	[358C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147D, 0x0062 };
    uint32_t const ces[9] = { 0x358C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_227)
{
    // 147E 0021;	
    // (ᑾ) CANADIAN SYLLABICS KWA	[358D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147E, 0x0021 };
    uint32_t const ces[9] = { 0x358D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_228)
{
    // 147E 003F;	
    // (ᑾ) CANADIAN SYLLABICS KWA	[358D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147E, 0x003F };
    uint32_t const ces[9] = { 0x358D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_229)
{
    // 147E 0061;	
    // (ᑾ) CANADIAN SYLLABICS KWA	[358D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147E, 0x0061 };
    uint32_t const ces[9] = { 0x358D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_230)
{
    // 147E 0041;	
    // (ᑾ) CANADIAN SYLLABICS KWA	[358D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147E, 0x0041 };
    uint32_t const ces[9] = { 0x358D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_231)
{
    // 147E 0062;	
    // (ᑾ) CANADIAN SYLLABICS KWA	[358D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147E, 0x0062 };
    uint32_t const ces[9] = { 0x358D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_232)
{
    // 147F 0021;	
    // (ᑿ) CANADIAN SYLLABICS WEST-CREE KWA	[358E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147F, 0x0021 };
    uint32_t const ces[9] = { 0x358E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_233)
{
    // 147F 003F;	
    // (ᑿ) CANADIAN SYLLABICS WEST-CREE KWA	[358E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147F, 0x003F };
    uint32_t const ces[9] = { 0x358E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_234)
{
    // 147F 0061;	
    // (ᑿ) CANADIAN SYLLABICS WEST-CREE KWA	[358E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147F, 0x0061 };
    uint32_t const ces[9] = { 0x358E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_235)
{
    // 147F 0041;	
    // (ᑿ) CANADIAN SYLLABICS WEST-CREE KWA	[358E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x147F, 0x0041 };
    uint32_t const ces[9] = { 0x358E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_236)
{
    // 147F 0062;	
    // (ᑿ) CANADIAN SYLLABICS WEST-CREE KWA	[358E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x147F, 0x0062 };
    uint32_t const ces[9] = { 0x358E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_237)
{
    // 1480 0021;	
    // (ᒀ) CANADIAN SYLLABICS KWAA	[358F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1480, 0x0021 };
    uint32_t const ces[9] = { 0x358F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_238)
{
    // 1480 003F;	
    // (ᒀ) CANADIAN SYLLABICS KWAA	[358F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1480, 0x003F };
    uint32_t const ces[9] = { 0x358F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_239)
{
    // 1480 0061;	
    // (ᒀ) CANADIAN SYLLABICS KWAA	[358F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1480, 0x0061 };
    uint32_t const ces[9] = { 0x358F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_240)
{
    // 1480 0041;	
    // (ᒀ) CANADIAN SYLLABICS KWAA	[358F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1480, 0x0041 };
    uint32_t const ces[9] = { 0x358F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_241)
{
    // 1480 0062;	
    // (ᒀ) CANADIAN SYLLABICS KWAA	[358F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1480, 0x0062 };
    uint32_t const ces[9] = { 0x358F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_242)
{
    // 1481 0021;	
    // (ᒁ) CANADIAN SYLLABICS WEST-CREE KWAA	[3590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1481, 0x0021 };
    uint32_t const ces[9] = { 0x3590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_243)
{
    // 1481 003F;	
    // (ᒁ) CANADIAN SYLLABICS WEST-CREE KWAA	[3590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1481, 0x003F };
    uint32_t const ces[9] = { 0x3590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_244)
{
    // 1481 0061;	
    // (ᒁ) CANADIAN SYLLABICS WEST-CREE KWAA	[3590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1481, 0x0061 };
    uint32_t const ces[9] = { 0x3590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_245)
{
    // 1481 0041;	
    // (ᒁ) CANADIAN SYLLABICS WEST-CREE KWAA	[3590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1481, 0x0041 };
    uint32_t const ces[9] = { 0x3590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_246)
{
    // 1481 0062;	
    // (ᒁ) CANADIAN SYLLABICS WEST-CREE KWAA	[3590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1481, 0x0062 };
    uint32_t const ces[9] = { 0x3590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_247)
{
    // 1482 0021;	
    // (ᒂ) CANADIAN SYLLABICS NASKAPI KWAA	[3591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1482, 0x0021 };
    uint32_t const ces[9] = { 0x3591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_248)
{
    // 1482 003F;	
    // (ᒂ) CANADIAN SYLLABICS NASKAPI KWAA	[3591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1482, 0x003F };
    uint32_t const ces[9] = { 0x3591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_249)
{
    // 1482 0061;	
    // (ᒂ) CANADIAN SYLLABICS NASKAPI KWAA	[3591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1482, 0x0061 };
    uint32_t const ces[9] = { 0x3591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_250)
{
    // 1482 0041;	
    // (ᒂ) CANADIAN SYLLABICS NASKAPI KWAA	[3591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1482, 0x0041 };
    uint32_t const ces[9] = { 0x3591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_251)
{
    // 1482 0062;	
    // (ᒂ) CANADIAN SYLLABICS NASKAPI KWAA	[3591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1482, 0x0062 };
    uint32_t const ces[9] = { 0x3591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_252)
{
    // 1483 0021;	
    // (ᒃ) CANADIAN SYLLABICS K	[3592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1483, 0x0021 };
    uint32_t const ces[9] = { 0x3592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_253)
{
    // 1483 003F;	
    // (ᒃ) CANADIAN SYLLABICS K	[3592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1483, 0x003F };
    uint32_t const ces[9] = { 0x3592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_254)
{
    // 1483 0061;	
    // (ᒃ) CANADIAN SYLLABICS K	[3592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1483, 0x0061 };
    uint32_t const ces[9] = { 0x3592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_255)
{
    // 1483 0041;	
    // (ᒃ) CANADIAN SYLLABICS K	[3592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1483, 0x0041 };
    uint32_t const ces[9] = { 0x3592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_256)
{
    // 1483 0062;	
    // (ᒃ) CANADIAN SYLLABICS K	[3592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1483, 0x0062 };
    uint32_t const ces[9] = { 0x3592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_257)
{
    // 1484 0021;	
    // (ᒄ) CANADIAN SYLLABICS KW	[3593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1484, 0x0021 };
    uint32_t const ces[9] = { 0x3593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_258)
{
    // 1484 003F;	
    // (ᒄ) CANADIAN SYLLABICS KW	[3593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1484, 0x003F };
    uint32_t const ces[9] = { 0x3593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_259)
{
    // 1484 0061;	
    // (ᒄ) CANADIAN SYLLABICS KW	[3593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1484, 0x0061 };
    uint32_t const ces[9] = { 0x3593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_260)
{
    // 1484 0041;	
    // (ᒄ) CANADIAN SYLLABICS KW	[3593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1484, 0x0041 };
    uint32_t const ces[9] = { 0x3593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_261)
{
    // 1484 0062;	
    // (ᒄ) CANADIAN SYLLABICS KW	[3593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1484, 0x0062 };
    uint32_t const ces[9] = { 0x3593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_262)
{
    // 1485 0021;	
    // (ᒅ) CANADIAN SYLLABICS SOUTH-SLAVEY KEH	[3594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1485, 0x0021 };
    uint32_t const ces[9] = { 0x3594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_263)
{
    // 1485 003F;	
    // (ᒅ) CANADIAN SYLLABICS SOUTH-SLAVEY KEH	[3594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1485, 0x003F };
    uint32_t const ces[9] = { 0x3594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_264)
{
    // 1485 0061;	
    // (ᒅ) CANADIAN SYLLABICS SOUTH-SLAVEY KEH	[3594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1485, 0x0061 };
    uint32_t const ces[9] = { 0x3594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_265)
{
    // 1485 0041;	
    // (ᒅ) CANADIAN SYLLABICS SOUTH-SLAVEY KEH	[3594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1485, 0x0041 };
    uint32_t const ces[9] = { 0x3594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_266)
{
    // 1485 0062;	
    // (ᒅ) CANADIAN SYLLABICS SOUTH-SLAVEY KEH	[3594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1485, 0x0062 };
    uint32_t const ces[9] = { 0x3594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_267)
{
    // 1486 0021;	
    // (ᒆ) CANADIAN SYLLABICS SOUTH-SLAVEY KIH	[3595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1486, 0x0021 };
    uint32_t const ces[9] = { 0x3595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_268)
{
    // 1486 003F;	
    // (ᒆ) CANADIAN SYLLABICS SOUTH-SLAVEY KIH	[3595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1486, 0x003F };
    uint32_t const ces[9] = { 0x3595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_269)
{
    // 1486 0061;	
    // (ᒆ) CANADIAN SYLLABICS SOUTH-SLAVEY KIH	[3595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1486, 0x0061 };
    uint32_t const ces[9] = { 0x3595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_270)
{
    // 1486 0041;	
    // (ᒆ) CANADIAN SYLLABICS SOUTH-SLAVEY KIH	[3595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1486, 0x0041 };
    uint32_t const ces[9] = { 0x3595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_271)
{
    // 1486 0062;	
    // (ᒆ) CANADIAN SYLLABICS SOUTH-SLAVEY KIH	[3595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1486, 0x0062 };
    uint32_t const ces[9] = { 0x3595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_272)
{
    // 1487 0021;	
    // (ᒇ) CANADIAN SYLLABICS SOUTH-SLAVEY KOH	[3596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1487, 0x0021 };
    uint32_t const ces[9] = { 0x3596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_273)
{
    // 1487 003F;	
    // (ᒇ) CANADIAN SYLLABICS SOUTH-SLAVEY KOH	[3596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1487, 0x003F };
    uint32_t const ces[9] = { 0x3596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_274)
{
    // 1487 0061;	
    // (ᒇ) CANADIAN SYLLABICS SOUTH-SLAVEY KOH	[3596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1487, 0x0061 };
    uint32_t const ces[9] = { 0x3596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_275)
{
    // 1487 0041;	
    // (ᒇ) CANADIAN SYLLABICS SOUTH-SLAVEY KOH	[3596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1487, 0x0041 };
    uint32_t const ces[9] = { 0x3596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_276)
{
    // 1487 0062;	
    // (ᒇ) CANADIAN SYLLABICS SOUTH-SLAVEY KOH	[3596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1487, 0x0062 };
    uint32_t const ces[9] = { 0x3596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_277)
{
    // 1488 0021;	
    // (ᒈ) CANADIAN SYLLABICS SOUTH-SLAVEY KAH	[3597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1488, 0x0021 };
    uint32_t const ces[9] = { 0x3597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_278)
{
    // 1488 003F;	
    // (ᒈ) CANADIAN SYLLABICS SOUTH-SLAVEY KAH	[3597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1488, 0x003F };
    uint32_t const ces[9] = { 0x3597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_279)
{
    // 1488 0061;	
    // (ᒈ) CANADIAN SYLLABICS SOUTH-SLAVEY KAH	[3597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1488, 0x0061 };
    uint32_t const ces[9] = { 0x3597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_280)
{
    // 1488 0041;	
    // (ᒈ) CANADIAN SYLLABICS SOUTH-SLAVEY KAH	[3597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1488, 0x0041 };
    uint32_t const ces[9] = { 0x3597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_281)
{
    // 1488 0062;	
    // (ᒈ) CANADIAN SYLLABICS SOUTH-SLAVEY KAH	[3597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1488, 0x0062 };
    uint32_t const ces[9] = { 0x3597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_282)
{
    // 1489 0021;	
    // (ᒉ) CANADIAN SYLLABICS CE	[3598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1489, 0x0021 };
    uint32_t const ces[9] = { 0x3598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_283)
{
    // 1489 003F;	
    // (ᒉ) CANADIAN SYLLABICS CE	[3598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1489, 0x003F };
    uint32_t const ces[9] = { 0x3598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_284)
{
    // 1489 0061;	
    // (ᒉ) CANADIAN SYLLABICS CE	[3598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1489, 0x0061 };
    uint32_t const ces[9] = { 0x3598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_285)
{
    // 1489 0041;	
    // (ᒉ) CANADIAN SYLLABICS CE	[3598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1489, 0x0041 };
    uint32_t const ces[9] = { 0x3598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_286)
{
    // 1489 0062;	
    // (ᒉ) CANADIAN SYLLABICS CE	[3598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1489, 0x0062 };
    uint32_t const ces[9] = { 0x3598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_287)
{
    // 148A 0021;	
    // (ᒊ) CANADIAN SYLLABICS CAAI	[3599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148A, 0x0021 };
    uint32_t const ces[9] = { 0x3599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_288)
{
    // 148A 003F;	
    // (ᒊ) CANADIAN SYLLABICS CAAI	[3599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148A, 0x003F };
    uint32_t const ces[9] = { 0x3599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_289)
{
    // 148A 0061;	
    // (ᒊ) CANADIAN SYLLABICS CAAI	[3599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148A, 0x0061 };
    uint32_t const ces[9] = { 0x3599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_290)
{
    // 148A 0041;	
    // (ᒊ) CANADIAN SYLLABICS CAAI	[3599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148A, 0x0041 };
    uint32_t const ces[9] = { 0x3599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_291)
{
    // 148A 0062;	
    // (ᒊ) CANADIAN SYLLABICS CAAI	[3599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148A, 0x0062 };
    uint32_t const ces[9] = { 0x3599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_292)
{
    // 148B 0021;	
    // (ᒋ) CANADIAN SYLLABICS CI	[359A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148B, 0x0021 };
    uint32_t const ces[9] = { 0x359A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_293)
{
    // 148B 003F;	
    // (ᒋ) CANADIAN SYLLABICS CI	[359A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148B, 0x003F };
    uint32_t const ces[9] = { 0x359A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_294)
{
    // 148B 0061;	
    // (ᒋ) CANADIAN SYLLABICS CI	[359A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148B, 0x0061 };
    uint32_t const ces[9] = { 0x359A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_295)
{
    // 148B 0041;	
    // (ᒋ) CANADIAN SYLLABICS CI	[359A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148B, 0x0041 };
    uint32_t const ces[9] = { 0x359A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_296)
{
    // 148B 0062;	
    // (ᒋ) CANADIAN SYLLABICS CI	[359A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148B, 0x0062 };
    uint32_t const ces[9] = { 0x359A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_297)
{
    // 148C 0021;	
    // (ᒌ) CANADIAN SYLLABICS CII	[359B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148C, 0x0021 };
    uint32_t const ces[9] = { 0x359B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_298)
{
    // 148C 003F;	
    // (ᒌ) CANADIAN SYLLABICS CII	[359B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148C, 0x003F };
    uint32_t const ces[9] = { 0x359B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_299)
{
    // 148C 0061;	
    // (ᒌ) CANADIAN SYLLABICS CII	[359B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148C, 0x0061 };
    uint32_t const ces[9] = { 0x359B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_300)
{
    // 148C 0041;	
    // (ᒌ) CANADIAN SYLLABICS CII	[359B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148C, 0x0041 };
    uint32_t const ces[9] = { 0x359B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_301)
{
    // 148C 0062;	
    // (ᒌ) CANADIAN SYLLABICS CII	[359B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148C, 0x0062 };
    uint32_t const ces[9] = { 0x359B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_302)
{
    // 148D 0021;	
    // (ᒍ) CANADIAN SYLLABICS CO	[359C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148D, 0x0021 };
    uint32_t const ces[9] = { 0x359C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_303)
{
    // 148D 003F;	
    // (ᒍ) CANADIAN SYLLABICS CO	[359C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148D, 0x003F };
    uint32_t const ces[9] = { 0x359C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_304)
{
    // 148D 0061;	
    // (ᒍ) CANADIAN SYLLABICS CO	[359C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148D, 0x0061 };
    uint32_t const ces[9] = { 0x359C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_305)
{
    // 148D 0041;	
    // (ᒍ) CANADIAN SYLLABICS CO	[359C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148D, 0x0041 };
    uint32_t const ces[9] = { 0x359C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_306)
{
    // 148D 0062;	
    // (ᒍ) CANADIAN SYLLABICS CO	[359C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148D, 0x0062 };
    uint32_t const ces[9] = { 0x359C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_307)
{
    // 148E 0021;	
    // (ᒎ) CANADIAN SYLLABICS COO	[359D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148E, 0x0021 };
    uint32_t const ces[9] = { 0x359D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_308)
{
    // 148E 003F;	
    // (ᒎ) CANADIAN SYLLABICS COO	[359D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148E, 0x003F };
    uint32_t const ces[9] = { 0x359D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_309)
{
    // 148E 0061;	
    // (ᒎ) CANADIAN SYLLABICS COO	[359D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148E, 0x0061 };
    uint32_t const ces[9] = { 0x359D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_310)
{
    // 148E 0041;	
    // (ᒎ) CANADIAN SYLLABICS COO	[359D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148E, 0x0041 };
    uint32_t const ces[9] = { 0x359D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_311)
{
    // 148E 0062;	
    // (ᒎ) CANADIAN SYLLABICS COO	[359D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148E, 0x0062 };
    uint32_t const ces[9] = { 0x359D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_312)
{
    // 148F 0021;	
    // (ᒏ) CANADIAN SYLLABICS Y-CREE COO	[359E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148F, 0x0021 };
    uint32_t const ces[9] = { 0x359E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_313)
{
    // 148F 003F;	
    // (ᒏ) CANADIAN SYLLABICS Y-CREE COO	[359E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148F, 0x003F };
    uint32_t const ces[9] = { 0x359E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_314)
{
    // 148F 0061;	
    // (ᒏ) CANADIAN SYLLABICS Y-CREE COO	[359E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148F, 0x0061 };
    uint32_t const ces[9] = { 0x359E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_315)
{
    // 148F 0041;	
    // (ᒏ) CANADIAN SYLLABICS Y-CREE COO	[359E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x148F, 0x0041 };
    uint32_t const ces[9] = { 0x359E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_316)
{
    // 148F 0062;	
    // (ᒏ) CANADIAN SYLLABICS Y-CREE COO	[359E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x148F, 0x0062 };
    uint32_t const ces[9] = { 0x359E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_317)
{
    // 1490 0021;	
    // (ᒐ) CANADIAN SYLLABICS CA	[359F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1490, 0x0021 };
    uint32_t const ces[9] = { 0x359F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_318)
{
    // 1490 003F;	
    // (ᒐ) CANADIAN SYLLABICS CA	[359F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1490, 0x003F };
    uint32_t const ces[9] = { 0x359F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_319)
{
    // 1490 0061;	
    // (ᒐ) CANADIAN SYLLABICS CA	[359F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1490, 0x0061 };
    uint32_t const ces[9] = { 0x359F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_320)
{
    // 1490 0041;	
    // (ᒐ) CANADIAN SYLLABICS CA	[359F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1490, 0x0041 };
    uint32_t const ces[9] = { 0x359F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_321)
{
    // 1490 0062;	
    // (ᒐ) CANADIAN SYLLABICS CA	[359F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1490, 0x0062 };
    uint32_t const ces[9] = { 0x359F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_322)
{
    // 1491 0021;	
    // (ᒑ) CANADIAN SYLLABICS CAA	[35A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1491, 0x0021 };
    uint32_t const ces[9] = { 0x35A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_323)
{
    // 1491 003F;	
    // (ᒑ) CANADIAN SYLLABICS CAA	[35A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1491, 0x003F };
    uint32_t const ces[9] = { 0x35A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_324)
{
    // 1491 0061;	
    // (ᒑ) CANADIAN SYLLABICS CAA	[35A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1491, 0x0061 };
    uint32_t const ces[9] = { 0x35A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_325)
{
    // 1491 0041;	
    // (ᒑ) CANADIAN SYLLABICS CAA	[35A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1491, 0x0041 };
    uint32_t const ces[9] = { 0x35A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_326)
{
    // 1491 0062;	
    // (ᒑ) CANADIAN SYLLABICS CAA	[35A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1491, 0x0062 };
    uint32_t const ces[9] = { 0x35A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_327)
{
    // 1492 0021;	
    // (ᒒ) CANADIAN SYLLABICS CWE	[35A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1492, 0x0021 };
    uint32_t const ces[9] = { 0x35A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_328)
{
    // 1492 003F;	
    // (ᒒ) CANADIAN SYLLABICS CWE	[35A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1492, 0x003F };
    uint32_t const ces[9] = { 0x35A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_329)
{
    // 1492 0061;	
    // (ᒒ) CANADIAN SYLLABICS CWE	[35A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1492, 0x0061 };
    uint32_t const ces[9] = { 0x35A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_330)
{
    // 1492 0041;	
    // (ᒒ) CANADIAN SYLLABICS CWE	[35A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1492, 0x0041 };
    uint32_t const ces[9] = { 0x35A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_331)
{
    // 1492 0062;	
    // (ᒒ) CANADIAN SYLLABICS CWE	[35A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1492, 0x0062 };
    uint32_t const ces[9] = { 0x35A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_332)
{
    // 1493 0021;	
    // (ᒓ) CANADIAN SYLLABICS WEST-CREE CWE	[35A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1493, 0x0021 };
    uint32_t const ces[9] = { 0x35A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_333)
{
    // 1493 003F;	
    // (ᒓ) CANADIAN SYLLABICS WEST-CREE CWE	[35A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1493, 0x003F };
    uint32_t const ces[9] = { 0x35A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_334)
{
    // 1493 0061;	
    // (ᒓ) CANADIAN SYLLABICS WEST-CREE CWE	[35A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1493, 0x0061 };
    uint32_t const ces[9] = { 0x35A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_335)
{
    // 1493 0041;	
    // (ᒓ) CANADIAN SYLLABICS WEST-CREE CWE	[35A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1493, 0x0041 };
    uint32_t const ces[9] = { 0x35A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_336)
{
    // 1493 0062;	
    // (ᒓ) CANADIAN SYLLABICS WEST-CREE CWE	[35A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1493, 0x0062 };
    uint32_t const ces[9] = { 0x35A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_337)
{
    // 1494 0021;	
    // (ᒔ) CANADIAN SYLLABICS CWI	[35A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1494, 0x0021 };
    uint32_t const ces[9] = { 0x35A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_338)
{
    // 1494 003F;	
    // (ᒔ) CANADIAN SYLLABICS CWI	[35A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1494, 0x003F };
    uint32_t const ces[9] = { 0x35A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_339)
{
    // 1494 0061;	
    // (ᒔ) CANADIAN SYLLABICS CWI	[35A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1494, 0x0061 };
    uint32_t const ces[9] = { 0x35A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_340)
{
    // 1494 0041;	
    // (ᒔ) CANADIAN SYLLABICS CWI	[35A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1494, 0x0041 };
    uint32_t const ces[9] = { 0x35A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_341)
{
    // 1494 0062;	
    // (ᒔ) CANADIAN SYLLABICS CWI	[35A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1494, 0x0062 };
    uint32_t const ces[9] = { 0x35A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_342)
{
    // 1495 0021;	
    // (ᒕ) CANADIAN SYLLABICS WEST-CREE CWI	[35A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1495, 0x0021 };
    uint32_t const ces[9] = { 0x35A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_343)
{
    // 1495 003F;	
    // (ᒕ) CANADIAN SYLLABICS WEST-CREE CWI	[35A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1495, 0x003F };
    uint32_t const ces[9] = { 0x35A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_344)
{
    // 1495 0061;	
    // (ᒕ) CANADIAN SYLLABICS WEST-CREE CWI	[35A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1495, 0x0061 };
    uint32_t const ces[9] = { 0x35A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_345)
{
    // 1495 0041;	
    // (ᒕ) CANADIAN SYLLABICS WEST-CREE CWI	[35A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1495, 0x0041 };
    uint32_t const ces[9] = { 0x35A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_346)
{
    // 1495 0062;	
    // (ᒕ) CANADIAN SYLLABICS WEST-CREE CWI	[35A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1495, 0x0062 };
    uint32_t const ces[9] = { 0x35A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_347)
{
    // 1496 0021;	
    // (ᒖ) CANADIAN SYLLABICS CWII	[35A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1496, 0x0021 };
    uint32_t const ces[9] = { 0x35A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_348)
{
    // 1496 003F;	
    // (ᒖ) CANADIAN SYLLABICS CWII	[35A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1496, 0x003F };
    uint32_t const ces[9] = { 0x35A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_349)
{
    // 1496 0061;	
    // (ᒖ) CANADIAN SYLLABICS CWII	[35A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1496, 0x0061 };
    uint32_t const ces[9] = { 0x35A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_350)
{
    // 1496 0041;	
    // (ᒖ) CANADIAN SYLLABICS CWII	[35A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1496, 0x0041 };
    uint32_t const ces[9] = { 0x35A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_351)
{
    // 1496 0062;	
    // (ᒖ) CANADIAN SYLLABICS CWII	[35A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1496, 0x0062 };
    uint32_t const ces[9] = { 0x35A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_352)
{
    // 1497 0021;	
    // (ᒗ) CANADIAN SYLLABICS WEST-CREE CWII	[35A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1497, 0x0021 };
    uint32_t const ces[9] = { 0x35A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_353)
{
    // 1497 003F;	
    // (ᒗ) CANADIAN SYLLABICS WEST-CREE CWII	[35A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1497, 0x003F };
    uint32_t const ces[9] = { 0x35A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_354)
{
    // 1497 0061;	
    // (ᒗ) CANADIAN SYLLABICS WEST-CREE CWII	[35A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1497, 0x0061 };
    uint32_t const ces[9] = { 0x35A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_355)
{
    // 1497 0041;	
    // (ᒗ) CANADIAN SYLLABICS WEST-CREE CWII	[35A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1497, 0x0041 };
    uint32_t const ces[9] = { 0x35A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_356)
{
    // 1497 0062;	
    // (ᒗ) CANADIAN SYLLABICS WEST-CREE CWII	[35A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1497, 0x0062 };
    uint32_t const ces[9] = { 0x35A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_357)
{
    // 1498 0021;	
    // (ᒘ) CANADIAN SYLLABICS CWO	[35A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1498, 0x0021 };
    uint32_t const ces[9] = { 0x35A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_358)
{
    // 1498 003F;	
    // (ᒘ) CANADIAN SYLLABICS CWO	[35A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1498, 0x003F };
    uint32_t const ces[9] = { 0x35A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_359)
{
    // 1498 0061;	
    // (ᒘ) CANADIAN SYLLABICS CWO	[35A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1498, 0x0061 };
    uint32_t const ces[9] = { 0x35A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_360)
{
    // 1498 0041;	
    // (ᒘ) CANADIAN SYLLABICS CWO	[35A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1498, 0x0041 };
    uint32_t const ces[9] = { 0x35A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_361)
{
    // 1498 0062;	
    // (ᒘ) CANADIAN SYLLABICS CWO	[35A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1498, 0x0062 };
    uint32_t const ces[9] = { 0x35A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_362)
{
    // 1499 0021;	
    // (ᒙ) CANADIAN SYLLABICS WEST-CREE CWO	[35A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1499, 0x0021 };
    uint32_t const ces[9] = { 0x35A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_363)
{
    // 1499 003F;	
    // (ᒙ) CANADIAN SYLLABICS WEST-CREE CWO	[35A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1499, 0x003F };
    uint32_t const ces[9] = { 0x35A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_364)
{
    // 1499 0061;	
    // (ᒙ) CANADIAN SYLLABICS WEST-CREE CWO	[35A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1499, 0x0061 };
    uint32_t const ces[9] = { 0x35A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_365)
{
    // 1499 0041;	
    // (ᒙ) CANADIAN SYLLABICS WEST-CREE CWO	[35A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1499, 0x0041 };
    uint32_t const ces[9] = { 0x35A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_366)
{
    // 1499 0062;	
    // (ᒙ) CANADIAN SYLLABICS WEST-CREE CWO	[35A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1499, 0x0062 };
    uint32_t const ces[9] = { 0x35A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_367)
{
    // 149A 0021;	
    // (ᒚ) CANADIAN SYLLABICS CWOO	[35A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149A, 0x0021 };
    uint32_t const ces[9] = { 0x35A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_368)
{
    // 149A 003F;	
    // (ᒚ) CANADIAN SYLLABICS CWOO	[35A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149A, 0x003F };
    uint32_t const ces[9] = { 0x35A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_369)
{
    // 149A 0061;	
    // (ᒚ) CANADIAN SYLLABICS CWOO	[35A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149A, 0x0061 };
    uint32_t const ces[9] = { 0x35A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_370)
{
    // 149A 0041;	
    // (ᒚ) CANADIAN SYLLABICS CWOO	[35A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149A, 0x0041 };
    uint32_t const ces[9] = { 0x35A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_371)
{
    // 149A 0062;	
    // (ᒚ) CANADIAN SYLLABICS CWOO	[35A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149A, 0x0062 };
    uint32_t const ces[9] = { 0x35A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_372)
{
    // 149B 0021;	
    // (ᒛ) CANADIAN SYLLABICS WEST-CREE CWOO	[35AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149B, 0x0021 };
    uint32_t const ces[9] = { 0x35AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_373)
{
    // 149B 003F;	
    // (ᒛ) CANADIAN SYLLABICS WEST-CREE CWOO	[35AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149B, 0x003F };
    uint32_t const ces[9] = { 0x35AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_374)
{
    // 149B 0061;	
    // (ᒛ) CANADIAN SYLLABICS WEST-CREE CWOO	[35AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149B, 0x0061 };
    uint32_t const ces[9] = { 0x35AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_375)
{
    // 149B 0041;	
    // (ᒛ) CANADIAN SYLLABICS WEST-CREE CWOO	[35AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149B, 0x0041 };
    uint32_t const ces[9] = { 0x35AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_376)
{
    // 149B 0062;	
    // (ᒛ) CANADIAN SYLLABICS WEST-CREE CWOO	[35AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149B, 0x0062 };
    uint32_t const ces[9] = { 0x35AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_377)
{
    // 149C 0021;	
    // (ᒜ) CANADIAN SYLLABICS CWA	[35AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149C, 0x0021 };
    uint32_t const ces[9] = { 0x35AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_378)
{
    // 149C 003F;	
    // (ᒜ) CANADIAN SYLLABICS CWA	[35AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149C, 0x003F };
    uint32_t const ces[9] = { 0x35AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_379)
{
    // 149C 0061;	
    // (ᒜ) CANADIAN SYLLABICS CWA	[35AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149C, 0x0061 };
    uint32_t const ces[9] = { 0x35AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_380)
{
    // 149C 0041;	
    // (ᒜ) CANADIAN SYLLABICS CWA	[35AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149C, 0x0041 };
    uint32_t const ces[9] = { 0x35AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_381)
{
    // 149C 0062;	
    // (ᒜ) CANADIAN SYLLABICS CWA	[35AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149C, 0x0062 };
    uint32_t const ces[9] = { 0x35AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_382)
{
    // 149D 0021;	
    // (ᒝ) CANADIAN SYLLABICS WEST-CREE CWA	[35AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149D, 0x0021 };
    uint32_t const ces[9] = { 0x35AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_383)
{
    // 149D 003F;	
    // (ᒝ) CANADIAN SYLLABICS WEST-CREE CWA	[35AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149D, 0x003F };
    uint32_t const ces[9] = { 0x35AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_384)
{
    // 149D 0061;	
    // (ᒝ) CANADIAN SYLLABICS WEST-CREE CWA	[35AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149D, 0x0061 };
    uint32_t const ces[9] = { 0x35AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_385)
{
    // 149D 0041;	
    // (ᒝ) CANADIAN SYLLABICS WEST-CREE CWA	[35AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149D, 0x0041 };
    uint32_t const ces[9] = { 0x35AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_386)
{
    // 149D 0062;	
    // (ᒝ) CANADIAN SYLLABICS WEST-CREE CWA	[35AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149D, 0x0062 };
    uint32_t const ces[9] = { 0x35AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_387)
{
    // 149E 0021;	
    // (ᒞ) CANADIAN SYLLABICS CWAA	[35AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149E, 0x0021 };
    uint32_t const ces[9] = { 0x35AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_388)
{
    // 149E 003F;	
    // (ᒞ) CANADIAN SYLLABICS CWAA	[35AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149E, 0x003F };
    uint32_t const ces[9] = { 0x35AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_389)
{
    // 149E 0061;	
    // (ᒞ) CANADIAN SYLLABICS CWAA	[35AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149E, 0x0061 };
    uint32_t const ces[9] = { 0x35AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_390)
{
    // 149E 0041;	
    // (ᒞ) CANADIAN SYLLABICS CWAA	[35AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149E, 0x0041 };
    uint32_t const ces[9] = { 0x35AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_391)
{
    // 149E 0062;	
    // (ᒞ) CANADIAN SYLLABICS CWAA	[35AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149E, 0x0062 };
    uint32_t const ces[9] = { 0x35AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_392)
{
    // 149F 0021;	
    // (ᒟ) CANADIAN SYLLABICS WEST-CREE CWAA	[35AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149F, 0x0021 };
    uint32_t const ces[9] = { 0x35AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_393)
{
    // 149F 003F;	
    // (ᒟ) CANADIAN SYLLABICS WEST-CREE CWAA	[35AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149F, 0x003F };
    uint32_t const ces[9] = { 0x35AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_394)
{
    // 149F 0061;	
    // (ᒟ) CANADIAN SYLLABICS WEST-CREE CWAA	[35AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149F, 0x0061 };
    uint32_t const ces[9] = { 0x35AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_395)
{
    // 149F 0041;	
    // (ᒟ) CANADIAN SYLLABICS WEST-CREE CWAA	[35AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x149F, 0x0041 };
    uint32_t const ces[9] = { 0x35AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_396)
{
    // 149F 0062;	
    // (ᒟ) CANADIAN SYLLABICS WEST-CREE CWAA	[35AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x149F, 0x0062 };
    uint32_t const ces[9] = { 0x35AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_397)
{
    // 14A0 0021;	
    // (ᒠ) CANADIAN SYLLABICS NASKAPI CWAA	[35AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A0, 0x0021 };
    uint32_t const ces[9] = { 0x35AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_398)
{
    // 14A0 003F;	
    // (ᒠ) CANADIAN SYLLABICS NASKAPI CWAA	[35AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A0, 0x003F };
    uint32_t const ces[9] = { 0x35AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_399)
{
    // 14A0 0061;	
    // (ᒠ) CANADIAN SYLLABICS NASKAPI CWAA	[35AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A0, 0x0061 };
    uint32_t const ces[9] = { 0x35AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_400)
{
    // 14A0 0041;	
    // (ᒠ) CANADIAN SYLLABICS NASKAPI CWAA	[35AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A0, 0x0041 };
    uint32_t const ces[9] = { 0x35AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_401)
{
    // 14A0 0062;	
    // (ᒠ) CANADIAN SYLLABICS NASKAPI CWAA	[35AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A0, 0x0062 };
    uint32_t const ces[9] = { 0x35AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_402)
{
    // 14A1 0021;	
    // (ᒡ) CANADIAN SYLLABICS C	[35B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A1, 0x0021 };
    uint32_t const ces[9] = { 0x35B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_403)
{
    // 14A1 003F;	
    // (ᒡ) CANADIAN SYLLABICS C	[35B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A1, 0x003F };
    uint32_t const ces[9] = { 0x35B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_404)
{
    // 14A1 0061;	
    // (ᒡ) CANADIAN SYLLABICS C	[35B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A1, 0x0061 };
    uint32_t const ces[9] = { 0x35B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_405)
{
    // 14A1 0041;	
    // (ᒡ) CANADIAN SYLLABICS C	[35B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A1, 0x0041 };
    uint32_t const ces[9] = { 0x35B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_406)
{
    // 14A1 0062;	
    // (ᒡ) CANADIAN SYLLABICS C	[35B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A1, 0x0062 };
    uint32_t const ces[9] = { 0x35B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_407)
{
    // 14A2 0021;	
    // (ᒢ) CANADIAN SYLLABICS SAYISI TH	[35B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A2, 0x0021 };
    uint32_t const ces[9] = { 0x35B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_408)
{
    // 14A2 003F;	
    // (ᒢ) CANADIAN SYLLABICS SAYISI TH	[35B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A2, 0x003F };
    uint32_t const ces[9] = { 0x35B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_409)
{
    // 14A2 0061;	
    // (ᒢ) CANADIAN SYLLABICS SAYISI TH	[35B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A2, 0x0061 };
    uint32_t const ces[9] = { 0x35B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_410)
{
    // 14A2 0041;	
    // (ᒢ) CANADIAN SYLLABICS SAYISI TH	[35B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A2, 0x0041 };
    uint32_t const ces[9] = { 0x35B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_411)
{
    // 14A2 0062;	
    // (ᒢ) CANADIAN SYLLABICS SAYISI TH	[35B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A2, 0x0062 };
    uint32_t const ces[9] = { 0x35B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_412)
{
    // 14A3 0021;	
    // (ᒣ) CANADIAN SYLLABICS ME	[35B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A3, 0x0021 };
    uint32_t const ces[9] = { 0x35B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_413)
{
    // 14A3 003F;	
    // (ᒣ) CANADIAN SYLLABICS ME	[35B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A3, 0x003F };
    uint32_t const ces[9] = { 0x35B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_414)
{
    // 14A3 0061;	
    // (ᒣ) CANADIAN SYLLABICS ME	[35B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A3, 0x0061 };
    uint32_t const ces[9] = { 0x35B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_415)
{
    // 14A3 0041;	
    // (ᒣ) CANADIAN SYLLABICS ME	[35B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A3, 0x0041 };
    uint32_t const ces[9] = { 0x35B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_416)
{
    // 14A3 0062;	
    // (ᒣ) CANADIAN SYLLABICS ME	[35B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A3, 0x0062 };
    uint32_t const ces[9] = { 0x35B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_417)
{
    // 14A4 0021;	
    // (ᒤ) CANADIAN SYLLABICS MAAI	[35B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A4, 0x0021 };
    uint32_t const ces[9] = { 0x35B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_418)
{
    // 14A4 003F;	
    // (ᒤ) CANADIAN SYLLABICS MAAI	[35B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A4, 0x003F };
    uint32_t const ces[9] = { 0x35B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_419)
{
    // 14A4 0061;	
    // (ᒤ) CANADIAN SYLLABICS MAAI	[35B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A4, 0x0061 };
    uint32_t const ces[9] = { 0x35B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_420)
{
    // 14A4 0041;	
    // (ᒤ) CANADIAN SYLLABICS MAAI	[35B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A4, 0x0041 };
    uint32_t const ces[9] = { 0x35B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_421)
{
    // 14A4 0062;	
    // (ᒤ) CANADIAN SYLLABICS MAAI	[35B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A4, 0x0062 };
    uint32_t const ces[9] = { 0x35B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_422)
{
    // 14A5 0021;	
    // (ᒥ) CANADIAN SYLLABICS MI	[35B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A5, 0x0021 };
    uint32_t const ces[9] = { 0x35B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_423)
{
    // 14A5 003F;	
    // (ᒥ) CANADIAN SYLLABICS MI	[35B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A5, 0x003F };
    uint32_t const ces[9] = { 0x35B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_424)
{
    // 14A5 0061;	
    // (ᒥ) CANADIAN SYLLABICS MI	[35B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A5, 0x0061 };
    uint32_t const ces[9] = { 0x35B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_425)
{
    // 14A5 0041;	
    // (ᒥ) CANADIAN SYLLABICS MI	[35B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A5, 0x0041 };
    uint32_t const ces[9] = { 0x35B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_426)
{
    // 14A5 0062;	
    // (ᒥ) CANADIAN SYLLABICS MI	[35B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A5, 0x0062 };
    uint32_t const ces[9] = { 0x35B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_427)
{
    // 14A6 0021;	
    // (ᒦ) CANADIAN SYLLABICS MII	[35B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A6, 0x0021 };
    uint32_t const ces[9] = { 0x35B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_428)
{
    // 14A6 003F;	
    // (ᒦ) CANADIAN SYLLABICS MII	[35B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A6, 0x003F };
    uint32_t const ces[9] = { 0x35B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_429)
{
    // 14A6 0061;	
    // (ᒦ) CANADIAN SYLLABICS MII	[35B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A6, 0x0061 };
    uint32_t const ces[9] = { 0x35B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_430)
{
    // 14A6 0041;	
    // (ᒦ) CANADIAN SYLLABICS MII	[35B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A6, 0x0041 };
    uint32_t const ces[9] = { 0x35B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_431)
{
    // 14A6 0062;	
    // (ᒦ) CANADIAN SYLLABICS MII	[35B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A6, 0x0062 };
    uint32_t const ces[9] = { 0x35B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_432)
{
    // 14A7 0021;	
    // (ᒧ) CANADIAN SYLLABICS MO	[35B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A7, 0x0021 };
    uint32_t const ces[9] = { 0x35B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_433)
{
    // 14A7 003F;	
    // (ᒧ) CANADIAN SYLLABICS MO	[35B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A7, 0x003F };
    uint32_t const ces[9] = { 0x35B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_434)
{
    // 14A7 0061;	
    // (ᒧ) CANADIAN SYLLABICS MO	[35B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A7, 0x0061 };
    uint32_t const ces[9] = { 0x35B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_435)
{
    // 14A7 0041;	
    // (ᒧ) CANADIAN SYLLABICS MO	[35B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A7, 0x0041 };
    uint32_t const ces[9] = { 0x35B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_436)
{
    // 14A7 0062;	
    // (ᒧ) CANADIAN SYLLABICS MO	[35B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A7, 0x0062 };
    uint32_t const ces[9] = { 0x35B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_437)
{
    // 14A8 0021;	
    // (ᒨ) CANADIAN SYLLABICS MOO	[35B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A8, 0x0021 };
    uint32_t const ces[9] = { 0x35B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_438)
{
    // 14A8 003F;	
    // (ᒨ) CANADIAN SYLLABICS MOO	[35B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A8, 0x003F };
    uint32_t const ces[9] = { 0x35B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_439)
{
    // 14A8 0061;	
    // (ᒨ) CANADIAN SYLLABICS MOO	[35B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A8, 0x0061 };
    uint32_t const ces[9] = { 0x35B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_440)
{
    // 14A8 0041;	
    // (ᒨ) CANADIAN SYLLABICS MOO	[35B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A8, 0x0041 };
    uint32_t const ces[9] = { 0x35B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_441)
{
    // 14A8 0062;	
    // (ᒨ) CANADIAN SYLLABICS MOO	[35B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A8, 0x0062 };
    uint32_t const ces[9] = { 0x35B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_442)
{
    // 14A9 0021;	
    // (ᒩ) CANADIAN SYLLABICS Y-CREE MOO	[35B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A9, 0x0021 };
    uint32_t const ces[9] = { 0x35B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_443)
{
    // 14A9 003F;	
    // (ᒩ) CANADIAN SYLLABICS Y-CREE MOO	[35B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A9, 0x003F };
    uint32_t const ces[9] = { 0x35B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_444)
{
    // 14A9 0061;	
    // (ᒩ) CANADIAN SYLLABICS Y-CREE MOO	[35B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A9, 0x0061 };
    uint32_t const ces[9] = { 0x35B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_445)
{
    // 14A9 0041;	
    // (ᒩ) CANADIAN SYLLABICS Y-CREE MOO	[35B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14A9, 0x0041 };
    uint32_t const ces[9] = { 0x35B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_446)
{
    // 14A9 0062;	
    // (ᒩ) CANADIAN SYLLABICS Y-CREE MOO	[35B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14A9, 0x0062 };
    uint32_t const ces[9] = { 0x35B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_447)
{
    // 14AA 0021;	
    // (ᒪ) CANADIAN SYLLABICS MA	[35B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AA, 0x0021 };
    uint32_t const ces[9] = { 0x35B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_448)
{
    // 14AA 003F;	
    // (ᒪ) CANADIAN SYLLABICS MA	[35B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AA, 0x003F };
    uint32_t const ces[9] = { 0x35B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_449)
{
    // 14AA 0061;	
    // (ᒪ) CANADIAN SYLLABICS MA	[35B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AA, 0x0061 };
    uint32_t const ces[9] = { 0x35B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_450)
{
    // 14AA 0041;	
    // (ᒪ) CANADIAN SYLLABICS MA	[35B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AA, 0x0041 };
    uint32_t const ces[9] = { 0x35B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_451)
{
    // 14AA 0062;	
    // (ᒪ) CANADIAN SYLLABICS MA	[35B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AA, 0x0062 };
    uint32_t const ces[9] = { 0x35B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_452)
{
    // 14AB 0021;	
    // (ᒫ) CANADIAN SYLLABICS MAA	[35BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AB, 0x0021 };
    uint32_t const ces[9] = { 0x35BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_453)
{
    // 14AB 003F;	
    // (ᒫ) CANADIAN SYLLABICS MAA	[35BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AB, 0x003F };
    uint32_t const ces[9] = { 0x35BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_454)
{
    // 14AB 0061;	
    // (ᒫ) CANADIAN SYLLABICS MAA	[35BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AB, 0x0061 };
    uint32_t const ces[9] = { 0x35BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_455)
{
    // 14AB 0041;	
    // (ᒫ) CANADIAN SYLLABICS MAA	[35BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AB, 0x0041 };
    uint32_t const ces[9] = { 0x35BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_456)
{
    // 14AB 0062;	
    // (ᒫ) CANADIAN SYLLABICS MAA	[35BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AB, 0x0062 };
    uint32_t const ces[9] = { 0x35BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_457)
{
    // 14AC 0021;	
    // (ᒬ) CANADIAN SYLLABICS MWE	[35BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AC, 0x0021 };
    uint32_t const ces[9] = { 0x35BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_458)
{
    // 14AC 003F;	
    // (ᒬ) CANADIAN SYLLABICS MWE	[35BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AC, 0x003F };
    uint32_t const ces[9] = { 0x35BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_459)
{
    // 14AC 0061;	
    // (ᒬ) CANADIAN SYLLABICS MWE	[35BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AC, 0x0061 };
    uint32_t const ces[9] = { 0x35BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_460)
{
    // 14AC 0041;	
    // (ᒬ) CANADIAN SYLLABICS MWE	[35BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AC, 0x0041 };
    uint32_t const ces[9] = { 0x35BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_461)
{
    // 14AC 0062;	
    // (ᒬ) CANADIAN SYLLABICS MWE	[35BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AC, 0x0062 };
    uint32_t const ces[9] = { 0x35BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_462)
{
    // 14AD 0021;	
    // (ᒭ) CANADIAN SYLLABICS WEST-CREE MWE	[35BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AD, 0x0021 };
    uint32_t const ces[9] = { 0x35BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_463)
{
    // 14AD 003F;	
    // (ᒭ) CANADIAN SYLLABICS WEST-CREE MWE	[35BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AD, 0x003F };
    uint32_t const ces[9] = { 0x35BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_464)
{
    // 14AD 0061;	
    // (ᒭ) CANADIAN SYLLABICS WEST-CREE MWE	[35BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AD, 0x0061 };
    uint32_t const ces[9] = { 0x35BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_465)
{
    // 14AD 0041;	
    // (ᒭ) CANADIAN SYLLABICS WEST-CREE MWE	[35BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AD, 0x0041 };
    uint32_t const ces[9] = { 0x35BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_466)
{
    // 14AD 0062;	
    // (ᒭ) CANADIAN SYLLABICS WEST-CREE MWE	[35BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AD, 0x0062 };
    uint32_t const ces[9] = { 0x35BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_467)
{
    // 14AE 0021;	
    // (ᒮ) CANADIAN SYLLABICS MWI	[35BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AE, 0x0021 };
    uint32_t const ces[9] = { 0x35BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_468)
{
    // 14AE 003F;	
    // (ᒮ) CANADIAN SYLLABICS MWI	[35BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AE, 0x003F };
    uint32_t const ces[9] = { 0x35BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_469)
{
    // 14AE 0061;	
    // (ᒮ) CANADIAN SYLLABICS MWI	[35BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AE, 0x0061 };
    uint32_t const ces[9] = { 0x35BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_470)
{
    // 14AE 0041;	
    // (ᒮ) CANADIAN SYLLABICS MWI	[35BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AE, 0x0041 };
    uint32_t const ces[9] = { 0x35BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_471)
{
    // 14AE 0062;	
    // (ᒮ) CANADIAN SYLLABICS MWI	[35BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AE, 0x0062 };
    uint32_t const ces[9] = { 0x35BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_472)
{
    // 14AF 0021;	
    // (ᒯ) CANADIAN SYLLABICS WEST-CREE MWI	[35BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AF, 0x0021 };
    uint32_t const ces[9] = { 0x35BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_473)
{
    // 14AF 003F;	
    // (ᒯ) CANADIAN SYLLABICS WEST-CREE MWI	[35BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AF, 0x003F };
    uint32_t const ces[9] = { 0x35BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_474)
{
    // 14AF 0061;	
    // (ᒯ) CANADIAN SYLLABICS WEST-CREE MWI	[35BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AF, 0x0061 };
    uint32_t const ces[9] = { 0x35BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_475)
{
    // 14AF 0041;	
    // (ᒯ) CANADIAN SYLLABICS WEST-CREE MWI	[35BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14AF, 0x0041 };
    uint32_t const ces[9] = { 0x35BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_476)
{
    // 14AF 0062;	
    // (ᒯ) CANADIAN SYLLABICS WEST-CREE MWI	[35BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14AF, 0x0062 };
    uint32_t const ces[9] = { 0x35BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_477)
{
    // 14B0 0021;	
    // (ᒰ) CANADIAN SYLLABICS MWII	[35BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B0, 0x0021 };
    uint32_t const ces[9] = { 0x35BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_478)
{
    // 14B0 003F;	
    // (ᒰ) CANADIAN SYLLABICS MWII	[35BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B0, 0x003F };
    uint32_t const ces[9] = { 0x35BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_479)
{
    // 14B0 0061;	
    // (ᒰ) CANADIAN SYLLABICS MWII	[35BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B0, 0x0061 };
    uint32_t const ces[9] = { 0x35BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_480)
{
    // 14B0 0041;	
    // (ᒰ) CANADIAN SYLLABICS MWII	[35BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14B0, 0x0041 };
    uint32_t const ces[9] = { 0x35BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_481)
{
    // 14B0 0062;	
    // (ᒰ) CANADIAN SYLLABICS MWII	[35BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B0, 0x0062 };
    uint32_t const ces[9] = { 0x35BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_482)
{
    // 14B1 0021;	
    // (ᒱ) CANADIAN SYLLABICS WEST-CREE MWII	[35C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B1, 0x0021 };
    uint32_t const ces[9] = { 0x35C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_483)
{
    // 14B1 003F;	
    // (ᒱ) CANADIAN SYLLABICS WEST-CREE MWII	[35C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B1, 0x003F };
    uint32_t const ces[9] = { 0x35C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_484)
{
    // 14B1 0061;	
    // (ᒱ) CANADIAN SYLLABICS WEST-CREE MWII	[35C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B1, 0x0061 };
    uint32_t const ces[9] = { 0x35C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_485)
{
    // 14B1 0041;	
    // (ᒱ) CANADIAN SYLLABICS WEST-CREE MWII	[35C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14B1, 0x0041 };
    uint32_t const ces[9] = { 0x35C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_486)
{
    // 14B1 0062;	
    // (ᒱ) CANADIAN SYLLABICS WEST-CREE MWII	[35C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B1, 0x0062 };
    uint32_t const ces[9] = { 0x35C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_487)
{
    // 14B2 0021;	
    // (ᒲ) CANADIAN SYLLABICS MWO	[35C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B2, 0x0021 };
    uint32_t const ces[9] = { 0x35C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_488)
{
    // 14B2 003F;	
    // (ᒲ) CANADIAN SYLLABICS MWO	[35C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B2, 0x003F };
    uint32_t const ces[9] = { 0x35C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_489)
{
    // 14B2 0061;	
    // (ᒲ) CANADIAN SYLLABICS MWO	[35C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B2, 0x0061 };
    uint32_t const ces[9] = { 0x35C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_490)
{
    // 14B2 0041;	
    // (ᒲ) CANADIAN SYLLABICS MWO	[35C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14B2, 0x0041 };
    uint32_t const ces[9] = { 0x35C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_491)
{
    // 14B2 0062;	
    // (ᒲ) CANADIAN SYLLABICS MWO	[35C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B2, 0x0062 };
    uint32_t const ces[9] = { 0x35C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_492)
{
    // 14B3 0021;	
    // (ᒳ) CANADIAN SYLLABICS WEST-CREE MWO	[35C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B3, 0x0021 };
    uint32_t const ces[9] = { 0x35C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_493)
{
    // 14B3 003F;	
    // (ᒳ) CANADIAN SYLLABICS WEST-CREE MWO	[35C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B3, 0x003F };
    uint32_t const ces[9] = { 0x35C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_494)
{
    // 14B3 0061;	
    // (ᒳ) CANADIAN SYLLABICS WEST-CREE MWO	[35C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B3, 0x0061 };
    uint32_t const ces[9] = { 0x35C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_495)
{
    // 14B3 0041;	
    // (ᒳ) CANADIAN SYLLABICS WEST-CREE MWO	[35C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x14B3, 0x0041 };
    uint32_t const ces[9] = { 0x35C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_496)
{
    // 14B3 0062;	
    // (ᒳ) CANADIAN SYLLABICS WEST-CREE MWO	[35C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B3, 0x0062 };
    uint32_t const ces[9] = { 0x35C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_497)
{
    // 14B4 0021;	
    // (ᒴ) CANADIAN SYLLABICS MWOO	[35C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B4, 0x0021 };
    uint32_t const ces[9] = { 0x35C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_498)
{
    // 14B4 003F;	
    // (ᒴ) CANADIAN SYLLABICS MWOO	[35C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B4, 0x003F };
    uint32_t const ces[9] = { 0x35C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_219_499)
{
    // 14B4 0061;	
    // (ᒴ) CANADIAN SYLLABICS MWOO	[35C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x14B4, 0x0061 };
    uint32_t const ces[9] = { 0x35C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

