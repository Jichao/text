// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_372_000)
{
    // 4579 003F;	
    // (䕹) CJK UNIFIED IDEOGRAPH-4579	[FB80 C579 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4579, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC579, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_001)
{
    // 4579 0061;	
    // (䕹) CJK UNIFIED IDEOGRAPH-4579	[FB80 C579 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4579, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_002)
{
    // 4579 0041;	
    // (䕹) CJK UNIFIED IDEOGRAPH-4579	[FB80 C579 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4579, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC579, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_003)
{
    // 4579 0062;	
    // (䕹) CJK UNIFIED IDEOGRAPH-4579	[FB80 C579 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4579, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC579, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_004)
{
    // 457A 0021;	
    // (䕺) CJK UNIFIED IDEOGRAPH-457A	[FB80 C57A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_005)
{
    // 457A 003F;	
    // (䕺) CJK UNIFIED IDEOGRAPH-457A	[FB80 C57A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_006)
{
    // 457A 0061;	
    // (䕺) CJK UNIFIED IDEOGRAPH-457A	[FB80 C57A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_007)
{
    // 457A 0041;	
    // (䕺) CJK UNIFIED IDEOGRAPH-457A	[FB80 C57A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_008)
{
    // 457A 0062;	
    // (䕺) CJK UNIFIED IDEOGRAPH-457A	[FB80 C57A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_009)
{
    // 457B 0021;	
    // (䕻) CJK UNIFIED IDEOGRAPH-457B	[FB80 C57B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_010)
{
    // 457B 003F;	
    // (䕻) CJK UNIFIED IDEOGRAPH-457B	[FB80 C57B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_011)
{
    // 457B 0061;	
    // (䕻) CJK UNIFIED IDEOGRAPH-457B	[FB80 C57B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_012)
{
    // 457B 0041;	
    // (䕻) CJK UNIFIED IDEOGRAPH-457B	[FB80 C57B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_013)
{
    // 457B 0062;	
    // (䕻) CJK UNIFIED IDEOGRAPH-457B	[FB80 C57B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_014)
{
    // 457C 0021;	
    // (䕼) CJK UNIFIED IDEOGRAPH-457C	[FB80 C57C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_015)
{
    // 457C 003F;	
    // (䕼) CJK UNIFIED IDEOGRAPH-457C	[FB80 C57C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_016)
{
    // 457C 0061;	
    // (䕼) CJK UNIFIED IDEOGRAPH-457C	[FB80 C57C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_017)
{
    // 457C 0041;	
    // (䕼) CJK UNIFIED IDEOGRAPH-457C	[FB80 C57C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_018)
{
    // 457C 0062;	
    // (䕼) CJK UNIFIED IDEOGRAPH-457C	[FB80 C57C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_019)
{
    // 457D 0021;	
    // (䕽) CJK UNIFIED IDEOGRAPH-457D	[FB80 C57D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_020)
{
    // 457D 003F;	
    // (䕽) CJK UNIFIED IDEOGRAPH-457D	[FB80 C57D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_021)
{
    // 457D 0061;	
    // (䕽) CJK UNIFIED IDEOGRAPH-457D	[FB80 C57D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_022)
{
    // 457D 0041;	
    // (䕽) CJK UNIFIED IDEOGRAPH-457D	[FB80 C57D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_023)
{
    // 457D 0062;	
    // (䕽) CJK UNIFIED IDEOGRAPH-457D	[FB80 C57D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_024)
{
    // 457E 0021;	
    // (䕾) CJK UNIFIED IDEOGRAPH-457E	[FB80 C57E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_025)
{
    // 457E 003F;	
    // (䕾) CJK UNIFIED IDEOGRAPH-457E	[FB80 C57E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_026)
{
    // 457E 0061;	
    // (䕾) CJK UNIFIED IDEOGRAPH-457E	[FB80 C57E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_027)
{
    // 457E 0041;	
    // (䕾) CJK UNIFIED IDEOGRAPH-457E	[FB80 C57E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_028)
{
    // 457E 0062;	
    // (䕾) CJK UNIFIED IDEOGRAPH-457E	[FB80 C57E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_029)
{
    // 457F 0021;	
    // (䕿) CJK UNIFIED IDEOGRAPH-457F	[FB80 C57F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC57F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_030)
{
    // 457F 003F;	
    // (䕿) CJK UNIFIED IDEOGRAPH-457F	[FB80 C57F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC57F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_031)
{
    // 457F 0061;	
    // (䕿) CJK UNIFIED IDEOGRAPH-457F	[FB80 C57F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC57F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_032)
{
    // 457F 0041;	
    // (䕿) CJK UNIFIED IDEOGRAPH-457F	[FB80 C57F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x457F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC57F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_033)
{
    // 457F 0062;	
    // (䕿) CJK UNIFIED IDEOGRAPH-457F	[FB80 C57F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x457F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC57F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_034)
{
    // 4580 0021;	
    // (䖀) CJK UNIFIED IDEOGRAPH-4580	[FB80 C580 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4580, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC580, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_035)
{
    // 4580 003F;	
    // (䖀) CJK UNIFIED IDEOGRAPH-4580	[FB80 C580 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4580, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC580, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_036)
{
    // 4580 0061;	
    // (䖀) CJK UNIFIED IDEOGRAPH-4580	[FB80 C580 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4580, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_037)
{
    // 4580 0041;	
    // (䖀) CJK UNIFIED IDEOGRAPH-4580	[FB80 C580 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4580, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC580, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_038)
{
    // 4580 0062;	
    // (䖀) CJK UNIFIED IDEOGRAPH-4580	[FB80 C580 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4580, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC580, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_039)
{
    // 4581 0021;	
    // (䖁) CJK UNIFIED IDEOGRAPH-4581	[FB80 C581 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4581, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC581, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_040)
{
    // 4581 003F;	
    // (䖁) CJK UNIFIED IDEOGRAPH-4581	[FB80 C581 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4581, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC581, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_041)
{
    // 4581 0061;	
    // (䖁) CJK UNIFIED IDEOGRAPH-4581	[FB80 C581 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4581, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_042)
{
    // 4581 0041;	
    // (䖁) CJK UNIFIED IDEOGRAPH-4581	[FB80 C581 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4581, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC581, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_043)
{
    // 4581 0062;	
    // (䖁) CJK UNIFIED IDEOGRAPH-4581	[FB80 C581 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4581, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC581, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_044)
{
    // 4582 0021;	
    // (䖂) CJK UNIFIED IDEOGRAPH-4582	[FB80 C582 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4582, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC582, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_045)
{
    // 4582 003F;	
    // (䖂) CJK UNIFIED IDEOGRAPH-4582	[FB80 C582 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4582, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC582, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_046)
{
    // 4582 0061;	
    // (䖂) CJK UNIFIED IDEOGRAPH-4582	[FB80 C582 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4582, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_047)
{
    // 4582 0041;	
    // (䖂) CJK UNIFIED IDEOGRAPH-4582	[FB80 C582 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4582, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC582, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_048)
{
    // 4582 0062;	
    // (䖂) CJK UNIFIED IDEOGRAPH-4582	[FB80 C582 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4582, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC582, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_049)
{
    // 4583 0021;	
    // (䖃) CJK UNIFIED IDEOGRAPH-4583	[FB80 C583 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4583, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC583, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_050)
{
    // 4583 003F;	
    // (䖃) CJK UNIFIED IDEOGRAPH-4583	[FB80 C583 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4583, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC583, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_051)
{
    // 4583 0061;	
    // (䖃) CJK UNIFIED IDEOGRAPH-4583	[FB80 C583 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4583, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_052)
{
    // 4583 0041;	
    // (䖃) CJK UNIFIED IDEOGRAPH-4583	[FB80 C583 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4583, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC583, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_053)
{
    // 4583 0062;	
    // (䖃) CJK UNIFIED IDEOGRAPH-4583	[FB80 C583 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4583, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC583, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_054)
{
    // 4584 0021;	
    // (䖄) CJK UNIFIED IDEOGRAPH-4584	[FB80 C584 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4584, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC584, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_055)
{
    // 4584 003F;	
    // (䖄) CJK UNIFIED IDEOGRAPH-4584	[FB80 C584 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4584, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC584, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_056)
{
    // 4584 0061;	
    // (䖄) CJK UNIFIED IDEOGRAPH-4584	[FB80 C584 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4584, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_057)
{
    // 4584 0041;	
    // (䖄) CJK UNIFIED IDEOGRAPH-4584	[FB80 C584 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4584, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC584, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_058)
{
    // 4584 0062;	
    // (䖄) CJK UNIFIED IDEOGRAPH-4584	[FB80 C584 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4584, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC584, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_059)
{
    // 4585 0021;	
    // (䖅) CJK UNIFIED IDEOGRAPH-4585	[FB80 C585 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4585, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC585, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_060)
{
    // 4585 003F;	
    // (䖅) CJK UNIFIED IDEOGRAPH-4585	[FB80 C585 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4585, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC585, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_061)
{
    // 4585 0061;	
    // (䖅) CJK UNIFIED IDEOGRAPH-4585	[FB80 C585 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4585, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_062)
{
    // 4585 0041;	
    // (䖅) CJK UNIFIED IDEOGRAPH-4585	[FB80 C585 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4585, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC585, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_063)
{
    // 4585 0062;	
    // (䖅) CJK UNIFIED IDEOGRAPH-4585	[FB80 C585 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4585, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC585, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_064)
{
    // 4586 0021;	
    // (䖆) CJK UNIFIED IDEOGRAPH-4586	[FB80 C586 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4586, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC586, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_065)
{
    // 4586 003F;	
    // (䖆) CJK UNIFIED IDEOGRAPH-4586	[FB80 C586 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4586, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC586, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_066)
{
    // 4586 0061;	
    // (䖆) CJK UNIFIED IDEOGRAPH-4586	[FB80 C586 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4586, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_067)
{
    // 4586 0041;	
    // (䖆) CJK UNIFIED IDEOGRAPH-4586	[FB80 C586 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4586, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC586, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_068)
{
    // 4586 0062;	
    // (䖆) CJK UNIFIED IDEOGRAPH-4586	[FB80 C586 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4586, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC586, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_069)
{
    // 4587 0021;	
    // (䖇) CJK UNIFIED IDEOGRAPH-4587	[FB80 C587 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4587, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC587, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_070)
{
    // 4587 003F;	
    // (䖇) CJK UNIFIED IDEOGRAPH-4587	[FB80 C587 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4587, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC587, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_071)
{
    // 4587 0061;	
    // (䖇) CJK UNIFIED IDEOGRAPH-4587	[FB80 C587 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4587, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_072)
{
    // 4587 0041;	
    // (䖇) CJK UNIFIED IDEOGRAPH-4587	[FB80 C587 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4587, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC587, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_073)
{
    // 4587 0062;	
    // (䖇) CJK UNIFIED IDEOGRAPH-4587	[FB80 C587 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4587, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC587, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_074)
{
    // 4588 0021;	
    // (䖈) CJK UNIFIED IDEOGRAPH-4588	[FB80 C588 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4588, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC588, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_075)
{
    // 4588 003F;	
    // (䖈) CJK UNIFIED IDEOGRAPH-4588	[FB80 C588 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4588, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC588, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_076)
{
    // 4588 0061;	
    // (䖈) CJK UNIFIED IDEOGRAPH-4588	[FB80 C588 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4588, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_077)
{
    // 4588 0041;	
    // (䖈) CJK UNIFIED IDEOGRAPH-4588	[FB80 C588 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4588, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC588, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_078)
{
    // 4588 0062;	
    // (䖈) CJK UNIFIED IDEOGRAPH-4588	[FB80 C588 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4588, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC588, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_079)
{
    // 4589 0021;	
    // (䖉) CJK UNIFIED IDEOGRAPH-4589	[FB80 C589 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4589, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC589, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_080)
{
    // 4589 003F;	
    // (䖉) CJK UNIFIED IDEOGRAPH-4589	[FB80 C589 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4589, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC589, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_081)
{
    // 4589 0061;	
    // (䖉) CJK UNIFIED IDEOGRAPH-4589	[FB80 C589 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4589, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_082)
{
    // 4589 0041;	
    // (䖉) CJK UNIFIED IDEOGRAPH-4589	[FB80 C589 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4589, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC589, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_083)
{
    // 4589 0062;	
    // (䖉) CJK UNIFIED IDEOGRAPH-4589	[FB80 C589 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4589, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC589, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_084)
{
    // 458A 0021;	
    // (䖊) CJK UNIFIED IDEOGRAPH-458A	[FB80 C58A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_085)
{
    // 458A 003F;	
    // (䖊) CJK UNIFIED IDEOGRAPH-458A	[FB80 C58A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_086)
{
    // 458A 0061;	
    // (䖊) CJK UNIFIED IDEOGRAPH-458A	[FB80 C58A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_087)
{
    // 458A 0041;	
    // (䖊) CJK UNIFIED IDEOGRAPH-458A	[FB80 C58A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_088)
{
    // 458A 0062;	
    // (䖊) CJK UNIFIED IDEOGRAPH-458A	[FB80 C58A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_089)
{
    // 458B 0021;	
    // (䖋) CJK UNIFIED IDEOGRAPH-458B	[FB80 C58B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_090)
{
    // 458B 003F;	
    // (䖋) CJK UNIFIED IDEOGRAPH-458B	[FB80 C58B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_091)
{
    // 458B 0061;	
    // (䖋) CJK UNIFIED IDEOGRAPH-458B	[FB80 C58B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_092)
{
    // 458B 0041;	
    // (䖋) CJK UNIFIED IDEOGRAPH-458B	[FB80 C58B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_093)
{
    // 458B 0062;	
    // (䖋) CJK UNIFIED IDEOGRAPH-458B	[FB80 C58B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_094)
{
    // 458C 0021;	
    // (䖌) CJK UNIFIED IDEOGRAPH-458C	[FB80 C58C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_095)
{
    // 458C 003F;	
    // (䖌) CJK UNIFIED IDEOGRAPH-458C	[FB80 C58C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_096)
{
    // 458C 0061;	
    // (䖌) CJK UNIFIED IDEOGRAPH-458C	[FB80 C58C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_097)
{
    // 458C 0041;	
    // (䖌) CJK UNIFIED IDEOGRAPH-458C	[FB80 C58C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_098)
{
    // 458C 0062;	
    // (䖌) CJK UNIFIED IDEOGRAPH-458C	[FB80 C58C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_099)
{
    // 458D 0021;	
    // (䖍) CJK UNIFIED IDEOGRAPH-458D	[FB80 C58D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_100)
{
    // 458D 003F;	
    // (䖍) CJK UNIFIED IDEOGRAPH-458D	[FB80 C58D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_101)
{
    // 458D 0061;	
    // (䖍) CJK UNIFIED IDEOGRAPH-458D	[FB80 C58D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_102)
{
    // 458D 0041;	
    // (䖍) CJK UNIFIED IDEOGRAPH-458D	[FB80 C58D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_103)
{
    // 458D 0062;	
    // (䖍) CJK UNIFIED IDEOGRAPH-458D	[FB80 C58D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_104)
{
    // 458E 0021;	
    // (䖎) CJK UNIFIED IDEOGRAPH-458E	[FB80 C58E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_105)
{
    // 458E 003F;	
    // (䖎) CJK UNIFIED IDEOGRAPH-458E	[FB80 C58E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_106)
{
    // 458E 0061;	
    // (䖎) CJK UNIFIED IDEOGRAPH-458E	[FB80 C58E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_107)
{
    // 458E 0041;	
    // (䖎) CJK UNIFIED IDEOGRAPH-458E	[FB80 C58E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_108)
{
    // 458E 0062;	
    // (䖎) CJK UNIFIED IDEOGRAPH-458E	[FB80 C58E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_109)
{
    // 458F 0021;	
    // (䖏) CJK UNIFIED IDEOGRAPH-458F	[FB80 C58F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC58F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_110)
{
    // 458F 003F;	
    // (䖏) CJK UNIFIED IDEOGRAPH-458F	[FB80 C58F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC58F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_111)
{
    // 458F 0061;	
    // (䖏) CJK UNIFIED IDEOGRAPH-458F	[FB80 C58F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC58F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_112)
{
    // 458F 0041;	
    // (䖏) CJK UNIFIED IDEOGRAPH-458F	[FB80 C58F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x458F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC58F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_113)
{
    // 458F 0062;	
    // (䖏) CJK UNIFIED IDEOGRAPH-458F	[FB80 C58F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x458F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC58F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_114)
{
    // 4590 0021;	
    // (䖐) CJK UNIFIED IDEOGRAPH-4590	[FB80 C590 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4590, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC590, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_115)
{
    // 4590 003F;	
    // (䖐) CJK UNIFIED IDEOGRAPH-4590	[FB80 C590 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4590, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC590, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_116)
{
    // 4590 0061;	
    // (䖐) CJK UNIFIED IDEOGRAPH-4590	[FB80 C590 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4590, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_117)
{
    // 4590 0041;	
    // (䖐) CJK UNIFIED IDEOGRAPH-4590	[FB80 C590 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4590, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC590, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_118)
{
    // 4590 0062;	
    // (䖐) CJK UNIFIED IDEOGRAPH-4590	[FB80 C590 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4590, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC590, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_119)
{
    // 4591 0021;	
    // (䖑) CJK UNIFIED IDEOGRAPH-4591	[FB80 C591 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4591, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC591, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_120)
{
    // 4591 003F;	
    // (䖑) CJK UNIFIED IDEOGRAPH-4591	[FB80 C591 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4591, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC591, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_121)
{
    // 4591 0061;	
    // (䖑) CJK UNIFIED IDEOGRAPH-4591	[FB80 C591 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4591, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_122)
{
    // 4591 0041;	
    // (䖑) CJK UNIFIED IDEOGRAPH-4591	[FB80 C591 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4591, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC591, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_123)
{
    // 4591 0062;	
    // (䖑) CJK UNIFIED IDEOGRAPH-4591	[FB80 C591 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4591, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC591, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_124)
{
    // 4592 0021;	
    // (䖒) CJK UNIFIED IDEOGRAPH-4592	[FB80 C592 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4592, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC592, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_125)
{
    // 4592 003F;	
    // (䖒) CJK UNIFIED IDEOGRAPH-4592	[FB80 C592 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4592, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC592, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_126)
{
    // 4592 0061;	
    // (䖒) CJK UNIFIED IDEOGRAPH-4592	[FB80 C592 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4592, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_127)
{
    // 4592 0041;	
    // (䖒) CJK UNIFIED IDEOGRAPH-4592	[FB80 C592 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4592, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC592, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_128)
{
    // 4592 0062;	
    // (䖒) CJK UNIFIED IDEOGRAPH-4592	[FB80 C592 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4592, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC592, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_129)
{
    // 4593 0021;	
    // (䖓) CJK UNIFIED IDEOGRAPH-4593	[FB80 C593 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4593, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC593, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_130)
{
    // 4593 003F;	
    // (䖓) CJK UNIFIED IDEOGRAPH-4593	[FB80 C593 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4593, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC593, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_131)
{
    // 4593 0061;	
    // (䖓) CJK UNIFIED IDEOGRAPH-4593	[FB80 C593 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4593, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_132)
{
    // 4593 0041;	
    // (䖓) CJK UNIFIED IDEOGRAPH-4593	[FB80 C593 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4593, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC593, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_133)
{
    // 4593 0062;	
    // (䖓) CJK UNIFIED IDEOGRAPH-4593	[FB80 C593 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4593, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC593, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_134)
{
    // 4594 0021;	
    // (䖔) CJK UNIFIED IDEOGRAPH-4594	[FB80 C594 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4594, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC594, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_135)
{
    // 4594 003F;	
    // (䖔) CJK UNIFIED IDEOGRAPH-4594	[FB80 C594 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4594, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC594, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_136)
{
    // 4594 0061;	
    // (䖔) CJK UNIFIED IDEOGRAPH-4594	[FB80 C594 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4594, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_137)
{
    // 4594 0041;	
    // (䖔) CJK UNIFIED IDEOGRAPH-4594	[FB80 C594 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4594, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC594, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_138)
{
    // 4594 0062;	
    // (䖔) CJK UNIFIED IDEOGRAPH-4594	[FB80 C594 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4594, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC594, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_139)
{
    // 4595 0021;	
    // (䖕) CJK UNIFIED IDEOGRAPH-4595	[FB80 C595 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4595, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC595, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_140)
{
    // 4595 003F;	
    // (䖕) CJK UNIFIED IDEOGRAPH-4595	[FB80 C595 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4595, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC595, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_141)
{
    // 4595 0061;	
    // (䖕) CJK UNIFIED IDEOGRAPH-4595	[FB80 C595 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4595, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_142)
{
    // 4595 0041;	
    // (䖕) CJK UNIFIED IDEOGRAPH-4595	[FB80 C595 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4595, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC595, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_143)
{
    // 4595 0062;	
    // (䖕) CJK UNIFIED IDEOGRAPH-4595	[FB80 C595 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4595, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC595, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_144)
{
    // 4596 0021;	
    // (䖖) CJK UNIFIED IDEOGRAPH-4596	[FB80 C596 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4596, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC596, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_145)
{
    // 4596 003F;	
    // (䖖) CJK UNIFIED IDEOGRAPH-4596	[FB80 C596 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4596, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC596, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_146)
{
    // 4596 0061;	
    // (䖖) CJK UNIFIED IDEOGRAPH-4596	[FB80 C596 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4596, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_147)
{
    // 4596 0041;	
    // (䖖) CJK UNIFIED IDEOGRAPH-4596	[FB80 C596 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4596, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC596, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_148)
{
    // 4596 0062;	
    // (䖖) CJK UNIFIED IDEOGRAPH-4596	[FB80 C596 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4596, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC596, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_149)
{
    // 4597 0021;	
    // (䖗) CJK UNIFIED IDEOGRAPH-4597	[FB80 C597 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4597, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC597, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_150)
{
    // 4597 003F;	
    // (䖗) CJK UNIFIED IDEOGRAPH-4597	[FB80 C597 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4597, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC597, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_151)
{
    // 4597 0061;	
    // (䖗) CJK UNIFIED IDEOGRAPH-4597	[FB80 C597 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4597, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_152)
{
    // 4597 0041;	
    // (䖗) CJK UNIFIED IDEOGRAPH-4597	[FB80 C597 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4597, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC597, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_153)
{
    // 4597 0062;	
    // (䖗) CJK UNIFIED IDEOGRAPH-4597	[FB80 C597 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4597, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC597, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_154)
{
    // 4598 0021;	
    // (䖘) CJK UNIFIED IDEOGRAPH-4598	[FB80 C598 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4598, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC598, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_155)
{
    // 4598 003F;	
    // (䖘) CJK UNIFIED IDEOGRAPH-4598	[FB80 C598 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4598, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC598, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_156)
{
    // 4598 0061;	
    // (䖘) CJK UNIFIED IDEOGRAPH-4598	[FB80 C598 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4598, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_157)
{
    // 4598 0041;	
    // (䖘) CJK UNIFIED IDEOGRAPH-4598	[FB80 C598 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4598, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC598, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_158)
{
    // 4598 0062;	
    // (䖘) CJK UNIFIED IDEOGRAPH-4598	[FB80 C598 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4598, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC598, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_159)
{
    // 4599 0021;	
    // (䖙) CJK UNIFIED IDEOGRAPH-4599	[FB80 C599 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4599, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC599, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_160)
{
    // 4599 003F;	
    // (䖙) CJK UNIFIED IDEOGRAPH-4599	[FB80 C599 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4599, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC599, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_161)
{
    // 4599 0061;	
    // (䖙) CJK UNIFIED IDEOGRAPH-4599	[FB80 C599 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4599, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_162)
{
    // 4599 0041;	
    // (䖙) CJK UNIFIED IDEOGRAPH-4599	[FB80 C599 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4599, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC599, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_163)
{
    // 4599 0062;	
    // (䖙) CJK UNIFIED IDEOGRAPH-4599	[FB80 C599 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4599, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC599, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_164)
{
    // 459A 0021;	
    // (䖚) CJK UNIFIED IDEOGRAPH-459A	[FB80 C59A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_165)
{
    // 459A 003F;	
    // (䖚) CJK UNIFIED IDEOGRAPH-459A	[FB80 C59A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_166)
{
    // 459A 0061;	
    // (䖚) CJK UNIFIED IDEOGRAPH-459A	[FB80 C59A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_167)
{
    // 459A 0041;	
    // (䖚) CJK UNIFIED IDEOGRAPH-459A	[FB80 C59A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_168)
{
    // 459A 0062;	
    // (䖚) CJK UNIFIED IDEOGRAPH-459A	[FB80 C59A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_169)
{
    // 459B 0021;	
    // (䖛) CJK UNIFIED IDEOGRAPH-459B	[FB80 C59B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_170)
{
    // 459B 003F;	
    // (䖛) CJK UNIFIED IDEOGRAPH-459B	[FB80 C59B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_171)
{
    // 459B 0061;	
    // (䖛) CJK UNIFIED IDEOGRAPH-459B	[FB80 C59B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_172)
{
    // 459B 0041;	
    // (䖛) CJK UNIFIED IDEOGRAPH-459B	[FB80 C59B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_173)
{
    // 459B 0062;	
    // (䖛) CJK UNIFIED IDEOGRAPH-459B	[FB80 C59B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_174)
{
    // 459C 0021;	
    // (䖜) CJK UNIFIED IDEOGRAPH-459C	[FB80 C59C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_175)
{
    // 459C 003F;	
    // (䖜) CJK UNIFIED IDEOGRAPH-459C	[FB80 C59C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_176)
{
    // 459C 0061;	
    // (䖜) CJK UNIFIED IDEOGRAPH-459C	[FB80 C59C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_177)
{
    // 459C 0041;	
    // (䖜) CJK UNIFIED IDEOGRAPH-459C	[FB80 C59C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_178)
{
    // 459C 0062;	
    // (䖜) CJK UNIFIED IDEOGRAPH-459C	[FB80 C59C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_179)
{
    // 459D 0021;	
    // (䖝) CJK UNIFIED IDEOGRAPH-459D	[FB80 C59D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_180)
{
    // 459D 003F;	
    // (䖝) CJK UNIFIED IDEOGRAPH-459D	[FB80 C59D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_181)
{
    // 459D 0061;	
    // (䖝) CJK UNIFIED IDEOGRAPH-459D	[FB80 C59D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_182)
{
    // 459D 0041;	
    // (䖝) CJK UNIFIED IDEOGRAPH-459D	[FB80 C59D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_183)
{
    // 459D 0062;	
    // (䖝) CJK UNIFIED IDEOGRAPH-459D	[FB80 C59D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_184)
{
    // 459E 0021;	
    // (䖞) CJK UNIFIED IDEOGRAPH-459E	[FB80 C59E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_185)
{
    // 459E 003F;	
    // (䖞) CJK UNIFIED IDEOGRAPH-459E	[FB80 C59E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_186)
{
    // 459E 0061;	
    // (䖞) CJK UNIFIED IDEOGRAPH-459E	[FB80 C59E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_187)
{
    // 459E 0041;	
    // (䖞) CJK UNIFIED IDEOGRAPH-459E	[FB80 C59E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_188)
{
    // 459E 0062;	
    // (䖞) CJK UNIFIED IDEOGRAPH-459E	[FB80 C59E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_189)
{
    // 459F 0021;	
    // (䖟) CJK UNIFIED IDEOGRAPH-459F	[FB80 C59F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC59F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_190)
{
    // 459F 003F;	
    // (䖟) CJK UNIFIED IDEOGRAPH-459F	[FB80 C59F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC59F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_191)
{
    // 459F 0061;	
    // (䖟) CJK UNIFIED IDEOGRAPH-459F	[FB80 C59F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC59F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_192)
{
    // 459F 0041;	
    // (䖟) CJK UNIFIED IDEOGRAPH-459F	[FB80 C59F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x459F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC59F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_193)
{
    // 459F 0062;	
    // (䖟) CJK UNIFIED IDEOGRAPH-459F	[FB80 C59F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x459F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC59F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_194)
{
    // 45A0 0021;	
    // (䖠) CJK UNIFIED IDEOGRAPH-45A0	[FB80 C5A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_195)
{
    // 45A0 003F;	
    // (䖠) CJK UNIFIED IDEOGRAPH-45A0	[FB80 C5A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_196)
{
    // 45A0 0061;	
    // (䖠) CJK UNIFIED IDEOGRAPH-45A0	[FB80 C5A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_197)
{
    // 45A0 0041;	
    // (䖠) CJK UNIFIED IDEOGRAPH-45A0	[FB80 C5A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_198)
{
    // 45A0 0062;	
    // (䖠) CJK UNIFIED IDEOGRAPH-45A0	[FB80 C5A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_199)
{
    // 45A1 0021;	
    // (䖡) CJK UNIFIED IDEOGRAPH-45A1	[FB80 C5A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_200)
{
    // 45A1 003F;	
    // (䖡) CJK UNIFIED IDEOGRAPH-45A1	[FB80 C5A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_201)
{
    // 45A1 0061;	
    // (䖡) CJK UNIFIED IDEOGRAPH-45A1	[FB80 C5A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_202)
{
    // 45A1 0041;	
    // (䖡) CJK UNIFIED IDEOGRAPH-45A1	[FB80 C5A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_203)
{
    // 45A1 0062;	
    // (䖡) CJK UNIFIED IDEOGRAPH-45A1	[FB80 C5A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_204)
{
    // 45A2 0021;	
    // (䖢) CJK UNIFIED IDEOGRAPH-45A2	[FB80 C5A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_205)
{
    // 45A2 003F;	
    // (䖢) CJK UNIFIED IDEOGRAPH-45A2	[FB80 C5A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_206)
{
    // 45A2 0061;	
    // (䖢) CJK UNIFIED IDEOGRAPH-45A2	[FB80 C5A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_207)
{
    // 45A2 0041;	
    // (䖢) CJK UNIFIED IDEOGRAPH-45A2	[FB80 C5A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_208)
{
    // 45A2 0062;	
    // (䖢) CJK UNIFIED IDEOGRAPH-45A2	[FB80 C5A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_209)
{
    // 45A3 0021;	
    // (䖣) CJK UNIFIED IDEOGRAPH-45A3	[FB80 C5A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_210)
{
    // 45A3 003F;	
    // (䖣) CJK UNIFIED IDEOGRAPH-45A3	[FB80 C5A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_211)
{
    // 45A3 0061;	
    // (䖣) CJK UNIFIED IDEOGRAPH-45A3	[FB80 C5A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_212)
{
    // 45A3 0041;	
    // (䖣) CJK UNIFIED IDEOGRAPH-45A3	[FB80 C5A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_213)
{
    // 45A3 0062;	
    // (䖣) CJK UNIFIED IDEOGRAPH-45A3	[FB80 C5A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_214)
{
    // 45A4 0021;	
    // (䖤) CJK UNIFIED IDEOGRAPH-45A4	[FB80 C5A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_215)
{
    // 45A4 003F;	
    // (䖤) CJK UNIFIED IDEOGRAPH-45A4	[FB80 C5A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_216)
{
    // 45A4 0061;	
    // (䖤) CJK UNIFIED IDEOGRAPH-45A4	[FB80 C5A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_217)
{
    // 45A4 0041;	
    // (䖤) CJK UNIFIED IDEOGRAPH-45A4	[FB80 C5A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_218)
{
    // 45A4 0062;	
    // (䖤) CJK UNIFIED IDEOGRAPH-45A4	[FB80 C5A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_219)
{
    // 45A5 0021;	
    // (䖥) CJK UNIFIED IDEOGRAPH-45A5	[FB80 C5A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_220)
{
    // 45A5 003F;	
    // (䖥) CJK UNIFIED IDEOGRAPH-45A5	[FB80 C5A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_221)
{
    // 45A5 0061;	
    // (䖥) CJK UNIFIED IDEOGRAPH-45A5	[FB80 C5A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_222)
{
    // 45A5 0041;	
    // (䖥) CJK UNIFIED IDEOGRAPH-45A5	[FB80 C5A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_223)
{
    // 45A5 0062;	
    // (䖥) CJK UNIFIED IDEOGRAPH-45A5	[FB80 C5A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_224)
{
    // 45A6 0021;	
    // (䖦) CJK UNIFIED IDEOGRAPH-45A6	[FB80 C5A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_225)
{
    // 45A6 003F;	
    // (䖦) CJK UNIFIED IDEOGRAPH-45A6	[FB80 C5A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_226)
{
    // 45A6 0061;	
    // (䖦) CJK UNIFIED IDEOGRAPH-45A6	[FB80 C5A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_227)
{
    // 45A6 0041;	
    // (䖦) CJK UNIFIED IDEOGRAPH-45A6	[FB80 C5A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_228)
{
    // 45A6 0062;	
    // (䖦) CJK UNIFIED IDEOGRAPH-45A6	[FB80 C5A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_229)
{
    // 45A7 0021;	
    // (䖧) CJK UNIFIED IDEOGRAPH-45A7	[FB80 C5A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_230)
{
    // 45A7 003F;	
    // (䖧) CJK UNIFIED IDEOGRAPH-45A7	[FB80 C5A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_231)
{
    // 45A7 0061;	
    // (䖧) CJK UNIFIED IDEOGRAPH-45A7	[FB80 C5A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_232)
{
    // 45A7 0041;	
    // (䖧) CJK UNIFIED IDEOGRAPH-45A7	[FB80 C5A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_233)
{
    // 45A7 0062;	
    // (䖧) CJK UNIFIED IDEOGRAPH-45A7	[FB80 C5A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_234)
{
    // 45A8 0021;	
    // (䖨) CJK UNIFIED IDEOGRAPH-45A8	[FB80 C5A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_235)
{
    // 45A8 003F;	
    // (䖨) CJK UNIFIED IDEOGRAPH-45A8	[FB80 C5A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_236)
{
    // 45A8 0061;	
    // (䖨) CJK UNIFIED IDEOGRAPH-45A8	[FB80 C5A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_237)
{
    // 45A8 0041;	
    // (䖨) CJK UNIFIED IDEOGRAPH-45A8	[FB80 C5A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_238)
{
    // 45A8 0062;	
    // (䖨) CJK UNIFIED IDEOGRAPH-45A8	[FB80 C5A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_239)
{
    // 45A9 0021;	
    // (䖩) CJK UNIFIED IDEOGRAPH-45A9	[FB80 C5A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_240)
{
    // 45A9 003F;	
    // (䖩) CJK UNIFIED IDEOGRAPH-45A9	[FB80 C5A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_241)
{
    // 45A9 0061;	
    // (䖩) CJK UNIFIED IDEOGRAPH-45A9	[FB80 C5A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_242)
{
    // 45A9 0041;	
    // (䖩) CJK UNIFIED IDEOGRAPH-45A9	[FB80 C5A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_243)
{
    // 45A9 0062;	
    // (䖩) CJK UNIFIED IDEOGRAPH-45A9	[FB80 C5A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_244)
{
    // 45AA 0021;	
    // (䖪) CJK UNIFIED IDEOGRAPH-45AA	[FB80 C5AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_245)
{
    // 45AA 003F;	
    // (䖪) CJK UNIFIED IDEOGRAPH-45AA	[FB80 C5AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_246)
{
    // 45AA 0061;	
    // (䖪) CJK UNIFIED IDEOGRAPH-45AA	[FB80 C5AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_247)
{
    // 45AA 0041;	
    // (䖪) CJK UNIFIED IDEOGRAPH-45AA	[FB80 C5AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_248)
{
    // 45AA 0062;	
    // (䖪) CJK UNIFIED IDEOGRAPH-45AA	[FB80 C5AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_249)
{
    // 45AB 0021;	
    // (䖫) CJK UNIFIED IDEOGRAPH-45AB	[FB80 C5AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_250)
{
    // 45AB 003F;	
    // (䖫) CJK UNIFIED IDEOGRAPH-45AB	[FB80 C5AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_251)
{
    // 45AB 0061;	
    // (䖫) CJK UNIFIED IDEOGRAPH-45AB	[FB80 C5AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_252)
{
    // 45AB 0041;	
    // (䖫) CJK UNIFIED IDEOGRAPH-45AB	[FB80 C5AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_253)
{
    // 45AB 0062;	
    // (䖫) CJK UNIFIED IDEOGRAPH-45AB	[FB80 C5AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_254)
{
    // 45AC 0021;	
    // (䖬) CJK UNIFIED IDEOGRAPH-45AC	[FB80 C5AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_255)
{
    // 45AC 003F;	
    // (䖬) CJK UNIFIED IDEOGRAPH-45AC	[FB80 C5AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_256)
{
    // 45AC 0061;	
    // (䖬) CJK UNIFIED IDEOGRAPH-45AC	[FB80 C5AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_257)
{
    // 45AC 0041;	
    // (䖬) CJK UNIFIED IDEOGRAPH-45AC	[FB80 C5AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_258)
{
    // 45AC 0062;	
    // (䖬) CJK UNIFIED IDEOGRAPH-45AC	[FB80 C5AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_259)
{
    // 45AD 0021;	
    // (䖭) CJK UNIFIED IDEOGRAPH-45AD	[FB80 C5AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_260)
{
    // 45AD 003F;	
    // (䖭) CJK UNIFIED IDEOGRAPH-45AD	[FB80 C5AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_261)
{
    // 45AD 0061;	
    // (䖭) CJK UNIFIED IDEOGRAPH-45AD	[FB80 C5AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_262)
{
    // 45AD 0041;	
    // (䖭) CJK UNIFIED IDEOGRAPH-45AD	[FB80 C5AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_263)
{
    // 45AD 0062;	
    // (䖭) CJK UNIFIED IDEOGRAPH-45AD	[FB80 C5AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_264)
{
    // 45AE 0021;	
    // (䖮) CJK UNIFIED IDEOGRAPH-45AE	[FB80 C5AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_265)
{
    // 45AE 003F;	
    // (䖮) CJK UNIFIED IDEOGRAPH-45AE	[FB80 C5AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_266)
{
    // 45AE 0061;	
    // (䖮) CJK UNIFIED IDEOGRAPH-45AE	[FB80 C5AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_267)
{
    // 45AE 0041;	
    // (䖮) CJK UNIFIED IDEOGRAPH-45AE	[FB80 C5AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_268)
{
    // 45AE 0062;	
    // (䖮) CJK UNIFIED IDEOGRAPH-45AE	[FB80 C5AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_269)
{
    // 45AF 0021;	
    // (䖯) CJK UNIFIED IDEOGRAPH-45AF	[FB80 C5AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_270)
{
    // 45AF 003F;	
    // (䖯) CJK UNIFIED IDEOGRAPH-45AF	[FB80 C5AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_271)
{
    // 45AF 0061;	
    // (䖯) CJK UNIFIED IDEOGRAPH-45AF	[FB80 C5AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_272)
{
    // 45AF 0041;	
    // (䖯) CJK UNIFIED IDEOGRAPH-45AF	[FB80 C5AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_273)
{
    // 45AF 0062;	
    // (䖯) CJK UNIFIED IDEOGRAPH-45AF	[FB80 C5AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_274)
{
    // 45B0 0021;	
    // (䖰) CJK UNIFIED IDEOGRAPH-45B0	[FB80 C5B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_275)
{
    // 45B0 003F;	
    // (䖰) CJK UNIFIED IDEOGRAPH-45B0	[FB80 C5B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_276)
{
    // 45B0 0061;	
    // (䖰) CJK UNIFIED IDEOGRAPH-45B0	[FB80 C5B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_277)
{
    // 45B0 0041;	
    // (䖰) CJK UNIFIED IDEOGRAPH-45B0	[FB80 C5B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_278)
{
    // 45B0 0062;	
    // (䖰) CJK UNIFIED IDEOGRAPH-45B0	[FB80 C5B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_279)
{
    // 45B1 0021;	
    // (䖱) CJK UNIFIED IDEOGRAPH-45B1	[FB80 C5B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_280)
{
    // 45B1 003F;	
    // (䖱) CJK UNIFIED IDEOGRAPH-45B1	[FB80 C5B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_281)
{
    // 45B1 0061;	
    // (䖱) CJK UNIFIED IDEOGRAPH-45B1	[FB80 C5B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_282)
{
    // 45B1 0041;	
    // (䖱) CJK UNIFIED IDEOGRAPH-45B1	[FB80 C5B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_283)
{
    // 45B1 0062;	
    // (䖱) CJK UNIFIED IDEOGRAPH-45B1	[FB80 C5B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_284)
{
    // 45B2 0021;	
    // (䖲) CJK UNIFIED IDEOGRAPH-45B2	[FB80 C5B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_285)
{
    // 45B2 003F;	
    // (䖲) CJK UNIFIED IDEOGRAPH-45B2	[FB80 C5B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_286)
{
    // 45B2 0061;	
    // (䖲) CJK UNIFIED IDEOGRAPH-45B2	[FB80 C5B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_287)
{
    // 45B2 0041;	
    // (䖲) CJK UNIFIED IDEOGRAPH-45B2	[FB80 C5B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_288)
{
    // 45B2 0062;	
    // (䖲) CJK UNIFIED IDEOGRAPH-45B2	[FB80 C5B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_289)
{
    // 45B3 0021;	
    // (䖳) CJK UNIFIED IDEOGRAPH-45B3	[FB80 C5B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_290)
{
    // 45B3 003F;	
    // (䖳) CJK UNIFIED IDEOGRAPH-45B3	[FB80 C5B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_291)
{
    // 45B3 0061;	
    // (䖳) CJK UNIFIED IDEOGRAPH-45B3	[FB80 C5B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_292)
{
    // 45B3 0041;	
    // (䖳) CJK UNIFIED IDEOGRAPH-45B3	[FB80 C5B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_293)
{
    // 45B3 0062;	
    // (䖳) CJK UNIFIED IDEOGRAPH-45B3	[FB80 C5B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_294)
{
    // 45B4 0021;	
    // (䖴) CJK UNIFIED IDEOGRAPH-45B4	[FB80 C5B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_295)
{
    // 45B4 003F;	
    // (䖴) CJK UNIFIED IDEOGRAPH-45B4	[FB80 C5B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_296)
{
    // 45B4 0061;	
    // (䖴) CJK UNIFIED IDEOGRAPH-45B4	[FB80 C5B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_297)
{
    // 45B4 0041;	
    // (䖴) CJK UNIFIED IDEOGRAPH-45B4	[FB80 C5B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_298)
{
    // 45B4 0062;	
    // (䖴) CJK UNIFIED IDEOGRAPH-45B4	[FB80 C5B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_299)
{
    // 45B5 0021;	
    // (䖵) CJK UNIFIED IDEOGRAPH-45B5	[FB80 C5B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_300)
{
    // 45B5 003F;	
    // (䖵) CJK UNIFIED IDEOGRAPH-45B5	[FB80 C5B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_301)
{
    // 45B5 0061;	
    // (䖵) CJK UNIFIED IDEOGRAPH-45B5	[FB80 C5B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_302)
{
    // 45B5 0041;	
    // (䖵) CJK UNIFIED IDEOGRAPH-45B5	[FB80 C5B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_303)
{
    // 45B5 0062;	
    // (䖵) CJK UNIFIED IDEOGRAPH-45B5	[FB80 C5B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_304)
{
    // 45B6 0021;	
    // (䖶) CJK UNIFIED IDEOGRAPH-45B6	[FB80 C5B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_305)
{
    // 45B6 003F;	
    // (䖶) CJK UNIFIED IDEOGRAPH-45B6	[FB80 C5B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_306)
{
    // 45B6 0061;	
    // (䖶) CJK UNIFIED IDEOGRAPH-45B6	[FB80 C5B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_307)
{
    // 45B6 0041;	
    // (䖶) CJK UNIFIED IDEOGRAPH-45B6	[FB80 C5B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_308)
{
    // 45B6 0062;	
    // (䖶) CJK UNIFIED IDEOGRAPH-45B6	[FB80 C5B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_309)
{
    // 45B7 0021;	
    // (䖷) CJK UNIFIED IDEOGRAPH-45B7	[FB80 C5B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_310)
{
    // 45B7 003F;	
    // (䖷) CJK UNIFIED IDEOGRAPH-45B7	[FB80 C5B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_311)
{
    // 45B7 0061;	
    // (䖷) CJK UNIFIED IDEOGRAPH-45B7	[FB80 C5B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_312)
{
    // 45B7 0041;	
    // (䖷) CJK UNIFIED IDEOGRAPH-45B7	[FB80 C5B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_313)
{
    // 45B7 0062;	
    // (䖷) CJK UNIFIED IDEOGRAPH-45B7	[FB80 C5B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_314)
{
    // 45B8 0021;	
    // (䖸) CJK UNIFIED IDEOGRAPH-45B8	[FB80 C5B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_315)
{
    // 45B8 003F;	
    // (䖸) CJK UNIFIED IDEOGRAPH-45B8	[FB80 C5B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_316)
{
    // 45B8 0061;	
    // (䖸) CJK UNIFIED IDEOGRAPH-45B8	[FB80 C5B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_317)
{
    // 45B8 0041;	
    // (䖸) CJK UNIFIED IDEOGRAPH-45B8	[FB80 C5B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_318)
{
    // 45B8 0062;	
    // (䖸) CJK UNIFIED IDEOGRAPH-45B8	[FB80 C5B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_319)
{
    // 45B9 0021;	
    // (䖹) CJK UNIFIED IDEOGRAPH-45B9	[FB80 C5B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_320)
{
    // 45B9 003F;	
    // (䖹) CJK UNIFIED IDEOGRAPH-45B9	[FB80 C5B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_321)
{
    // 45B9 0061;	
    // (䖹) CJK UNIFIED IDEOGRAPH-45B9	[FB80 C5B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_322)
{
    // 45B9 0041;	
    // (䖹) CJK UNIFIED IDEOGRAPH-45B9	[FB80 C5B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_323)
{
    // 45B9 0062;	
    // (䖹) CJK UNIFIED IDEOGRAPH-45B9	[FB80 C5B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_324)
{
    // 45BA 0021;	
    // (䖺) CJK UNIFIED IDEOGRAPH-45BA	[FB80 C5BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_325)
{
    // 45BA 003F;	
    // (䖺) CJK UNIFIED IDEOGRAPH-45BA	[FB80 C5BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_326)
{
    // 45BA 0061;	
    // (䖺) CJK UNIFIED IDEOGRAPH-45BA	[FB80 C5BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_327)
{
    // 45BA 0041;	
    // (䖺) CJK UNIFIED IDEOGRAPH-45BA	[FB80 C5BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_328)
{
    // 45BA 0062;	
    // (䖺) CJK UNIFIED IDEOGRAPH-45BA	[FB80 C5BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_329)
{
    // 45BB 0021;	
    // (䖻) CJK UNIFIED IDEOGRAPH-45BB	[FB80 C5BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_330)
{
    // 45BB 003F;	
    // (䖻) CJK UNIFIED IDEOGRAPH-45BB	[FB80 C5BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_331)
{
    // 45BB 0061;	
    // (䖻) CJK UNIFIED IDEOGRAPH-45BB	[FB80 C5BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_332)
{
    // 45BB 0041;	
    // (䖻) CJK UNIFIED IDEOGRAPH-45BB	[FB80 C5BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_333)
{
    // 45BB 0062;	
    // (䖻) CJK UNIFIED IDEOGRAPH-45BB	[FB80 C5BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_334)
{
    // 45BC 0021;	
    // (䖼) CJK UNIFIED IDEOGRAPH-45BC	[FB80 C5BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_335)
{
    // 45BC 003F;	
    // (䖼) CJK UNIFIED IDEOGRAPH-45BC	[FB80 C5BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_336)
{
    // 45BC 0061;	
    // (䖼) CJK UNIFIED IDEOGRAPH-45BC	[FB80 C5BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_337)
{
    // 45BC 0041;	
    // (䖼) CJK UNIFIED IDEOGRAPH-45BC	[FB80 C5BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_338)
{
    // 45BC 0062;	
    // (䖼) CJK UNIFIED IDEOGRAPH-45BC	[FB80 C5BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_339)
{
    // 45BD 0021;	
    // (䖽) CJK UNIFIED IDEOGRAPH-45BD	[FB80 C5BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_340)
{
    // 45BD 003F;	
    // (䖽) CJK UNIFIED IDEOGRAPH-45BD	[FB80 C5BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_341)
{
    // 45BD 0061;	
    // (䖽) CJK UNIFIED IDEOGRAPH-45BD	[FB80 C5BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_342)
{
    // 45BD 0041;	
    // (䖽) CJK UNIFIED IDEOGRAPH-45BD	[FB80 C5BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_343)
{
    // 45BD 0062;	
    // (䖽) CJK UNIFIED IDEOGRAPH-45BD	[FB80 C5BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_344)
{
    // 45BE 0021;	
    // (䖾) CJK UNIFIED IDEOGRAPH-45BE	[FB80 C5BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_345)
{
    // 45BE 003F;	
    // (䖾) CJK UNIFIED IDEOGRAPH-45BE	[FB80 C5BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_346)
{
    // 45BE 0061;	
    // (䖾) CJK UNIFIED IDEOGRAPH-45BE	[FB80 C5BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_347)
{
    // 45BE 0041;	
    // (䖾) CJK UNIFIED IDEOGRAPH-45BE	[FB80 C5BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_348)
{
    // 45BE 0062;	
    // (䖾) CJK UNIFIED IDEOGRAPH-45BE	[FB80 C5BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_349)
{
    // 45BF 0021;	
    // (䖿) CJK UNIFIED IDEOGRAPH-45BF	[FB80 C5BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_350)
{
    // 45BF 003F;	
    // (䖿) CJK UNIFIED IDEOGRAPH-45BF	[FB80 C5BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_351)
{
    // 45BF 0061;	
    // (䖿) CJK UNIFIED IDEOGRAPH-45BF	[FB80 C5BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_352)
{
    // 45BF 0041;	
    // (䖿) CJK UNIFIED IDEOGRAPH-45BF	[FB80 C5BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_353)
{
    // 45BF 0062;	
    // (䖿) CJK UNIFIED IDEOGRAPH-45BF	[FB80 C5BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_354)
{
    // 45C0 0021;	
    // (䗀) CJK UNIFIED IDEOGRAPH-45C0	[FB80 C5C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_355)
{
    // 45C0 003F;	
    // (䗀) CJK UNIFIED IDEOGRAPH-45C0	[FB80 C5C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_356)
{
    // 45C0 0061;	
    // (䗀) CJK UNIFIED IDEOGRAPH-45C0	[FB80 C5C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_357)
{
    // 45C0 0041;	
    // (䗀) CJK UNIFIED IDEOGRAPH-45C0	[FB80 C5C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_358)
{
    // 45C0 0062;	
    // (䗀) CJK UNIFIED IDEOGRAPH-45C0	[FB80 C5C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_359)
{
    // 45C1 0021;	
    // (䗁) CJK UNIFIED IDEOGRAPH-45C1	[FB80 C5C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_360)
{
    // 45C1 003F;	
    // (䗁) CJK UNIFIED IDEOGRAPH-45C1	[FB80 C5C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_361)
{
    // 45C1 0061;	
    // (䗁) CJK UNIFIED IDEOGRAPH-45C1	[FB80 C5C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_362)
{
    // 45C1 0041;	
    // (䗁) CJK UNIFIED IDEOGRAPH-45C1	[FB80 C5C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_363)
{
    // 45C1 0062;	
    // (䗁) CJK UNIFIED IDEOGRAPH-45C1	[FB80 C5C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_364)
{
    // 45C2 0021;	
    // (䗂) CJK UNIFIED IDEOGRAPH-45C2	[FB80 C5C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_365)
{
    // 45C2 003F;	
    // (䗂) CJK UNIFIED IDEOGRAPH-45C2	[FB80 C5C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_366)
{
    // 45C2 0061;	
    // (䗂) CJK UNIFIED IDEOGRAPH-45C2	[FB80 C5C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_367)
{
    // 45C2 0041;	
    // (䗂) CJK UNIFIED IDEOGRAPH-45C2	[FB80 C5C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_368)
{
    // 45C2 0062;	
    // (䗂) CJK UNIFIED IDEOGRAPH-45C2	[FB80 C5C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_369)
{
    // 45C3 0021;	
    // (䗃) CJK UNIFIED IDEOGRAPH-45C3	[FB80 C5C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_370)
{
    // 45C3 003F;	
    // (䗃) CJK UNIFIED IDEOGRAPH-45C3	[FB80 C5C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_371)
{
    // 45C3 0061;	
    // (䗃) CJK UNIFIED IDEOGRAPH-45C3	[FB80 C5C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_372)
{
    // 45C3 0041;	
    // (䗃) CJK UNIFIED IDEOGRAPH-45C3	[FB80 C5C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_373)
{
    // 45C3 0062;	
    // (䗃) CJK UNIFIED IDEOGRAPH-45C3	[FB80 C5C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_374)
{
    // 45C4 0021;	
    // (䗄) CJK UNIFIED IDEOGRAPH-45C4	[FB80 C5C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_375)
{
    // 45C4 003F;	
    // (䗄) CJK UNIFIED IDEOGRAPH-45C4	[FB80 C5C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_376)
{
    // 45C4 0061;	
    // (䗄) CJK UNIFIED IDEOGRAPH-45C4	[FB80 C5C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_377)
{
    // 45C4 0041;	
    // (䗄) CJK UNIFIED IDEOGRAPH-45C4	[FB80 C5C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_378)
{
    // 45C4 0062;	
    // (䗄) CJK UNIFIED IDEOGRAPH-45C4	[FB80 C5C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_379)
{
    // 45C5 0021;	
    // (䗅) CJK UNIFIED IDEOGRAPH-45C5	[FB80 C5C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_380)
{
    // 45C5 003F;	
    // (䗅) CJK UNIFIED IDEOGRAPH-45C5	[FB80 C5C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_381)
{
    // 45C5 0061;	
    // (䗅) CJK UNIFIED IDEOGRAPH-45C5	[FB80 C5C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_382)
{
    // 45C5 0041;	
    // (䗅) CJK UNIFIED IDEOGRAPH-45C5	[FB80 C5C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_383)
{
    // 45C5 0062;	
    // (䗅) CJK UNIFIED IDEOGRAPH-45C5	[FB80 C5C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_384)
{
    // 45C6 0021;	
    // (䗆) CJK UNIFIED IDEOGRAPH-45C6	[FB80 C5C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_385)
{
    // 45C6 003F;	
    // (䗆) CJK UNIFIED IDEOGRAPH-45C6	[FB80 C5C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_386)
{
    // 45C6 0061;	
    // (䗆) CJK UNIFIED IDEOGRAPH-45C6	[FB80 C5C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_387)
{
    // 45C6 0041;	
    // (䗆) CJK UNIFIED IDEOGRAPH-45C6	[FB80 C5C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_388)
{
    // 45C6 0062;	
    // (䗆) CJK UNIFIED IDEOGRAPH-45C6	[FB80 C5C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_389)
{
    // 45C7 0021;	
    // (䗇) CJK UNIFIED IDEOGRAPH-45C7	[FB80 C5C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_390)
{
    // 45C7 003F;	
    // (䗇) CJK UNIFIED IDEOGRAPH-45C7	[FB80 C5C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_391)
{
    // 45C7 0061;	
    // (䗇) CJK UNIFIED IDEOGRAPH-45C7	[FB80 C5C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_392)
{
    // 45C7 0041;	
    // (䗇) CJK UNIFIED IDEOGRAPH-45C7	[FB80 C5C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_393)
{
    // 45C7 0062;	
    // (䗇) CJK UNIFIED IDEOGRAPH-45C7	[FB80 C5C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_394)
{
    // 45C8 0021;	
    // (䗈) CJK UNIFIED IDEOGRAPH-45C8	[FB80 C5C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_395)
{
    // 45C8 003F;	
    // (䗈) CJK UNIFIED IDEOGRAPH-45C8	[FB80 C5C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_396)
{
    // 45C8 0061;	
    // (䗈) CJK UNIFIED IDEOGRAPH-45C8	[FB80 C5C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_397)
{
    // 45C8 0041;	
    // (䗈) CJK UNIFIED IDEOGRAPH-45C8	[FB80 C5C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_398)
{
    // 45C8 0062;	
    // (䗈) CJK UNIFIED IDEOGRAPH-45C8	[FB80 C5C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_399)
{
    // 45C9 0021;	
    // (䗉) CJK UNIFIED IDEOGRAPH-45C9	[FB80 C5C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_400)
{
    // 45C9 003F;	
    // (䗉) CJK UNIFIED IDEOGRAPH-45C9	[FB80 C5C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_401)
{
    // 45C9 0061;	
    // (䗉) CJK UNIFIED IDEOGRAPH-45C9	[FB80 C5C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_402)
{
    // 45C9 0041;	
    // (䗉) CJK UNIFIED IDEOGRAPH-45C9	[FB80 C5C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_403)
{
    // 45C9 0062;	
    // (䗉) CJK UNIFIED IDEOGRAPH-45C9	[FB80 C5C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_404)
{
    // 45CA 0021;	
    // (䗊) CJK UNIFIED IDEOGRAPH-45CA	[FB80 C5CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_405)
{
    // 45CA 003F;	
    // (䗊) CJK UNIFIED IDEOGRAPH-45CA	[FB80 C5CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_406)
{
    // 45CA 0061;	
    // (䗊) CJK UNIFIED IDEOGRAPH-45CA	[FB80 C5CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_407)
{
    // 45CA 0041;	
    // (䗊) CJK UNIFIED IDEOGRAPH-45CA	[FB80 C5CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_408)
{
    // 45CA 0062;	
    // (䗊) CJK UNIFIED IDEOGRAPH-45CA	[FB80 C5CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_409)
{
    // 45CB 0021;	
    // (䗋) CJK UNIFIED IDEOGRAPH-45CB	[FB80 C5CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_410)
{
    // 45CB 003F;	
    // (䗋) CJK UNIFIED IDEOGRAPH-45CB	[FB80 C5CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_411)
{
    // 45CB 0061;	
    // (䗋) CJK UNIFIED IDEOGRAPH-45CB	[FB80 C5CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_412)
{
    // 45CB 0041;	
    // (䗋) CJK UNIFIED IDEOGRAPH-45CB	[FB80 C5CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_413)
{
    // 45CB 0062;	
    // (䗋) CJK UNIFIED IDEOGRAPH-45CB	[FB80 C5CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_414)
{
    // 45CC 0021;	
    // (䗌) CJK UNIFIED IDEOGRAPH-45CC	[FB80 C5CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_415)
{
    // 45CC 003F;	
    // (䗌) CJK UNIFIED IDEOGRAPH-45CC	[FB80 C5CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_416)
{
    // 45CC 0061;	
    // (䗌) CJK UNIFIED IDEOGRAPH-45CC	[FB80 C5CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_417)
{
    // 45CC 0041;	
    // (䗌) CJK UNIFIED IDEOGRAPH-45CC	[FB80 C5CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_418)
{
    // 45CC 0062;	
    // (䗌) CJK UNIFIED IDEOGRAPH-45CC	[FB80 C5CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_419)
{
    // 45CD 0021;	
    // (䗍) CJK UNIFIED IDEOGRAPH-45CD	[FB80 C5CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_420)
{
    // 45CD 003F;	
    // (䗍) CJK UNIFIED IDEOGRAPH-45CD	[FB80 C5CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_421)
{
    // 45CD 0061;	
    // (䗍) CJK UNIFIED IDEOGRAPH-45CD	[FB80 C5CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_422)
{
    // 45CD 0041;	
    // (䗍) CJK UNIFIED IDEOGRAPH-45CD	[FB80 C5CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_423)
{
    // 45CD 0062;	
    // (䗍) CJK UNIFIED IDEOGRAPH-45CD	[FB80 C5CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_424)
{
    // 45CE 0021;	
    // (䗎) CJK UNIFIED IDEOGRAPH-45CE	[FB80 C5CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_425)
{
    // 45CE 003F;	
    // (䗎) CJK UNIFIED IDEOGRAPH-45CE	[FB80 C5CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_426)
{
    // 45CE 0061;	
    // (䗎) CJK UNIFIED IDEOGRAPH-45CE	[FB80 C5CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_427)
{
    // 45CE 0041;	
    // (䗎) CJK UNIFIED IDEOGRAPH-45CE	[FB80 C5CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_428)
{
    // 45CE 0062;	
    // (䗎) CJK UNIFIED IDEOGRAPH-45CE	[FB80 C5CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_429)
{
    // 45CF 0021;	
    // (䗏) CJK UNIFIED IDEOGRAPH-45CF	[FB80 C5CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_430)
{
    // 45CF 003F;	
    // (䗏) CJK UNIFIED IDEOGRAPH-45CF	[FB80 C5CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_431)
{
    // 45CF 0061;	
    // (䗏) CJK UNIFIED IDEOGRAPH-45CF	[FB80 C5CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_432)
{
    // 45CF 0041;	
    // (䗏) CJK UNIFIED IDEOGRAPH-45CF	[FB80 C5CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_433)
{
    // 45CF 0062;	
    // (䗏) CJK UNIFIED IDEOGRAPH-45CF	[FB80 C5CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_434)
{
    // 45D0 0021;	
    // (䗐) CJK UNIFIED IDEOGRAPH-45D0	[FB80 C5D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_435)
{
    // 45D0 003F;	
    // (䗐) CJK UNIFIED IDEOGRAPH-45D0	[FB80 C5D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_436)
{
    // 45D0 0061;	
    // (䗐) CJK UNIFIED IDEOGRAPH-45D0	[FB80 C5D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_437)
{
    // 45D0 0041;	
    // (䗐) CJK UNIFIED IDEOGRAPH-45D0	[FB80 C5D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_438)
{
    // 45D0 0062;	
    // (䗐) CJK UNIFIED IDEOGRAPH-45D0	[FB80 C5D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_439)
{
    // 45D1 0021;	
    // (䗑) CJK UNIFIED IDEOGRAPH-45D1	[FB80 C5D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_440)
{
    // 45D1 003F;	
    // (䗑) CJK UNIFIED IDEOGRAPH-45D1	[FB80 C5D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_441)
{
    // 45D1 0061;	
    // (䗑) CJK UNIFIED IDEOGRAPH-45D1	[FB80 C5D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_442)
{
    // 45D1 0041;	
    // (䗑) CJK UNIFIED IDEOGRAPH-45D1	[FB80 C5D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_443)
{
    // 45D1 0062;	
    // (䗑) CJK UNIFIED IDEOGRAPH-45D1	[FB80 C5D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_444)
{
    // 45D2 0021;	
    // (䗒) CJK UNIFIED IDEOGRAPH-45D2	[FB80 C5D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_445)
{
    // 45D2 003F;	
    // (䗒) CJK UNIFIED IDEOGRAPH-45D2	[FB80 C5D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_446)
{
    // 45D2 0061;	
    // (䗒) CJK UNIFIED IDEOGRAPH-45D2	[FB80 C5D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_447)
{
    // 45D2 0041;	
    // (䗒) CJK UNIFIED IDEOGRAPH-45D2	[FB80 C5D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_448)
{
    // 45D2 0062;	
    // (䗒) CJK UNIFIED IDEOGRAPH-45D2	[FB80 C5D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_449)
{
    // 45D3 0021;	
    // (䗓) CJK UNIFIED IDEOGRAPH-45D3	[FB80 C5D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_450)
{
    // 45D3 003F;	
    // (䗓) CJK UNIFIED IDEOGRAPH-45D3	[FB80 C5D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_451)
{
    // 45D3 0061;	
    // (䗓) CJK UNIFIED IDEOGRAPH-45D3	[FB80 C5D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_452)
{
    // 45D3 0041;	
    // (䗓) CJK UNIFIED IDEOGRAPH-45D3	[FB80 C5D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_453)
{
    // 45D3 0062;	
    // (䗓) CJK UNIFIED IDEOGRAPH-45D3	[FB80 C5D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_454)
{
    // 45D4 0021;	
    // (䗔) CJK UNIFIED IDEOGRAPH-45D4	[FB80 C5D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_455)
{
    // 45D4 003F;	
    // (䗔) CJK UNIFIED IDEOGRAPH-45D4	[FB80 C5D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_456)
{
    // 45D4 0061;	
    // (䗔) CJK UNIFIED IDEOGRAPH-45D4	[FB80 C5D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_457)
{
    // 45D4 0041;	
    // (䗔) CJK UNIFIED IDEOGRAPH-45D4	[FB80 C5D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_458)
{
    // 45D4 0062;	
    // (䗔) CJK UNIFIED IDEOGRAPH-45D4	[FB80 C5D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_459)
{
    // 45D5 0021;	
    // (䗕) CJK UNIFIED IDEOGRAPH-45D5	[FB80 C5D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_460)
{
    // 45D5 003F;	
    // (䗕) CJK UNIFIED IDEOGRAPH-45D5	[FB80 C5D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_461)
{
    // 45D5 0061;	
    // (䗕) CJK UNIFIED IDEOGRAPH-45D5	[FB80 C5D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_462)
{
    // 45D5 0041;	
    // (䗕) CJK UNIFIED IDEOGRAPH-45D5	[FB80 C5D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_463)
{
    // 45D5 0062;	
    // (䗕) CJK UNIFIED IDEOGRAPH-45D5	[FB80 C5D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_464)
{
    // 45D6 0021;	
    // (䗖) CJK UNIFIED IDEOGRAPH-45D6	[FB80 C5D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_465)
{
    // 45D6 003F;	
    // (䗖) CJK UNIFIED IDEOGRAPH-45D6	[FB80 C5D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_466)
{
    // 45D6 0061;	
    // (䗖) CJK UNIFIED IDEOGRAPH-45D6	[FB80 C5D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_467)
{
    // 45D6 0041;	
    // (䗖) CJK UNIFIED IDEOGRAPH-45D6	[FB80 C5D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_468)
{
    // 45D6 0062;	
    // (䗖) CJK UNIFIED IDEOGRAPH-45D6	[FB80 C5D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_469)
{
    // 45D7 0021;	
    // (䗗) CJK UNIFIED IDEOGRAPH-45D7	[FB80 C5D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_470)
{
    // 2F9BF 0021;	
    // (䗗) CJK COMPATIBILITY IDEOGRAPH-2F9BF	[FB80 C5D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_471)
{
    // 45D7 003F;	
    // (䗗) CJK UNIFIED IDEOGRAPH-45D7	[FB80 C5D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_472)
{
    // 2F9BF 003F;	
    // (䗗) CJK COMPATIBILITY IDEOGRAPH-2F9BF	[FB80 C5D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_473)
{
    // 45D7 0061;	
    // (䗗) CJK UNIFIED IDEOGRAPH-45D7	[FB80 C5D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_474)
{
    // 2F9BF 0061;	
    // (䗗) CJK COMPATIBILITY IDEOGRAPH-2F9BF	[FB80 C5D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_475)
{
    // 45D7 0041;	
    // (䗗) CJK UNIFIED IDEOGRAPH-45D7	[FB80 C5D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_476)
{
    // 2F9BF 0041;	
    // (䗗) CJK COMPATIBILITY IDEOGRAPH-2F9BF	[FB80 C5D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_477)
{
    // 45D7 0062;	
    // (䗗) CJK UNIFIED IDEOGRAPH-45D7	[FB80 C5D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_478)
{
    // 2F9BF 0062;	
    // (䗗) CJK COMPATIBILITY IDEOGRAPH-2F9BF	[FB80 C5D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_479)
{
    // 45D8 0021;	
    // (䗘) CJK UNIFIED IDEOGRAPH-45D8	[FB80 C5D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_480)
{
    // 45D8 003F;	
    // (䗘) CJK UNIFIED IDEOGRAPH-45D8	[FB80 C5D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_481)
{
    // 45D8 0061;	
    // (䗘) CJK UNIFIED IDEOGRAPH-45D8	[FB80 C5D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_482)
{
    // 45D8 0041;	
    // (䗘) CJK UNIFIED IDEOGRAPH-45D8	[FB80 C5D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_483)
{
    // 45D8 0062;	
    // (䗘) CJK UNIFIED IDEOGRAPH-45D8	[FB80 C5D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_484)
{
    // 45D9 0021;	
    // (䗙) CJK UNIFIED IDEOGRAPH-45D9	[FB80 C5D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_485)
{
    // 45D9 003F;	
    // (䗙) CJK UNIFIED IDEOGRAPH-45D9	[FB80 C5D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_486)
{
    // 45D9 0061;	
    // (䗙) CJK UNIFIED IDEOGRAPH-45D9	[FB80 C5D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_487)
{
    // 45D9 0041;	
    // (䗙) CJK UNIFIED IDEOGRAPH-45D9	[FB80 C5D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_488)
{
    // 45D9 0062;	
    // (䗙) CJK UNIFIED IDEOGRAPH-45D9	[FB80 C5D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_489)
{
    // 45DA 0021;	
    // (䗚) CJK UNIFIED IDEOGRAPH-45DA	[FB80 C5DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_490)
{
    // 45DA 003F;	
    // (䗚) CJK UNIFIED IDEOGRAPH-45DA	[FB80 C5DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_491)
{
    // 45DA 0061;	
    // (䗚) CJK UNIFIED IDEOGRAPH-45DA	[FB80 C5DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_492)
{
    // 45DA 0041;	
    // (䗚) CJK UNIFIED IDEOGRAPH-45DA	[FB80 C5DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_493)
{
    // 45DA 0062;	
    // (䗚) CJK UNIFIED IDEOGRAPH-45DA	[FB80 C5DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_494)
{
    // 45DB 0021;	
    // (䗛) CJK UNIFIED IDEOGRAPH-45DB	[FB80 C5DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_495)
{
    // 45DB 003F;	
    // (䗛) CJK UNIFIED IDEOGRAPH-45DB	[FB80 C5DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC5DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_496)
{
    // 45DB 0061;	
    // (䗛) CJK UNIFIED IDEOGRAPH-45DB	[FB80 C5DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_497)
{
    // 45DB 0041;	
    // (䗛) CJK UNIFIED IDEOGRAPH-45DB	[FB80 C5DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x45DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_498)
{
    // 45DB 0062;	
    // (䗛) CJK UNIFIED IDEOGRAPH-45DB	[FB80 C5DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_372_499)
{
    // 45DC 0021;	
    // (䗜) CJK UNIFIED IDEOGRAPH-45DC	[FB80 C5DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x45DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC5DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

