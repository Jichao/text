// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_012_000)
{
    uint32_t const cps[2] = { 0x24AB, 0x0061 };

    // 24AB 0061;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[0318 1E72 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AB 0061;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_001)
{
    uint32_t const cps[2] = { 0x24AB, 0x0041 };

    // 24AB 0041;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[0318 1E72 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AB 0041;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[1E72 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_002)
{
    uint32_t const cps[2] = { 0x1F11F, 0x0061 };

    // 1F11F 0061;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[0318 1E72 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11F 0061;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_003)
{
    uint32_t const cps[2] = { 0x1F11F, 0x0041 };

    // 1F11F 0041;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[0318 1E72 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11F 0041;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[1E72 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_004)
{
    uint32_t const cps[2] = { 0x24AB, 0x0062 };

    // 24AB 0062;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[0318 1E72 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AB 0062;	
    // (⒫) PARENTHESIZED LATIN SMALL LETTER P	[1E72 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_005)
{
    uint32_t const cps[2] = { 0x1F11F, 0x0062 };

    // 1F11F 0062;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[0318 1E72 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E72, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F11F 0062;	
    // (🄟) PARENTHESIZED LATIN CAPITAL LETTER P	[1E72 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_006)
{
    uint32_t const cps[2] = { 0x24AC, 0x0021 };

    // 24AC 0021;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[0318 1E87 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AC 0021;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[1E87 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1E87, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_007)
{
    uint32_t const cps[2] = { 0x1F120, 0x0021 };

    // 1F120 0021;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[0318 1E87 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F120 0021;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[1E87 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1E87, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_008)
{
    uint32_t const cps[2] = { 0x24AC, 0x003F };

    // 24AC 003F;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[0318 1E87 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AC 003F;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[1E87 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1E87, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_009)
{
    uint32_t const cps[2] = { 0x1F120, 0x003F };

    // 1F120 003F;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[0318 1E87 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F120 003F;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[1E87 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1E87, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_010)
{
    uint32_t const cps[2] = { 0x24AC, 0x0061 };

    // 24AC 0061;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[0318 1E87 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AC 0061;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_011)
{
    uint32_t const cps[2] = { 0x24AC, 0x0041 };

    // 24AC 0041;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[0318 1E87 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AC 0041;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[1E87 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_012)
{
    uint32_t const cps[2] = { 0x1F120, 0x0061 };

    // 1F120 0061;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[0318 1E87 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F120 0061;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_013)
{
    uint32_t const cps[2] = { 0x1F120, 0x0041 };

    // 1F120 0041;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[0318 1E87 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F120 0041;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[1E87 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_014)
{
    uint32_t const cps[2] = { 0x24AC, 0x0062 };

    // 24AC 0062;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[0318 1E87 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AC 0062;	
    // (⒬) PARENTHESIZED LATIN SMALL LETTER Q	[1E87 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_015)
{
    uint32_t const cps[2] = { 0x1F120, 0x0062 };

    // 1F120 0062;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[0318 1E87 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E87, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F120 0062;	
    // (🄠) PARENTHESIZED LATIN CAPITAL LETTER Q	[1E87 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_016)
{
    uint32_t const cps[2] = { 0x24AD, 0x0021 };

    // 24AD 0021;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[0318 1E99 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AD 0021;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[1E99 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1E99, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_017)
{
    uint32_t const cps[2] = { 0x1F121, 0x0021 };

    // 1F121 0021;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[0318 1E99 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F121 0021;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[1E99 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1E99, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_018)
{
    uint32_t const cps[2] = { 0x24AD, 0x003F };

    // 24AD 003F;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[0318 1E99 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AD 003F;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[1E99 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1E99, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_019)
{
    uint32_t const cps[2] = { 0x1F121, 0x003F };

    // 1F121 003F;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[0318 1E99 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F121 003F;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[1E99 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1E99, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_020)
{
    uint32_t const cps[2] = { 0x24AD, 0x0061 };

    // 24AD 0061;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[0318 1E99 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AD 0061;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[1E99 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_021)
{
    uint32_t const cps[2] = { 0x24AD, 0x0041 };

    // 24AD 0041;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[0318 1E99 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AD 0041;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[1E99 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_022)
{
    uint32_t const cps[2] = { 0x1F121, 0x0061 };

    // 1F121 0061;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[0318 1E99 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F121 0061;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[1E99 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_023)
{
    uint32_t const cps[2] = { 0x1F121, 0x0041 };

    // 1F121 0041;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[0318 1E99 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F121 0041;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[1E99 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_024)
{
    uint32_t const cps[2] = { 0x24AD, 0x0062 };

    // 24AD 0062;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[0318 1E99 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AD 0062;	
    // (⒭) PARENTHESIZED LATIN SMALL LETTER R	[1E99 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_025)
{
    uint32_t const cps[2] = { 0x1F121, 0x0062 };

    // 1F121 0062;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[0318 1E99 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1E99, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F121 0062;	
    // (🄡) PARENTHESIZED LATIN CAPITAL LETTER R	[1E99 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_026)
{
    uint32_t const cps[2] = { 0x24AE, 0x0021 };

    // 24AE 0021;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[0318 1ED7 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AE 0021;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[1ED7 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1ED7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_027)
{
    uint32_t const cps[2] = { 0x1F122, 0x0021 };

    // 1F122 0021;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[0318 1ED7 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F122 0021;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[1ED7 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1ED7, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_028)
{
    uint32_t const cps[2] = { 0x24AE, 0x003F };

    // 24AE 003F;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[0318 1ED7 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AE 003F;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[1ED7 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1ED7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_029)
{
    uint32_t const cps[2] = { 0x1F122, 0x003F };

    // 1F122 003F;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[0318 1ED7 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F122 003F;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[1ED7 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1ED7, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_030)
{
    uint32_t const cps[2] = { 0x24AE, 0x0061 };

    // 24AE 0061;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[0318 1ED7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AE 0061;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_031)
{
    uint32_t const cps[2] = { 0x24AE, 0x0041 };

    // 24AE 0041;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[0318 1ED7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AE 0041;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[1ED7 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_032)
{
    uint32_t const cps[2] = { 0x1F122, 0x0061 };

    // 1F122 0061;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[0318 1ED7 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F122 0061;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_033)
{
    uint32_t const cps[2] = { 0x1F122, 0x0041 };

    // 1F122 0041;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[0318 1ED7 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F122 0041;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[1ED7 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_034)
{
    uint32_t const cps[2] = { 0x24AE, 0x0062 };

    // 24AE 0062;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[0318 1ED7 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AE 0062;	
    // (⒮) PARENTHESIZED LATIN SMALL LETTER S	[1ED7 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_035)
{
    uint32_t const cps[2] = { 0x1F122, 0x0062 };

    // 1F122 0062;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[0318 1ED7 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1ED7, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F122 0062;	
    // (🄢) PARENTHESIZED LATIN CAPITAL LETTER S	[1ED7 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1ED7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_036)
{
    uint32_t const cps[2] = { 0x24AF, 0x0021 };

    // 24AF 0021;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[0318 1EFB 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AF 0021;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[1EFB | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1EFB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_037)
{
    uint32_t const cps[2] = { 0x1F123, 0x0021 };

    // 1F123 0021;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[0318 1EFB 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F123 0021;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[1EFB | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1EFB, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_038)
{
    uint32_t const cps[2] = { 0x24AF, 0x003F };

    // 24AF 003F;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[0318 1EFB 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AF 003F;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[1EFB | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1EFB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_039)
{
    uint32_t const cps[2] = { 0x1F123, 0x003F };

    // 1F123 003F;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[0318 1EFB 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F123 003F;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[1EFB | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1EFB, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_040)
{
    uint32_t const cps[2] = { 0x24AF, 0x0061 };

    // 24AF 0061;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[0318 1EFB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AF 0061;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[1EFB 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_041)
{
    uint32_t const cps[2] = { 0x24AF, 0x0041 };

    // 24AF 0041;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[0318 1EFB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AF 0041;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[1EFB 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_042)
{
    uint32_t const cps[2] = { 0x1F123, 0x0061 };

    // 1F123 0061;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[0318 1EFB 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F123 0061;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[1EFB 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_043)
{
    uint32_t const cps[2] = { 0x1F123, 0x0041 };

    // 1F123 0041;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[0318 1EFB 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F123 0041;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[1EFB 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_044)
{
    uint32_t const cps[2] = { 0x24AF, 0x0062 };

    // 24AF 0062;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[0318 1EFB 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24AF 0062;	
    // (⒯) PARENTHESIZED LATIN SMALL LETTER T	[1EFB 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_045)
{
    uint32_t const cps[2] = { 0x1F123, 0x0062 };

    // 1F123 0062;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[0318 1EFB 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1EFB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F123 0062;	
    // (🄣) PARENTHESIZED LATIN CAPITAL LETTER T	[1EFB 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1EFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_046)
{
    uint32_t const cps[2] = { 0x24B0, 0x0021 };

    // 24B0 0021;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[0318 1F1B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B0 0021;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[1F1B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F1B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_047)
{
    uint32_t const cps[2] = { 0x1F124, 0x0021 };

    // 1F124 0021;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[0318 1F1B 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F124 0021;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[1F1B | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F1B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_048)
{
    uint32_t const cps[2] = { 0x24B0, 0x003F };

    // 24B0 003F;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[0318 1F1B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B0 003F;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[1F1B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F1B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_049)
{
    uint32_t const cps[2] = { 0x1F124, 0x003F };

    // 1F124 003F;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[0318 1F1B 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F124 003F;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[1F1B | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F1B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_050)
{
    uint32_t const cps[2] = { 0x24B0, 0x0061 };

    // 24B0 0061;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[0318 1F1B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B0 0061;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_051)
{
    uint32_t const cps[2] = { 0x24B0, 0x0041 };

    // 24B0 0041;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[0318 1F1B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B0 0041;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[1F1B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_052)
{
    uint32_t const cps[2] = { 0x1F124, 0x0061 };

    // 1F124 0061;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[0318 1F1B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F124 0061;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_053)
{
    uint32_t const cps[2] = { 0x1F124, 0x0041 };

    // 1F124 0041;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[0318 1F1B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F124 0041;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[1F1B 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_054)
{
    uint32_t const cps[2] = { 0x24B0, 0x0062 };

    // 24B0 0062;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[0318 1F1B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B0 0062;	
    // (⒰) PARENTHESIZED LATIN SMALL LETTER U	[1F1B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_055)
{
    uint32_t const cps[2] = { 0x1F124, 0x0062 };

    // 1F124 0062;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[0318 1F1B 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F1B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F124 0062;	
    // (🄤) PARENTHESIZED LATIN CAPITAL LETTER U	[1F1B 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_056)
{
    uint32_t const cps[2] = { 0x24B1, 0x0021 };

    // 24B1 0021;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[0318 1F49 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B1 0021;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[1F49 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_057)
{
    uint32_t const cps[2] = { 0x1F125, 0x0021 };

    // 1F125 0021;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[0318 1F49 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F125 0021;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_058)
{
    uint32_t const cps[2] = { 0x24B1, 0x003F };

    // 24B1 003F;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[0318 1F49 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B1 003F;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[1F49 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_059)
{
    uint32_t const cps[2] = { 0x1F125, 0x003F };

    // 1F125 003F;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[0318 1F49 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F125 003F;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[1F49 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F49, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_060)
{
    uint32_t const cps[2] = { 0x24B1, 0x0061 };

    // 24B1 0061;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[0318 1F49 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B1 0061;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_061)
{
    uint32_t const cps[2] = { 0x24B1, 0x0041 };

    // 24B1 0041;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[0318 1F49 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B1 0041;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[1F49 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_062)
{
    uint32_t const cps[2] = { 0x1F125, 0x0061 };

    // 1F125 0061;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[0318 1F49 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F125 0061;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_063)
{
    uint32_t const cps[2] = { 0x1F125, 0x0041 };

    // 1F125 0041;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[0318 1F49 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F125 0041;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[1F49 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_064)
{
    uint32_t const cps[2] = { 0x24B1, 0x0062 };

    // 24B1 0062;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[0318 1F49 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B1 0062;	
    // (⒱) PARENTHESIZED LATIN SMALL LETTER V	[1F49 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_065)
{
    uint32_t const cps[2] = { 0x1F125, 0x0062 };

    // 1F125 0062;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[0318 1F49 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F49, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F125 0062;	
    // (🄥) PARENTHESIZED LATIN CAPITAL LETTER V	[1F49 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_066)
{
    uint32_t const cps[2] = { 0x24B2, 0x0021 };

    // 24B2 0021;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[0318 1F5B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B2 0021;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[1F5B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F5B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_067)
{
    uint32_t const cps[2] = { 0x1F126, 0x0021 };

    // 1F126 0021;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[0318 1F5B 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F126 0021;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[1F5B | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F5B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_068)
{
    uint32_t const cps[2] = { 0x24B2, 0x003F };

    // 24B2 003F;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[0318 1F5B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B2 003F;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[1F5B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F5B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_069)
{
    uint32_t const cps[2] = { 0x1F126, 0x003F };

    // 1F126 003F;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[0318 1F5B 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F126 003F;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[1F5B | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F5B, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_070)
{
    uint32_t const cps[2] = { 0x24B2, 0x0061 };

    // 24B2 0061;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[0318 1F5B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B2 0061;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[1F5B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_071)
{
    uint32_t const cps[2] = { 0x24B2, 0x0041 };

    // 24B2 0041;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[0318 1F5B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B2 0041;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[1F5B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_072)
{
    uint32_t const cps[2] = { 0x1F126, 0x0061 };

    // 1F126 0061;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[0318 1F5B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F126 0061;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[1F5B 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_073)
{
    uint32_t const cps[2] = { 0x1F126, 0x0041 };

    // 1F126 0041;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[0318 1F5B 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F126 0041;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[1F5B 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_074)
{
    uint32_t const cps[2] = { 0x24B2, 0x0062 };

    // 24B2 0062;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[0318 1F5B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B2 0062;	
    // (⒲) PARENTHESIZED LATIN SMALL LETTER W	[1F5B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_075)
{
    uint32_t const cps[2] = { 0x1F126, 0x0062 };

    // 1F126 0062;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[0318 1F5B 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F5B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F126 0062;	
    // (🄦) PARENTHESIZED LATIN CAPITAL LETTER W	[1F5B 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_076)
{
    uint32_t const cps[2] = { 0x24B3, 0x0021 };

    // 24B3 0021;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[0318 1F65 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B3 0021;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[1F65 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F65, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_077)
{
    uint32_t const cps[2] = { 0x1F127, 0x0021 };

    // 1F127 0021;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[0318 1F65 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F127 0021;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[1F65 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F65, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_078)
{
    uint32_t const cps[2] = { 0x24B3, 0x003F };

    // 24B3 003F;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[0318 1F65 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B3 003F;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[1F65 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F65, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_079)
{
    uint32_t const cps[2] = { 0x1F127, 0x003F };

    // 1F127 003F;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[0318 1F65 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F127 003F;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[1F65 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F65, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_080)
{
    uint32_t const cps[2] = { 0x24B3, 0x0061 };

    // 24B3 0061;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[0318 1F65 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B3 0061;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[1F65 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_081)
{
    uint32_t const cps[2] = { 0x24B3, 0x0041 };

    // 24B3 0041;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[0318 1F65 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B3 0041;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[1F65 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_082)
{
    uint32_t const cps[2] = { 0x1F127, 0x0061 };

    // 1F127 0061;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[0318 1F65 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F127 0061;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_083)
{
    uint32_t const cps[2] = { 0x1F127, 0x0041 };

    // 1F127 0041;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[0318 1F65 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F127 0041;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_084)
{
    uint32_t const cps[2] = { 0x24B3, 0x0062 };

    // 24B3 0062;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[0318 1F65 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B3 0062;	
    // (⒳) PARENTHESIZED LATIN SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_085)
{
    uint32_t const cps[2] = { 0x1F127, 0x0062 };

    // 1F127 0062;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[0318 1F65 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F65, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F127 0062;	
    // (🄧) PARENTHESIZED LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_086)
{
    uint32_t const cps[2] = { 0x24B4, 0x0021 };

    // 24B4 0021;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[0318 1F71 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B4 0021;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[1F71 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F71, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_087)
{
    uint32_t const cps[2] = { 0x1F128, 0x0021 };

    // 1F128 0021;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[0318 1F71 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F128 0021;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[1F71 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F71, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_088)
{
    uint32_t const cps[2] = { 0x24B4, 0x003F };

    // 24B4 003F;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[0318 1F71 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B4 003F;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[1F71 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F71, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_089)
{
    uint32_t const cps[2] = { 0x1F128, 0x003F };

    // 1F128 003F;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[0318 1F71 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F128 003F;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[1F71 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F71, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_090)
{
    uint32_t const cps[2] = { 0x24B4, 0x0061 };

    // 24B4 0061;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[0318 1F71 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B4 0061;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_091)
{
    uint32_t const cps[2] = { 0x24B4, 0x0041 };

    // 24B4 0041;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[0318 1F71 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B4 0041;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_092)
{
    uint32_t const cps[2] = { 0x1F128, 0x0061 };

    // 1F128 0061;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[0318 1F71 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F128 0061;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_093)
{
    uint32_t const cps[2] = { 0x1F128, 0x0041 };

    // 1F128 0041;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[0318 1F71 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F128 0041;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_094)
{
    uint32_t const cps[2] = { 0x24B4, 0x0062 };

    // 24B4 0062;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[0318 1F71 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B4 0062;	
    // (⒴) PARENTHESIZED LATIN SMALL LETTER Y	[1F71 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_095)
{
    uint32_t const cps[2] = { 0x1F128, 0x0062 };

    // 1F128 0062;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[0318 1F71 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F71, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F128 0062;	
    // (🄨) PARENTHESIZED LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_096)
{
    uint32_t const cps[2] = { 0x24B5, 0x0021 };

    // 24B5 0021;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[0318 1F87 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B5 0021;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[1F87 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F87, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_097)
{
    uint32_t const cps[2] = { 0x1F129, 0x0021 };

    // 1F129 0021;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[0318 1F87 0319 0261 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F129 0021;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[1F87 | 0020 | 000A | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x1F87, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_098)
{
    uint32_t const cps[2] = { 0x24B5, 0x003F };

    // 24B5 003F;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[0318 1F87 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B5 003F;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[1F87 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F87, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_099)
{
    uint32_t const cps[2] = { 0x1F129, 0x003F };

    // 1F129 003F;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[0318 1F87 0319 0267 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F129 003F;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[1F87 | 0020 | 000A | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x1F87, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_100)
{
    uint32_t const cps[2] = { 0x24B5, 0x0061 };

    // 24B5 0061;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[0318 1F87 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B5 0061;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_101)
{
    uint32_t const cps[2] = { 0x24B5, 0x0041 };

    // 24B5 0041;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[0318 1F87 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B5 0041;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[1F87 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_102)
{
    uint32_t const cps[2] = { 0x1F129, 0x0061 };

    // 1F129 0061;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[0318 1F87 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F129 0061;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_103)
{
    uint32_t const cps[2] = { 0x1F129, 0x0041 };

    // 1F129 0041;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[0318 1F87 0319 1CAD | 0020 0020 0020 0020 | 0004 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F129 0041;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[1F87 1CAD | 0020 0020 | 000A 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_104)
{
    uint32_t const cps[2] = { 0x24B5, 0x0062 };

    // 24B5 0062;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[0318 1F87 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B5 0062;	
    // (⒵) PARENTHESIZED LATIN SMALL LETTER Z	[1F87 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_105)
{
    uint32_t const cps[2] = { 0x1F129, 0x0062 };

    // 1F129 0062;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[0318 1F87 0319 1CC6 | 0020 0020 0020 0020 | 0004 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x1F87, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F129 0062;	
    // (🄩) PARENTHESIZED LATIN CAPITAL LETTER Z	[1F87 1CC6 | 0020 0020 | 000A 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_106)
{
    uint32_t const cps[2] = { 0x3200, 0x0021 };

    // 3200 0021;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[0318 3D0C 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0C, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3200 0021;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[3D0C | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D0C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_107)
{
    uint32_t const cps[2] = { 0x3200, 0x003F };

    // 3200 003F;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[0318 3D0C 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0C, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3200 003F;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[3D0C | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D0C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_108)
{
    uint32_t const cps[2] = { 0x3200, 0x0061 };

    // 3200 0061;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[0318 3D0C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3200 0061;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[3D0C 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_109)
{
    uint32_t const cps[2] = { 0x3200, 0x0041 };

    // 3200 0041;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[0318 3D0C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3200 0041;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[3D0C 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_110)
{
    uint32_t const cps[2] = { 0x3200, 0x0062 };

    // 3200 0062;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[0318 3D0C 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0C, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3200 0062;	
    // (㈀) PARENTHESIZED HANGUL KIYEOK	[3D0C 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_111)
{
    uint32_t const cps[2] = { 0x320E, 0x0021 };

    // 320E 0021;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[0318 3D0C 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0C, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320E 0021;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[3D0C 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D0C, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_112)
{
    uint32_t const cps[2] = { 0x320E, 0x003F };

    // 320E 003F;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[0318 3D0C 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0C, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320E 003F;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[3D0C 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D0C, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_113)
{
    uint32_t const cps[2] = { 0x320E, 0x0061 };

    // 320E 0061;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[0318 3D0C 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0C, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320E 0061;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[3D0C 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0C, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_114)
{
    uint32_t const cps[2] = { 0x320E, 0x0041 };

    // 320E 0041;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[0318 3D0C 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0C, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320E 0041;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[3D0C 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0C, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_115)
{
    uint32_t const cps[2] = { 0x320E, 0x0062 };

    // 320E 0062;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[0318 3D0C 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0C, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320E 0062;	
    // (㈎) PARENTHESIZED HANGUL KIYEOK A	[3D0C 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0C, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_116)
{
    uint32_t const cps[2] = { 0x3201, 0x0021 };

    // 3201 0021;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[0318 3D0E 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0E, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3201 0021;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[3D0E | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D0E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_117)
{
    uint32_t const cps[2] = { 0x3201, 0x003F };

    // 3201 003F;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[0318 3D0E 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0E, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3201 003F;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[3D0E | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D0E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_118)
{
    uint32_t const cps[2] = { 0x3201, 0x0061 };

    // 3201 0061;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[0318 3D0E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3201 0061;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[3D0E 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_119)
{
    uint32_t const cps[2] = { 0x3201, 0x0041 };

    // 3201 0041;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[0318 3D0E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3201 0041;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[3D0E 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_120)
{
    uint32_t const cps[2] = { 0x3201, 0x0062 };

    // 3201 0062;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[0318 3D0E 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0E, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3201 0062;	
    // (㈁) PARENTHESIZED HANGUL NIEUN	[3D0E 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_121)
{
    uint32_t const cps[2] = { 0x320F, 0x0021 };

    // 320F 0021;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[0318 3D0E 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0E, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320F 0021;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[3D0E 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D0E, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_122)
{
    uint32_t const cps[2] = { 0x320F, 0x003F };

    // 320F 003F;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[0318 3D0E 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0E, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320F 003F;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[3D0E 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D0E, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_123)
{
    uint32_t const cps[2] = { 0x320F, 0x0061 };

    // 320F 0061;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[0318 3D0E 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0E, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320F 0061;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[3D0E 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0E, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_124)
{
    uint32_t const cps[2] = { 0x320F, 0x0041 };

    // 320F 0041;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[0318 3D0E 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0E, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320F 0041;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[3D0E 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0E, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_125)
{
    uint32_t const cps[2] = { 0x320F, 0x0062 };

    // 320F 0062;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[0318 3D0E 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0E, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320F 0062;	
    // (㈏) PARENTHESIZED HANGUL NIEUN A	[3D0E 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0E, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_126)
{
    uint32_t const cps[2] = { 0x3202, 0x0021 };

    // 3202 0021;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[0318 3D0F 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0F, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3202 0021;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[3D0F | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D0F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_127)
{
    uint32_t const cps[2] = { 0x3202, 0x003F };

    // 3202 003F;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[0318 3D0F 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0F, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3202 003F;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[3D0F | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D0F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_128)
{
    uint32_t const cps[2] = { 0x3202, 0x0061 };

    // 3202 0061;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[0318 3D0F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3202 0061;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[3D0F 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_129)
{
    uint32_t const cps[2] = { 0x3202, 0x0041 };

    // 3202 0041;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[0318 3D0F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3202 0041;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[3D0F 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_130)
{
    uint32_t const cps[2] = { 0x3202, 0x0062 };

    // 3202 0062;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[0318 3D0F 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D0F, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3202 0062;	
    // (㈂) PARENTHESIZED HANGUL TIKEUT	[3D0F 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_131)
{
    uint32_t const cps[2] = { 0x3210, 0x0021 };

    // 3210 0021;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[0318 3D0F 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0F, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3210 0021;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[3D0F 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D0F, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_132)
{
    uint32_t const cps[2] = { 0x3210, 0x003F };

    // 3210 003F;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[0318 3D0F 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0F, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3210 003F;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[3D0F 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D0F, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_133)
{
    uint32_t const cps[2] = { 0x3210, 0x0061 };

    // 3210 0061;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[0318 3D0F 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0F, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3210 0061;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[3D0F 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0F, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_134)
{
    uint32_t const cps[2] = { 0x3210, 0x0041 };

    // 3210 0041;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[0318 3D0F 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0F, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3210 0041;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[3D0F 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0F, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_135)
{
    uint32_t const cps[2] = { 0x3210, 0x0062 };

    // 3210 0062;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[0318 3D0F 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D0F, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3210 0062;	
    // (㈐) PARENTHESIZED HANGUL TIKEUT A	[3D0F 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D0F, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_136)
{
    uint32_t const cps[2] = { 0x3203, 0x0021 };

    // 3203 0021;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[0318 3D11 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D11, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3203 0021;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[3D11 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D11, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_137)
{
    uint32_t const cps[2] = { 0x3203, 0x003F };

    // 3203 003F;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[0318 3D11 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D11, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3203 003F;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[3D11 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D11, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_138)
{
    uint32_t const cps[2] = { 0x3203, 0x0061 };

    // 3203 0061;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[0318 3D11 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D11, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3203 0061;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[3D11 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_139)
{
    uint32_t const cps[2] = { 0x3203, 0x0041 };

    // 3203 0041;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[0318 3D11 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D11, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3203 0041;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[3D11 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_140)
{
    uint32_t const cps[2] = { 0x3203, 0x0062 };

    // 3203 0062;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[0318 3D11 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D11, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3203 0062;	
    // (㈃) PARENTHESIZED HANGUL RIEUL	[3D11 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_141)
{
    uint32_t const cps[2] = { 0x3211, 0x0021 };

    // 3211 0021;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[0318 3D11 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D11, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3211 0021;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[3D11 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D11, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_142)
{
    uint32_t const cps[2] = { 0x3211, 0x003F };

    // 3211 003F;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[0318 3D11 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D11, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3211 003F;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[3D11 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D11, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_143)
{
    uint32_t const cps[2] = { 0x3211, 0x0061 };

    // 3211 0061;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[0318 3D11 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D11, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3211 0061;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[3D11 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D11, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_144)
{
    uint32_t const cps[2] = { 0x3211, 0x0041 };

    // 3211 0041;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[0318 3D11 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D11, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3211 0041;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[3D11 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D11, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_145)
{
    uint32_t const cps[2] = { 0x3211, 0x0062 };

    // 3211 0062;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[0318 3D11 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D11, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3211 0062;	
    // (㈑) PARENTHESIZED HANGUL RIEUL A	[3D11 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D11, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_146)
{
    uint32_t const cps[2] = { 0x3204, 0x0021 };

    // 3204 0021;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[0318 3D12 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D12, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3204 0021;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[3D12 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D12, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_147)
{
    uint32_t const cps[2] = { 0x3204, 0x003F };

    // 3204 003F;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[0318 3D12 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D12, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3204 003F;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[3D12 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D12, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_148)
{
    uint32_t const cps[2] = { 0x3204, 0x0061 };

    // 3204 0061;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[0318 3D12 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D12, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3204 0061;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[3D12 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_149)
{
    uint32_t const cps[2] = { 0x3204, 0x0041 };

    // 3204 0041;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[0318 3D12 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D12, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3204 0041;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[3D12 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_150)
{
    uint32_t const cps[2] = { 0x3204, 0x0062 };

    // 3204 0062;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[0318 3D12 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D12, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3204 0062;	
    // (㈄) PARENTHESIZED HANGUL MIEUM	[3D12 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_151)
{
    uint32_t const cps[2] = { 0x3212, 0x0021 };

    // 3212 0021;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[0318 3D12 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D12, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3212 0021;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[3D12 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D12, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_152)
{
    uint32_t const cps[2] = { 0x3212, 0x003F };

    // 3212 003F;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[0318 3D12 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D12, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3212 003F;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[3D12 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D12, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_153)
{
    uint32_t const cps[2] = { 0x3212, 0x0061 };

    // 3212 0061;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[0318 3D12 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D12, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3212 0061;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[3D12 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D12, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_154)
{
    uint32_t const cps[2] = { 0x3212, 0x0041 };

    // 3212 0041;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[0318 3D12 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D12, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3212 0041;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[3D12 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D12, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_155)
{
    uint32_t const cps[2] = { 0x3212, 0x0062 };

    // 3212 0062;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[0318 3D12 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D12, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3212 0062;	
    // (㈒) PARENTHESIZED HANGUL MIEUM A	[3D12 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D12, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_156)
{
    uint32_t const cps[2] = { 0x3205, 0x0021 };

    // 3205 0021;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[0318 3D13 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D13, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3205 0021;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[3D13 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D13, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_157)
{
    uint32_t const cps[2] = { 0x3205, 0x003F };

    // 3205 003F;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[0318 3D13 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D13, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3205 003F;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[3D13 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D13, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_158)
{
    uint32_t const cps[2] = { 0x3205, 0x0061 };

    // 3205 0061;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[0318 3D13 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D13, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3205 0061;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[3D13 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_159)
{
    uint32_t const cps[2] = { 0x3205, 0x0041 };

    // 3205 0041;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[0318 3D13 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D13, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3205 0041;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[3D13 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_160)
{
    uint32_t const cps[2] = { 0x3205, 0x0062 };

    // 3205 0062;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[0318 3D13 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D13, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3205 0062;	
    // (㈅) PARENTHESIZED HANGUL PIEUP	[3D13 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_161)
{
    uint32_t const cps[2] = { 0x3213, 0x0021 };

    // 3213 0021;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[0318 3D13 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D13, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3213 0021;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[3D13 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D13, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_162)
{
    uint32_t const cps[2] = { 0x3213, 0x003F };

    // 3213 003F;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[0318 3D13 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D13, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3213 003F;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[3D13 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D13, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_163)
{
    uint32_t const cps[2] = { 0x3213, 0x0061 };

    // 3213 0061;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[0318 3D13 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D13, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3213 0061;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[3D13 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D13, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_164)
{
    uint32_t const cps[2] = { 0x3213, 0x0041 };

    // 3213 0041;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[0318 3D13 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D13, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3213 0041;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[3D13 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D13, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_165)
{
    uint32_t const cps[2] = { 0x3213, 0x0062 };

    // 3213 0062;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[0318 3D13 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D13, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3213 0062;	
    // (㈓) PARENTHESIZED HANGUL PIEUP A	[3D13 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D13, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_166)
{
    uint32_t const cps[2] = { 0x3206, 0x0021 };

    // 3206 0021;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[0318 3D15 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D15, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3206 0021;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[3D15 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D15, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_167)
{
    uint32_t const cps[2] = { 0x3206, 0x003F };

    // 3206 003F;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[0318 3D15 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D15, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3206 003F;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[3D15 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D15, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_168)
{
    uint32_t const cps[2] = { 0x3206, 0x0061 };

    // 3206 0061;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[0318 3D15 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D15, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3206 0061;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[3D15 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_169)
{
    uint32_t const cps[2] = { 0x3206, 0x0041 };

    // 3206 0041;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[0318 3D15 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D15, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3206 0041;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[3D15 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_170)
{
    uint32_t const cps[2] = { 0x3206, 0x0062 };

    // 3206 0062;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[0318 3D15 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D15, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3206 0062;	
    // (㈆) PARENTHESIZED HANGUL SIOS	[3D15 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_171)
{
    uint32_t const cps[2] = { 0x3214, 0x0021 };

    // 3214 0021;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[0318 3D15 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D15, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3214 0021;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[3D15 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D15, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_172)
{
    uint32_t const cps[2] = { 0x3214, 0x003F };

    // 3214 003F;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[0318 3D15 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D15, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3214 003F;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[3D15 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D15, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_173)
{
    uint32_t const cps[2] = { 0x3214, 0x0061 };

    // 3214 0061;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[0318 3D15 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D15, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3214 0061;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[3D15 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D15, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_174)
{
    uint32_t const cps[2] = { 0x3214, 0x0041 };

    // 3214 0041;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[0318 3D15 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D15, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3214 0041;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[3D15 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D15, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_175)
{
    uint32_t const cps[2] = { 0x3214, 0x0062 };

    // 3214 0062;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[0318 3D15 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D15, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3214 0062;	
    // (㈔) PARENTHESIZED HANGUL SIOS A	[3D15 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D15, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_176)
{
    uint32_t const cps[2] = { 0x3207, 0x0021 };

    // 3207 0021;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[0318 3D17 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D17, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3207 0021;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[3D17 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D17, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_177)
{
    uint32_t const cps[2] = { 0x3207, 0x003F };

    // 3207 003F;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[0318 3D17 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D17, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3207 003F;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[3D17 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D17, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_178)
{
    uint32_t const cps[2] = { 0x3207, 0x0061 };

    // 3207 0061;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[0318 3D17 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D17, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3207 0061;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[3D17 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_179)
{
    uint32_t const cps[2] = { 0x3207, 0x0041 };

    // 3207 0041;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[0318 3D17 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D17, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3207 0041;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[3D17 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_180)
{
    uint32_t const cps[2] = { 0x3207, 0x0062 };

    // 3207 0062;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[0318 3D17 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D17, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3207 0062;	
    // (㈇) PARENTHESIZED HANGUL IEUNG	[3D17 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_181)
{
    uint32_t const cps[2] = { 0x3215, 0x0021 };

    // 3215 0021;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[0318 3D17 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D17, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3215 0021;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[3D17 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D17, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_182)
{
    uint32_t const cps[2] = { 0x3215, 0x003F };

    // 3215 003F;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[0318 3D17 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D17, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3215 003F;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[3D17 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D17, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_183)
{
    uint32_t const cps[2] = { 0x3215, 0x0061 };

    // 3215 0061;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[0318 3D17 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D17, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3215 0061;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[3D17 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D17, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_184)
{
    uint32_t const cps[2] = { 0x3215, 0x0041 };

    // 3215 0041;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[0318 3D17 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D17, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3215 0041;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[3D17 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D17, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_185)
{
    uint32_t const cps[2] = { 0x3215, 0x0062 };

    // 3215 0062;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[0318 3D17 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D17, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3215 0062;	
    // (㈕) PARENTHESIZED HANGUL IEUNG A	[3D17 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D17, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_186)
{
    uint32_t const cps[2] = { 0x321D, 0x0021 };

    // 321D 0021;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[0318 3D17 3D92 3D18 3D8E 3DEB 0319 0261 | 0020 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[26] = { 0x0318, 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321D 0021;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[3D17 3D92 3D18 3D8E 3DEB | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 | 0318 FFFF FFFF FFFF FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[26] = { 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_187)
{
    uint32_t const cps[2] = { 0x321D, 0x003F };

    // 321D 003F;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[0318 3D17 3D92 3D18 3D8E 3DEB 0319 0267 | 0020 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[26] = { 0x0318, 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321D 003F;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[3D17 3D92 3D18 3D8E 3DEB | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 | 0318 FFFF FFFF FFFF FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[26] = { 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_188)
{
    uint32_t const cps[2] = { 0x321D, 0x0061 };

    // 321D 0061;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[0318 3D17 3D92 3D18 3D8E 3DEB 0319 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[26] = { 0x0318, 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321D 0061;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[3D17 3D92 3D18 3D8E 3DEB 1CAD | 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0002 | 0318 FFFF FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[29] = { 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 29);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 29))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_189)
{
    uint32_t const cps[2] = { 0x321D, 0x0041 };

    // 321D 0041;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[0318 3D17 3D92 3D18 3D8E 3DEB 0319 1CAD | 0020 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[26] = { 0x0318, 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321D 0041;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[3D17 3D92 3D18 3D8E 3DEB 1CAD | 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0008 | 0318 FFFF FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[29] = { 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 29);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 29))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_190)
{
    uint32_t const cps[2] = { 0x321D, 0x0062 };

    // 321D 0062;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[0318 3D17 3D92 3D18 3D8E 3DEB 0319 1CC6 | 0020 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[26] = { 0x0318, 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 26);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 26))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321D 0062;	
    // (㈝) PARENTHESIZED KOREAN CHARACTER OJEON	[3D17 3D92 3D18 3D8E 3DEB 1CC6 | 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0002 | 0318 FFFF FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[29] = { 0x3D17, 0x3D92, 0x3D18, 0x3D8E, 0x3DEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 29);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 29))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_191)
{
    uint32_t const cps[2] = { 0x321E, 0x0021 };

    // 321E 0021;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[0318 3D17 3D92 3D1E 3D97 0319 0261 | 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x0318, 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321E 0021;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[3D17 3D92 3D1E 3D97 | 0020 0020 0020 0020 | 0004 0004 0004 0004 | 0318 FFFF FFFF FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[22] = { 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_192)
{
    uint32_t const cps[2] = { 0x321E, 0x003F };

    // 321E 003F;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[0318 3D17 3D92 3D1E 3D97 0319 0267 | 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x0318, 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321E 003F;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[3D17 3D92 3D1E 3D97 | 0020 0020 0020 0020 | 0004 0004 0004 0004 | 0318 FFFF FFFF FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[22] = { 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_193)
{
    uint32_t const cps[2] = { 0x321E, 0x0061 };

    // 321E 0061;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[0318 3D17 3D92 3D1E 3D97 0319 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x0318, 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321E 0061;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[3D17 3D92 3D1E 3D97 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 | 0318 FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[25] = { 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_194)
{
    uint32_t const cps[2] = { 0x321E, 0x0041 };

    // 321E 0041;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[0318 3D17 3D92 3D1E 3D97 0319 1CAD | 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[23] = { 0x0318, 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321E 0041;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[3D17 3D92 3D1E 3D97 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 | 0318 FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[25] = { 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_195)
{
    uint32_t const cps[2] = { 0x321E, 0x0062 };

    // 321E 0062;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[0318 3D17 3D92 3D1E 3D97 0319 1CC6 | 0020 0020 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[23] = { 0x0318, 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321E 0062;	
    // (㈞) PARENTHESIZED KOREAN CHARACTER O HU	[3D17 3D92 3D1E 3D97 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 | 0318 FFFF FFFF FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[25] = { 0x3D17, 0x3D92, 0x3D1E, 0x3D97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 25);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 25))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_196)
{
    uint32_t const cps[2] = { 0x3208, 0x0021 };

    // 3208 0021;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[0318 3D18 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D18, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3208 0021;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[3D18 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D18, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_197)
{
    uint32_t const cps[2] = { 0x3208, 0x003F };

    // 3208 003F;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[0318 3D18 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D18, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3208 003F;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[3D18 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D18, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_198)
{
    uint32_t const cps[2] = { 0x3208, 0x0061 };

    // 3208 0061;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[0318 3D18 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D18, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3208 0061;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[3D18 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_199)
{
    uint32_t const cps[2] = { 0x3208, 0x0041 };

    // 3208 0041;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[0318 3D18 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D18, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3208 0041;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[3D18 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_200)
{
    uint32_t const cps[2] = { 0x3208, 0x0062 };

    // 3208 0062;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[0318 3D18 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D18, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3208 0062;	
    // (㈈) PARENTHESIZED HANGUL CIEUC	[3D18 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_201)
{
    uint32_t const cps[2] = { 0x3216, 0x0021 };

    // 3216 0021;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[0318 3D18 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3216 0021;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[3D18 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D18, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_202)
{
    uint32_t const cps[2] = { 0x3216, 0x003F };

    // 3216 003F;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[0318 3D18 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3216 003F;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[3D18 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D18, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_203)
{
    uint32_t const cps[2] = { 0x3216, 0x0061 };

    // 3216 0061;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[0318 3D18 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3216 0061;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[3D18 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_204)
{
    uint32_t const cps[2] = { 0x3216, 0x0041 };

    // 3216 0041;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[0318 3D18 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3216 0041;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[3D18 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_205)
{
    uint32_t const cps[2] = { 0x3216, 0x0062 };

    // 3216 0062;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[0318 3D18 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3216 0062;	
    // (㈖) PARENTHESIZED HANGUL CIEUC A	[3D18 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_206)
{
    uint32_t const cps[2] = { 0x321C, 0x0021 };

    // 321C 0021;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[0318 3D18 3D97 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D97, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321C 0021;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[3D18 3D97 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D18, 0x3D97, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_207)
{
    uint32_t const cps[2] = { 0x321C, 0x003F };

    // 321C 003F;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[0318 3D18 3D97 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D97, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321C 003F;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[3D18 3D97 | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D18, 0x3D97, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_208)
{
    uint32_t const cps[2] = { 0x321C, 0x0061 };

    // 321C 0061;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[0318 3D18 3D97 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D97, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321C 0061;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[3D18 3D97 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_209)
{
    uint32_t const cps[2] = { 0x321C, 0x0041 };

    // 321C 0041;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[0318 3D18 3D97 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D97, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321C 0041;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[3D18 3D97 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_210)
{
    uint32_t const cps[2] = { 0x321C, 0x0062 };

    // 321C 0062;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[0318 3D18 3D97 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D18, 0x3D97, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321C 0062;	
    // (㈜) PARENTHESIZED HANGUL CIEUC U	[3D18 3D97 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D18, 0x3D97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_211)
{
    uint32_t const cps[2] = { 0x3209, 0x0021 };

    // 3209 0021;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[0318 3D1A 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3209 0021;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[3D1A | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D1A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_212)
{
    uint32_t const cps[2] = { 0x3209, 0x003F };

    // 3209 003F;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[0318 3D1A 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3209 003F;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[3D1A | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D1A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_213)
{
    uint32_t const cps[2] = { 0x3209, 0x0061 };

    // 3209 0061;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[0318 3D1A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3209 0061;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[3D1A 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_214)
{
    uint32_t const cps[2] = { 0x3209, 0x0041 };

    // 3209 0041;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[0318 3D1A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3209 0041;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[3D1A 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_215)
{
    uint32_t const cps[2] = { 0x3209, 0x0062 };

    // 3209 0062;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[0318 3D1A 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3209 0062;	
    // (㈉) PARENTHESIZED HANGUL CHIEUCH	[3D1A 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_216)
{
    uint32_t const cps[2] = { 0x3217, 0x0021 };

    // 3217 0021;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[0318 3D1A 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1A, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3217 0021;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[3D1A 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D1A, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_217)
{
    uint32_t const cps[2] = { 0x3217, 0x003F };

    // 3217 003F;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[0318 3D1A 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1A, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3217 003F;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[3D1A 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D1A, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_218)
{
    uint32_t const cps[2] = { 0x3217, 0x0061 };

    // 3217 0061;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[0318 3D1A 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1A, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3217 0061;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[3D1A 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1A, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_219)
{
    uint32_t const cps[2] = { 0x3217, 0x0041 };

    // 3217 0041;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[0318 3D1A 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1A, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3217 0041;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[3D1A 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1A, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_220)
{
    uint32_t const cps[2] = { 0x3217, 0x0062 };

    // 3217 0062;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[0318 3D1A 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1A, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3217 0062;	
    // (㈗) PARENTHESIZED HANGUL CHIEUCH A	[3D1A 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1A, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_221)
{
    uint32_t const cps[2] = { 0x320A, 0x0021 };

    // 320A 0021;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[0318 3D1B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320A 0021;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[3D1B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D1B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_222)
{
    uint32_t const cps[2] = { 0x320A, 0x003F };

    // 320A 003F;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[0318 3D1B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320A 003F;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[3D1B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D1B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_223)
{
    uint32_t const cps[2] = { 0x320A, 0x0061 };

    // 320A 0061;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[0318 3D1B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320A 0061;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[3D1B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_224)
{
    uint32_t const cps[2] = { 0x320A, 0x0041 };

    // 320A 0041;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[0318 3D1B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320A 0041;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[3D1B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_225)
{
    uint32_t const cps[2] = { 0x320A, 0x0062 };

    // 320A 0062;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[0318 3D1B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320A 0062;	
    // (㈊) PARENTHESIZED HANGUL KHIEUKH	[3D1B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_226)
{
    uint32_t const cps[2] = { 0x3218, 0x0021 };

    // 3218 0021;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[0318 3D1B 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1B, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3218 0021;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[3D1B 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D1B, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_227)
{
    uint32_t const cps[2] = { 0x3218, 0x003F };

    // 3218 003F;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[0318 3D1B 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1B, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3218 003F;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[3D1B 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D1B, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_228)
{
    uint32_t const cps[2] = { 0x3218, 0x0061 };

    // 3218 0061;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[0318 3D1B 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1B, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3218 0061;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[3D1B 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1B, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_229)
{
    uint32_t const cps[2] = { 0x3218, 0x0041 };

    // 3218 0041;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[0318 3D1B 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1B, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3218 0041;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[3D1B 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1B, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_230)
{
    uint32_t const cps[2] = { 0x3218, 0x0062 };

    // 3218 0062;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[0318 3D1B 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1B, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3218 0062;	
    // (㈘) PARENTHESIZED HANGUL KHIEUKH A	[3D1B 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1B, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_231)
{
    uint32_t const cps[2] = { 0x320B, 0x0021 };

    // 320B 0021;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[0318 3D1C 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1C, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320B 0021;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[3D1C | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D1C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_232)
{
    uint32_t const cps[2] = { 0x320B, 0x003F };

    // 320B 003F;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[0318 3D1C 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1C, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320B 003F;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[3D1C | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D1C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_233)
{
    uint32_t const cps[2] = { 0x320B, 0x0061 };

    // 320B 0061;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[0318 3D1C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320B 0061;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[3D1C 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_234)
{
    uint32_t const cps[2] = { 0x320B, 0x0041 };

    // 320B 0041;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[0318 3D1C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320B 0041;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[3D1C 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_235)
{
    uint32_t const cps[2] = { 0x320B, 0x0062 };

    // 320B 0062;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[0318 3D1C 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1C, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320B 0062;	
    // (㈋) PARENTHESIZED HANGUL THIEUTH	[3D1C 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_236)
{
    uint32_t const cps[2] = { 0x3219, 0x0021 };

    // 3219 0021;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[0318 3D1C 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1C, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3219 0021;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[3D1C 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D1C, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_237)
{
    uint32_t const cps[2] = { 0x3219, 0x003F };

    // 3219 003F;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[0318 3D1C 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1C, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3219 003F;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[3D1C 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D1C, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_238)
{
    uint32_t const cps[2] = { 0x3219, 0x0061 };

    // 3219 0061;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[0318 3D1C 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1C, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3219 0061;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[3D1C 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1C, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_239)
{
    uint32_t const cps[2] = { 0x3219, 0x0041 };

    // 3219 0041;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[0318 3D1C 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1C, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3219 0041;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[3D1C 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1C, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_240)
{
    uint32_t const cps[2] = { 0x3219, 0x0062 };

    // 3219 0062;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[0318 3D1C 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1C, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3219 0062;	
    // (㈙) PARENTHESIZED HANGUL THIEUTH A	[3D1C 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1C, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_241)
{
    uint32_t const cps[2] = { 0x320C, 0x0021 };

    // 320C 0021;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[0318 3D1D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320C 0021;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[3D1D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D1D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_242)
{
    uint32_t const cps[2] = { 0x320C, 0x003F };

    // 320C 003F;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[0318 3D1D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320C 003F;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[3D1D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D1D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_243)
{
    uint32_t const cps[2] = { 0x320C, 0x0061 };

    // 320C 0061;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[0318 3D1D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320C 0061;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[3D1D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_244)
{
    uint32_t const cps[2] = { 0x320C, 0x0041 };

    // 320C 0041;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[0318 3D1D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320C 0041;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[3D1D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_245)
{
    uint32_t const cps[2] = { 0x320C, 0x0062 };

    // 320C 0062;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[0318 3D1D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320C 0062;	
    // (㈌) PARENTHESIZED HANGUL PHIEUPH	[3D1D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_246)
{
    uint32_t const cps[2] = { 0x321A, 0x0021 };

    // 321A 0021;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[0318 3D1D 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1D, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321A 0021;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[3D1D 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D1D, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_247)
{
    uint32_t const cps[2] = { 0x321A, 0x003F };

    // 321A 003F;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[0318 3D1D 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1D, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321A 003F;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[3D1D 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D1D, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_248)
{
    uint32_t const cps[2] = { 0x321A, 0x0061 };

    // 321A 0061;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[0318 3D1D 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1D, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321A 0061;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[3D1D 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1D, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_249)
{
    uint32_t const cps[2] = { 0x321A, 0x0041 };

    // 321A 0041;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[0318 3D1D 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1D, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321A 0041;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[3D1D 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1D, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_250)
{
    uint32_t const cps[2] = { 0x321A, 0x0062 };

    // 321A 0062;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[0318 3D1D 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1D, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321A 0062;	
    // (㈚) PARENTHESIZED HANGUL PHIEUPH A	[3D1D 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1D, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_251)
{
    uint32_t const cps[2] = { 0x320D, 0x0021 };

    // 320D 0021;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[0318 3D1E 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1E, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320D 0021;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[3D1E | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[10] = { 0x3D1E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_252)
{
    uint32_t const cps[2] = { 0x320D, 0x003F };

    // 320D 003F;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[0318 3D1E 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1E, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320D 003F;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[3D1E | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[10] = { 0x3D1E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_253)
{
    uint32_t const cps[2] = { 0x320D, 0x0061 };

    // 320D 0061;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[0318 3D1E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320D 0061;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[3D1E 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_254)
{
    uint32_t const cps[2] = { 0x320D, 0x0041 };

    // 320D 0041;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[0318 3D1E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320D 0041;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[3D1E 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_255)
{
    uint32_t const cps[2] = { 0x320D, 0x0062 };

    // 320D 0062;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[0318 3D1E 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x0318, 0x3D1E, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 320D 0062;	
    // (㈍) PARENTHESIZED HANGUL HIEUH	[3D1E 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[13] = { 0x3D1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_256)
{
    uint32_t const cps[2] = { 0x321B, 0x0021 };

    // 321B 0021;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[0318 3D1E 3D8A 0319 0261 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1E, 0x3D8A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321B 0021;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[3D1E 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0261 |]
    uint32_t const ces_shifted[14] = { 0x3D1E, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_257)
{
    uint32_t const cps[2] = { 0x321B, 0x003F };

    // 321B 003F;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[0318 3D1E 3D8A 0319 0267 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1E, 0x3D8A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321B 003F;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[3D1E 3D8A | 0020 0020 | 0004 0004 | 0318 FFFF FFFF 0319 0267 |]
    uint32_t const ces_shifted[14] = { 0x3D1E, 0x3D8A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_258)
{
    uint32_t const cps[2] = { 0x321B, 0x0061 };

    // 321B 0061;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[0318 3D1E 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1E, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321B 0061;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[3D1E 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1E, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_259)
{
    uint32_t const cps[2] = { 0x321B, 0x0041 };

    // 321B 0041;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[0318 3D1E 3D8A 0319 1CAD | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1E, 0x3D8A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321B 0041;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[3D1E 3D8A 1CAD | 0020 0020 0020 | 0004 0004 0008 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1E, 0x3D8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_260)
{
    uint32_t const cps[2] = { 0x321B, 0x0062 };

    // 321B 0062;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[0318 3D1E 3D8A 0319 1CC6 | 0020 0020 0020 0020 0020 | 0004 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[17] = { 0x0318, 0x3D1E, 0x3D8A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 321B 0062;	
    // (㈛) PARENTHESIZED HANGUL HIEUH A	[3D1E 3D8A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | 0318 FFFF FFFF 0319 FFFF |]
    uint32_t const ces_shifted[17] = { 0x3D1E, 0x3D8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_261)
{
    uint32_t const cps[2] = { 0x3220, 0x0021 };

    // 3220 0021;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[0318 FB40 CE00 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE00, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3220 0021;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[FB40 CE00 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE00, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_262)
{
    uint32_t const cps[2] = { 0x3220, 0x003F };

    // 3220 003F;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[0318 FB40 CE00 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE00, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3220 003F;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[FB40 CE00 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE00, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_263)
{
    uint32_t const cps[2] = { 0x3220, 0x0061 };

    // 3220 0061;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[0318 FB40 CE00 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE00, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3220 0061;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[FB40 CE00 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_264)
{
    uint32_t const cps[2] = { 0x3220, 0x0041 };

    // 3220 0041;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[0318 FB40 CE00 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE00, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3220 0041;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[FB40 CE00 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_265)
{
    uint32_t const cps[2] = { 0x3220, 0x0062 };

    // 3220 0062;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[0318 FB40 CE00 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE00, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3220 0062;	
    // (㈠) PARENTHESIZED IDEOGRAPH ONE	[FB40 CE00 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_266)
{
    uint32_t const cps[2] = { 0x3226, 0x0021 };

    // 3226 0021;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[0318 FB40 CE03 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE03, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3226 0021;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[FB40 CE03 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE03, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_267)
{
    uint32_t const cps[2] = { 0x3226, 0x003F };

    // 3226 003F;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[0318 FB40 CE03 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE03, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3226 003F;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[FB40 CE03 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE03, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_268)
{
    uint32_t const cps[2] = { 0x3226, 0x0061 };

    // 3226 0061;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[0318 FB40 CE03 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE03, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3226 0061;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[FB40 CE03 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_269)
{
    uint32_t const cps[2] = { 0x3226, 0x0041 };

    // 3226 0041;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[0318 FB40 CE03 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE03, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3226 0041;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[FB40 CE03 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_270)
{
    uint32_t const cps[2] = { 0x3226, 0x0062 };

    // 3226 0062;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[0318 FB40 CE03 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE03, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3226 0062;	
    // (㈦) PARENTHESIZED IDEOGRAPH SEVEN	[FB40 CE03 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_271)
{
    uint32_t const cps[2] = { 0x3222, 0x0021 };

    // 3222 0021;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[0318 FB40 CE09 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE09, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3222 0021;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[FB40 CE09 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE09, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_272)
{
    uint32_t const cps[2] = { 0x3222, 0x003F };

    // 3222 003F;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[0318 FB40 CE09 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE09, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3222 003F;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[FB40 CE09 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE09, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_273)
{
    uint32_t const cps[2] = { 0x3222, 0x0061 };

    // 3222 0061;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[0318 FB40 CE09 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE09, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3222 0061;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[FB40 CE09 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_274)
{
    uint32_t const cps[2] = { 0x3222, 0x0041 };

    // 3222 0041;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[0318 FB40 CE09 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE09, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3222 0041;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[FB40 CE09 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_275)
{
    uint32_t const cps[2] = { 0x3222, 0x0062 };

    // 3222 0062;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[0318 FB40 CE09 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE09, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3222 0062;	
    // (㈢) PARENTHESIZED IDEOGRAPH THREE	[FB40 CE09 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_276)
{
    uint32_t const cps[2] = { 0x3228, 0x0021 };

    // 3228 0021;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[0318 FB40 CE5D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE5D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3228 0021;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[FB40 CE5D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE5D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_277)
{
    uint32_t const cps[2] = { 0x3228, 0x003F };

    // 3228 003F;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[0318 FB40 CE5D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE5D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3228 003F;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[FB40 CE5D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE5D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_278)
{
    uint32_t const cps[2] = { 0x3228, 0x0061 };

    // 3228 0061;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[0318 FB40 CE5D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE5D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3228 0061;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[FB40 CE5D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_279)
{
    uint32_t const cps[2] = { 0x3228, 0x0041 };

    // 3228 0041;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[0318 FB40 CE5D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE5D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3228 0041;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[FB40 CE5D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_280)
{
    uint32_t const cps[2] = { 0x3228, 0x0062 };

    // 3228 0062;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[0318 FB40 CE5D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE5D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3228 0062;	
    // (㈨) PARENTHESIZED IDEOGRAPH NINE	[FB40 CE5D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_281)
{
    uint32_t const cps[2] = { 0x3221, 0x0021 };

    // 3221 0021;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[0318 FB40 CE8C 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE8C, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3221 0021;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[FB40 CE8C | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE8C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_282)
{
    uint32_t const cps[2] = { 0x3221, 0x003F };

    // 3221 003F;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[0318 FB40 CE8C 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE8C, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3221 003F;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[FB40 CE8C | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE8C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_283)
{
    uint32_t const cps[2] = { 0x3221, 0x0061 };

    // 3221 0061;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[0318 FB40 CE8C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE8C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3221 0061;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[FB40 CE8C 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_284)
{
    uint32_t const cps[2] = { 0x3221, 0x0041 };

    // 3221 0041;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[0318 FB40 CE8C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE8C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3221 0041;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[FB40 CE8C 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_285)
{
    uint32_t const cps[2] = { 0x3221, 0x0062 };

    // 3221 0062;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[0318 FB40 CE8C 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE8C, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3221 0062;	
    // (㈡) PARENTHESIZED IDEOGRAPH TWO	[FB40 CE8C 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_286)
{
    uint32_t const cps[2] = { 0x3224, 0x0021 };

    // 3224 0021;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[0318 FB40 CE94 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE94, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3224 0021;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[FB40 CE94 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE94, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_287)
{
    uint32_t const cps[2] = { 0x3224, 0x003F };

    // 3224 003F;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[0318 FB40 CE94 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE94, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3224 003F;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[FB40 CE94 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCE94, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_288)
{
    uint32_t const cps[2] = { 0x3224, 0x0061 };

    // 3224 0061;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[0318 FB40 CE94 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE94, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3224 0061;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[FB40 CE94 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_289)
{
    uint32_t const cps[2] = { 0x3224, 0x0041 };

    // 3224 0041;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[0318 FB40 CE94 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE94, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3224 0041;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[FB40 CE94 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_290)
{
    uint32_t const cps[2] = { 0x3224, 0x0062 };

    // 3224 0062;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[0318 FB40 CE94 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCE94, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3224 0062;	
    // (㈤) PARENTHESIZED IDEOGRAPH FIVE	[FB40 CE94 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCE94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_291)
{
    uint32_t const cps[2] = { 0x3239, 0x0021 };

    // 3239 0021;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[0318 FB40 CEE3 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCEE3, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3239 0021;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[FB40 CEE3 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCEE3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_292)
{
    uint32_t const cps[2] = { 0x3239, 0x003F };

    // 3239 003F;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[0318 FB40 CEE3 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCEE3, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3239 003F;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[FB40 CEE3 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCEE3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_293)
{
    uint32_t const cps[2] = { 0x3239, 0x0061 };

    // 3239 0061;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[0318 FB40 CEE3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCEE3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3239 0061;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[FB40 CEE3 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCEE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_294)
{
    uint32_t const cps[2] = { 0x3239, 0x0041 };

    // 3239 0041;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[0318 FB40 CEE3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCEE3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3239 0041;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[FB40 CEE3 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCEE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_295)
{
    uint32_t const cps[2] = { 0x3239, 0x0062 };

    // 3239 0062;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[0318 FB40 CEE3 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCEE3, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3239 0062;	
    // (㈹) PARENTHESIZED IDEOGRAPH REPRESENT	[FB40 CEE3 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCEE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_296)
{
    uint32_t const cps[2] = { 0x323D, 0x0021 };

    // 323D 0021;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[0318 FB40 CF01 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF01, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323D 0021;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[FB40 CF01 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCF01, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_297)
{
    uint32_t const cps[2] = { 0x323D, 0x003F };

    // 323D 003F;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[0318 FB40 CF01 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF01, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323D 003F;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[FB40 CF01 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCF01, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_298)
{
    uint32_t const cps[2] = { 0x323D, 0x0061 };

    // 323D 0061;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[0318 FB40 CF01 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF01, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323D 0061;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_299)
{
    uint32_t const cps[2] = { 0x323D, 0x0041 };

    // 323D 0041;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[0318 FB40 CF01 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF01, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323D 0041;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_300)
{
    uint32_t const cps[2] = { 0x323D, 0x0062 };

    // 323D 0062;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[0318 FB40 CF01 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF01, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323D 0062;	
    // (㈽) PARENTHESIZED IDEOGRAPH ENTERPRISE	[FB40 CF01 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_301)
{
    uint32_t const cps[2] = { 0x3241, 0x0021 };

    // 3241 0021;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[0318 FB40 CF11 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF11, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3241 0021;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[FB40 CF11 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCF11, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_302)
{
    uint32_t const cps[2] = { 0x3241, 0x003F };

    // 3241 003F;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[0318 FB40 CF11 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF11, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3241 003F;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[FB40 CF11 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xCF11, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_303)
{
    uint32_t const cps[2] = { 0x3241, 0x0061 };

    // 3241 0061;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[0318 FB40 CF11 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF11, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3241 0061;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[FB40 CF11 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_304)
{
    uint32_t const cps[2] = { 0x3241, 0x0041 };

    // 3241 0041;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[0318 FB40 CF11 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF11, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3241 0041;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[FB40 CF11 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_305)
{
    uint32_t const cps[2] = { 0x3241, 0x0062 };

    // 3241 0062;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[0318 FB40 CF11 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xCF11, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3241 0062;	
    // (㉁) PARENTHESIZED IDEOGRAPH REST	[FB40 CF11 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xCF11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_306)
{
    uint32_t const cps[2] = { 0x3227, 0x0021 };

    // 3227 0021;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[0318 FB40 D16B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3227 0021;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[FB40 D16B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD16B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_307)
{
    uint32_t const cps[2] = { 0x3227, 0x003F };

    // 3227 003F;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[0318 FB40 D16B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3227 003F;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[FB40 D16B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD16B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_308)
{
    uint32_t const cps[2] = { 0x3227, 0x0061 };

    // 3227 0061;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[0318 FB40 D16B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3227 0061;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_309)
{
    uint32_t const cps[2] = { 0x3227, 0x0041 };

    // 3227 0041;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[0318 FB40 D16B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3227 0041;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[FB40 D16B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_310)
{
    uint32_t const cps[2] = { 0x3227, 0x0062 };

    // 3227 0062;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[0318 FB40 D16B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3227 0062;	
    // (㈧) PARENTHESIZED IDEOGRAPH EIGHT	[FB40 D16B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_311)
{
    uint32_t const cps[2] = { 0x3225, 0x0021 };

    // 3225 0021;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[0318 FB40 D16D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3225 0021;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[FB40 D16D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD16D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_312)
{
    uint32_t const cps[2] = { 0x3225, 0x003F };

    // 3225 003F;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[0318 FB40 D16D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3225 003F;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[FB40 D16D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD16D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_313)
{
    uint32_t const cps[2] = { 0x3225, 0x0061 };

    // 3225 0061;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[0318 FB40 D16D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3225 0061;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[FB40 D16D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_314)
{
    uint32_t const cps[2] = { 0x3225, 0x0041 };

    // 3225 0041;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[0318 FB40 D16D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3225 0041;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[FB40 D16D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_315)
{
    uint32_t const cps[2] = { 0x3225, 0x0062 };

    // 3225 0062;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[0318 FB40 D16D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD16D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3225 0062;	
    // (㈥) PARENTHESIZED IDEOGRAPH SIX	[FB40 D16D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD16D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_316)
{
    uint32_t const cps[2] = { 0x3238, 0x0021 };

    // 3238 0021;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[0318 FB40 D2B4 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD2B4, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3238 0021;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[FB40 D2B4 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD2B4, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_317)
{
    uint32_t const cps[2] = { 0x3238, 0x003F };

    // 3238 003F;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[0318 FB40 D2B4 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD2B4, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3238 003F;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[FB40 D2B4 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD2B4, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_318)
{
    uint32_t const cps[2] = { 0x3238, 0x0061 };

    // 3238 0061;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[0318 FB40 D2B4 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD2B4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3238 0061;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[FB40 D2B4 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_319)
{
    uint32_t const cps[2] = { 0x3238, 0x0041 };

    // 3238 0041;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[0318 FB40 D2B4 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD2B4, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3238 0041;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[FB40 D2B4 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_320)
{
    uint32_t const cps[2] = { 0x3238, 0x0062 };

    // 3238 0062;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[0318 FB40 D2B4 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD2B4, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3238 0062;	
    // (㈸) PARENTHESIZED IDEOGRAPH LABOR	[FB40 D2B4 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD2B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_321)
{
    uint32_t const cps[2] = { 0x3229, 0x0021 };

    // 3229 0021;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[0318 FB40 D341 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD341, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3229 0021;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[FB40 D341 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD341, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_322)
{
    uint32_t const cps[2] = { 0x3229, 0x003F };

    // 3229 003F;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[0318 FB40 D341 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD341, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3229 003F;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[FB40 D341 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD341, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_323)
{
    uint32_t const cps[2] = { 0x3229, 0x0061 };

    // 3229 0061;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[0318 FB40 D341 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD341, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3229 0061;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_324)
{
    uint32_t const cps[2] = { 0x3229, 0x0041 };

    // 3229 0041;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[0318 FB40 D341 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD341, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3229 0041;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[FB40 D341 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_325)
{
    uint32_t const cps[2] = { 0x3229, 0x0062 };

    // 3229 0062;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[0318 FB40 D341 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD341, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3229 0062;	
    // (㈩) PARENTHESIZED IDEOGRAPH TEN	[FB40 D341 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_326)
{
    uint32_t const cps[2] = { 0x323F, 0x0021 };

    // 323F 0021;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[0318 FB40 D354 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD354, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323F 0021;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[FB40 D354 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD354, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_327)
{
    uint32_t const cps[2] = { 0x323F, 0x003F };

    // 323F 003F;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[0318 FB40 D354 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD354, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323F 003F;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[FB40 D354 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD354, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_328)
{
    uint32_t const cps[2] = { 0x323F, 0x0061 };

    // 323F 0061;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[0318 FB40 D354 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD354, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323F 0061;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[FB40 D354 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_329)
{
    uint32_t const cps[2] = { 0x323F, 0x0041 };

    // 323F 0041;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[0318 FB40 D354 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD354, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323F 0041;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[FB40 D354 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_330)
{
    uint32_t const cps[2] = { 0x323F, 0x0062 };

    // 323F 0062;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[0318 FB40 D354 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD354, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323F 0062;	
    // (㈿) PARENTHESIZED IDEOGRAPH ALLIANCE	[FB40 D354 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_331)
{
    uint32_t const cps[2] = { 0x3234, 0x0021 };

    // 3234 0021;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[0318 FB40 D40D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD40D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3234 0021;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[FB40 D40D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD40D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_332)
{
    uint32_t const cps[2] = { 0x3234, 0x003F };

    // 3234 003F;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[0318 FB40 D40D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD40D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3234 003F;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[FB40 D40D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD40D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_333)
{
    uint32_t const cps[2] = { 0x3234, 0x0061 };

    // 3234 0061;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[0318 FB40 D40D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD40D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3234 0061;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[FB40 D40D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_334)
{
    uint32_t const cps[2] = { 0x3234, 0x0041 };

    // 3234 0041;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[0318 FB40 D40D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD40D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3234 0041;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[FB40 D40D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD40D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_335)
{
    uint32_t const cps[2] = { 0x3234, 0x0062 };

    // 3234 0062;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[0318 FB40 D40D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD40D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3234 0062;	
    // (㈴) PARENTHESIZED IDEOGRAPH NAME	[FB40 D40D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD40D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_336)
{
    uint32_t const cps[2] = { 0x323A, 0x0021 };

    // 323A 0021;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[0318 FB40 D47C 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD47C, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323A 0021;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[FB40 D47C | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD47C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_337)
{
    uint32_t const cps[2] = { 0x323A, 0x003F };

    // 323A 003F;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[0318 FB40 D47C 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD47C, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323A 003F;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[FB40 D47C | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD47C, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_338)
{
    uint32_t const cps[2] = { 0x323A, 0x0061 };

    // 323A 0061;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[0318 FB40 D47C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD47C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323A 0061;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[FB40 D47C 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_339)
{
    uint32_t const cps[2] = { 0x323A, 0x0041 };

    // 323A 0041;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[0318 FB40 D47C 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD47C, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323A 0041;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[FB40 D47C 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD47C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_340)
{
    uint32_t const cps[2] = { 0x323A, 0x0062 };

    // 323A 0062;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[0318 FB40 D47C 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD47C, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323A 0062;	
    // (㈺) PARENTHESIZED IDEOGRAPH CALL	[FB40 D47C 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD47C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_341)
{
    uint32_t const cps[2] = { 0x3223, 0x0021 };

    // 3223 0021;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[0318 FB40 D6DB 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD6DB, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3223 0021;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[FB40 D6DB | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD6DB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_342)
{
    uint32_t const cps[2] = { 0x3223, 0x003F };

    // 3223 003F;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[0318 FB40 D6DB 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD6DB, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3223 003F;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[FB40 D6DB | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD6DB, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_343)
{
    uint32_t const cps[2] = { 0x3223, 0x0061 };

    // 3223 0061;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[0318 FB40 D6DB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD6DB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3223 0061;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[FB40 D6DB 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_344)
{
    uint32_t const cps[2] = { 0x3223, 0x0041 };

    // 3223 0041;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[0318 FB40 D6DB 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD6DB, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3223 0041;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[FB40 D6DB 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_345)
{
    uint32_t const cps[2] = { 0x3223, 0x0062 };

    // 3223 0062;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[0318 FB40 D6DB 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD6DB, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3223 0062;	
    // (㈣) PARENTHESIZED IDEOGRAPH FOUR	[FB40 D6DB 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD6DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_346)
{
    uint32_t const cps[2] = { 0x322F, 0x0021 };

    // 322F 0021;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[0318 FB40 D71F 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD71F, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322F 0021;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[FB40 D71F | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD71F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_347)
{
    uint32_t const cps[2] = { 0x322F, 0x003F };

    // 322F 003F;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[0318 FB40 D71F 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD71F, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322F 003F;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[FB40 D71F | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xD71F, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_348)
{
    uint32_t const cps[2] = { 0x322F, 0x0061 };

    // 322F 0061;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[0318 FB40 D71F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD71F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322F 0061;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[FB40 D71F 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_349)
{
    uint32_t const cps[2] = { 0x322F, 0x0041 };

    // 322F 0041;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[0318 FB40 D71F 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD71F, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322F 0041;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[FB40 D71F 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD71F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_350)
{
    uint32_t const cps[2] = { 0x322F, 0x0062 };

    // 322F 0062;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[0318 FB40 D71F 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xD71F, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322F 0062;	
    // (㈯) PARENTHESIZED IDEOGRAPH EARTH	[FB40 D71F 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xD71F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_351)
{
    uint32_t const cps[2] = { 0x323B, 0x0021 };

    // 323B 0021;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[0318 FB40 DB66 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xDB66, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323B 0021;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[FB40 DB66 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xDB66, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_352)
{
    uint32_t const cps[2] = { 0x323B, 0x003F };

    // 323B 003F;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[0318 FB40 DB66 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xDB66, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323B 003F;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[FB40 DB66 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xDB66, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_353)
{
    uint32_t const cps[2] = { 0x323B, 0x0061 };

    // 323B 0061;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[0318 FB40 DB66 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xDB66, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323B 0061;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[FB40 DB66 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xDB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_354)
{
    uint32_t const cps[2] = { 0x323B, 0x0041 };

    // 323B 0041;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[0318 FB40 DB66 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xDB66, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323B 0041;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[FB40 DB66 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xDB66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_355)
{
    uint32_t const cps[2] = { 0x323B, 0x0062 };

    // 323B 0062;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[0318 FB40 DB66 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xDB66, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323B 0062;	
    // (㈻) PARENTHESIZED IDEOGRAPH STUDY	[FB40 DB66 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xDB66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_356)
{
    uint32_t const cps[2] = { 0x3230, 0x0021 };

    // 3230 0021;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[0318 FB40 E5E5 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE5E5, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3230 0021;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[FB40 E5E5 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE5E5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_357)
{
    uint32_t const cps[2] = { 0x3230, 0x003F };

    // 3230 003F;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[0318 FB40 E5E5 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE5E5, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3230 003F;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[FB40 E5E5 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE5E5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_358)
{
    uint32_t const cps[2] = { 0x3230, 0x0061 };

    // 3230 0061;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[0318 FB40 E5E5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE5E5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3230 0061;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[FB40 E5E5 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_359)
{
    uint32_t const cps[2] = { 0x3230, 0x0041 };

    // 3230 0041;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[0318 FB40 E5E5 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE5E5, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3230 0041;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[FB40 E5E5 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE5E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_360)
{
    uint32_t const cps[2] = { 0x3230, 0x0062 };

    // 3230 0062;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[0318 FB40 E5E5 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE5E5, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3230 0062;	
    // (㈰) PARENTHESIZED IDEOGRAPH SUN	[FB40 E5E5 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE5E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_361)
{
    uint32_t const cps[2] = { 0x322A, 0x0021 };

    // 322A 0021;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[0318 FB40 E708 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE708, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322A 0021;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[FB40 E708 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE708, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_362)
{
    uint32_t const cps[2] = { 0x322A, 0x003F };

    // 322A 003F;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[0318 FB40 E708 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE708, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322A 003F;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[FB40 E708 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE708, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_363)
{
    uint32_t const cps[2] = { 0x322A, 0x0061 };

    // 322A 0061;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[0318 FB40 E708 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE708, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322A 0061;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[FB40 E708 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_364)
{
    uint32_t const cps[2] = { 0x322A, 0x0041 };

    // 322A 0041;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[0318 FB40 E708 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE708, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322A 0041;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[FB40 E708 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_365)
{
    uint32_t const cps[2] = { 0x322A, 0x0062 };

    // 322A 0062;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[0318 FB40 E708 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE708, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322A 0062;	
    // (㈪) PARENTHESIZED IDEOGRAPH MOON	[FB40 E708 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_366)
{
    uint32_t const cps[2] = { 0x3232, 0x0021 };

    // 3232 0021;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[0318 FB40 E709 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE709, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3232 0021;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[FB40 E709 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE709, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_367)
{
    uint32_t const cps[2] = { 0x3232, 0x003F };

    // 3232 003F;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[0318 FB40 E709 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE709, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3232 003F;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[FB40 E709 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE709, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_368)
{
    uint32_t const cps[2] = { 0x3232, 0x0061 };

    // 3232 0061;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[0318 FB40 E709 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE709, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3232 0061;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[FB40 E709 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_369)
{
    uint32_t const cps[2] = { 0x3232, 0x0041 };

    // 3232 0041;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[0318 FB40 E709 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE709, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3232 0041;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[FB40 E709 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_370)
{
    uint32_t const cps[2] = { 0x3232, 0x0062 };

    // 3232 0062;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[0318 FB40 E709 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE709, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3232 0062;	
    // (㈲) PARENTHESIZED IDEOGRAPH HAVE	[FB40 E709 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_371)
{
    uint32_t const cps[2] = { 0x322D, 0x0021 };

    // 322D 0021;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[0318 FB40 E728 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE728, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322D 0021;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[FB40 E728 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE728, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_372)
{
    uint32_t const cps[2] = { 0x322D, 0x003F };

    // 322D 003F;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[0318 FB40 E728 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE728, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322D 003F;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[FB40 E728 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE728, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_373)
{
    uint32_t const cps[2] = { 0x322D, 0x0061 };

    // 322D 0061;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[0318 FB40 E728 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE728, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322D 0061;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[FB40 E728 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_374)
{
    uint32_t const cps[2] = { 0x322D, 0x0041 };

    // 322D 0041;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[0318 FB40 E728 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE728, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322D 0041;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[FB40 E728 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_375)
{
    uint32_t const cps[2] = { 0x322D, 0x0062 };

    // 322D 0062;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[0318 FB40 E728 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE728, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322D 0062;	
    // (㈭) PARENTHESIZED IDEOGRAPH WOOD	[FB40 E728 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_376)
{
    uint32_t const cps[2] = { 0x3231, 0x0021 };

    // 3231 0021;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[0318 FB40 E82A 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE82A, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3231 0021;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[FB40 E82A | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE82A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_377)
{
    uint32_t const cps[2] = { 0x3231, 0x003F };

    // 3231 003F;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[0318 FB40 E82A 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE82A, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3231 003F;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[FB40 E82A | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xE82A, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_378)
{
    uint32_t const cps[2] = { 0x3231, 0x0061 };

    // 3231 0061;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[0318 FB40 E82A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE82A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3231 0061;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[FB40 E82A 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_379)
{
    uint32_t const cps[2] = { 0x3231, 0x0041 };

    // 3231 0041;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[0318 FB40 E82A 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE82A, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3231 0041;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[FB40 E82A 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_380)
{
    uint32_t const cps[2] = { 0x3231, 0x0062 };

    // 3231 0062;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[0318 FB40 E82A 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xE82A, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3231 0062;	
    // (㈱) PARENTHESIZED IDEOGRAPH STOCK	[FB40 E82A 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xE82A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_381)
{
    uint32_t const cps[2] = { 0x322C, 0x0021 };

    // 322C 0021;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[0318 FB40 EC34 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xEC34, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322C 0021;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[FB40 EC34 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xEC34, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_382)
{
    uint32_t const cps[2] = { 0x322C, 0x003F };

    // 322C 003F;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[0318 FB40 EC34 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xEC34, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322C 003F;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[FB40 EC34 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xEC34, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_383)
{
    uint32_t const cps[2] = { 0x322C, 0x0061 };

    // 322C 0061;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[0318 FB40 EC34 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xEC34, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322C 0061;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[FB40 EC34 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_384)
{
    uint32_t const cps[2] = { 0x322C, 0x0041 };

    // 322C 0041;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[0318 FB40 EC34 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xEC34, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322C 0041;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[FB40 EC34 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_385)
{
    uint32_t const cps[2] = { 0x322C, 0x0062 };

    // 322C 0062;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[0318 FB40 EC34 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xEC34, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322C 0062;	
    // (㈬) PARENTHESIZED IDEOGRAPH WATER	[FB40 EC34 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xEC34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_386)
{
    uint32_t const cps[2] = { 0x322B, 0x0021 };

    // 322B 0021;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[0318 FB40 F06B 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF06B, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322B 0021;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[FB40 F06B | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF06B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_387)
{
    uint32_t const cps[2] = { 0x322B, 0x003F };

    // 322B 003F;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[0318 FB40 F06B 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF06B, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322B 003F;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[FB40 F06B | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF06B, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_388)
{
    uint32_t const cps[2] = { 0x322B, 0x0061 };

    // 322B 0061;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[0318 FB40 F06B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF06B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322B 0061;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[FB40 F06B 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_389)
{
    uint32_t const cps[2] = { 0x322B, 0x0041 };

    // 322B 0041;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[0318 FB40 F06B 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF06B, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322B 0041;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[FB40 F06B 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF06B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_390)
{
    uint32_t const cps[2] = { 0x322B, 0x0062 };

    // 322B 0062;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[0318 FB40 F06B 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF06B, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322B 0062;	
    // (㈫) PARENTHESIZED IDEOGRAPH FIRE	[FB40 F06B 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF06B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_391)
{
    uint32_t const cps[2] = { 0x3235, 0x0021 };

    // 3235 0021;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[0318 FB40 F279 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF279, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3235 0021;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[FB40 F279 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF279, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_392)
{
    uint32_t const cps[2] = { 0x3235, 0x003F };

    // 3235 003F;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[0318 FB40 F279 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF279, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3235 003F;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[FB40 F279 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF279, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_393)
{
    uint32_t const cps[2] = { 0x3235, 0x0061 };

    // 3235 0061;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[0318 FB40 F279 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF279, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3235 0061;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[FB40 F279 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_394)
{
    uint32_t const cps[2] = { 0x3235, 0x0041 };

    // 3235 0041;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[0318 FB40 F279 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF279, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3235 0041;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[FB40 F279 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_395)
{
    uint32_t const cps[2] = { 0x3235, 0x0062 };

    // 3235 0062;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[0318 FB40 F279 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF279, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3235 0062;	
    // (㈵) PARENTHESIZED IDEOGRAPH SPECIAL	[FB40 F279 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_396)
{
    uint32_t const cps[2] = { 0x323C, 0x0021 };

    // 323C 0021;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[0318 FB40 F6E3 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF6E3, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323C 0021;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[FB40 F6E3 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF6E3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_397)
{
    uint32_t const cps[2] = { 0x323C, 0x003F };

    // 323C 003F;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[0318 FB40 F6E3 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF6E3, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323C 003F;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[FB40 F6E3 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF6E3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_398)
{
    uint32_t const cps[2] = { 0x323C, 0x0061 };

    // 323C 0061;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[0318 FB40 F6E3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF6E3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323C 0061;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[FB40 F6E3 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_399)
{
    uint32_t const cps[2] = { 0x323C, 0x0041 };

    // 323C 0041;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[0318 FB40 F6E3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF6E3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323C 0041;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[FB40 F6E3 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_400)
{
    uint32_t const cps[2] = { 0x323C, 0x0062 };

    // 323C 0062;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[0318 FB40 F6E3 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF6E3, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323C 0062;	
    // (㈼) PARENTHESIZED IDEOGRAPH SUPERVISE	[FB40 F6E3 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF6E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_401)
{
    uint32_t const cps[2] = { 0x3233, 0x0021 };

    // 3233 0021;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[0318 FB40 F93E 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF93E, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3233 0021;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[FB40 F93E | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF93E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_402)
{
    uint32_t const cps[2] = { 0x3233, 0x003F };

    // 3233 003F;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[0318 FB40 F93E 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF93E, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3233 003F;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[FB40 F93E | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF93E, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_403)
{
    uint32_t const cps[2] = { 0x3233, 0x0061 };

    // 3233 0061;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[0318 FB40 F93E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF93E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3233 0061;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[FB40 F93E 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_404)
{
    uint32_t const cps[2] = { 0x3233, 0x0041 };

    // 3233 0041;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[0318 FB40 F93E 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF93E, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3233 0041;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[FB40 F93E 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_405)
{
    uint32_t const cps[2] = { 0x3233, 0x0062 };

    // 3233 0062;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[0318 FB40 F93E 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF93E, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3233 0062;	
    // (㈳) PARENTHESIZED IDEOGRAPH SOCIETY	[FB40 F93E 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF93E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_406)
{
    uint32_t const cps[2] = { 0x3237, 0x0021 };

    // 3237 0021;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[0318 FB40 F95D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF95D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3237 0021;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[FB40 F95D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF95D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_407)
{
    uint32_t const cps[2] = { 0x3237, 0x003F };

    // 3237 003F;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[0318 FB40 F95D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF95D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3237 003F;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[FB40 F95D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF95D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_408)
{
    uint32_t const cps[2] = { 0x3237, 0x0061 };

    // 3237 0061;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[0318 FB40 F95D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF95D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3237 0061;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[FB40 F95D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_409)
{
    uint32_t const cps[2] = { 0x3237, 0x0041 };

    // 3237 0041;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[0318 FB40 F95D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF95D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3237 0041;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[FB40 F95D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_410)
{
    uint32_t const cps[2] = { 0x3237, 0x0062 };

    // 3237 0062;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[0318 FB40 F95D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF95D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3237 0062;	
    // (㈷) PARENTHESIZED IDEOGRAPH CONGRATULATION	[FB40 F95D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF95D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_411)
{
    uint32_t const cps[2] = { 0x3240, 0x0021 };

    // 3240 0021;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[0318 FB40 F96D 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF96D, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3240 0021;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[FB40 F96D | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF96D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_412)
{
    uint32_t const cps[2] = { 0x3240, 0x003F };

    // 3240 003F;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[0318 FB40 F96D 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF96D, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3240 003F;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[FB40 F96D | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB40, 0xF96D, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_413)
{
    uint32_t const cps[2] = { 0x3240, 0x0061 };

    // 3240 0061;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[0318 FB40 F96D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF96D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3240 0061;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[FB40 F96D 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_414)
{
    uint32_t const cps[2] = { 0x3240, 0x0041 };

    // 3240 0041;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[0318 FB40 F96D 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF96D, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3240 0041;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[FB40 F96D 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_415)
{
    uint32_t const cps[2] = { 0x3240, 0x0062 };

    // 3240 0062;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[0318 FB40 F96D 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB40, 0xF96D, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3240 0062;	
    // (㉀) PARENTHESIZED IDEOGRAPH FESTIVAL	[FB40 F96D 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB40, 0xF96D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_416)
{
    uint32_t const cps[2] = { 0x3242, 0x0021 };

    // 3242 0021;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[0318 FB41 81EA 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81EA, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3242 0021;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[FB41 81EA | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x81EA, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_417)
{
    uint32_t const cps[2] = { 0x3242, 0x003F };

    // 3242 003F;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[0318 FB41 81EA 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81EA, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3242 003F;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[FB41 81EA | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x81EA, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_418)
{
    uint32_t const cps[2] = { 0x3242, 0x0061 };

    // 3242 0061;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[0318 FB41 81EA 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81EA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3242 0061;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[FB41 81EA 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_419)
{
    uint32_t const cps[2] = { 0x3242, 0x0041 };

    // 3242 0041;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[0318 FB41 81EA 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81EA, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3242 0041;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[FB41 81EA 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_420)
{
    uint32_t const cps[2] = { 0x3242, 0x0062 };

    // 3242 0062;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[0318 FB41 81EA 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81EA, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3242 0062;	
    // (㉂) PARENTHESIZED IDEOGRAPH SELF	[FB41 81EA 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_421)
{
    uint32_t const cps[2] = { 0x3243, 0x0021 };

    // 3243 0021;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[0318 FB41 81F3 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81F3, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3243 0021;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[FB41 81F3 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x81F3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_422)
{
    uint32_t const cps[2] = { 0x3243, 0x003F };

    // 3243 003F;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[0318 FB41 81F3 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81F3, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3243 003F;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[FB41 81F3 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x81F3, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_423)
{
    uint32_t const cps[2] = { 0x3243, 0x0061 };

    // 3243 0061;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[0318 FB41 81F3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81F3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3243 0061;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[FB41 81F3 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_424)
{
    uint32_t const cps[2] = { 0x3243, 0x0041 };

    // 3243 0041;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[0318 FB41 81F3 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81F3, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3243 0041;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[FB41 81F3 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_425)
{
    uint32_t const cps[2] = { 0x3243, 0x0062 };

    // 3243 0062;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[0318 FB41 81F3 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x81F3, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3243 0062;	
    // (㉃) PARENTHESIZED IDEOGRAPH REACH	[FB41 81F3 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x81F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_426)
{
    uint32_t const cps[2] = { 0x3236, 0x0021 };

    // 3236 0021;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[0318 FB41 8CA1 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CA1, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3236 0021;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[FB41 8CA1 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x8CA1, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_427)
{
    uint32_t const cps[2] = { 0x3236, 0x003F };

    // 3236 003F;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[0318 FB41 8CA1 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CA1, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3236 003F;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[FB41 8CA1 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x8CA1, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_428)
{
    uint32_t const cps[2] = { 0x3236, 0x0061 };

    // 3236 0061;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[0318 FB41 8CA1 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CA1, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3236 0061;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[FB41 8CA1 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_429)
{
    uint32_t const cps[2] = { 0x3236, 0x0041 };

    // 3236 0041;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[0318 FB41 8CA1 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CA1, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3236 0041;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[FB41 8CA1 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_430)
{
    uint32_t const cps[2] = { 0x3236, 0x0062 };

    // 3236 0062;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[0318 FB41 8CA1 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CA1, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3236 0062;	
    // (㈶) PARENTHESIZED IDEOGRAPH FINANCIAL	[FB41 8CA1 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_431)
{
    uint32_t const cps[2] = { 0x323E, 0x0021 };

    // 323E 0021;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[0318 FB41 8CC7 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CC7, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323E 0021;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[FB41 8CC7 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x8CC7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_432)
{
    uint32_t const cps[2] = { 0x323E, 0x003F };

    // 323E 003F;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[0318 FB41 8CC7 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CC7, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323E 003F;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[FB41 8CC7 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x8CC7, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_433)
{
    uint32_t const cps[2] = { 0x323E, 0x0061 };

    // 323E 0061;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[0318 FB41 8CC7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CC7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323E 0061;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[FB41 8CC7 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_434)
{
    uint32_t const cps[2] = { 0x323E, 0x0041 };

    // 323E 0041;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[0318 FB41 8CC7 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CC7, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323E 0041;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[FB41 8CC7 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_435)
{
    uint32_t const cps[2] = { 0x323E, 0x0062 };

    // 323E 0062;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[0318 FB41 8CC7 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x8CC7, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 323E 0062;	
    // (㈾) PARENTHESIZED IDEOGRAPH RESOURCE	[FB41 8CC7 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x8CC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_436)
{
    uint32_t const cps[2] = { 0x322E, 0x0021 };

    // 322E 0021;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[0318 FB41 91D1 0319 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x91D1, 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322E 0021;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[FB41 91D1 | 0020 | 0004 | 0318 FFFF 0319 0261 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x91D1, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_437)
{
    uint32_t const cps[2] = { 0x322E, 0x003F };

    // 322E 003F;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[0318 FB41 91D1 0319 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x91D1, 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322E 003F;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[FB41 91D1 | 0020 | 0004 | 0318 FFFF 0319 0267 |]
    uint32_t const ces_shifted[11] = { 0xFB41, 0x91D1, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0x0318, 0xFFFF, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_438)
{
    uint32_t const cps[2] = { 0x322E, 0x0061 };

    // 322E 0061;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[0318 FB41 91D1 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x91D1, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322E 0061;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[FB41 91D1 1CAD | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x91D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_439)
{
    uint32_t const cps[2] = { 0x322E, 0x0041 };

    // 322E 0041;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[0318 FB41 91D1 0319 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x91D1, 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322E 0041;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[FB41 91D1 1CAD | 0020 0020 | 0004 0008 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x91D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_440)
{
    uint32_t const cps[2] = { 0x322E, 0x0062 };

    // 322E 0062;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[0318 FB41 91D1 0319 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[15] = { 0x0318, 0xFB41, 0x91D1, 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 322E 0062;	
    // (㈮) PARENTHESIZED IDEOGRAPH METAL	[FB41 91D1 1CC6 | 0020 0020 | 0004 0002 | 0318 FFFF 0319 FFFF |]
    uint32_t const ces_shifted[14] = { 0xFB41, 0x91D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0x0318, 0xFFFF, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_441)
{
    uint32_t const cps[2] = { 0x0029, 0x0021 };

    // 0029 0021;	
    // (')') RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0029 0021;	
    // (')') RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_442)
{
    uint32_t const cps[2] = { 0xFF09, 0x0021 };

    // FF09 0021;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF09 0021;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_443)
{
    uint32_t const cps[2] = { 0xFE5A, 0x0021 };

    // FE5A 0021;	
    // (﹚) SMALL RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE5A 0021;	
    // (﹚) SMALL RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_444)
{
    uint32_t const cps[2] = { 0x207E, 0x0021 };

    // 207E 0021;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207E 0021;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_445)
{
    uint32_t const cps[2] = { 0x208E, 0x0021 };

    // 208E 0021;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208E 0021;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_446)
{
    uint32_t const cps[2] = { 0xFE36, 0x0021 };

    // FE36 0021;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[0319 0261 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE36 0021;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[| | | 0319 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_447)
{
    uint32_t const cps[2] = { 0x0029, 0x003F };

    // 0029 003F;	
    // (')') RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0029 003F;	
    // (')') RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_448)
{
    uint32_t const cps[2] = { 0xFF09, 0x003F };

    // FF09 003F;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF09 003F;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_449)
{
    uint32_t const cps[2] = { 0xFE5A, 0x003F };

    // FE5A 003F;	
    // (﹚) SMALL RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE5A 003F;	
    // (﹚) SMALL RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_450)
{
    uint32_t const cps[2] = { 0x207E, 0x003F };

    // 207E 003F;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207E 003F;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_451)
{
    uint32_t const cps[2] = { 0x208E, 0x003F };

    // 208E 003F;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208E 003F;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_452)
{
    uint32_t const cps[2] = { 0xFE36, 0x003F };

    // FE36 003F;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[0319 0267 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE36 003F;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[| | | 0319 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x0319, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_453)
{
    uint32_t const cps[2] = { 0x0029, 0x0061 };

    // 0029 0061;	
    // (')') RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0029 0061;	
    // (')') RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_454)
{
    uint32_t const cps[2] = { 0x0029, 0x0041 };

    // 0029 0041;	
    // (')') RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0029 0041;	
    // (')') RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_455)
{
    uint32_t const cps[2] = { 0xFF09, 0x0061 };

    // FF09 0061;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF09 0061;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_456)
{
    uint32_t const cps[2] = { 0xFF09, 0x0041 };

    // FF09 0041;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF09 0041;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_457)
{
    uint32_t const cps[2] = { 0xFE5A, 0x0061 };

    // FE5A 0061;	
    // (﹚) SMALL RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE5A 0061;	
    // (﹚) SMALL RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_458)
{
    uint32_t const cps[2] = { 0xFE5A, 0x0041 };

    // FE5A 0041;	
    // (﹚) SMALL RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 000F 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE5A 0041;	
    // (﹚) SMALL RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_459)
{
    uint32_t const cps[2] = { 0x207E, 0x0061 };

    // 207E 0061;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207E 0061;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_460)
{
    uint32_t const cps[2] = { 0x207E, 0x0041 };

    // 207E 0041;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207E 0041;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_461)
{
    uint32_t const cps[2] = { 0x208E, 0x0061 };

    // 208E 0061;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208E 0061;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_462)
{
    uint32_t const cps[2] = { 0x208E, 0x0041 };

    // 208E 0041;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0015 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208E 0041;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_463)
{
    uint32_t const cps[2] = { 0xFE36, 0x0061 };

    // FE36 0061;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE36 0061;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_464)
{
    uint32_t const cps[2] = { 0xFE36, 0x0041 };

    // FE36 0041;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[0319 1CAD | 0020 0020 | 0016 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE36 0041;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[1CAD | 0020 | 0008 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_465)
{
    uint32_t const cps[2] = { 0x0029, 0x0062 };

    // 0029 0062;	
    // (')') RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0029 0062;	
    // (')') RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_466)
{
    uint32_t const cps[2] = { 0xFF09, 0x0062 };

    // FF09 0062;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF09 0062;	
    // (）) FULLWIDTH RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_467)
{
    uint32_t const cps[2] = { 0xFE5A, 0x0062 };

    // FE5A 0062;	
    // (﹚) SMALL RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 000F 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE5A 0062;	
    // (﹚) SMALL RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_468)
{
    uint32_t const cps[2] = { 0x207E, 0x0062 };

    // 207E 0062;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 207E 0062;	
    // (⁾) SUPERSCRIPT RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_469)
{
    uint32_t const cps[2] = { 0x208E, 0x0062 };

    // 208E 0062;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 0015 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 208E 0062;	
    // (₎) SUBSCRIPT RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_470)
{
    uint32_t const cps[2] = { 0xFE36, 0x0062 };

    // FE36 0062;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[0319 1CC6 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x0319, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE36 0062;	
    // (︶) PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS	[1CC6 | 0020 | 0002 | 0319 FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x0319, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_471)
{
    uint32_t const cps[2] = { 0x005B, 0x0021 };

    // 005B 0021;	
    // ('[') LEFT SQUARE BRACKET	[031A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005B 0021;	
    // ('[') LEFT SQUARE BRACKET	[| | | 031A 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_472)
{
    uint32_t const cps[2] = { 0xFF3B, 0x0021 };

    // FF3B 0021;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[031A 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3B 0021;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[| | | 031A 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_473)
{
    uint32_t const cps[2] = { 0xFE47, 0x0021 };

    // FE47 0021;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[031A 0261 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE47 0021;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[| | | 031A 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_474)
{
    uint32_t const cps[2] = { 0x005B, 0x003F };

    // 005B 003F;	
    // ('[') LEFT SQUARE BRACKET	[031A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005B 003F;	
    // ('[') LEFT SQUARE BRACKET	[| | | 031A 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_475)
{
    uint32_t const cps[2] = { 0xFF3B, 0x003F };

    // FF3B 003F;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[031A 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3B 003F;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[| | | 031A 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_476)
{
    uint32_t const cps[2] = { 0xFE47, 0x003F };

    // FE47 003F;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[031A 0267 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE47 003F;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[| | | 031A 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031A, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_477)
{
    uint32_t const cps[2] = { 0x005B, 0x0061 };

    // 005B 0061;	
    // ('[') LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005B 0061;	
    // ('[') LEFT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_478)
{
    uint32_t const cps[2] = { 0x005B, 0x0041 };

    // 005B 0041;	
    // ('[') LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005B 0041;	
    // ('[') LEFT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_479)
{
    uint32_t const cps[2] = { 0xFF3B, 0x0061 };

    // FF3B 0061;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3B 0061;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_480)
{
    uint32_t const cps[2] = { 0xFF3B, 0x0041 };

    // FF3B 0041;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3B 0041;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_481)
{
    uint32_t const cps[2] = { 0xFE47, 0x0061 };

    // FE47 0061;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE47 0061;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_482)
{
    uint32_t const cps[2] = { 0xFE47, 0x0041 };

    // FE47 0041;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[031A 1CAD | 0020 0020 | 0016 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE47 0041;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_483)
{
    uint32_t const cps[2] = { 0x005B, 0x0062 };

    // 005B 0062;	
    // ('[') LEFT SQUARE BRACKET	[031A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005B 0062;	
    // ('[') LEFT SQUARE BRACKET	[1CC6 | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_484)
{
    uint32_t const cps[2] = { 0xFF3B, 0x0062 };

    // FF3B 0062;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[031A 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3B 0062;	
    // (［) FULLWIDTH LEFT SQUARE BRACKET	[1CC6 | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_485)
{
    uint32_t const cps[2] = { 0xFE47, 0x0062 };

    // FE47 0062;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[031A 1CC6 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE47 0062;	
    // (﹇) PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET	[1CC6 | 0020 | 0002 | 031A FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031A, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_486)
{
    uint32_t const cps[2] = { 0x005D, 0x0021 };

    // 005D 0021;	
    // (']') RIGHT SQUARE BRACKET	[031B 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005D 0021;	
    // (']') RIGHT SQUARE BRACKET	[| | | 031B 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_487)
{
    uint32_t const cps[2] = { 0xFF3D, 0x0021 };

    // FF3D 0021;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[031B 0261 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3D 0021;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[| | | 031B 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_488)
{
    uint32_t const cps[2] = { 0xFE48, 0x0021 };

    // FE48 0021;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[031B 0261 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE48 0021;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[| | | 031B 0261 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_489)
{
    uint32_t const cps[2] = { 0x005D, 0x003F };

    // 005D 003F;	
    // (']') RIGHT SQUARE BRACKET	[031B 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005D 003F;	
    // (']') RIGHT SQUARE BRACKET	[| | | 031B 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_490)
{
    uint32_t const cps[2] = { 0xFF3D, 0x003F };

    // FF3D 003F;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[031B 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3D 003F;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[| | | 031B 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_491)
{
    uint32_t const cps[2] = { 0xFE48, 0x003F };

    // FE48 003F;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[031B 0267 | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE48 003F;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[| | | 031B 0267 |]
    uint32_t const ces_shifted[5] = { 0x0000, 0x0000, 0x0000, 0x031B, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_492)
{
    uint32_t const cps[2] = { 0x005D, 0x0061 };

    // 005D 0061;	
    // (']') RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005D 0061;	
    // (']') RIGHT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_493)
{
    uint32_t const cps[2] = { 0x005D, 0x0041 };

    // 005D 0041;	
    // (']') RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005D 0041;	
    // (']') RIGHT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_494)
{
    uint32_t const cps[2] = { 0xFF3D, 0x0061 };

    // FF3D 0061;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3D 0061;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_495)
{
    uint32_t const cps[2] = { 0xFF3D, 0x0041 };

    // FF3D 0041;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3D 0041;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_496)
{
    uint32_t const cps[2] = { 0xFE48, 0x0061 };

    // FE48 0061;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0016 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE48 0061;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[1CAD | 0020 | 0002 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_497)
{
    uint32_t const cps[2] = { 0xFE48, 0x0041 };

    // FE48 0041;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[031B 1CAD | 0020 0020 | 0016 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE48 0041;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[1CAD | 0020 | 0008 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_498)
{
    uint32_t const cps[2] = { 0x005D, 0x0062 };

    // 005D 0062;	
    // (']') RIGHT SQUARE BRACKET	[031B 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 005D 0062;	
    // (']') RIGHT SQUARE BRACKET	[1CC6 | 0020 | 0002 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_012_499)
{
    uint32_t const cps[2] = { 0xFF3D, 0x0062 };

    // FF3D 0062;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[031B 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x031B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF3D 0062;	
    // (］) FULLWIDTH RIGHT SQUARE BRACKET	[1CC6 | 0020 | 0002 | 031B FFFF |]
    uint32_t const ces_shifted[8] = { 0x1CC6, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0x031B, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

