// Warning! This file is autogenerated.
#include <boost/text/word_break.hpp>

#include <gtest/gtest.h>

#include <algorithm>


TEST(word, breaks_5)
{
    // ÷ 261D ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 261D × 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 261D ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D × 0308 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 261D ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 261D × 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB × 0308 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F3FB ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F3FB × 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 × 0308 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 2640 ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 2640 × 0308 ÷ 0031 ÷ 002E × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0001 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0001);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 000D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 000A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 000B ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x000B);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 3031 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x3031);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0041 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0041);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 002E ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002E);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0030 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0030);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 005F ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x005F);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 1F1E6 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F1E6);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 05D0 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x05D0);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0022 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0022);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 261D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x261D);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 × 1F3FB ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F3FB);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 2640 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2640);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 1F466 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 × 00AD ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x00AD);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 × 0300 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0300);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 × 200D ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x200D);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 ÷ 0061 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0061 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0061 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 × 0308 ÷ 0061 ÷ 0027 × 2060 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x2060);
        EXPECT_EQ(prev_break.break_, false);
    }

    // ÷ 1F466 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0061 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0061);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0031 ÷ 003A ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x003A);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0031 ÷ 0027 ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0027);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

    // ÷ 1F466 × 0308 ÷ 0031 ÷ 002C ÷	
    {
        boost::text::word_break_t prev_break;

        prev_break = boost::text::word_break(prev_break.prop_, 0x1F466);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0308);
        EXPECT_EQ(prev_break.break_, false);
        prev_break = boost::text::word_break(prev_break.prop_, 0x0031);
        EXPECT_EQ(prev_break.break_, true);
        prev_break = boost::text::word_break(prev_break.prop_, 0x002C);
        EXPECT_EQ(prev_break.break_, true);
    }

}
