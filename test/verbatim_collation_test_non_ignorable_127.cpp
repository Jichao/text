// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_127_000)
{
    // AB60 0062;	
    // (ꭠ) LATIN SMALL LETTER SAKHA YAT	[1FC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB60, 0x0062 };
    uint32_t const ces[9] = { 0x1FC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_001)
{
    // AB61 0021;	
    // (ꭡ) LATIN SMALL LETTER IOTIFIED E	[1FC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB61, 0x0021 };
    uint32_t const ces[9] = { 0x1FC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_002)
{
    // AB61 003F;	
    // (ꭡ) LATIN SMALL LETTER IOTIFIED E	[1FC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB61, 0x003F };
    uint32_t const ces[9] = { 0x1FC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_003)
{
    // AB61 0061;	
    // (ꭡ) LATIN SMALL LETTER IOTIFIED E	[1FC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB61, 0x0061 };
    uint32_t const ces[9] = { 0x1FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_004)
{
    // AB61 0041;	
    // (ꭡ) LATIN SMALL LETTER IOTIFIED E	[1FC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB61, 0x0041 };
    uint32_t const ces[9] = { 0x1FC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_005)
{
    // AB61 0062;	
    // (ꭡ) LATIN SMALL LETTER IOTIFIED E	[1FC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB61, 0x0062 };
    uint32_t const ces[9] = { 0x1FC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_006)
{
    // AB63 0021;	
    // (ꭣ) LATIN SMALL LETTER UO	[1FC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB63, 0x0021 };
    uint32_t const ces[9] = { 0x1FC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_007)
{
    // AB63 003F;	
    // (ꭣ) LATIN SMALL LETTER UO	[1FC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB63, 0x003F };
    uint32_t const ces[9] = { 0x1FC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_008)
{
    // AB63 0061;	
    // (ꭣ) LATIN SMALL LETTER UO	[1FC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB63, 0x0061 };
    uint32_t const ces[9] = { 0x1FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_009)
{
    // AB63 0041;	
    // (ꭣ) LATIN SMALL LETTER UO	[1FC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB63, 0x0041 };
    uint32_t const ces[9] = { 0x1FC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_010)
{
    // AB63 0062;	
    // (ꭣ) LATIN SMALL LETTER UO	[1FC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB63, 0x0062 };
    uint32_t const ces[9] = { 0x1FC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_011)
{
    // A76B 0021;	
    // (ꝫ) LATIN SMALL LETTER ET	[1FC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76B, 0x0021 };
    uint32_t const ces[9] = { 0x1FC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_012)
{
    // A76A 0021;	
    // (Ꝫ) LATIN CAPITAL LETTER ET	[1FC4 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76A, 0x0021 };
    uint32_t const ces[9] = { 0x1FC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_013)
{
    // A76B 003F;	
    // (ꝫ) LATIN SMALL LETTER ET	[1FC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76B, 0x003F };
    uint32_t const ces[9] = { 0x1FC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_014)
{
    // A76A 003F;	
    // (Ꝫ) LATIN CAPITAL LETTER ET	[1FC4 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76A, 0x003F };
    uint32_t const ces[9] = { 0x1FC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_015)
{
    // A76B 0061;	
    // (ꝫ) LATIN SMALL LETTER ET	[1FC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76B, 0x0061 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_016)
{
    // A76B 0041;	
    // (ꝫ) LATIN SMALL LETTER ET	[1FC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA76B, 0x0041 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_017)
{
    // A76A 0061;	
    // (Ꝫ) LATIN CAPITAL LETTER ET	[1FC4 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76A, 0x0061 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_018)
{
    // A76A 0041;	
    // (Ꝫ) LATIN CAPITAL LETTER ET	[1FC4 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA76A, 0x0041 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_019)
{
    // A76B 0062;	
    // (ꝫ) LATIN SMALL LETTER ET	[1FC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76B, 0x0062 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_020)
{
    // A76A 0062;	
    // (Ꝫ) LATIN CAPITAL LETTER ET	[1FC4 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76A, 0x0062 };
    uint32_t const ces[9] = { 0x1FC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_021)
{
    // A76D 0021;	
    // (ꝭ) LATIN SMALL LETTER IS	[1FC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76D, 0x0021 };
    uint32_t const ces[9] = { 0x1FC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_022)
{
    // A76C 0021;	
    // (Ꝭ) LATIN CAPITAL LETTER IS	[1FC5 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76C, 0x0021 };
    uint32_t const ces[9] = { 0x1FC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_023)
{
    // A76D 003F;	
    // (ꝭ) LATIN SMALL LETTER IS	[1FC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76D, 0x003F };
    uint32_t const ces[9] = { 0x1FC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_024)
{
    // A76C 003F;	
    // (Ꝭ) LATIN CAPITAL LETTER IS	[1FC5 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76C, 0x003F };
    uint32_t const ces[9] = { 0x1FC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_025)
{
    // A76D 0061;	
    // (ꝭ) LATIN SMALL LETTER IS	[1FC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76D, 0x0061 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_026)
{
    // A76D 0041;	
    // (ꝭ) LATIN SMALL LETTER IS	[1FC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA76D, 0x0041 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_027)
{
    // A76C 0061;	
    // (Ꝭ) LATIN CAPITAL LETTER IS	[1FC5 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76C, 0x0061 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_028)
{
    // A76C 0041;	
    // (Ꝭ) LATIN CAPITAL LETTER IS	[1FC5 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA76C, 0x0041 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_029)
{
    // A76D 0062;	
    // (ꝭ) LATIN SMALL LETTER IS	[1FC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76D, 0x0062 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_030)
{
    // A76C 0062;	
    // (Ꝭ) LATIN CAPITAL LETTER IS	[1FC5 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76C, 0x0062 };
    uint32_t const ces[9] = { 0x1FC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_031)
{
    // 0334 1DD2;	
    // (᷒) COMBINING US ABOVE	[1FC6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x0334, 0x1DD2 };
    uint32_t const ces[8] = { 0x1FC6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_032)
{
    // 1DD2 0334;	
    // (᷒) COMBINING US ABOVE	[1FC6 | 004A 0020 | 0002 0004 |]

    uint32_t cps[2] = { 0x1DD2, 0x0334 };
    uint32_t const ces[8] = { 0x1FC6, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0004, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_033)
{
    // A76F 0021;	
    // (ꝯ) LATIN SMALL LETTER CON	[1FC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76F, 0x0021 };
    uint32_t const ces[9] = { 0x1FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_034)
{
    // 1DD2 0021;	
    // (᷒) COMBINING US ABOVE	[1FC6 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DD2, 0x0021 };
    uint32_t const ces[9] = { 0x1FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_035)
{
    // A76E 0021;	
    // (Ꝯ) LATIN CAPITAL LETTER CON	[1FC6 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76E, 0x0021 };
    uint32_t const ces[9] = { 0x1FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_036)
{
    // A770 0021;	
    // (ꝰ) MODIFIER LETTER US	[1FC6 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA770, 0x0021 };
    uint32_t const ces[9] = { 0x1FC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_037)
{
    // A76F 003F;	
    // (ꝯ) LATIN SMALL LETTER CON	[1FC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76F, 0x003F };
    uint32_t const ces[9] = { 0x1FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_038)
{
    // 1DD2 003F;	
    // (᷒) COMBINING US ABOVE	[1FC6 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DD2, 0x003F };
    uint32_t const ces[9] = { 0x1FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_039)
{
    // A76E 003F;	
    // (Ꝯ) LATIN CAPITAL LETTER CON	[1FC6 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76E, 0x003F };
    uint32_t const ces[9] = { 0x1FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_040)
{
    // A770 003F;	
    // (ꝰ) MODIFIER LETTER US	[1FC6 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA770, 0x003F };
    uint32_t const ces[9] = { 0x1FC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_041)
{
    // A76F 0061;	
    // (ꝯ) LATIN SMALL LETTER CON	[1FC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76F, 0x0061 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_042)
{
    // A76F 0041;	
    // (ꝯ) LATIN SMALL LETTER CON	[1FC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA76F, 0x0041 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_043)
{
    // 1DD2 0061;	
    // (᷒) COMBINING US ABOVE	[1FC6 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DD2, 0x0061 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_044)
{
    // 1DD2 0041;	
    // (᷒) COMBINING US ABOVE	[1FC6 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1DD2, 0x0041 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_045)
{
    // A76E 0061;	
    // (Ꝯ) LATIN CAPITAL LETTER CON	[1FC6 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76E, 0x0061 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_046)
{
    // A76E 0041;	
    // (Ꝯ) LATIN CAPITAL LETTER CON	[1FC6 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA76E, 0x0041 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_047)
{
    // A770 0061;	
    // (ꝰ) MODIFIER LETTER US	[1FC6 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA770, 0x0061 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_048)
{
    // A770 0041;	
    // (ꝰ) MODIFIER LETTER US	[1FC6 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0xA770, 0x0041 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_049)
{
    // A76F 0062;	
    // (ꝯ) LATIN SMALL LETTER CON	[1FC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA76F, 0x0062 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_050)
{
    // 1DD2 0062;	
    // (᷒) COMBINING US ABOVE	[1FC6 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1DD2, 0x0062 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_051)
{
    // A76E 0062;	
    // (Ꝯ) LATIN CAPITAL LETTER CON	[1FC6 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA76E, 0x0062 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_052)
{
    // A770 0062;	
    // (ꝰ) MODIFIER LETTER US	[1FC6 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0xA770, 0x0062 };
    uint32_t const ces[9] = { 0x1FC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_053)
{
    // A778 0021;	
    // (ꝸ) LATIN SMALL LETTER UM	[1FC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA778, 0x0021 };
    uint32_t const ces[9] = { 0x1FC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_054)
{
    // A778 003F;	
    // (ꝸ) LATIN SMALL LETTER UM	[1FC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA778, 0x003F };
    uint32_t const ces[9] = { 0x1FC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_055)
{
    // A778 0061;	
    // (ꝸ) LATIN SMALL LETTER UM	[1FC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA778, 0x0061 };
    uint32_t const ces[9] = { 0x1FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_056)
{
    // A778 0041;	
    // (ꝸ) LATIN SMALL LETTER UM	[1FC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA778, 0x0041 };
    uint32_t const ces[9] = { 0x1FC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_057)
{
    // A778 0062;	
    // (ꝸ) LATIN SMALL LETTER UM	[1FC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA778, 0x0062 };
    uint32_t const ces[9] = { 0x1FC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_058)
{
    // 01BB 0021;	
    // (ƻ) LATIN LETTER TWO WITH STROKE	[1FC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BB, 0x0021 };
    uint32_t const ces[9] = { 0x1FC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_059)
{
    // 01BB 003F;	
    // (ƻ) LATIN LETTER TWO WITH STROKE	[1FC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BB, 0x003F };
    uint32_t const ces[9] = { 0x1FC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_060)
{
    // 01BB 0061;	
    // (ƻ) LATIN LETTER TWO WITH STROKE	[1FC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BB, 0x0061 };
    uint32_t const ces[9] = { 0x1FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_061)
{
    // 01BB 0041;	
    // (ƻ) LATIN LETTER TWO WITH STROKE	[1FC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01BB, 0x0041 };
    uint32_t const ces[9] = { 0x1FC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_062)
{
    // 01BB 0062;	
    // (ƻ) LATIN LETTER TWO WITH STROKE	[1FC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BB, 0x0062 };
    uint32_t const ces[9] = { 0x1FC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_063)
{
    // A72B 0021;	
    // (ꜫ) LATIN SMALL LETTER TRESILLO	[1FCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72B, 0x0021 };
    uint32_t const ces[9] = { 0x1FCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_064)
{
    // A72A 0021;	
    // (Ꜫ) LATIN CAPITAL LETTER TRESILLO	[1FCC 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72A, 0x0021 };
    uint32_t const ces[9] = { 0x1FCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_065)
{
    // A72B 003F;	
    // (ꜫ) LATIN SMALL LETTER TRESILLO	[1FCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72B, 0x003F };
    uint32_t const ces[9] = { 0x1FCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_066)
{
    // A72A 003F;	
    // (Ꜫ) LATIN CAPITAL LETTER TRESILLO	[1FCC 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72A, 0x003F };
    uint32_t const ces[9] = { 0x1FCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_067)
{
    // A72B 0061;	
    // (ꜫ) LATIN SMALL LETTER TRESILLO	[1FCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72B, 0x0061 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_068)
{
    // A72B 0041;	
    // (ꜫ) LATIN SMALL LETTER TRESILLO	[1FCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA72B, 0x0041 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_069)
{
    // A72A 0061;	
    // (Ꜫ) LATIN CAPITAL LETTER TRESILLO	[1FCC 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72A, 0x0061 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_070)
{
    // A72A 0041;	
    // (Ꜫ) LATIN CAPITAL LETTER TRESILLO	[1FCC 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA72A, 0x0041 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_071)
{
    // A72B 0062;	
    // (ꜫ) LATIN SMALL LETTER TRESILLO	[1FCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72B, 0x0062 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_072)
{
    // A72A 0062;	
    // (Ꜫ) LATIN CAPITAL LETTER TRESILLO	[1FCC 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72A, 0x0062 };
    uint32_t const ces[9] = { 0x1FCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_073)
{
    // A72D 0021;	
    // (ꜭ) LATIN SMALL LETTER CUATRILLO	[1FCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72D, 0x0021 };
    uint32_t const ces[9] = { 0x1FCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_074)
{
    // A72C 0021;	
    // (Ꜭ) LATIN CAPITAL LETTER CUATRILLO	[1FCD 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72C, 0x0021 };
    uint32_t const ces[9] = { 0x1FCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_075)
{
    // A72D 003F;	
    // (ꜭ) LATIN SMALL LETTER CUATRILLO	[1FCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72D, 0x003F };
    uint32_t const ces[9] = { 0x1FCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_076)
{
    // A72C 003F;	
    // (Ꜭ) LATIN CAPITAL LETTER CUATRILLO	[1FCD 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72C, 0x003F };
    uint32_t const ces[9] = { 0x1FCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_077)
{
    // A72D 0061;	
    // (ꜭ) LATIN SMALL LETTER CUATRILLO	[1FCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72D, 0x0061 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_078)
{
    // A72D 0041;	
    // (ꜭ) LATIN SMALL LETTER CUATRILLO	[1FCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA72D, 0x0041 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_079)
{
    // A72C 0061;	
    // (Ꜭ) LATIN CAPITAL LETTER CUATRILLO	[1FCD 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72C, 0x0061 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_080)
{
    // A72C 0041;	
    // (Ꜭ) LATIN CAPITAL LETTER CUATRILLO	[1FCD 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA72C, 0x0041 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_081)
{
    // A72D 0062;	
    // (ꜭ) LATIN SMALL LETTER CUATRILLO	[1FCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72D, 0x0062 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_082)
{
    // A72C 0062;	
    // (Ꜭ) LATIN CAPITAL LETTER CUATRILLO	[1FCD 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72C, 0x0062 };
    uint32_t const ces[9] = { 0x1FCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_083)
{
    // A72F 0021;	
    // (ꜯ) LATIN SMALL LETTER CUATRILLO WITH COMMA	[1FCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72F, 0x0021 };
    uint32_t const ces[9] = { 0x1FCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_084)
{
    // A72E 0021;	
    // (Ꜯ) LATIN CAPITAL LETTER CUATRILLO WITH COMMA	[1FCE 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72E, 0x0021 };
    uint32_t const ces[9] = { 0x1FCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_085)
{
    // A72F 003F;	
    // (ꜯ) LATIN SMALL LETTER CUATRILLO WITH COMMA	[1FCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72F, 0x003F };
    uint32_t const ces[9] = { 0x1FCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_086)
{
    // A72E 003F;	
    // (Ꜯ) LATIN CAPITAL LETTER CUATRILLO WITH COMMA	[1FCE 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72E, 0x003F };
    uint32_t const ces[9] = { 0x1FCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_087)
{
    // A72F 0061;	
    // (ꜯ) LATIN SMALL LETTER CUATRILLO WITH COMMA	[1FCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72F, 0x0061 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_088)
{
    // A72F 0041;	
    // (ꜯ) LATIN SMALL LETTER CUATRILLO WITH COMMA	[1FCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA72F, 0x0041 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_089)
{
    // A72E 0061;	
    // (Ꜯ) LATIN CAPITAL LETTER CUATRILLO WITH COMMA	[1FCE 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72E, 0x0061 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_090)
{
    // A72E 0041;	
    // (Ꜯ) LATIN CAPITAL LETTER CUATRILLO WITH COMMA	[1FCE 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA72E, 0x0041 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_091)
{
    // A72F 0062;	
    // (ꜯ) LATIN SMALL LETTER CUATRILLO WITH COMMA	[1FCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA72F, 0x0062 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_092)
{
    // A72E 0062;	
    // (Ꜯ) LATIN CAPITAL LETTER CUATRILLO WITH COMMA	[1FCE 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA72E, 0x0062 };
    uint32_t const ces[9] = { 0x1FCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_093)
{
    // 01A8 0021;	
    // (ƨ) LATIN SMALL LETTER TONE TWO	[1FCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A8, 0x0021 };
    uint32_t const ces[9] = { 0x1FCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_094)
{
    // 01A7 0021;	
    // (Ƨ) LATIN CAPITAL LETTER TONE TWO	[1FCF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A7, 0x0021 };
    uint32_t const ces[9] = { 0x1FCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_095)
{
    // 01A8 003F;	
    // (ƨ) LATIN SMALL LETTER TONE TWO	[1FCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A8, 0x003F };
    uint32_t const ces[9] = { 0x1FCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_096)
{
    // 01A7 003F;	
    // (Ƨ) LATIN CAPITAL LETTER TONE TWO	[1FCF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A7, 0x003F };
    uint32_t const ces[9] = { 0x1FCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_097)
{
    // 01A8 0061;	
    // (ƨ) LATIN SMALL LETTER TONE TWO	[1FCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A8, 0x0061 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_098)
{
    // 01A8 0041;	
    // (ƨ) LATIN SMALL LETTER TONE TWO	[1FCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01A8, 0x0041 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_099)
{
    // 01A7 0061;	
    // (Ƨ) LATIN CAPITAL LETTER TONE TWO	[1FCF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A7, 0x0061 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_100)
{
    // 01A7 0041;	
    // (Ƨ) LATIN CAPITAL LETTER TONE TWO	[1FCF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01A7, 0x0041 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_101)
{
    // 01A8 0062;	
    // (ƨ) LATIN SMALL LETTER TONE TWO	[1FCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01A8, 0x0062 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_102)
{
    // 01A7 0062;	
    // (Ƨ) LATIN CAPITAL LETTER TONE TWO	[1FCF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01A7, 0x0062 };
    uint32_t const ces[9] = { 0x1FCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_103)
{
    // 01BD 0021;	
    // (ƽ) LATIN SMALL LETTER TONE FIVE	[1FD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BD, 0x0021 };
    uint32_t const ces[9] = { 0x1FD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_104)
{
    // 01BC 0021;	
    // (Ƽ) LATIN CAPITAL LETTER TONE FIVE	[1FD3 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01BC, 0x0021 };
    uint32_t const ces[9] = { 0x1FD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_105)
{
    // 01BD 003F;	
    // (ƽ) LATIN SMALL LETTER TONE FIVE	[1FD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BD, 0x003F };
    uint32_t const ces[9] = { 0x1FD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_106)
{
    // 01BC 003F;	
    // (Ƽ) LATIN CAPITAL LETTER TONE FIVE	[1FD3 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01BC, 0x003F };
    uint32_t const ces[9] = { 0x1FD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_107)
{
    // 01BD 0061;	
    // (ƽ) LATIN SMALL LETTER TONE FIVE	[1FD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BD, 0x0061 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_108)
{
    // 01BD 0041;	
    // (ƽ) LATIN SMALL LETTER TONE FIVE	[1FD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01BD, 0x0041 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_109)
{
    // 01BC 0061;	
    // (Ƽ) LATIN CAPITAL LETTER TONE FIVE	[1FD3 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01BC, 0x0061 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_110)
{
    // 01BC 0041;	
    // (Ƽ) LATIN CAPITAL LETTER TONE FIVE	[1FD3 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01BC, 0x0041 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_111)
{
    // 01BD 0062;	
    // (ƽ) LATIN SMALL LETTER TONE FIVE	[1FD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01BD, 0x0062 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_112)
{
    // 01BC 0062;	
    // (Ƽ) LATIN CAPITAL LETTER TONE FIVE	[1FD3 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01BC, 0x0062 };
    uint32_t const ces[9] = { 0x1FD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_113)
{
    // 0185 0021;	
    // (ƅ) LATIN SMALL LETTER TONE SIX	[1FD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0185, 0x0021 };
    uint32_t const ces[9] = { 0x1FD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_114)
{
    // 0184 0021;	
    // (Ƅ) LATIN CAPITAL LETTER TONE SIX	[1FD7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0184, 0x0021 };
    uint32_t const ces[9] = { 0x1FD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_115)
{
    // 0185 003F;	
    // (ƅ) LATIN SMALL LETTER TONE SIX	[1FD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0185, 0x003F };
    uint32_t const ces[9] = { 0x1FD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_116)
{
    // 0184 003F;	
    // (Ƅ) LATIN CAPITAL LETTER TONE SIX	[1FD7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0184, 0x003F };
    uint32_t const ces[9] = { 0x1FD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_117)
{
    // 0185 0061;	
    // (ƅ) LATIN SMALL LETTER TONE SIX	[1FD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0185, 0x0061 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_118)
{
    // 0185 0041;	
    // (ƅ) LATIN SMALL LETTER TONE SIX	[1FD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0185, 0x0041 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_119)
{
    // 0184 0061;	
    // (Ƅ) LATIN CAPITAL LETTER TONE SIX	[1FD7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0184, 0x0061 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_120)
{
    // 0184 0041;	
    // (Ƅ) LATIN CAPITAL LETTER TONE SIX	[1FD7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0184, 0x0041 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_121)
{
    // 0185 0062;	
    // (ƅ) LATIN SMALL LETTER TONE SIX	[1FD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0185, 0x0062 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_122)
{
    // 0184 0062;	
    // (Ƅ) LATIN CAPITAL LETTER TONE SIX	[1FD7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0184, 0x0062 };
    uint32_t const ces[9] = { 0x1FD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_123)
{
    // 0294 0021;	
    // (ʔ) LATIN LETTER GLOTTAL STOP	[1FDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0294, 0x0021 };
    uint32_t const ces[9] = { 0x1FDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_124)
{
    // 0294 003F;	
    // (ʔ) LATIN LETTER GLOTTAL STOP	[1FDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0294, 0x003F };
    uint32_t const ces[9] = { 0x1FDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_125)
{
    // 0294 0061;	
    // (ʔ) LATIN LETTER GLOTTAL STOP	[1FDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0294, 0x0061 };
    uint32_t const ces[9] = { 0x1FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_126)
{
    // 0294 0041;	
    // (ʔ) LATIN LETTER GLOTTAL STOP	[1FDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0294, 0x0041 };
    uint32_t const ces[9] = { 0x1FDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_127)
{
    // 0294 0062;	
    // (ʔ) LATIN LETTER GLOTTAL STOP	[1FDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0294, 0x0062 };
    uint32_t const ces[9] = { 0x1FDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_128)
{
    // 0242 0021;	
    // (ɂ) LATIN SMALL LETTER GLOTTAL STOP	[1FDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0242, 0x0021 };
    uint32_t const ces[9] = { 0x1FDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_129)
{
    // 0241 0021;	
    // (Ɂ) LATIN CAPITAL LETTER GLOTTAL STOP	[1FDF 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0241, 0x0021 };
    uint32_t const ces[9] = { 0x1FDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_130)
{
    // 0242 003F;	
    // (ɂ) LATIN SMALL LETTER GLOTTAL STOP	[1FDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0242, 0x003F };
    uint32_t const ces[9] = { 0x1FDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_131)
{
    // 0241 003F;	
    // (Ɂ) LATIN CAPITAL LETTER GLOTTAL STOP	[1FDF 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0241, 0x003F };
    uint32_t const ces[9] = { 0x1FDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_132)
{
    // 0242 0061;	
    // (ɂ) LATIN SMALL LETTER GLOTTAL STOP	[1FDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0242, 0x0061 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_133)
{
    // 0242 0041;	
    // (ɂ) LATIN SMALL LETTER GLOTTAL STOP	[1FDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0242, 0x0041 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_134)
{
    // 0241 0061;	
    // (Ɂ) LATIN CAPITAL LETTER GLOTTAL STOP	[1FDF 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0241, 0x0061 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_135)
{
    // 0241 0041;	
    // (Ɂ) LATIN CAPITAL LETTER GLOTTAL STOP	[1FDF 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0241, 0x0041 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_136)
{
    // 0242 0062;	
    // (ɂ) LATIN SMALL LETTER GLOTTAL STOP	[1FDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0242, 0x0062 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_137)
{
    // 0241 0062;	
    // (Ɂ) LATIN CAPITAL LETTER GLOTTAL STOP	[1FDF 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0241, 0x0062 };
    uint32_t const ces[9] = { 0x1FDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_138)
{
    // 02C0 0021;	
    // (ˀ) MODIFIER LETTER GLOTTAL STOP	[1FE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C0, 0x0021 };
    uint32_t const ces[9] = { 0x1FE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_139)
{
    // 02C0 003F;	
    // (ˀ) MODIFIER LETTER GLOTTAL STOP	[1FE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C0, 0x003F };
    uint32_t const ces[9] = { 0x1FE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_140)
{
    // 02C0 0061;	
    // (ˀ) MODIFIER LETTER GLOTTAL STOP	[1FE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C0, 0x0061 };
    uint32_t const ces[9] = { 0x1FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_141)
{
    // 02C0 0041;	
    // (ˀ) MODIFIER LETTER GLOTTAL STOP	[1FE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C0, 0x0041 };
    uint32_t const ces[9] = { 0x1FE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_142)
{
    // 02C0 0062;	
    // (ˀ) MODIFIER LETTER GLOTTAL STOP	[1FE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C0, 0x0062 };
    uint32_t const ces[9] = { 0x1FE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_143)
{
    // 02BC 0021;	
    // (ʼ) MODIFIER LETTER APOSTROPHE	[1FE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BC, 0x0021 };
    uint32_t const ces[9] = { 0x1FE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_144)
{
    // 02BC 003F;	
    // (ʼ) MODIFIER LETTER APOSTROPHE	[1FE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BC, 0x003F };
    uint32_t const ces[9] = { 0x1FE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_145)
{
    // 02BC 0061;	
    // (ʼ) MODIFIER LETTER APOSTROPHE	[1FE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BC, 0x0061 };
    uint32_t const ces[9] = { 0x1FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_146)
{
    // 02BC 0041;	
    // (ʼ) MODIFIER LETTER APOSTROPHE	[1FE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02BC, 0x0041 };
    uint32_t const ces[9] = { 0x1FE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_147)
{
    // 02BC 0062;	
    // (ʼ) MODIFIER LETTER APOSTROPHE	[1FE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BC, 0x0062 };
    uint32_t const ces[9] = { 0x1FE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_148)
{
    // 0149 0021;	
    // (ŉ) LATIN SMALL LETTER N PRECEDED BY APOSTROPHE	[1FE4 1E1F 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0149, 0x0021 };
    uint32_t const ces[12] = { 0x1FE4, 0x1E1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_149)
{
    // 0149 003F;	
    // (ŉ) LATIN SMALL LETTER N PRECEDED BY APOSTROPHE	[1FE4 1E1F 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0149, 0x003F };
    uint32_t const ces[12] = { 0x1FE4, 0x1E1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_150)
{
    // 0149 0061;	
    // (ŉ) LATIN SMALL LETTER N PRECEDED BY APOSTROPHE	[1FE4 1E1F 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0149, 0x0061 };
    uint32_t const ces[12] = { 0x1FE4, 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_151)
{
    // 0149 0041;	
    // (ŉ) LATIN SMALL LETTER N PRECEDED BY APOSTROPHE	[1FE4 1E1F 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0149, 0x0041 };
    uint32_t const ces[12] = { 0x1FE4, 0x1E1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_152)
{
    // 0149 0062;	
    // (ŉ) LATIN SMALL LETTER N PRECEDED BY APOSTROPHE	[1FE4 1E1F 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0149, 0x0062 };
    uint32_t const ces[12] = { 0x1FE4, 0x1E1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_153)
{
    // 02EE 0021;	
    // (ˮ) MODIFIER LETTER DOUBLE APOSTROPHE	[1FE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02EE, 0x0021 };
    uint32_t const ces[9] = { 0x1FE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_154)
{
    // 02EE 003F;	
    // (ˮ) MODIFIER LETTER DOUBLE APOSTROPHE	[1FE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02EE, 0x003F };
    uint32_t const ces[9] = { 0x1FE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_155)
{
    // 02EE 0061;	
    // (ˮ) MODIFIER LETTER DOUBLE APOSTROPHE	[1FE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02EE, 0x0061 };
    uint32_t const ces[9] = { 0x1FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_156)
{
    // 02EE 0041;	
    // (ˮ) MODIFIER LETTER DOUBLE APOSTROPHE	[1FE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02EE, 0x0041 };
    uint32_t const ces[9] = { 0x1FE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_157)
{
    // 02EE 0062;	
    // (ˮ) MODIFIER LETTER DOUBLE APOSTROPHE	[1FE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02EE, 0x0062 };
    uint32_t const ces[9] = { 0x1FE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_158)
{
    // 02BE 0021;	
    // (ʾ) MODIFIER LETTER RIGHT HALF RING	[1FE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BE, 0x0021 };
    uint32_t const ces[9] = { 0x1FE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_159)
{
    // 02BE 003F;	
    // (ʾ) MODIFIER LETTER RIGHT HALF RING	[1FE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BE, 0x003F };
    uint32_t const ces[9] = { 0x1FE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_160)
{
    // 02BE 0061;	
    // (ʾ) MODIFIER LETTER RIGHT HALF RING	[1FE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BE, 0x0061 };
    uint32_t const ces[9] = { 0x1FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_161)
{
    // 02BE 0041;	
    // (ʾ) MODIFIER LETTER RIGHT HALF RING	[1FE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02BE, 0x0041 };
    uint32_t const ces[9] = { 0x1FE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_162)
{
    // 02BE 0062;	
    // (ʾ) MODIFIER LETTER RIGHT HALF RING	[1FE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BE, 0x0062 };
    uint32_t const ces[9] = { 0x1FE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_163)
{
    // A723 0021;	
    // (ꜣ) LATIN SMALL LETTER EGYPTOLOGICAL ALEF	[1FE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA723, 0x0021 };
    uint32_t const ces[9] = { 0x1FE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_164)
{
    // A722 0021;	
    // (Ꜣ) LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF	[1FE7 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA722, 0x0021 };
    uint32_t const ces[9] = { 0x1FE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_165)
{
    // A723 003F;	
    // (ꜣ) LATIN SMALL LETTER EGYPTOLOGICAL ALEF	[1FE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA723, 0x003F };
    uint32_t const ces[9] = { 0x1FE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_166)
{
    // A722 003F;	
    // (Ꜣ) LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF	[1FE7 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA722, 0x003F };
    uint32_t const ces[9] = { 0x1FE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_167)
{
    // A723 0061;	
    // (ꜣ) LATIN SMALL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA723, 0x0061 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_168)
{
    // A723 0041;	
    // (ꜣ) LATIN SMALL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA723, 0x0041 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_169)
{
    // A722 0061;	
    // (Ꜣ) LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA722, 0x0061 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_170)
{
    // A722 0041;	
    // (Ꜣ) LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA722, 0x0041 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_171)
{
    // A723 0062;	
    // (ꜣ) LATIN SMALL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA723, 0x0062 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_172)
{
    // A722 0062;	
    // (Ꜣ) LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF	[1FE7 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA722, 0x0062 };
    uint32_t const ces[9] = { 0x1FE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_173)
{
    // A78C 0021;	
    // (ꞌ) LATIN SMALL LETTER SALTILLO	[1FE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78C, 0x0021 };
    uint32_t const ces[9] = { 0x1FE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_174)
{
    // A78B 0021;	
    // (Ꞌ) LATIN CAPITAL LETTER SALTILLO	[1FE8 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA78B, 0x0021 };
    uint32_t const ces[9] = { 0x1FE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_175)
{
    // A78C 003F;	
    // (ꞌ) LATIN SMALL LETTER SALTILLO	[1FE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78C, 0x003F };
    uint32_t const ces[9] = { 0x1FE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_176)
{
    // A78B 003F;	
    // (Ꞌ) LATIN CAPITAL LETTER SALTILLO	[1FE8 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA78B, 0x003F };
    uint32_t const ces[9] = { 0x1FE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_177)
{
    // A78C 0061;	
    // (ꞌ) LATIN SMALL LETTER SALTILLO	[1FE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78C, 0x0061 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_178)
{
    // A78C 0041;	
    // (ꞌ) LATIN SMALL LETTER SALTILLO	[1FE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA78C, 0x0041 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_179)
{
    // A78B 0061;	
    // (Ꞌ) LATIN CAPITAL LETTER SALTILLO	[1FE8 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA78B, 0x0061 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_180)
{
    // A78B 0041;	
    // (Ꞌ) LATIN CAPITAL LETTER SALTILLO	[1FE8 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA78B, 0x0041 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_181)
{
    // A78C 0062;	
    // (ꞌ) LATIN SMALL LETTER SALTILLO	[1FE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78C, 0x0062 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_182)
{
    // A78B 0062;	
    // (Ꞌ) LATIN CAPITAL LETTER SALTILLO	[1FE8 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA78B, 0x0062 };
    uint32_t const ces[9] = { 0x1FE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_183)
{
    // A78F 0021;	
    // (ꞏ) LATIN LETTER SINOLOGICAL DOT	[1FE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78F, 0x0021 };
    uint32_t const ces[9] = { 0x1FE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_184)
{
    // A78F 003F;	
    // (ꞏ) LATIN LETTER SINOLOGICAL DOT	[1FE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78F, 0x003F };
    uint32_t const ces[9] = { 0x1FE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_185)
{
    // A78F 0061;	
    // (ꞏ) LATIN LETTER SINOLOGICAL DOT	[1FE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78F, 0x0061 };
    uint32_t const ces[9] = { 0x1FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_186)
{
    // A78F 0041;	
    // (ꞏ) LATIN LETTER SINOLOGICAL DOT	[1FE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA78F, 0x0041 };
    uint32_t const ces[9] = { 0x1FE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_187)
{
    // A78F 0062;	
    // (ꞏ) LATIN LETTER SINOLOGICAL DOT	[1FE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA78F, 0x0062 };
    uint32_t const ces[9] = { 0x1FE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_188)
{
    // 0295 0021;	
    // (ʕ) LATIN LETTER PHARYNGEAL VOICED FRICATIVE	[1FEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0295, 0x0021 };
    uint32_t const ces[9] = { 0x1FEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_189)
{
    // 02E4 0021;	
    // (ˤ) MODIFIER LETTER SMALL REVERSED GLOTTAL STOP	[1FEA 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E4, 0x0021 };
    uint32_t const ces[9] = { 0x1FEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_190)
{
    // 0295 003F;	
    // (ʕ) LATIN LETTER PHARYNGEAL VOICED FRICATIVE	[1FEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0295, 0x003F };
    uint32_t const ces[9] = { 0x1FEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_191)
{
    // 02E4 003F;	
    // (ˤ) MODIFIER LETTER SMALL REVERSED GLOTTAL STOP	[1FEA 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E4, 0x003F };
    uint32_t const ces[9] = { 0x1FEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_192)
{
    // 0295 0061;	
    // (ʕ) LATIN LETTER PHARYNGEAL VOICED FRICATIVE	[1FEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0295, 0x0061 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_193)
{
    // 0295 0041;	
    // (ʕ) LATIN LETTER PHARYNGEAL VOICED FRICATIVE	[1FEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0295, 0x0041 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_194)
{
    // 02E4 0061;	
    // (ˤ) MODIFIER LETTER SMALL REVERSED GLOTTAL STOP	[1FEA 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E4, 0x0061 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_195)
{
    // 02E4 0041;	
    // (ˤ) MODIFIER LETTER SMALL REVERSED GLOTTAL STOP	[1FEA 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02E4, 0x0041 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_196)
{
    // 0295 0062;	
    // (ʕ) LATIN LETTER PHARYNGEAL VOICED FRICATIVE	[1FEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0295, 0x0062 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_197)
{
    // 02E4 0062;	
    // (ˤ) MODIFIER LETTER SMALL REVERSED GLOTTAL STOP	[1FEA 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E4, 0x0062 };
    uint32_t const ces[9] = { 0x1FEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_198)
{
    // 02BF 0021;	
    // (ʿ) MODIFIER LETTER LEFT HALF RING	[1FEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BF, 0x0021 };
    uint32_t const ces[9] = { 0x1FEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_199)
{
    // 02BF 003F;	
    // (ʿ) MODIFIER LETTER LEFT HALF RING	[1FEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BF, 0x003F };
    uint32_t const ces[9] = { 0x1FEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_200)
{
    // 02BF 0061;	
    // (ʿ) MODIFIER LETTER LEFT HALF RING	[1FEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BF, 0x0061 };
    uint32_t const ces[9] = { 0x1FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_201)
{
    // 02BF 0041;	
    // (ʿ) MODIFIER LETTER LEFT HALF RING	[1FEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02BF, 0x0041 };
    uint32_t const ces[9] = { 0x1FEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_202)
{
    // 02BF 0062;	
    // (ʿ) MODIFIER LETTER LEFT HALF RING	[1FEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BF, 0x0062 };
    uint32_t const ces[9] = { 0x1FEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_203)
{
    // 02C1 0021;	
    // (ˁ) MODIFIER LETTER REVERSED GLOTTAL STOP	[1FEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C1, 0x0021 };
    uint32_t const ces[9] = { 0x1FEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_204)
{
    // 02C1 003F;	
    // (ˁ) MODIFIER LETTER REVERSED GLOTTAL STOP	[1FEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C1, 0x003F };
    uint32_t const ces[9] = { 0x1FEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_205)
{
    // 02C1 0061;	
    // (ˁ) MODIFIER LETTER REVERSED GLOTTAL STOP	[1FEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C1, 0x0061 };
    uint32_t const ces[9] = { 0x1FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_206)
{
    // 02C1 0041;	
    // (ˁ) MODIFIER LETTER REVERSED GLOTTAL STOP	[1FEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C1, 0x0041 };
    uint32_t const ces[9] = { 0x1FEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_207)
{
    // 02C1 0062;	
    // (ˁ) MODIFIER LETTER REVERSED GLOTTAL STOP	[1FEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C1, 0x0062 };
    uint32_t const ces[9] = { 0x1FEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_208)
{
    // 1D24 0021;	
    // (ᴤ) LATIN LETTER VOICED LARYNGEAL SPIRANT	[1FF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D24, 0x0021 };
    uint32_t const ces[9] = { 0x1FF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_209)
{
    // 1D24 003F;	
    // (ᴤ) LATIN LETTER VOICED LARYNGEAL SPIRANT	[1FF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D24, 0x003F };
    uint32_t const ces[9] = { 0x1FF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_210)
{
    // 1D24 0061;	
    // (ᴤ) LATIN LETTER VOICED LARYNGEAL SPIRANT	[1FF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D24, 0x0061 };
    uint32_t const ces[9] = { 0x1FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_211)
{
    // 1D24 0041;	
    // (ᴤ) LATIN LETTER VOICED LARYNGEAL SPIRANT	[1FF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D24, 0x0041 };
    uint32_t const ces[9] = { 0x1FF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_212)
{
    // 1D24 0062;	
    // (ᴤ) LATIN LETTER VOICED LARYNGEAL SPIRANT	[1FF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D24, 0x0062 };
    uint32_t const ces[9] = { 0x1FF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_213)
{
    // 1D25 0021;	
    // (ᴥ) LATIN LETTER AIN	[1FF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D25, 0x0021 };
    uint32_t const ces[9] = { 0x1FF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_214)
{
    // 1D5C 0021;	
    // (ᵜ) MODIFIER LETTER SMALL AIN	[1FF1 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D5C, 0x0021 };
    uint32_t const ces[9] = { 0x1FF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_215)
{
    // 1D25 003F;	
    // (ᴥ) LATIN LETTER AIN	[1FF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D25, 0x003F };
    uint32_t const ces[9] = { 0x1FF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_216)
{
    // 1D5C 003F;	
    // (ᵜ) MODIFIER LETTER SMALL AIN	[1FF1 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D5C, 0x003F };
    uint32_t const ces[9] = { 0x1FF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_217)
{
    // 1D25 0061;	
    // (ᴥ) LATIN LETTER AIN	[1FF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D25, 0x0061 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_218)
{
    // 1D25 0041;	
    // (ᴥ) LATIN LETTER AIN	[1FF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D25, 0x0041 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_219)
{
    // 1D5C 0061;	
    // (ᵜ) MODIFIER LETTER SMALL AIN	[1FF1 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D5C, 0x0061 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_220)
{
    // 1D5C 0041;	
    // (ᵜ) MODIFIER LETTER SMALL AIN	[1FF1 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D5C, 0x0041 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_221)
{
    // 1D25 0062;	
    // (ᴥ) LATIN LETTER AIN	[1FF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D25, 0x0062 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_222)
{
    // 1D5C 0062;	
    // (ᵜ) MODIFIER LETTER SMALL AIN	[1FF1 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D5C, 0x0062 };
    uint32_t const ces[9] = { 0x1FF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_223)
{
    // A725 0021;	
    // (ꜥ) LATIN SMALL LETTER EGYPTOLOGICAL AIN	[1FF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA725, 0x0021 };
    uint32_t const ces[9] = { 0x1FF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_224)
{
    // A724 0021;	
    // (Ꜥ) LATIN CAPITAL LETTER EGYPTOLOGICAL AIN	[1FF2 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA724, 0x0021 };
    uint32_t const ces[9] = { 0x1FF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_225)
{
    // A725 003F;	
    // (ꜥ) LATIN SMALL LETTER EGYPTOLOGICAL AIN	[1FF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA725, 0x003F };
    uint32_t const ces[9] = { 0x1FF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_226)
{
    // A724 003F;	
    // (Ꜥ) LATIN CAPITAL LETTER EGYPTOLOGICAL AIN	[1FF2 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA724, 0x003F };
    uint32_t const ces[9] = { 0x1FF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_227)
{
    // A725 0061;	
    // (ꜥ) LATIN SMALL LETTER EGYPTOLOGICAL AIN	[1FF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA725, 0x0061 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_228)
{
    // A725 0041;	
    // (ꜥ) LATIN SMALL LETTER EGYPTOLOGICAL AIN	[1FF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA725, 0x0041 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_229)
{
    // A724 0061;	
    // (Ꜥ) LATIN CAPITAL LETTER EGYPTOLOGICAL AIN	[1FF2 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA724, 0x0061 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_230)
{
    // A724 0041;	
    // (Ꜥ) LATIN CAPITAL LETTER EGYPTOLOGICAL AIN	[1FF2 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA724, 0x0041 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_231)
{
    // A725 0062;	
    // (ꜥ) LATIN SMALL LETTER EGYPTOLOGICAL AIN	[1FF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA725, 0x0062 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_232)
{
    // A724 0062;	
    // (Ꜥ) LATIN CAPITAL LETTER EGYPTOLOGICAL AIN	[1FF2 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA724, 0x0062 };
    uint32_t const ces[9] = { 0x1FF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_233)
{
    // 02A1 0021;	
    // (ʡ) LATIN LETTER GLOTTAL STOP WITH STROKE	[1FF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A1, 0x0021 };
    uint32_t const ces[9] = { 0x1FF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_234)
{
    // 02A1 003F;	
    // (ʡ) LATIN LETTER GLOTTAL STOP WITH STROKE	[1FF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A1, 0x003F };
    uint32_t const ces[9] = { 0x1FF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_235)
{
    // 02A1 0061;	
    // (ʡ) LATIN LETTER GLOTTAL STOP WITH STROKE	[1FF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A1, 0x0061 };
    uint32_t const ces[9] = { 0x1FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_236)
{
    // 02A1 0041;	
    // (ʡ) LATIN LETTER GLOTTAL STOP WITH STROKE	[1FF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02A1, 0x0041 };
    uint32_t const ces[9] = { 0x1FF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_237)
{
    // 02A1 0062;	
    // (ʡ) LATIN LETTER GLOTTAL STOP WITH STROKE	[1FF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A1, 0x0062 };
    uint32_t const ces[9] = { 0x1FF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_238)
{
    // 02A2 0021;	
    // (ʢ) LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE	[1FF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A2, 0x0021 };
    uint32_t const ces[9] = { 0x1FF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_239)
{
    // 02A2 003F;	
    // (ʢ) LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE	[1FF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A2, 0x003F };
    uint32_t const ces[9] = { 0x1FF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_240)
{
    // 02A2 0061;	
    // (ʢ) LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE	[1FF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A2, 0x0061 };
    uint32_t const ces[9] = { 0x1FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_241)
{
    // 02A2 0041;	
    // (ʢ) LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE	[1FF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02A2, 0x0041 };
    uint32_t const ces[9] = { 0x1FF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_242)
{
    // 02A2 0062;	
    // (ʢ) LATIN LETTER REVERSED GLOTTAL STOP WITH STROKE	[1FF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02A2, 0x0062 };
    uint32_t const ces[9] = { 0x1FF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_243)
{
    // 0296 0021;	
    // (ʖ) LATIN LETTER INVERTED GLOTTAL STOP	[1FFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0296, 0x0021 };
    uint32_t const ces[9] = { 0x1FFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_244)
{
    // 0296 003F;	
    // (ʖ) LATIN LETTER INVERTED GLOTTAL STOP	[1FFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0296, 0x003F };
    uint32_t const ces[9] = { 0x1FFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_245)
{
    // 0296 0061;	
    // (ʖ) LATIN LETTER INVERTED GLOTTAL STOP	[1FFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0296, 0x0061 };
    uint32_t const ces[9] = { 0x1FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_246)
{
    // 0296 0041;	
    // (ʖ) LATIN LETTER INVERTED GLOTTAL STOP	[1FFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0296, 0x0041 };
    uint32_t const ces[9] = { 0x1FFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_247)
{
    // 0296 0062;	
    // (ʖ) LATIN LETTER INVERTED GLOTTAL STOP	[1FFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0296, 0x0062 };
    uint32_t const ces[9] = { 0x1FFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_248)
{
    // 01C0 0021;	
    // (ǀ) LATIN LETTER DENTAL CLICK	[1FFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C0, 0x0021 };
    uint32_t const ces[9] = { 0x1FFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_249)
{
    // 01C0 003F;	
    // (ǀ) LATIN LETTER DENTAL CLICK	[1FFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C0, 0x003F };
    uint32_t const ces[9] = { 0x1FFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_250)
{
    // 01C0 0061;	
    // (ǀ) LATIN LETTER DENTAL CLICK	[1FFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C0, 0x0061 };
    uint32_t const ces[9] = { 0x1FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_251)
{
    // 01C0 0041;	
    // (ǀ) LATIN LETTER DENTAL CLICK	[1FFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01C0, 0x0041 };
    uint32_t const ces[9] = { 0x1FFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_252)
{
    // 01C0 0062;	
    // (ǀ) LATIN LETTER DENTAL CLICK	[1FFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C0, 0x0062 };
    uint32_t const ces[9] = { 0x1FFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_253)
{
    // 01C1 0021;	
    // (ǁ) LATIN LETTER LATERAL CLICK	[2003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C1, 0x0021 };
    uint32_t const ces[9] = { 0x2003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_254)
{
    // 01C1 003F;	
    // (ǁ) LATIN LETTER LATERAL CLICK	[2003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C1, 0x003F };
    uint32_t const ces[9] = { 0x2003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_255)
{
    // 01C1 0061;	
    // (ǁ) LATIN LETTER LATERAL CLICK	[2003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C1, 0x0061 };
    uint32_t const ces[9] = { 0x2003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_256)
{
    // 01C1 0041;	
    // (ǁ) LATIN LETTER LATERAL CLICK	[2003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01C1, 0x0041 };
    uint32_t const ces[9] = { 0x2003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_257)
{
    // 01C1 0062;	
    // (ǁ) LATIN LETTER LATERAL CLICK	[2003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C1, 0x0062 };
    uint32_t const ces[9] = { 0x2003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_258)
{
    // 01C2 0021;	
    // (ǂ) LATIN LETTER ALVEOLAR CLICK	[2007 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C2, 0x0021 };
    uint32_t const ces[9] = { 0x2007, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_259)
{
    // 01C2 003F;	
    // (ǂ) LATIN LETTER ALVEOLAR CLICK	[2007 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C2, 0x003F };
    uint32_t const ces[9] = { 0x2007, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_260)
{
    // 01C2 0061;	
    // (ǂ) LATIN LETTER ALVEOLAR CLICK	[2007 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C2, 0x0061 };
    uint32_t const ces[9] = { 0x2007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_261)
{
    // 01C2 0041;	
    // (ǂ) LATIN LETTER ALVEOLAR CLICK	[2007 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01C2, 0x0041 };
    uint32_t const ces[9] = { 0x2007, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_262)
{
    // 01C2 0062;	
    // (ǂ) LATIN LETTER ALVEOLAR CLICK	[2007 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C2, 0x0062 };
    uint32_t const ces[9] = { 0x2007, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_263)
{
    // 01C3 0021;	
    // (ǃ) LATIN LETTER RETROFLEX CLICK	[200B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C3, 0x0021 };
    uint32_t const ces[9] = { 0x200B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_264)
{
    // 01C3 003F;	
    // (ǃ) LATIN LETTER RETROFLEX CLICK	[200B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C3, 0x003F };
    uint32_t const ces[9] = { 0x200B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_265)
{
    // 01C3 0061;	
    // (ǃ) LATIN LETTER RETROFLEX CLICK	[200B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C3, 0x0061 };
    uint32_t const ces[9] = { 0x200B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_266)
{
    // 01C3 0041;	
    // (ǃ) LATIN LETTER RETROFLEX CLICK	[200B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01C3, 0x0041 };
    uint32_t const ces[9] = { 0x200B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_267)
{
    // 01C3 0062;	
    // (ǃ) LATIN LETTER RETROFLEX CLICK	[200B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01C3, 0x0062 };
    uint32_t const ces[9] = { 0x200B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_268)
{
    // 0297 0021;	
    // (ʗ) LATIN LETTER STRETCHED C	[200F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0297, 0x0021 };
    uint32_t const ces[9] = { 0x200F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_269)
{
    // 0297 003F;	
    // (ʗ) LATIN LETTER STRETCHED C	[200F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0297, 0x003F };
    uint32_t const ces[9] = { 0x200F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_270)
{
    // 0297 0061;	
    // (ʗ) LATIN LETTER STRETCHED C	[200F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0297, 0x0061 };
    uint32_t const ces[9] = { 0x200F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_271)
{
    // 0297 0041;	
    // (ʗ) LATIN LETTER STRETCHED C	[200F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0297, 0x0041 };
    uint32_t const ces[9] = { 0x200F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_272)
{
    // 0297 0062;	
    // (ʗ) LATIN LETTER STRETCHED C	[200F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0297, 0x0062 };
    uint32_t const ces[9] = { 0x200F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_273)
{
    // 0298 0021;	
    // (ʘ) LATIN LETTER BILABIAL CLICK	[2013 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0298, 0x0021 };
    uint32_t const ces[9] = { 0x2013, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_274)
{
    // 0298 003F;	
    // (ʘ) LATIN LETTER BILABIAL CLICK	[2013 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0298, 0x003F };
    uint32_t const ces[9] = { 0x2013, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_275)
{
    // 0298 0061;	
    // (ʘ) LATIN LETTER BILABIAL CLICK	[2013 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0298, 0x0061 };
    uint32_t const ces[9] = { 0x2013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_276)
{
    // 0298 0041;	
    // (ʘ) LATIN LETTER BILABIAL CLICK	[2013 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0298, 0x0041 };
    uint32_t const ces[9] = { 0x2013, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_277)
{
    // 0298 0062;	
    // (ʘ) LATIN LETTER BILABIAL CLICK	[2013 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0298, 0x0062 };
    uint32_t const ces[9] = { 0x2013, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_278)
{
    // 02AC 0021;	
    // (ʬ) LATIN LETTER BILABIAL PERCUSSIVE	[2017 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AC, 0x0021 };
    uint32_t const ces[9] = { 0x2017, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_279)
{
    // 02AC 003F;	
    // (ʬ) LATIN LETTER BILABIAL PERCUSSIVE	[2017 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AC, 0x003F };
    uint32_t const ces[9] = { 0x2017, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_280)
{
    // 02AC 0061;	
    // (ʬ) LATIN LETTER BILABIAL PERCUSSIVE	[2017 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AC, 0x0061 };
    uint32_t const ces[9] = { 0x2017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_281)
{
    // 02AC 0041;	
    // (ʬ) LATIN LETTER BILABIAL PERCUSSIVE	[2017 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02AC, 0x0041 };
    uint32_t const ces[9] = { 0x2017, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_282)
{
    // 02AC 0062;	
    // (ʬ) LATIN LETTER BILABIAL PERCUSSIVE	[2017 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AC, 0x0062 };
    uint32_t const ces[9] = { 0x2017, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_283)
{
    // 02AD 0021;	
    // (ʭ) LATIN LETTER BIDENTAL PERCUSSIVE	[201B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AD, 0x0021 };
    uint32_t const ces[9] = { 0x201B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_284)
{
    // 02AD 003F;	
    // (ʭ) LATIN LETTER BIDENTAL PERCUSSIVE	[201B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AD, 0x003F };
    uint32_t const ces[9] = { 0x201B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_285)
{
    // 02AD 0061;	
    // (ʭ) LATIN LETTER BIDENTAL PERCUSSIVE	[201B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AD, 0x0061 };
    uint32_t const ces[9] = { 0x201B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_286)
{
    // 02AD 0041;	
    // (ʭ) LATIN LETTER BIDENTAL PERCUSSIVE	[201B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02AD, 0x0041 };
    uint32_t const ces[9] = { 0x201B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_287)
{
    // 02AD 0062;	
    // (ʭ) LATIN LETTER BIDENTAL PERCUSSIVE	[201B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02AD, 0x0062 };
    uint32_t const ces[9] = { 0x201B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_288)
{
    // 03B1 0313 0334;	
    // (ἀ) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_289)
{
    // 03B1 0334 0313;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_290)
{
    // 03B1 0343 0334;	
    // (ἀ) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_291)
{
    // 1F00 0334;	
    // (ἀ) GREEK SMALL LETTER ALPHA WITH PSILI	[201F | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F00, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_292)
{
    // 0391 0313 0334;	
    // (Ἀ) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_293)
{
    // 0391 0334 0313;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_294)
{
    // 0391 0334 0343;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0343 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_295)
{
    // 0391 0343 0334;	
    // (Ἀ) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_296)
{
    // 03B1 0343 0334 0301;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0343, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_297)
{
    // 03B1 0343 0334 0341;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0343, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_298)
{
    // 1F00 0301 0334;	
    // (ἄ) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING ACUTE ACCENT	[201F | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_299)
{
    // 1F00 0341 0334;	
    // (ἄ) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_300)
{
    // 0391 0313 0334 0301;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0313, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_301)
{
    // 0391 0313 0334 0341;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0313, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_302)
{
    // 1F08 0334 0301;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_303)
{
    // 1F08 0334 0341;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_304)
{
    // 03B1 0345 0334 0313 0341;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0345, 0x0334, 0x0313, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_305)
{
    // 03B1 0345 0343 0334 0301;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0345, 0x0343, 0x0334, 0x0301 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_306)
{
    // 1FB3 0334 0343 0341;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FB3, 0x0334, 0x0343, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_307)
{
    // 1FB3 0343 0334 0341;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FB3, 0x0343, 0x0334, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_308)
{
    // 0391 0313 0341 0334 0345;	
    // (Ἄ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING ACUTE TONE MARK, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0313, 0x0341, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_309)
{
    // 0391 0313 0345 0334 0341;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0313, 0x0345, 0x0334, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_310)
{
    // 0391 0313 0345 0341 0334;	
    // (ᾌ) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0313, 0x0345, 0x0341, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_311)
{
    // 0391 0334 0345 0343 0341;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0334, 0x0345, 0x0343, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_312)
{
    // 03B1 0343 0334 0300;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0343, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_313)
{
    // 03B1 0343 0334 0340;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0343, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_314)
{
    // 1F00 0300 0334;	
    // (ἂ) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING GRAVE ACCENT	[201F | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_315)
{
    // 1F00 0340 0334;	
    // (ἂ) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_316)
{
    // 0391 0313 0334 0300;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0313, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_317)
{
    // 0391 0313 0334 0340;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0313, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_318)
{
    // 1F08 0334 0300;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_319)
{
    // 1F08 0334 0340;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_320)
{
    // 03B1 0313 0334 0340 0345;	
    // (ἂ̴) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0313, 0x0334, 0x0340, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_321)
{
    // 03B1 0313 0345 0300 0334;	
    // (ᾂ) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING GRAVE ACCENT	[201F | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0313, 0x0345, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_322)
{
    // 03B1 0345 0334 0313 0340;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0345, 0x0334, 0x0313, 0x0340 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_323)
{
    // 1FB3 0313 0300 0334;	
    // (ᾂ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING COMMA ABOVE, COMBINING GRAVE ACCENT	[201F | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FB3, 0x0313, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_324)
{
    // 0391 0334 0313 0345 0340;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0334, 0x0313, 0x0345, 0x0340 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_325)
{
    // 0391 0345 0313 0334 0300;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0345, 0x0313, 0x0334, 0x0300 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_326)
{
    // 1F88 0340 0334;	
    // (ᾊ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F88, 0x0340, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_327)
{
    // 1FBC 0343 0300 0334;	
    // (ᾊ) GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING GRAVE ACCENT	[201F | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBC, 0x0343, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_328)
{
    // 03B1 0313 0334 0342;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0313, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_329)
{
    // 03B1 0334 0343 0342;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0343, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_330)
{
    // 03B1 0343 0334 0342;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0343, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_331)
{
    // 1F00 0342 0334;	
    // (ἆ) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_332)
{
    // 0391 0334 0313 0342;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0313, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_333)
{
    // 0391 0334 0343 0342;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0343, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_334)
{
    // 1F08 0334 0342;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_335)
{
    // 1F0E 0334;	
    // (Ἆ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI	[201F | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_336)
{
    // 03B1 0313 0334 0342 0345;	
    // (ἆ̴) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0313, 0x0334, 0x0342, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_337)
{
    // 03B1 0313 0345 0342 0334;	
    // (ᾆ) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0313, 0x0345, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_338)
{
    // 03B1 0345 0334 0313 0342;	
    // (ᾀ̴) GREEK SMALL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0345, 0x0334, 0x0313, 0x0342 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_339)
{
    // 1F80 0342 0334;	
    // (ᾆ) GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F80, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_340)
{
    // 0391 0313 0342 0334 0345;	
    // (Ἆ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK PERISPOMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0313, 0x0342, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_341)
{
    // 0391 0313 0345 0334 0342;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0313, 0x0345, 0x0334, 0x0342 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_342)
{
    // 0391 0334 0345 0343 0342;	
    // (ᾈ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK KORONIS	[201F | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0334, 0x0345, 0x0343, 0x0342 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_343)
{
    // 1FBC 0343 0342 0334;	
    // (ᾎ) GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FBC, 0x0343, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_344)
{
    // 03B1 0313 0345 0334;	
    // (ᾀ) GREEK SMALL LETTER ALPHA, COMBINING COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0313, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_345)
{
    // 1F00 0334 0345;	
    // (ἀ̴) GREEK SMALL LETTER ALPHA WITH PSILI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F00, 0x0334, 0x0345 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_346)
{
    // 1FB3 0313 0334;	
    // (ᾀ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0313, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_347)
{
    // 1FB3 0334 0313;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0334, 0x0313 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_348)
{
    // 0391 0343 0334 0345;	
    // (Ἀ̴) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0343, 0x0334, 0x0345 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_349)
{
    // 0391 0345 0334 0343;	
    // (ᾼ̴) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0345, 0x0334, 0x0343 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_350)
{
    // 1F08 0345 0334;	
    // (ᾈ) GREEK CAPITAL LETTER ALPHA WITH PSILI, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F08, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_351)
{
    // 1FBC 0313 0334;	
    // (ᾈ) GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI, COMBINING COMMA ABOVE	[201F | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBC, 0x0313, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_352)
{
    // 03B1 0314 0334;	
    // (ἁ) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_353)
{
    // 03B1 0334 0314;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_354)
{
    // 1F01 0334;	
    // (ἁ) GREEK SMALL LETTER ALPHA WITH DASIA	[201F | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F01, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_355)
{
    // 0391 0314 0334;	
    // (Ἁ) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_356)
{
    // 0391 0334 0314;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_357)
{
    // 1F09 0334;	
    // (Ἁ) GREEK CAPITAL LETTER ALPHA WITH DASIA	[201F | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F09, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_358)
{
    // 03B1 0314 0334 0301;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0314, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_359)
{
    // 03B1 0334 0314 0301;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0314, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_360)
{
    // 1F01 0301 0334;	
    // (ἅ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING ACUTE ACCENT	[201F | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_361)
{
    // 1F01 0341 0334;	
    // (ἅ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_362)
{
    // 1F09 0301 0334;	
    // (Ἅ) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING ACUTE ACCENT	[201F | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_363)
{
    // 1F09 0334 0301;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_364)
{
    // 1F09 0334 0341;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_365)
{
    // 1F0D 0334;	
    // (Ἅ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA	[201F | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_366)
{
    // 03B1 0314 0334 0341 0345;	
    // (ἅ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0314, 0x0334, 0x0341, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_367)
{
    // 03B1 0314 0345 0301 0334;	
    // (ᾅ) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING ACUTE ACCENT	[201F | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0314, 0x0345, 0x0301, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_368)
{
    // 1F01 0301 0345 0334;	
    // (ᾅ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING ACUTE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F01, 0x0301, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_369)
{
    // 1F01 0334 0345 0341;	
    // (ᾁ̴) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F01, 0x0334, 0x0345, 0x0341 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_370)
{
    // 0391 0345 0334 0314 0301;	
    // (ᾉ̴) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0345, 0x0334, 0x0314, 0x0301 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_371)
{
    // 1F09 0301 0345 0334;	
    // (ᾍ) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING ACUTE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0301, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_372)
{
    // 1F09 0334 0341 0345;	
    // (Ἅ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0334, 0x0341, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_373)
{
    // 1F09 0345 0334 0301;	
    // (ᾉ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0345, 0x0334, 0x0301 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_374)
{
    // 03B1 0314 0334 0300;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0314, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_375)
{
    // 1F01 0300 0334;	
    // (ἃ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING GRAVE ACCENT	[201F | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_376)
{
    // 1F01 0340 0334;	
    // (ἃ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_377)
{
    // 1F03 0334;	
    // (ἃ) GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA	[201F | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F03, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_378)
{
    // 0391 0334 0314 0300;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0314, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_379)
{
    // 0391 0334 0314 0340;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0314, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_380)
{
    // 1F09 0334 0300;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_381)
{
    // 1F09 0334 0340;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_382)
{
    // 1F01 0334 0345 0340;	
    // (ᾁ̴) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F01, 0x0334, 0x0345, 0x0340 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_383)
{
    // 1F01 0340 0345 0334;	
    // (ᾃ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING GRAVE TONE MARK, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F01, 0x0340, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_384)
{
    // 1F81 0300 0334;	
    // (ᾃ) GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI, COMBINING GRAVE ACCENT	[201F | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F81, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_385)
{
    // 1FB3 0314 0340 0334;	
    // (ᾃ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FB3, 0x0314, 0x0340, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_386)
{
    // 0391 0314 0334 0340 0345;	
    // (Ἃ̴) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0314, 0x0334, 0x0340, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_387)
{
    // 0391 0314 0345 0300 0334;	
    // (ᾋ) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING GRAVE ACCENT	[201F | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0314, 0x0345, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_388)
{
    // 1F09 0340 0334 0345;	
    // (Ἃ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING GRAVE TONE MARK, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0340, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_389)
{
    // 1F09 0345 0334 0300;	
    // (ᾉ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0345, 0x0334, 0x0300 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_390)
{
    // 03B1 0314 0334 0342;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_391)
{
    // 03B1 0334 0314 0342;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0314, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_392)
{
    // 1F01 0334 0342;	
    // (ἁ̴) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_393)
{
    // 1F01 0342 0334;	
    // (ἇ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_394)
{
    // 0391 0314 0334 0342;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_395)
{
    // 0391 0334 0314 0342;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0314, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_396)
{
    // 1F09 0334 0342;	
    // (Ἁ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F09, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_397)
{
    // 1F0F 0334;	
    // (Ἇ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND PERISPOMENI	[201F | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0F, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_398)
{
    // 03B1 0314 0342 0334 0345;	
    // (ἇ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK PERISPOMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0314, 0x0342, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_399)
{
    // 03B1 0314 0345 0334 0342;	
    // (ᾁ̴) GREEK SMALL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03B1, 0x0314, 0x0345, 0x0334, 0x0342 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_400)
{
    // 1F81 0342 0334;	
    // (ᾇ) GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F81, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_401)
{
    // 1FB3 0314 0342 0334;	
    // (ᾇ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FB3, 0x0314, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_402)
{
    // 0391 0314 0334 0342 0345;	
    // (Ἇ̴) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0314, 0x0334, 0x0342, 0x0345 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_403)
{
    // 0391 0314 0345 0342 0334;	
    // (ᾏ) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x0391, 0x0314, 0x0345, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_404)
{
    // 1F09 0334 0345 0342;	
    // (ᾉ̴) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0334, 0x0345, 0x0342 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_405)
{
    // 1F09 0342 0345 0334;	
    // (ᾏ) GREEK CAPITAL LETTER ALPHA WITH DASIA, COMBINING GREEK PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F09, 0x0342, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_406)
{
    // 1F01 0345 0334;	
    // (ᾁ) GREEK SMALL LETTER ALPHA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F01, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_407)
{
    // 1F81 0334;	
    // (ᾁ) GREEK SMALL LETTER ALPHA WITH DASIA AND YPOGEGRAMMENI	[201F | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F81, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_408)
{
    // 1FB3 0314 0334;	
    // (ᾁ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE	[201F | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0314, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_409)
{
    // 1FB3 0334 0314;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0334, 0x0314 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_410)
{
    // 0391 0314 0345 0334;	
    // (ᾉ) GREEK CAPITAL LETTER ALPHA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0314, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_411)
{
    // 0391 0334 0345 0314;	
    // (ᾼ̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0391, 0x0334, 0x0345, 0x0314 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_412)
{
    // 1F89 0334;	
    // (ᾉ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND PROSGEGRAMMENI	[201F | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F89, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_413)
{
    // 1FBC 0334 0314;	
    // (ᾼ̴) GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBC, 0x0334, 0x0314 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_414)
{
    // 03AC 0334;	
    // (ά) GREEK SMALL LETTER ALPHA WITH TONOS	[201F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03AC, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_415)
{
    // 03B1 0334 0301;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_416)
{
    // 03B1 0334 0341;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_417)
{
    // 1F71 0334;	
    // (ά) GREEK SMALL LETTER ALPHA WITH OXIA	[201F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F71, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_418)
{
    // 0391 0301 0334;	
    // (Ά) GREEK CAPITAL LETTER ALPHA, COMBINING ACUTE ACCENT	[201F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_419)
{
    // 0391 0334 0301;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_420)
{
    // 0391 0334 0341;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_421)
{
    // 0391 0341 0334;	
    // (Ά) GREEK CAPITAL LETTER ALPHA, COMBINING ACUTE TONE MARK	[201F | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_422)
{
    // 03B1 0334 0345 0301;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0345, 0x0301 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_423)
{
    // 03B1 0334 0345 0341;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0345, 0x0341 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_424)
{
    // 03B1 0341 0345 0334;	
    // (ᾴ) GREEK SMALL LETTER ALPHA, COMBINING ACUTE TONE MARK, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0341, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_425)
{
    // 1FB4 0334;	
    // (ᾴ) GREEK SMALL LETTER ALPHA WITH OXIA AND YPOGEGRAMMENI	[201F | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB4, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_426)
{
    // 03B1 0300 0334;	
    // (ὰ) GREEK SMALL LETTER ALPHA, COMBINING GRAVE ACCENT	[201F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_427)
{
    // 03B1 0334 0300;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_428)
{
    // 03B1 0334 0340;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_429)
{
    // 1F70 0334;	
    // (ὰ) GREEK SMALL LETTER ALPHA WITH VARIA	[201F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F70, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_430)
{
    // 0391 0300 0334;	
    // (Ὰ) GREEK CAPITAL LETTER ALPHA, COMBINING GRAVE ACCENT	[201F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_431)
{
    // 0391 0334 0300;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_432)
{
    // 0391 0334 0340;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_433)
{
    // 0391 0340 0334;	
    // (Ὰ) GREEK CAPITAL LETTER ALPHA, COMBINING GRAVE TONE MARK	[201F | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_434)
{
    // 03B1 0334 0345 0300;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0345, 0x0300 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_435)
{
    // 03B1 0334 0345 0340;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0334, 0x0345, 0x0340 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_436)
{
    // 03B1 0340 0345 0334;	
    // (ᾲ) GREEK SMALL LETTER ALPHA, COMBINING GRAVE TONE MARK, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03B1, 0x0340, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_437)
{
    // 1FB2 0334;	
    // (ᾲ) GREEK SMALL LETTER ALPHA WITH VARIA AND YPOGEGRAMMENI	[201F | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB2, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_438)
{
    // 03B1 0306 0334;	
    // (ᾰ) GREEK SMALL LETTER ALPHA, COMBINING BREVE	[201F | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_439)
{
    // 03B1 0334 0306;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_440)
{
    // 1FB0 0334;	
    // (ᾰ) GREEK SMALL LETTER ALPHA WITH VRACHY	[201F | 0020 004A 0026 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB0, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_441)
{
    // 0391 0306 0334;	
    // (Ᾰ) GREEK CAPITAL LETTER ALPHA, COMBINING BREVE	[201F | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0306, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_442)
{
    // 0391 0334 0306;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0306 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_443)
{
    // 1FB8 0334;	
    // (Ᾰ) GREEK CAPITAL LETTER ALPHA WITH VRACHY	[201F | 0020 004A 0026 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FB8, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_444)
{
    // 03B1 0334 0342;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_445)
{
    // 03B1 0342 0334;	
    // (ᾶ) GREEK SMALL LETTER ALPHA, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_446)
{
    // 1FB6 0334;	
    // (ᾶ) GREEK SMALL LETTER ALPHA WITH PERISPOMENI	[201F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB6, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_447)
{
    // 1FB3 0334 0342;	
    // (ᾳ̴) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_448)
{
    // 1FB3 0342 0334;	
    // (ᾷ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[201F | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB3, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_449)
{
    // 1FB6 0334 0345;	
    // (ᾶ̴) GREEK SMALL LETTER ALPHA WITH PERISPOMENI, COMBINING TILDE OVERLAY	[201F | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB6, 0x0334, 0x0345 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_450)
{
    // 1FB6 0345 0334;	
    // (ᾷ) GREEK SMALL LETTER ALPHA WITH PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FB6, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_451)
{
    // 03B1 0304 0334;	
    // (ᾱ) GREEK SMALL LETTER ALPHA, COMBINING MACRON	[201F | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_452)
{
    // 03B1 0334 0304;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_453)
{
    // 1FB1 0334;	
    // (ᾱ) GREEK SMALL LETTER ALPHA WITH MACRON	[201F | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB1, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_454)
{
    // 0391 0304 0334;	
    // (Ᾱ) GREEK CAPITAL LETTER ALPHA, COMBINING MACRON	[201F | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_455)
{
    // 0391 0334 0304;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_456)
{
    // 1FB9 0334;	
    // (Ᾱ) GREEK CAPITAL LETTER ALPHA WITH MACRON	[201F | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FB9, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_457)
{
    // 03B1 0334 0345;	
    // (α̴) GREEK SMALL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0334, 0x0345 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_458)
{
    // 03B1 0345 0334;	
    // (ᾳ) GREEK SMALL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03B1, 0x0345, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_459)
{
    // 1FB3 0334;	
    // (ᾳ) GREEK SMALL LETTER ALPHA WITH YPOGEGRAMMENI	[201F | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FB3, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_460)
{
    // 0391 0334 0345;	
    // (Α̴) GREEK CAPITAL LETTER ALPHA, COMBINING TILDE OVERLAY	[201F | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0334, 0x0345 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_461)
{
    // 0391 0345 0334;	
    // (ᾼ) GREEK CAPITAL LETTER ALPHA, COMBINING GREEK YPOGEGRAMMENI	[201F | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0391, 0x0345, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_462)
{
    // 1FBC 0334;	
    // (ᾼ) GREEK CAPITAL LETTER ALPHA WITH PROSGEGRAMMENI	[201F | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FBC, 0x0334 };
    uint32_t const ces[10] = { 0x201F, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_463)
{
    // 03B1 0021;	
    // (α) GREEK SMALL LETTER ALPHA	[201F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03B1, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_464)
{
    // 1D6C2 0021;	
    // (𝛂) MATHEMATICAL BOLD SMALL ALPHA	[201F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6C2, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_465)
{
    // 1D6FC 0021;	
    // (𝛼) MATHEMATICAL ITALIC SMALL ALPHA	[201F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6FC, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_466)
{
    // 1D736 0021;	
    // (𝜶) MATHEMATICAL BOLD ITALIC SMALL ALPHA	[201F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D736, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_467)
{
    // 1D770 0021;	
    // (𝝰) MATHEMATICAL SANS-SERIF BOLD SMALL ALPHA	[201F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D770, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_468)
{
    // 1D7AA 0021;	
    // (𝞪) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL ALPHA	[201F 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7AA, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_469)
{
    // 0391 0021;	
    // (Α) GREEK CAPITAL LETTER ALPHA	[201F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0391, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_470)
{
    // 1D6A8 0021;	
    // (𝚨) MATHEMATICAL BOLD CAPITAL ALPHA	[201F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6A8, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_471)
{
    // 1D6E2 0021;	
    // (𝛢) MATHEMATICAL ITALIC CAPITAL ALPHA	[201F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6E2, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_472)
{
    // 1D71C 0021;	
    // (𝜜) MATHEMATICAL BOLD ITALIC CAPITAL ALPHA	[201F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D71C, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_473)
{
    // 1D756 0021;	
    // (𝝖) MATHEMATICAL SANS-SERIF BOLD CAPITAL ALPHA	[201F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D756, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_474)
{
    // 1D790 0021;	
    // (𝞐) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL ALPHA	[201F 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D790, 0x0021 };
    uint32_t const ces[9] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_475)
{
    // 1F00 0021;	
    // (ἀ) GREEK SMALL LETTER ALPHA WITH PSILI	[201F 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F00, 0x0021 };
    uint32_t const ces[11] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_476)
{
    // 1F08 0021;	
    // (Ἀ) GREEK CAPITAL LETTER ALPHA WITH PSILI	[201F 0261 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F08, 0x0021 };
    uint32_t const ces[11] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_477)
{
    // 1F04 0021;	
    // (ἄ) GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA	[201F 0261 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F04, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_478)
{
    // 1F0C 0021;	
    // (Ἄ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA	[201F 0261 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0C, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_479)
{
    // 1F84 0021;	
    // (ᾄ) GREEK SMALL LETTER ALPHA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[201F 0261 | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F84, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_480)
{
    // 1F8C 0021;	
    // (ᾌ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[201F 0261 | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F8C, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_481)
{
    // 1F02 0021;	
    // (ἂ) GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA	[201F 0261 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F02, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_482)
{
    // 1F0A 0021;	
    // (Ἂ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA	[201F 0261 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0A, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_483)
{
    // 1F82 0021;	
    // (ᾂ) GREEK SMALL LETTER ALPHA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[201F 0261 | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F82, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_484)
{
    // 1F8A 0021;	
    // (ᾊ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[201F 0261 | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F8A, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_485)
{
    // 1F06 0021;	
    // (ἆ) GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI	[201F 0261 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F06, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_486)
{
    // 1F0E 0021;	
    // (Ἆ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI	[201F 0261 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0E, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_487)
{
    // 1F86 0021;	
    // (ᾆ) GREEK SMALL LETTER ALPHA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[201F 0261 | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F86, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_488)
{
    // 1F8E 0021;	
    // (ᾎ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[201F 0261 | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F8E, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_489)
{
    // 1F80 0021;	
    // (ᾀ) GREEK SMALL LETTER ALPHA WITH PSILI AND YPOGEGRAMMENI	[201F 0261 | 0020 0022 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F80, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_490)
{
    // 1F88 0021;	
    // (ᾈ) GREEK CAPITAL LETTER ALPHA WITH PSILI AND PROSGEGRAMMENI	[201F 0261 | 0020 0022 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F88, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_491)
{
    // 1F01 0021;	
    // (ἁ) GREEK SMALL LETTER ALPHA WITH DASIA	[201F 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F01, 0x0021 };
    uint32_t const ces[11] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_492)
{
    // 1F09 0021;	
    // (Ἁ) GREEK CAPITAL LETTER ALPHA WITH DASIA	[201F 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F09, 0x0021 };
    uint32_t const ces[11] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_493)
{
    // 1F05 0021;	
    // (ἅ) GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA	[201F 0261 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F05, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_494)
{
    // 1F0D 0021;	
    // (Ἅ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA	[201F 0261 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0D, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_495)
{
    // 1F85 0021;	
    // (ᾅ) GREEK SMALL LETTER ALPHA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[201F 0261 | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F85, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_496)
{
    // 1F8D 0021;	
    // (ᾍ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[201F 0261 | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F8D, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_497)
{
    // 1F03 0021;	
    // (ἃ) GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA	[201F 0261 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F03, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_498)
{
    // 1F0B 0021;	
    // (Ἃ) GREEK CAPITAL LETTER ALPHA WITH DASIA AND VARIA	[201F 0261 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F0B, 0x0021 };
    uint32_t const ces[13] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_127_499)
{
    // 1F83 0021;	
    // (ᾃ) GREEK SMALL LETTER ALPHA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[201F 0261 | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F83, 0x0021 };
    uint32_t const ces[15] = { 0x201F, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

