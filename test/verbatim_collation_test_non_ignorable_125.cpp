// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_125_000)
{
    // 02E3 0041;	
    // (ˣ) MODIFIER LETTER SMALL X	[1F65 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02E3, 0x0041 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_001)
{
    // 2093 0061;	
    // (ₓ) LATIN SUBSCRIPT SMALL LETTER X	[1F65 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2093, 0x0061 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_002)
{
    // 2093 0041;	
    // (ₓ) LATIN SUBSCRIPT SMALL LETTER X	[1F65 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x2093, 0x0041 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_003)
{
    // 1F147 0061;	
    // (🅇) SQUARED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F147, 0x0061 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_004)
{
    // 1F187 0061;	
    // (🆇) NEGATIVE SQUARED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F187, 0x0061 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_005)
{
    // 1F147 0041;	
    // (🅇) SQUARED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F147, 0x0041 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_006)
{
    // 1F187 0041;	
    // (🆇) NEGATIVE SQUARED LATIN CAPITAL LETTER X	[1F65 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F187, 0x0041 };
    uint32_t const ces[9] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_007)
{
    // 1E8D 0061;	
    // (ẍ) LATIN SMALL LETTER X WITH DIAERESIS	[1F65 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8D, 0x0061 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_008)
{
    // 1E8D 0041;	
    // (ẍ) LATIN SMALL LETTER X WITH DIAERESIS	[1F65 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E8D, 0x0041 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_009)
{
    // 1E8C 0061;	
    // (Ẍ) LATIN CAPITAL LETTER X WITH DIAERESIS	[1F65 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C, 0x0061 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_010)
{
    // 1E8C 0041;	
    // (Ẍ) LATIN CAPITAL LETTER X WITH DIAERESIS	[1F65 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E8C, 0x0041 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_011)
{
    // 1E8B 0061;	
    // (ẋ) LATIN SMALL LETTER X WITH DOT ABOVE	[1F65 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8B, 0x0061 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_012)
{
    // 1E8B 0041;	
    // (ẋ) LATIN SMALL LETTER X WITH DOT ABOVE	[1F65 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E8B, 0x0041 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_013)
{
    // 1E8A 0061;	
    // (Ẋ) LATIN CAPITAL LETTER X WITH DOT ABOVE	[1F65 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8A, 0x0061 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_014)
{
    // 1E8A 0041;	
    // (Ẋ) LATIN CAPITAL LETTER X WITH DOT ABOVE	[1F65 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E8A, 0x0041 };
    uint32_t const ces[11] = { 0x1F65, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_015)
{
    // 0078 0062;	
    // (x) LATIN SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0078, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_016)
{
    // FF58 0062;	
    // (ｘ) FULLWIDTH LATIN SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF58, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_017)
{
    // 036F 0062;	
    // (ͯ) COMBINING LATIN SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x036F, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_018)
{
    // 2179 0062;	
    // (ⅹ) SMALL ROMAN NUMERAL TEN	[1F65 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2179, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_019)
{
    // 1D431 0062;	
    // (𝐱) MATHEMATICAL BOLD SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D431, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_020)
{
    // 1D465 0062;	
    // (𝑥) MATHEMATICAL ITALIC SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D465, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_021)
{
    // 1D499 0062;	
    // (𝒙) MATHEMATICAL BOLD ITALIC SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D499, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_022)
{
    // 1D4CD 0062;	
    // (𝓍) MATHEMATICAL SCRIPT SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CD, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_023)
{
    // 1D501 0062;	
    // (𝔁) MATHEMATICAL BOLD SCRIPT SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D501, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_024)
{
    // 1D535 0062;	
    // (𝔵) MATHEMATICAL FRAKTUR SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D535, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_025)
{
    // 1D569 0062;	
    // (𝕩) MATHEMATICAL DOUBLE-STRUCK SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D569, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_026)
{
    // 1D59D 0062;	
    // (𝖝) MATHEMATICAL BOLD FRAKTUR SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59D, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_027)
{
    // 1D5D1 0062;	
    // (𝗑) MATHEMATICAL SANS-SERIF SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D1, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_028)
{
    // 1D605 0062;	
    // (𝘅) MATHEMATICAL SANS-SERIF BOLD SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D605, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_029)
{
    // 1D639 0062;	
    // (𝘹) MATHEMATICAL SANS-SERIF ITALIC SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D639, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_030)
{
    // 1D66D 0062;	
    // (𝙭) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66D, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_031)
{
    // 1D6A1 0062;	
    // (𝚡) MATHEMATICAL MONOSPACE SMALL X	[1F65 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A1, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_032)
{
    // 24E7 0062;	
    // (ⓧ) CIRCLED LATIN SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E7, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_033)
{
    // 0058 0062;	
    // (X) LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0058, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_034)
{
    // FF38 0062;	
    // (Ｘ) FULLWIDTH LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF38, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_035)
{
    // 2169 0062;	
    // (Ⅹ) ROMAN NUMERAL TEN	[1F65 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x2169, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_036)
{
    // 1D417 0062;	
    // (𝐗) MATHEMATICAL BOLD CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D417, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_037)
{
    // 1D44B 0062;	
    // (𝑋) MATHEMATICAL ITALIC CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44B, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_038)
{
    // 1D47F 0062;	
    // (𝑿) MATHEMATICAL BOLD ITALIC CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D47F, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_039)
{
    // 1D4B3 0062;	
    // (𝒳) MATHEMATICAL SCRIPT CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B3, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_040)
{
    // 1D4E7 0062;	
    // (𝓧) MATHEMATICAL BOLD SCRIPT CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E7, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_041)
{
    // 1D51B 0062;	
    // (𝔛) MATHEMATICAL FRAKTUR CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D51B, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_042)
{
    // 1D54F 0062;	
    // (𝕏) MATHEMATICAL DOUBLE-STRUCK CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D54F, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_043)
{
    // 1D583 0062;	
    // (𝖃) MATHEMATICAL BOLD FRAKTUR CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D583, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_044)
{
    // 1D5B7 0062;	
    // (𝖷) MATHEMATICAL SANS-SERIF CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B7, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_045)
{
    // 1D5EB 0062;	
    // (𝗫) MATHEMATICAL SANS-SERIF BOLD CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5EB, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_046)
{
    // 1D61F 0062;	
    // (𝘟) MATHEMATICAL SANS-SERIF ITALIC CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D61F, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_047)
{
    // 1D653 0062;	
    // (𝙓) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D653, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_048)
{
    // 1D687 0062;	
    // (𝚇) MATHEMATICAL MONOSPACE CAPITAL X	[1F65 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D687, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_049)
{
    // 24CD 0062;	
    // (Ⓧ) CIRCLED LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CD, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_050)
{
    // 1F167 0062;	
    // (🅧) NEGATIVE CIRCLED LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F167, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_051)
{
    // 02E3 0062;	
    // (ˣ) MODIFIER LETTER SMALL X	[1F65 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02E3, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_052)
{
    // 2093 0062;	
    // (ₓ) LATIN SUBSCRIPT SMALL LETTER X	[1F65 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x2093, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_053)
{
    // 1F147 0062;	
    // (🅇) SQUARED LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F147, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_054)
{
    // 1F187 0062;	
    // (🆇) NEGATIVE SQUARED LATIN CAPITAL LETTER X	[1F65 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F187, 0x0062 };
    uint32_t const ces[9] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_055)
{
    // 1E8D 0062;	
    // (ẍ) LATIN SMALL LETTER X WITH DIAERESIS	[1F65 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8D, 0x0062 };
    uint32_t const ces[11] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_056)
{
    // 1E8C 0062;	
    // (Ẍ) LATIN CAPITAL LETTER X WITH DIAERESIS	[1F65 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8C, 0x0062 };
    uint32_t const ces[11] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_057)
{
    // 1E8B 0062;	
    // (ẋ) LATIN SMALL LETTER X WITH DOT ABOVE	[1F65 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8B, 0x0062 };
    uint32_t const ces[11] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_058)
{
    // 1E8A 0062;	
    // (Ẋ) LATIN CAPITAL LETTER X WITH DOT ABOVE	[1F65 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8A, 0x0062 };
    uint32_t const ces[11] = { 0x1F65, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_059)
{
    // 217A 0021;	
    // (ⅺ) SMALL ROMAN NUMERAL ELEVEN	[1F65 1D98 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217A, 0x0021 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_060)
{
    // 216A 0021;	
    // (Ⅺ) ROMAN NUMERAL ELEVEN	[1F65 1D98 0261 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216A, 0x0021 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_061)
{
    // 217A 003F;	
    // (ⅺ) SMALL ROMAN NUMERAL ELEVEN	[1F65 1D98 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217A, 0x003F };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_062)
{
    // 216A 003F;	
    // (Ⅺ) ROMAN NUMERAL ELEVEN	[1F65 1D98 0267 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216A, 0x003F };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_063)
{
    // 217A 0061;	
    // (ⅺ) SMALL ROMAN NUMERAL ELEVEN	[1F65 1D98 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217A, 0x0061 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_064)
{
    // 217A 0041;	
    // (ⅺ) SMALL ROMAN NUMERAL ELEVEN	[1F65 1D98 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x217A, 0x0041 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_065)
{
    // 216A 0061;	
    // (Ⅺ) ROMAN NUMERAL ELEVEN	[1F65 1D98 1CAD | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216A, 0x0061 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_066)
{
    // 216A 0041;	
    // (Ⅺ) ROMAN NUMERAL ELEVEN	[1F65 1D98 1CAD | 0020 0020 0020 | 000A 000A 0008 |]

    uint32_t cps[2] = { 0x216A, 0x0041 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_067)
{
    // 217A 0062;	
    // (ⅺ) SMALL ROMAN NUMERAL ELEVEN	[1F65 1D98 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217A, 0x0062 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_068)
{
    // 216A 0062;	
    // (Ⅺ) ROMAN NUMERAL ELEVEN	[1F65 1D98 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216A, 0x0062 };
    uint32_t const ces[12] = { 0x1F65, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_069)
{
    // 217B 0021;	
    // (ⅻ) SMALL ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217B, 0x0021 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_070)
{
    // 216B 0021;	
    // (Ⅻ) ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 0261 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216B, 0x0021 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_071)
{
    // 217B 003F;	
    // (ⅻ) SMALL ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217B, 0x003F };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_072)
{
    // 216B 003F;	
    // (Ⅻ) ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 0267 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216B, 0x003F };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_073)
{
    // 217B 0061;	
    // (ⅻ) SMALL ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217B, 0x0061 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_074)
{
    // 217B 0041;	
    // (ⅻ) SMALL ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x217B, 0x0041 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_075)
{
    // 216B 0061;	
    // (Ⅻ) ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216B, 0x0061 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_076)
{
    // 216B 0041;	
    // (Ⅻ) ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CAD | 0020 0020 0020 0020 | 000A 000A 000A 0008 |]

    uint32_t cps[2] = { 0x216B, 0x0041 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_077)
{
    // 217B 0062;	
    // (ⅻ) SMALL ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x217B, 0x0062 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_078)
{
    // 216B 0062;	
    // (Ⅻ) ROMAN NUMERAL TWELVE	[1F65 1D98 1D98 1CC6 | 0020 0020 0020 0020 | 000A 000A 000A 0002 |]

    uint32_t cps[2] = { 0x216B, 0x0062 };
    uint32_t const ces[15] = { 0x1F65, 0x1D98, 0x1D98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_079)
{
    // 1D8D 0021;	
    // (ᶍ) LATIN SMALL LETTER X WITH PALATAL HOOK	[1F69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8D, 0x0021 };
    uint32_t const ces[9] = { 0x1F69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_080)
{
    // 1D8D 003F;	
    // (ᶍ) LATIN SMALL LETTER X WITH PALATAL HOOK	[1F69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8D, 0x003F };
    uint32_t const ces[9] = { 0x1F69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_081)
{
    // 1D8D 0061;	
    // (ᶍ) LATIN SMALL LETTER X WITH PALATAL HOOK	[1F69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8D, 0x0061 };
    uint32_t const ces[9] = { 0x1F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_082)
{
    // 1D8D 0041;	
    // (ᶍ) LATIN SMALL LETTER X WITH PALATAL HOOK	[1F69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D8D, 0x0041 };
    uint32_t const ces[9] = { 0x1F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_083)
{
    // 1D8D 0062;	
    // (ᶍ) LATIN SMALL LETTER X WITH PALATAL HOOK	[1F69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D8D, 0x0062 };
    uint32_t const ces[9] = { 0x1F69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_084)
{
    // AB56 0021;	
    // (ꭖ) LATIN SMALL LETTER X WITH LOW RIGHT RING	[1F6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB56, 0x0021 };
    uint32_t const ces[9] = { 0x1F6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_085)
{
    // AB56 003F;	
    // (ꭖ) LATIN SMALL LETTER X WITH LOW RIGHT RING	[1F6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB56, 0x003F };
    uint32_t const ces[9] = { 0x1F6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_086)
{
    // AB56 0061;	
    // (ꭖ) LATIN SMALL LETTER X WITH LOW RIGHT RING	[1F6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB56, 0x0061 };
    uint32_t const ces[9] = { 0x1F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_087)
{
    // AB56 0041;	
    // (ꭖ) LATIN SMALL LETTER X WITH LOW RIGHT RING	[1F6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB56, 0x0041 };
    uint32_t const ces[9] = { 0x1F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_088)
{
    // AB56 0062;	
    // (ꭖ) LATIN SMALL LETTER X WITH LOW RIGHT RING	[1F6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB56, 0x0062 };
    uint32_t const ces[9] = { 0x1F6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_089)
{
    // AB57 0021;	
    // (ꭗ) LATIN SMALL LETTER X WITH LONG LEFT LEG	[1F6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB57, 0x0021 };
    uint32_t const ces[9] = { 0x1F6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_090)
{
    // AB57 003F;	
    // (ꭗ) LATIN SMALL LETTER X WITH LONG LEFT LEG	[1F6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB57, 0x003F };
    uint32_t const ces[9] = { 0x1F6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_091)
{
    // AB57 0061;	
    // (ꭗ) LATIN SMALL LETTER X WITH LONG LEFT LEG	[1F6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB57, 0x0061 };
    uint32_t const ces[9] = { 0x1F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_092)
{
    // AB57 0041;	
    // (ꭗ) LATIN SMALL LETTER X WITH LONG LEFT LEG	[1F6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB57, 0x0041 };
    uint32_t const ces[9] = { 0x1F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_093)
{
    // AB57 0062;	
    // (ꭗ) LATIN SMALL LETTER X WITH LONG LEFT LEG	[1F6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB57, 0x0062 };
    uint32_t const ces[9] = { 0x1F6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_094)
{
    // AB58 0021;	
    // (ꭘ) LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING	[1F6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB58, 0x0021 };
    uint32_t const ces[9] = { 0x1F6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_095)
{
    // AB58 003F;	
    // (ꭘ) LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING	[1F6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB58, 0x003F };
    uint32_t const ces[9] = { 0x1F6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_096)
{
    // AB58 0061;	
    // (ꭘ) LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING	[1F6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB58, 0x0061 };
    uint32_t const ces[9] = { 0x1F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_097)
{
    // AB58 0041;	
    // (ꭘ) LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING	[1F6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB58, 0x0041 };
    uint32_t const ces[9] = { 0x1F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_098)
{
    // AB58 0062;	
    // (ꭘ) LATIN SMALL LETTER X WITH LONG LEFT LEG AND LOW RIGHT RING	[1F6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB58, 0x0062 };
    uint32_t const ces[9] = { 0x1F6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_099)
{
    // AB59 0021;	
    // (ꭙ) LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF	[1F6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB59, 0x0021 };
    uint32_t const ces[9] = { 0x1F6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_100)
{
    // AB59 003F;	
    // (ꭙ) LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF	[1F6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB59, 0x003F };
    uint32_t const ces[9] = { 0x1F6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_101)
{
    // AB59 0061;	
    // (ꭙ) LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF	[1F6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB59, 0x0061 };
    uint32_t const ces[9] = { 0x1F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_102)
{
    // AB59 0041;	
    // (ꭙ) LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF	[1F6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB59, 0x0041 };
    uint32_t const ces[9] = { 0x1F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_103)
{
    // AB59 0062;	
    // (ꭙ) LATIN SMALL LETTER X WITH LONG LEFT LEG WITH SERIF	[1F6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB59, 0x0062 };
    uint32_t const ces[9] = { 0x1F6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_104)
{
    // AB53 0021;	
    // (ꭓ) LATIN SMALL LETTER CHI	[1F6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB53, 0x0021 };
    uint32_t const ces[9] = { 0x1F6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_105)
{
    // A7B3 0021;	
    // (Ꭓ) LATIN CAPITAL LETTER CHI	[1F6E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7B3, 0x0021 };
    uint32_t const ces[9] = { 0x1F6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_106)
{
    // AB53 003F;	
    // (ꭓ) LATIN SMALL LETTER CHI	[1F6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB53, 0x003F };
    uint32_t const ces[9] = { 0x1F6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_107)
{
    // A7B3 003F;	
    // (Ꭓ) LATIN CAPITAL LETTER CHI	[1F6E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7B3, 0x003F };
    uint32_t const ces[9] = { 0x1F6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_108)
{
    // AB53 0061;	
    // (ꭓ) LATIN SMALL LETTER CHI	[1F6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB53, 0x0061 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_109)
{
    // AB53 0041;	
    // (ꭓ) LATIN SMALL LETTER CHI	[1F6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB53, 0x0041 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_110)
{
    // A7B3 0061;	
    // (Ꭓ) LATIN CAPITAL LETTER CHI	[1F6E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7B3, 0x0061 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_111)
{
    // A7B3 0041;	
    // (Ꭓ) LATIN CAPITAL LETTER CHI	[1F6E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0xA7B3, 0x0041 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_112)
{
    // AB53 0062;	
    // (ꭓ) LATIN SMALL LETTER CHI	[1F6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB53, 0x0062 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_113)
{
    // A7B3 0062;	
    // (Ꭓ) LATIN CAPITAL LETTER CHI	[1F6E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0xA7B3, 0x0062 };
    uint32_t const ces[9] = { 0x1F6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_114)
{
    // AB54 0021;	
    // (ꭔ) LATIN SMALL LETTER CHI WITH LOW RIGHT RING	[1F6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB54, 0x0021 };
    uint32_t const ces[9] = { 0x1F6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_115)
{
    // AB54 003F;	
    // (ꭔ) LATIN SMALL LETTER CHI WITH LOW RIGHT RING	[1F6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB54, 0x003F };
    uint32_t const ces[9] = { 0x1F6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_116)
{
    // AB54 0061;	
    // (ꭔ) LATIN SMALL LETTER CHI WITH LOW RIGHT RING	[1F6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB54, 0x0061 };
    uint32_t const ces[9] = { 0x1F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_117)
{
    // AB54 0041;	
    // (ꭔ) LATIN SMALL LETTER CHI WITH LOW RIGHT RING	[1F6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB54, 0x0041 };
    uint32_t const ces[9] = { 0x1F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_118)
{
    // AB54 0062;	
    // (ꭔ) LATIN SMALL LETTER CHI WITH LOW RIGHT RING	[1F6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB54, 0x0062 };
    uint32_t const ces[9] = { 0x1F6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_119)
{
    // AB55 0021;	
    // (ꭕ) LATIN SMALL LETTER CHI WITH LOW LEFT SERIF	[1F70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB55, 0x0021 };
    uint32_t const ces[9] = { 0x1F70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_120)
{
    // AB55 003F;	
    // (ꭕ) LATIN SMALL LETTER CHI WITH LOW LEFT SERIF	[1F70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB55, 0x003F };
    uint32_t const ces[9] = { 0x1F70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_121)
{
    // AB55 0061;	
    // (ꭕ) LATIN SMALL LETTER CHI WITH LOW LEFT SERIF	[1F70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB55, 0x0061 };
    uint32_t const ces[9] = { 0x1F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_122)
{
    // AB55 0041;	
    // (ꭕ) LATIN SMALL LETTER CHI WITH LOW LEFT SERIF	[1F70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB55, 0x0041 };
    uint32_t const ces[9] = { 0x1F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_123)
{
    // AB55 0062;	
    // (ꭕ) LATIN SMALL LETTER CHI WITH LOW LEFT SERIF	[1F70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB55, 0x0062 };
    uint32_t const ces[9] = { 0x1F70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_124)
{
    // 0079 0301 0334;	
    // (ý) LATIN SMALL LETTER Y, COMBINING ACUTE ACCENT	[1F71 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_125)
{
    // 0079 0334 0301;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_126)
{
    // 0079 0334 0341;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_127)
{
    // 00FD 0334;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FD, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_128)
{
    // 0059 0301 0334;	
    // (Ý) LATIN CAPITAL LETTER Y, COMBINING ACUTE ACCENT	[1F71 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_129)
{
    // 0059 0334 0301;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_130)
{
    // 0059 0334 0341;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_131)
{
    // 00DD 0334;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DD, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_132)
{
    // 0079 0300 0334;	
    // (ỳ) LATIN SMALL LETTER Y, COMBINING GRAVE ACCENT	[1F71 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_133)
{
    // 0079 0334 0300;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_134)
{
    // 0079 0334 0340;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_135)
{
    // 1EF3 0334;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF3, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_136)
{
    // 0059 0300 0334;	
    // (Ỳ) LATIN CAPITAL LETTER Y, COMBINING GRAVE ACCENT	[1F71 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_137)
{
    // 0059 0334 0300;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_138)
{
    // 0059 0334 0340;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_139)
{
    // 1EF2 0334;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF2, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_140)
{
    // 0079 0302 0334;	
    // (ŷ) LATIN SMALL LETTER Y, COMBINING CIRCUMFLEX ACCENT	[1F71 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_141)
{
    // 0079 0334 0302;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_142)
{
    // 0177 0334;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 | 0020 004A 0027 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0177, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_143)
{
    // 0059 0302 0334;	
    // (Ŷ) LATIN CAPITAL LETTER Y, COMBINING CIRCUMFLEX ACCENT	[1F71 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0302, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_144)
{
    // 0059 0334 0302;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0302 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_145)
{
    // 0176 0334;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 | 0020 004A 0027 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0176, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_146)
{
    // 0079 030A 0334;	
    // (ẙ) LATIN SMALL LETTER Y, COMBINING RING ABOVE	[1F71 | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x030A, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_147)
{
    // 0079 0334 030A;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x030A };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_148)
{
    // 1E99 0334;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 | 0020 004A 0029 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E99, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0029, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_149)
{
    // 0079 0308 0334;	
    // (ÿ) LATIN SMALL LETTER Y, COMBINING DIAERESIS	[1F71 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_150)
{
    // 0079 0334 0308;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_151)
{
    // 00FF 0334;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 | 0020 004A 002B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FF, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_152)
{
    // 0059 0308 0334;	
    // (Ÿ) LATIN CAPITAL LETTER Y, COMBINING DIAERESIS	[1F71 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0308, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_153)
{
    // 0059 0334 0308;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0308 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_154)
{
    // 0178 0334;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 | 0020 004A 002B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0178, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_155)
{
    // 0079 0303 0334;	
    // (ỹ) LATIN SMALL LETTER Y, COMBINING TILDE	[1F71 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_156)
{
    // 0079 0334 0303;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_157)
{
    // 1EF9 0334;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 | 0020 004A 002D | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF9, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_158)
{
    // 0059 0303 0334;	
    // (Ỹ) LATIN CAPITAL LETTER Y, COMBINING TILDE	[1F71 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0303, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_159)
{
    // 0059 0334 0303;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0303 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_160)
{
    // 1EF8 0334;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 | 0020 004A 002D | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF8, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_161)
{
    // 0079 0307 0334;	
    // (ẏ) LATIN SMALL LETTER Y, COMBINING DOT ABOVE	[1F71 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_162)
{
    // 0079 0334 0307;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_163)
{
    // 1E8F 0334;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 | 0020 004A 002E | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8F, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_164)
{
    // 0059 0307 0334;	
    // (Ẏ) LATIN CAPITAL LETTER Y, COMBINING DOT ABOVE	[1F71 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0307, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_165)
{
    // 0059 0334 0307;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0307 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_166)
{
    // 1E8E 0334;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 | 0020 004A 002E | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8E, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x002E, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_167)
{
    // 0079 0304 0334;	
    // (ȳ) LATIN SMALL LETTER Y, COMBINING MACRON	[1F71 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_168)
{
    // 0079 0334 0304;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_169)
{
    // 0233 0334;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 | 0020 004A 0032 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0233, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_170)
{
    // 0059 0304 0334;	
    // (Ȳ) LATIN CAPITAL LETTER Y, COMBINING MACRON	[1F71 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0304, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_171)
{
    // 0059 0334 0304;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0304 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_172)
{
    // 0232 0334;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 | 0020 004A 0032 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0232, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0032, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_173)
{
    // 0079 0309 0334;	
    // (ỷ) LATIN SMALL LETTER Y, COMBINING HOOK ABOVE	[1F71 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_174)
{
    // 0079 0334 0309;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_175)
{
    // 1EF7 0334;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 | 0020 004A 003B | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF7, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_176)
{
    // 0059 0309 0334;	
    // (Ỷ) LATIN CAPITAL LETTER Y, COMBINING HOOK ABOVE	[1F71 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0309, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_177)
{
    // 0059 0334 0309;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0309 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_178)
{
    // 1EF6 0334;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 | 0020 004A 003B | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF6, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x003B, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_179)
{
    // 0079 0323 0334;	
    // (ỵ) LATIN SMALL LETTER Y, COMBINING DOT BELOW	[1F71 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_180)
{
    // 0079 0334 0323;	
    // (y̴) LATIN SMALL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0079, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_181)
{
    // 1EF5 0334;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 | 0020 004A 0042 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF5, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_182)
{
    // 0059 0323 0334;	
    // (Ỵ) LATIN CAPITAL LETTER Y, COMBINING DOT BELOW	[1F71 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0323, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_183)
{
    // 0059 0334 0323;	
    // (Y̴) LATIN CAPITAL LETTER Y, COMBINING TILDE OVERLAY	[1F71 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x0059, 0x0334, 0x0323 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_184)
{
    // 1EF4 0334;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 | 0020 004A 0042 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF4, 0x0334 };
    uint32_t const ces[10] = { 0x1F71, 0x0000, 0x0020, 0x004A, 0x0042, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_185)
{
    // 0079 0021;	
    // (y) LATIN SMALL LETTER Y	[1F71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0079, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_186)
{
    // FF59 0021;	
    // (ｙ) FULLWIDTH LATIN SMALL LETTER Y	[1F71 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF59, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_187)
{
    // 1D432 0021;	
    // (𝐲) MATHEMATICAL BOLD SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D432, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_188)
{
    // 1D466 0021;	
    // (𝑦) MATHEMATICAL ITALIC SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D466, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_189)
{
    // 1D49A 0021;	
    // (𝒚) MATHEMATICAL BOLD ITALIC SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49A, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_190)
{
    // 1D4CE 0021;	
    // (𝓎) MATHEMATICAL SCRIPT SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CE, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_191)
{
    // 1D502 0021;	
    // (𝔂) MATHEMATICAL BOLD SCRIPT SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D502, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_192)
{
    // 1D536 0021;	
    // (𝔶) MATHEMATICAL FRAKTUR SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D536, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_193)
{
    // 1D56A 0021;	
    // (𝕪) MATHEMATICAL DOUBLE-STRUCK SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56A, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_194)
{
    // 1D59E 0021;	
    // (𝖞) MATHEMATICAL BOLD FRAKTUR SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59E, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_195)
{
    // 1D5D2 0021;	
    // (𝗒) MATHEMATICAL SANS-SERIF SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D2, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_196)
{
    // 1D606 0021;	
    // (𝘆) MATHEMATICAL SANS-SERIF BOLD SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D606, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_197)
{
    // 1D63A 0021;	
    // (𝘺) MATHEMATICAL SANS-SERIF ITALIC SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63A, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_198)
{
    // 1D66E 0021;	
    // (𝙮) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66E, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_199)
{
    // 1D6A2 0021;	
    // (𝚢) MATHEMATICAL MONOSPACE SMALL Y	[1F71 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A2, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_200)
{
    // 24E8 0021;	
    // (ⓨ) CIRCLED LATIN SMALL LETTER Y	[1F71 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E8, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_201)
{
    // 0059 0021;	
    // (Y) LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0059, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_202)
{
    // FF39 0021;	
    // (Ｙ) FULLWIDTH LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF39, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_203)
{
    // 1D418 0021;	
    // (𝐘) MATHEMATICAL BOLD CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D418, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_204)
{
    // 1D44C 0021;	
    // (𝑌) MATHEMATICAL ITALIC CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44C, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_205)
{
    // 1D480 0021;	
    // (𝒀) MATHEMATICAL BOLD ITALIC CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D480, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_206)
{
    // 1D4B4 0021;	
    // (𝒴) MATHEMATICAL SCRIPT CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B4, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_207)
{
    // 1D4E8 0021;	
    // (𝓨) MATHEMATICAL BOLD SCRIPT CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E8, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_208)
{
    // 1D51C 0021;	
    // (𝔜) MATHEMATICAL FRAKTUR CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D51C, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_209)
{
    // 1D550 0021;	
    // (𝕐) MATHEMATICAL DOUBLE-STRUCK CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D550, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_210)
{
    // 1D584 0021;	
    // (𝖄) MATHEMATICAL BOLD FRAKTUR CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D584, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_211)
{
    // 1D5B8 0021;	
    // (𝖸) MATHEMATICAL SANS-SERIF CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B8, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_212)
{
    // 1D5EC 0021;	
    // (𝗬) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5EC, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_213)
{
    // 1D620 0021;	
    // (𝘠) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D620, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_214)
{
    // 1D654 0021;	
    // (𝙔) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D654, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_215)
{
    // 1D688 0021;	
    // (𝚈) MATHEMATICAL MONOSPACE CAPITAL Y	[1F71 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D688, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_216)
{
    // 24CE 0021;	
    // (Ⓨ) CIRCLED LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CE, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_217)
{
    // 1F168 0021;	
    // (🅨) NEGATIVE CIRCLED LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F168, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_218)
{
    // 02B8 0021;	
    // (ʸ) MODIFIER LETTER SMALL Y	[1F71 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B8, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_219)
{
    // 1F148 0021;	
    // (🅈) SQUARED LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F148, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_220)
{
    // 1F188 0021;	
    // (🆈) NEGATIVE SQUARED LATIN CAPITAL LETTER Y	[1F71 0261 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F188, 0x0021 };
    uint32_t const ces[9] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_221)
{
    // 00FD 0021;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FD, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_222)
{
    // 00DD 0021;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DD, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_223)
{
    // 1EF3 0021;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF3, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_224)
{
    // 1EF2 0021;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF2, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_225)
{
    // 0177 0021;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 0261 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0177, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_226)
{
    // 0176 0021;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 0261 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0176, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_227)
{
    // 1E99 0021;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 0261 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E99, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_228)
{
    // 00FF 0021;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 0261 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FF, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_229)
{
    // 0178 0021;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 0261 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0178, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_230)
{
    // 1EF9 0021;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 0261 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF9, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_231)
{
    // 1EF8 0021;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 0261 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF8, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_232)
{
    // 1E8F 0021;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 0261 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8F, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_233)
{
    // 1E8E 0021;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 0261 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8E, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_234)
{
    // 0233 0021;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 0261 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0233, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_235)
{
    // 0232 0021;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 0261 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0232, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_236)
{
    // 1EF7 0021;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 0261 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF7, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_237)
{
    // 1EF6 0021;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 0261 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF6, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_238)
{
    // 1EF5 0021;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 0261 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF5, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_239)
{
    // 1EF4 0021;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 0261 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF4, 0x0021 };
    uint32_t const ces[11] = { 0x1F71, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_240)
{
    // 0079 003F;	
    // (y) LATIN SMALL LETTER Y	[1F71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0079, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_241)
{
    // FF59 003F;	
    // (ｙ) FULLWIDTH LATIN SMALL LETTER Y	[1F71 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF59, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_242)
{
    // 1D432 003F;	
    // (𝐲) MATHEMATICAL BOLD SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D432, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_243)
{
    // 1D466 003F;	
    // (𝑦) MATHEMATICAL ITALIC SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D466, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_244)
{
    // 1D49A 003F;	
    // (𝒚) MATHEMATICAL BOLD ITALIC SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49A, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_245)
{
    // 1D4CE 003F;	
    // (𝓎) MATHEMATICAL SCRIPT SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CE, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_246)
{
    // 1D502 003F;	
    // (𝔂) MATHEMATICAL BOLD SCRIPT SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D502, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_247)
{
    // 1D536 003F;	
    // (𝔶) MATHEMATICAL FRAKTUR SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D536, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_248)
{
    // 1D56A 003F;	
    // (𝕪) MATHEMATICAL DOUBLE-STRUCK SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56A, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_249)
{
    // 1D59E 003F;	
    // (𝖞) MATHEMATICAL BOLD FRAKTUR SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59E, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_250)
{
    // 1D5D2 003F;	
    // (𝗒) MATHEMATICAL SANS-SERIF SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D2, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_251)
{
    // 1D606 003F;	
    // (𝘆) MATHEMATICAL SANS-SERIF BOLD SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D606, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_252)
{
    // 1D63A 003F;	
    // (𝘺) MATHEMATICAL SANS-SERIF ITALIC SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63A, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_253)
{
    // 1D66E 003F;	
    // (𝙮) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66E, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_254)
{
    // 1D6A2 003F;	
    // (𝚢) MATHEMATICAL MONOSPACE SMALL Y	[1F71 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A2, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_255)
{
    // 24E8 003F;	
    // (ⓨ) CIRCLED LATIN SMALL LETTER Y	[1F71 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E8, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_256)
{
    // 0059 003F;	
    // (Y) LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0059, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_257)
{
    // FF39 003F;	
    // (Ｙ) FULLWIDTH LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF39, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_258)
{
    // 1D418 003F;	
    // (𝐘) MATHEMATICAL BOLD CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D418, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_259)
{
    // 1D44C 003F;	
    // (𝑌) MATHEMATICAL ITALIC CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44C, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_260)
{
    // 1D480 003F;	
    // (𝒀) MATHEMATICAL BOLD ITALIC CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D480, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_261)
{
    // 1D4B4 003F;	
    // (𝒴) MATHEMATICAL SCRIPT CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B4, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_262)
{
    // 1D4E8 003F;	
    // (𝓨) MATHEMATICAL BOLD SCRIPT CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E8, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_263)
{
    // 1D51C 003F;	
    // (𝔜) MATHEMATICAL FRAKTUR CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D51C, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_264)
{
    // 1D550 003F;	
    // (𝕐) MATHEMATICAL DOUBLE-STRUCK CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D550, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_265)
{
    // 1D584 003F;	
    // (𝖄) MATHEMATICAL BOLD FRAKTUR CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D584, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_266)
{
    // 1D5B8 003F;	
    // (𝖸) MATHEMATICAL SANS-SERIF CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B8, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_267)
{
    // 1D5EC 003F;	
    // (𝗬) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5EC, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_268)
{
    // 1D620 003F;	
    // (𝘠) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D620, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_269)
{
    // 1D654 003F;	
    // (𝙔) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D654, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_270)
{
    // 1D688 003F;	
    // (𝚈) MATHEMATICAL MONOSPACE CAPITAL Y	[1F71 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D688, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_271)
{
    // 24CE 003F;	
    // (Ⓨ) CIRCLED LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CE, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_272)
{
    // 1F168 003F;	
    // (🅨) NEGATIVE CIRCLED LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F168, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_273)
{
    // 02B8 003F;	
    // (ʸ) MODIFIER LETTER SMALL Y	[1F71 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B8, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_274)
{
    // 1F148 003F;	
    // (🅈) SQUARED LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F148, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_275)
{
    // 1F188 003F;	
    // (🆈) NEGATIVE SQUARED LATIN CAPITAL LETTER Y	[1F71 0267 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F188, 0x003F };
    uint32_t const ces[9] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_276)
{
    // 00FD 003F;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FD, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_277)
{
    // 00DD 003F;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DD, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_278)
{
    // 1EF3 003F;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF3, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_279)
{
    // 1EF2 003F;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF2, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_280)
{
    // 0177 003F;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 0267 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0177, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_281)
{
    // 0176 003F;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 0267 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0176, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_282)
{
    // 1E99 003F;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 0267 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E99, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_283)
{
    // 00FF 003F;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FF, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_284)
{
    // 0178 003F;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0178, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_285)
{
    // 1EF9 003F;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 0267 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF9, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_286)
{
    // 1EF8 003F;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 0267 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF8, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_287)
{
    // 1E8F 003F;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 0267 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8F, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_288)
{
    // 1E8E 003F;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 0267 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8E, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_289)
{
    // 0233 003F;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0233, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_290)
{
    // 0232 003F;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0232, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_291)
{
    // 1EF7 003F;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 0267 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF7, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_292)
{
    // 1EF6 003F;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 0267 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF6, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_293)
{
    // 1EF5 003F;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 0267 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF5, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_294)
{
    // 1EF4 003F;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 0267 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF4, 0x003F };
    uint32_t const ces[11] = { 0x1F71, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_295)
{
    // 0079 0061;	
    // (y) LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0079, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_296)
{
    // 0079 0041;	
    // (y) LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0079, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_297)
{
    // FF59 0061;	
    // (ｙ) FULLWIDTH LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF59, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_298)
{
    // FF59 0041;	
    // (ｙ) FULLWIDTH LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF59, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_299)
{
    // 1D432 0061;	
    // (𝐲) MATHEMATICAL BOLD SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D432, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_300)
{
    // 1D466 0061;	
    // (𝑦) MATHEMATICAL ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D466, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_301)
{
    // 1D49A 0061;	
    // (𝒚) MATHEMATICAL BOLD ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49A, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_302)
{
    // 1D4CE 0061;	
    // (𝓎) MATHEMATICAL SCRIPT SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CE, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_303)
{
    // 1D502 0061;	
    // (𝔂) MATHEMATICAL BOLD SCRIPT SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D502, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_304)
{
    // 1D536 0061;	
    // (𝔶) MATHEMATICAL FRAKTUR SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D536, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_305)
{
    // 1D56A 0061;	
    // (𝕪) MATHEMATICAL DOUBLE-STRUCK SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56A, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_306)
{
    // 1D59E 0061;	
    // (𝖞) MATHEMATICAL BOLD FRAKTUR SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59E, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_307)
{
    // 1D5D2 0061;	
    // (𝗒) MATHEMATICAL SANS-SERIF SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D2, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_308)
{
    // 1D606 0061;	
    // (𝘆) MATHEMATICAL SANS-SERIF BOLD SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D606, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_309)
{
    // 1D63A 0061;	
    // (𝘺) MATHEMATICAL SANS-SERIF ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63A, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_310)
{
    // 1D66E 0061;	
    // (𝙮) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66E, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_311)
{
    // 1D6A2 0061;	
    // (𝚢) MATHEMATICAL MONOSPACE SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A2, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_312)
{
    // 1D432 0041;	
    // (𝐲) MATHEMATICAL BOLD SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D432, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_313)
{
    // 1D466 0041;	
    // (𝑦) MATHEMATICAL ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D466, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_314)
{
    // 1D49A 0041;	
    // (𝒚) MATHEMATICAL BOLD ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D49A, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_315)
{
    // 1D4CE 0041;	
    // (𝓎) MATHEMATICAL SCRIPT SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D4CE, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_316)
{
    // 1D502 0041;	
    // (𝔂) MATHEMATICAL BOLD SCRIPT SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D502, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_317)
{
    // 1D536 0041;	
    // (𝔶) MATHEMATICAL FRAKTUR SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D536, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_318)
{
    // 1D56A 0041;	
    // (𝕪) MATHEMATICAL DOUBLE-STRUCK SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D56A, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_319)
{
    // 1D59E 0041;	
    // (𝖞) MATHEMATICAL BOLD FRAKTUR SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D59E, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_320)
{
    // 1D5D2 0041;	
    // (𝗒) MATHEMATICAL SANS-SERIF SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D5D2, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_321)
{
    // 1D606 0041;	
    // (𝘆) MATHEMATICAL SANS-SERIF BOLD SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D606, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_322)
{
    // 1D63A 0041;	
    // (𝘺) MATHEMATICAL SANS-SERIF ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D63A, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_323)
{
    // 1D66E 0041;	
    // (𝙮) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D66E, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_324)
{
    // 1D6A2 0041;	
    // (𝚢) MATHEMATICAL MONOSPACE SMALL Y	[1F71 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6A2, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_325)
{
    // 24E8 0061;	
    // (ⓨ) CIRCLED LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E8, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_326)
{
    // 24E8 0041;	
    // (ⓨ) CIRCLED LATIN SMALL LETTER Y	[1F71 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x24E8, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_327)
{
    // 0059 0061;	
    // (Y) LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0059, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_328)
{
    // 0059 0041;	
    // (Y) LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0059, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_329)
{
    // FF39 0061;	
    // (Ｙ) FULLWIDTH LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF39, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_330)
{
    // FF39 0041;	
    // (Ｙ) FULLWIDTH LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 0009 0008 |]

    uint32_t cps[2] = { 0xFF39, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_331)
{
    // 1D418 0061;	
    // (𝐘) MATHEMATICAL BOLD CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D418, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_332)
{
    // 1D44C 0061;	
    // (𝑌) MATHEMATICAL ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44C, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_333)
{
    // 1D480 0061;	
    // (𝒀) MATHEMATICAL BOLD ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D480, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_334)
{
    // 1D4B4 0061;	
    // (𝒴) MATHEMATICAL SCRIPT CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B4, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_335)
{
    // 1D4E8 0061;	
    // (𝓨) MATHEMATICAL BOLD SCRIPT CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E8, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_336)
{
    // 1D51C 0061;	
    // (𝔜) MATHEMATICAL FRAKTUR CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D51C, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_337)
{
    // 1D550 0061;	
    // (𝕐) MATHEMATICAL DOUBLE-STRUCK CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D550, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_338)
{
    // 1D584 0061;	
    // (𝖄) MATHEMATICAL BOLD FRAKTUR CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D584, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_339)
{
    // 1D5B8 0061;	
    // (𝖸) MATHEMATICAL SANS-SERIF CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B8, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_340)
{
    // 1D5EC 0061;	
    // (𝗬) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5EC, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_341)
{
    // 1D620 0061;	
    // (𝘠) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D620, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_342)
{
    // 1D654 0061;	
    // (𝙔) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D654, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_343)
{
    // 1D688 0061;	
    // (𝚈) MATHEMATICAL MONOSPACE CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D688, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_344)
{
    // 1D418 0041;	
    // (𝐘) MATHEMATICAL BOLD CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D418, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_345)
{
    // 1D44C 0041;	
    // (𝑌) MATHEMATICAL ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D44C, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_346)
{
    // 1D480 0041;	
    // (𝒀) MATHEMATICAL BOLD ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D480, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_347)
{
    // 1D4B4 0041;	
    // (𝒴) MATHEMATICAL SCRIPT CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4B4, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_348)
{
    // 1D4E8 0041;	
    // (𝓨) MATHEMATICAL BOLD SCRIPT CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D4E8, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_349)
{
    // 1D51C 0041;	
    // (𝔜) MATHEMATICAL FRAKTUR CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D51C, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_350)
{
    // 1D550 0041;	
    // (𝕐) MATHEMATICAL DOUBLE-STRUCK CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D550, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_351)
{
    // 1D584 0041;	
    // (𝖄) MATHEMATICAL BOLD FRAKTUR CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D584, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_352)
{
    // 1D5B8 0041;	
    // (𝖸) MATHEMATICAL SANS-SERIF CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5B8, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_353)
{
    // 1D5EC 0041;	
    // (𝗬) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D5EC, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_354)
{
    // 1D620 0041;	
    // (𝘠) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D620, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_355)
{
    // 1D654 0041;	
    // (𝙔) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D654, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_356)
{
    // 1D688 0041;	
    // (𝚈) MATHEMATICAL MONOSPACE CAPITAL Y	[1F71 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D688, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_357)
{
    // 24CE 0061;	
    // (Ⓨ) CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CE, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_358)
{
    // 1F168 0061;	
    // (🅨) NEGATIVE CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F168, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_359)
{
    // 24CE 0041;	
    // (Ⓨ) CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x24CE, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_360)
{
    // 1F168 0041;	
    // (🅨) NEGATIVE CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 000C 0008 |]

    uint32_t cps[2] = { 0x1F168, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_361)
{
    // 02B8 0061;	
    // (ʸ) MODIFIER LETTER SMALL Y	[1F71 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B8, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_362)
{
    // 02B8 0041;	
    // (ʸ) MODIFIER LETTER SMALL Y	[1F71 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x02B8, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_363)
{
    // 1F148 0061;	
    // (🅈) SQUARED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F148, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_364)
{
    // 1F188 0061;	
    // (🆈) NEGATIVE SQUARED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F188, 0x0061 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_365)
{
    // 1F148 0041;	
    // (🅈) SQUARED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F148, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_366)
{
    // 1F188 0041;	
    // (🆈) NEGATIVE SQUARED LATIN CAPITAL LETTER Y	[1F71 1CAD | 0020 0020 | 001D 0008 |]

    uint32_t cps[2] = { 0x1F188, 0x0041 };
    uint32_t const ces[9] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_367)
{
    // 00FD 0061;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FD, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_368)
{
    // 00FD 0041;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00FD, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_369)
{
    // 00DD 0061;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DD, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_370)
{
    // 00DD 0041;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x00DD, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_371)
{
    // 1EF3 0061;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF3, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_372)
{
    // 1EF3 0041;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF3, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_373)
{
    // 1EF2 0061;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF2, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_374)
{
    // 1EF2 0041;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EF2, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_375)
{
    // 0177 0061;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 1CAD | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0177, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_376)
{
    // 0177 0041;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 1CAD | 0020 0027 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0177, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_377)
{
    // 0176 0061;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 1CAD | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0176, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_378)
{
    // 0176 0041;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 1CAD | 0020 0027 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0176, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_379)
{
    // 1E99 0061;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 1CAD | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E99, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_380)
{
    // 1E99 0041;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 1CAD | 0020 0029 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E99, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_381)
{
    // 00FF 0061;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FF, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_382)
{
    // 00FF 0041;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x00FF, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_383)
{
    // 0178 0061;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0178, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_384)
{
    // 0178 0041;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0178, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_385)
{
    // 1EF9 0061;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 1CAD | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF9, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_386)
{
    // 1EF9 0041;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 1CAD | 0020 002D 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF9, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_387)
{
    // 1EF8 0061;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 1CAD | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF8, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_388)
{
    // 1EF8 0041;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 1CAD | 0020 002D 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EF8, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_389)
{
    // 1E8F 0061;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 1CAD | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8F, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_390)
{
    // 1E8F 0041;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 1CAD | 0020 002E 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1E8F, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_391)
{
    // 1E8E 0061;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 1CAD | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8E, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_392)
{
    // 1E8E 0041;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 1CAD | 0020 002E 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1E8E, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_393)
{
    // 0233 0061;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0233, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_394)
{
    // 0233 0041;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0233, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_395)
{
    // 0232 0061;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0232, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_396)
{
    // 0232 0041;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x0232, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_397)
{
    // 1EF7 0061;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 1CAD | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF7, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_398)
{
    // 1EF7 0041;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 1CAD | 0020 003B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF7, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_399)
{
    // 1EF6 0061;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 1CAD | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF6, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_400)
{
    // 1EF6 0041;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 1CAD | 0020 003B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EF6, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_401)
{
    // 1EF5 0061;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 1CAD | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF5, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_402)
{
    // 1EF5 0041;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 1CAD | 0020 0042 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1EF5, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_403)
{
    // 1EF4 0061;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 1CAD | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF4, 0x0061 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_404)
{
    // 1EF4 0041;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 1CAD | 0020 0042 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1EF4, 0x0041 };
    uint32_t const ces[11] = { 0x1F71, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_405)
{
    // 0079 0062;	
    // (y) LATIN SMALL LETTER Y	[1F71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0079, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_406)
{
    // FF59 0062;	
    // (ｙ) FULLWIDTH LATIN SMALL LETTER Y	[1F71 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF59, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_407)
{
    // 1D432 0062;	
    // (𝐲) MATHEMATICAL BOLD SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D432, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_408)
{
    // 1D466 0062;	
    // (𝑦) MATHEMATICAL ITALIC SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D466, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_409)
{
    // 1D49A 0062;	
    // (𝒚) MATHEMATICAL BOLD ITALIC SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D49A, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_410)
{
    // 1D4CE 0062;	
    // (𝓎) MATHEMATICAL SCRIPT SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D4CE, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_411)
{
    // 1D502 0062;	
    // (𝔂) MATHEMATICAL BOLD SCRIPT SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D502, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_412)
{
    // 1D536 0062;	
    // (𝔶) MATHEMATICAL FRAKTUR SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D536, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_413)
{
    // 1D56A 0062;	
    // (𝕪) MATHEMATICAL DOUBLE-STRUCK SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D56A, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_414)
{
    // 1D59E 0062;	
    // (𝖞) MATHEMATICAL BOLD FRAKTUR SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D59E, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_415)
{
    // 1D5D2 0062;	
    // (𝗒) MATHEMATICAL SANS-SERIF SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D5D2, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_416)
{
    // 1D606 0062;	
    // (𝘆) MATHEMATICAL SANS-SERIF BOLD SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D606, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_417)
{
    // 1D63A 0062;	
    // (𝘺) MATHEMATICAL SANS-SERIF ITALIC SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D63A, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_418)
{
    // 1D66E 0062;	
    // (𝙮) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D66E, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_419)
{
    // 1D6A2 0062;	
    // (𝚢) MATHEMATICAL MONOSPACE SMALL Y	[1F71 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6A2, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_420)
{
    // 24E8 0062;	
    // (ⓨ) CIRCLED LATIN SMALL LETTER Y	[1F71 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x24E8, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_421)
{
    // 0059 0062;	
    // (Y) LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0059, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_422)
{
    // FF39 0062;	
    // (Ｙ) FULLWIDTH LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 0009 0002 |]

    uint32_t cps[2] = { 0xFF39, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_423)
{
    // 1D418 0062;	
    // (𝐘) MATHEMATICAL BOLD CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D418, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_424)
{
    // 1D44C 0062;	
    // (𝑌) MATHEMATICAL ITALIC CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D44C, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_425)
{
    // 1D480 0062;	
    // (𝒀) MATHEMATICAL BOLD ITALIC CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D480, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_426)
{
    // 1D4B4 0062;	
    // (𝒴) MATHEMATICAL SCRIPT CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4B4, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_427)
{
    // 1D4E8 0062;	
    // (𝓨) MATHEMATICAL BOLD SCRIPT CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D4E8, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_428)
{
    // 1D51C 0062;	
    // (𝔜) MATHEMATICAL FRAKTUR CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D51C, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_429)
{
    // 1D550 0062;	
    // (𝕐) MATHEMATICAL DOUBLE-STRUCK CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D550, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_430)
{
    // 1D584 0062;	
    // (𝖄) MATHEMATICAL BOLD FRAKTUR CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D584, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_431)
{
    // 1D5B8 0062;	
    // (𝖸) MATHEMATICAL SANS-SERIF CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5B8, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_432)
{
    // 1D5EC 0062;	
    // (𝗬) MATHEMATICAL SANS-SERIF BOLD CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D5EC, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_433)
{
    // 1D620 0062;	
    // (𝘠) MATHEMATICAL SANS-SERIF ITALIC CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D620, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_434)
{
    // 1D654 0062;	
    // (𝙔) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D654, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_435)
{
    // 1D688 0062;	
    // (𝚈) MATHEMATICAL MONOSPACE CAPITAL Y	[1F71 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D688, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_436)
{
    // 24CE 0062;	
    // (Ⓨ) CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x24CE, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_437)
{
    // 1F168 0062;	
    // (🅨) NEGATIVE CIRCLED LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 000C 0002 |]

    uint32_t cps[2] = { 0x1F168, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_438)
{
    // 02B8 0062;	
    // (ʸ) MODIFIER LETTER SMALL Y	[1F71 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x02B8, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_439)
{
    // 1F148 0062;	
    // (🅈) SQUARED LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F148, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_440)
{
    // 1F188 0062;	
    // (🆈) NEGATIVE SQUARED LATIN CAPITAL LETTER Y	[1F71 1CC6 | 0020 0020 | 001D 0002 |]

    uint32_t cps[2] = { 0x1F188, 0x0062 };
    uint32_t const ces[9] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_441)
{
    // 00FD 0062;	
    // (ý) LATIN SMALL LETTER Y WITH ACUTE	[1F71 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FD, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_442)
{
    // 00DD 0062;	
    // (Ý) LATIN CAPITAL LETTER Y WITH ACUTE	[1F71 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x00DD, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_443)
{
    // 1EF3 0062;	
    // (ỳ) LATIN SMALL LETTER Y WITH GRAVE	[1F71 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF3, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_444)
{
    // 1EF2 0062;	
    // (Ỳ) LATIN CAPITAL LETTER Y WITH GRAVE	[1F71 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF2, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_445)
{
    // 0177 0062;	
    // (ŷ) LATIN SMALL LETTER Y WITH CIRCUMFLEX	[1F71 1CC6 | 0020 0027 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0177, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_446)
{
    // 0176 0062;	
    // (Ŷ) LATIN CAPITAL LETTER Y WITH CIRCUMFLEX	[1F71 1CC6 | 0020 0027 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0176, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0027, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_447)
{
    // 1E99 0062;	
    // (ẙ) LATIN SMALL LETTER Y WITH RING ABOVE	[1F71 1CC6 | 0020 0029 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E99, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0029, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_448)
{
    // 00FF 0062;	
    // (ÿ) LATIN SMALL LETTER Y WITH DIAERESIS	[1F71 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x00FF, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_449)
{
    // 0178 0062;	
    // (Ÿ) LATIN CAPITAL LETTER Y WITH DIAERESIS	[1F71 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0178, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_450)
{
    // 1EF9 0062;	
    // (ỹ) LATIN SMALL LETTER Y WITH TILDE	[1F71 1CC6 | 0020 002D 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF9, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_451)
{
    // 1EF8 0062;	
    // (Ỹ) LATIN CAPITAL LETTER Y WITH TILDE	[1F71 1CC6 | 0020 002D 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF8, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002D, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_452)
{
    // 1E8F 0062;	
    // (ẏ) LATIN SMALL LETTER Y WITH DOT ABOVE	[1F71 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1E8F, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_453)
{
    // 1E8E 0062;	
    // (Ẏ) LATIN CAPITAL LETTER Y WITH DOT ABOVE	[1F71 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1E8E, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_454)
{
    // 0233 0062;	
    // (ȳ) LATIN SMALL LETTER Y WITH MACRON	[1F71 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0233, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_455)
{
    // 0232 0062;	
    // (Ȳ) LATIN CAPITAL LETTER Y WITH MACRON	[1F71 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x0232, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_456)
{
    // 1EF7 0062;	
    // (ỷ) LATIN SMALL LETTER Y WITH HOOK ABOVE	[1F71 1CC6 | 0020 003B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF7, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_457)
{
    // 1EF6 0062;	
    // (Ỷ) LATIN CAPITAL LETTER Y WITH HOOK ABOVE	[1F71 1CC6 | 0020 003B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF6, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x003B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_458)
{
    // 1EF5 0062;	
    // (ỵ) LATIN SMALL LETTER Y WITH DOT BELOW	[1F71 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1EF5, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_459)
{
    // 1EF4 0062;	
    // (Ỵ) LATIN CAPITAL LETTER Y WITH DOT BELOW	[1F71 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1EF4, 0x0062 };
    uint32_t const ces[11] = { 0x1F71, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_460)
{
    // 028F 0021;	
    // (ʏ) LATIN LETTER SMALL CAPITAL Y	[1F75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x028F, 0x0021 };
    uint32_t const ces[9] = { 0x1F75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_461)
{
    // 028F 003F;	
    // (ʏ) LATIN LETTER SMALL CAPITAL Y	[1F75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x028F, 0x003F };
    uint32_t const ces[9] = { 0x1F75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_462)
{
    // 028F 0061;	
    // (ʏ) LATIN LETTER SMALL CAPITAL Y	[1F75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x028F, 0x0061 };
    uint32_t const ces[9] = { 0x1F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_463)
{
    // 028F 0041;	
    // (ʏ) LATIN LETTER SMALL CAPITAL Y	[1F75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x028F, 0x0041 };
    uint32_t const ces[9] = { 0x1F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_464)
{
    // 028F 0062;	
    // (ʏ) LATIN LETTER SMALL CAPITAL Y	[1F75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x028F, 0x0062 };
    uint32_t const ces[9] = { 0x1F75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_465)
{
    // 024F 0021;	
    // (ɏ) LATIN SMALL LETTER Y WITH STROKE	[1F79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024F, 0x0021 };
    uint32_t const ces[9] = { 0x1F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_466)
{
    // 024E 0021;	
    // (Ɏ) LATIN CAPITAL LETTER Y WITH STROKE	[1F79 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024E, 0x0021 };
    uint32_t const ces[9] = { 0x1F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_467)
{
    // 024F 003F;	
    // (ɏ) LATIN SMALL LETTER Y WITH STROKE	[1F79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024F, 0x003F };
    uint32_t const ces[9] = { 0x1F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_468)
{
    // 024E 003F;	
    // (Ɏ) LATIN CAPITAL LETTER Y WITH STROKE	[1F79 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024E, 0x003F };
    uint32_t const ces[9] = { 0x1F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_469)
{
    // 024F 0061;	
    // (ɏ) LATIN SMALL LETTER Y WITH STROKE	[1F79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024F, 0x0061 };
    uint32_t const ces[9] = { 0x1F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_470)
{
    // 024F 0041;	
    // (ɏ) LATIN SMALL LETTER Y WITH STROKE	[1F79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x024F, 0x0041 };
    uint32_t const ces[9] = { 0x1F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_471)
{
    // 024E 0061;	
    // (Ɏ) LATIN CAPITAL LETTER Y WITH STROKE	[1F79 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024E, 0x0061 };
    uint32_t const ces[9] = { 0x1F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_472)
{
    // 024E 0041;	
    // (Ɏ) LATIN CAPITAL LETTER Y WITH STROKE	[1F79 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x024E, 0x0041 };
    uint32_t const ces[9] = { 0x1F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_473)
{
    // 024F 0062;	
    // (ɏ) LATIN SMALL LETTER Y WITH STROKE	[1F79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x024F, 0x0062 };
    uint32_t const ces[9] = { 0x1F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_474)
{
    // 024E 0062;	
    // (Ɏ) LATIN CAPITAL LETTER Y WITH STROKE	[1F79 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x024E, 0x0062 };
    uint32_t const ces[9] = { 0x1F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_475)
{
    // 01B4 0021;	
    // (ƴ) LATIN SMALL LETTER Y WITH HOOK	[1F7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B4, 0x0021 };
    uint32_t const ces[9] = { 0x1F7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_476)
{
    // 01B3 0021;	
    // (Ƴ) LATIN CAPITAL LETTER Y WITH HOOK	[1F7D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B3, 0x0021 };
    uint32_t const ces[9] = { 0x1F7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_477)
{
    // 01B4 003F;	
    // (ƴ) LATIN SMALL LETTER Y WITH HOOK	[1F7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B4, 0x003F };
    uint32_t const ces[9] = { 0x1F7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_478)
{
    // 01B3 003F;	
    // (Ƴ) LATIN CAPITAL LETTER Y WITH HOOK	[1F7D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B3, 0x003F };
    uint32_t const ces[9] = { 0x1F7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_479)
{
    // 01B4 0061;	
    // (ƴ) LATIN SMALL LETTER Y WITH HOOK	[1F7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B4, 0x0061 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_480)
{
    // 01B4 0041;	
    // (ƴ) LATIN SMALL LETTER Y WITH HOOK	[1F7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x01B4, 0x0041 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_481)
{
    // 01B3 0061;	
    // (Ƴ) LATIN CAPITAL LETTER Y WITH HOOK	[1F7D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B3, 0x0061 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_482)
{
    // 01B3 0041;	
    // (Ƴ) LATIN CAPITAL LETTER Y WITH HOOK	[1F7D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x01B3, 0x0041 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_483)
{
    // 01B4 0062;	
    // (ƴ) LATIN SMALL LETTER Y WITH HOOK	[1F7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x01B4, 0x0062 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_484)
{
    // 01B3 0062;	
    // (Ƴ) LATIN CAPITAL LETTER Y WITH HOOK	[1F7D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x01B3, 0x0062 };
    uint32_t const ces[9] = { 0x1F7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_485)
{
    // 1EFF 0021;	
    // (ỿ) LATIN SMALL LETTER Y WITH LOOP	[1F81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1EFF, 0x0021 };
    uint32_t const ces[9] = { 0x1F81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_486)
{
    // 1EFE 0021;	
    // (Ỿ) LATIN CAPITAL LETTER Y WITH LOOP	[1F81 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x1EFE, 0x0021 };
    uint32_t const ces[9] = { 0x1F81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_487)
{
    // 1EFF 003F;	
    // (ỿ) LATIN SMALL LETTER Y WITH LOOP	[1F81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1EFF, 0x003F };
    uint32_t const ces[9] = { 0x1F81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_488)
{
    // 1EFE 003F;	
    // (Ỿ) LATIN CAPITAL LETTER Y WITH LOOP	[1F81 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x1EFE, 0x003F };
    uint32_t const ces[9] = { 0x1F81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_489)
{
    // 1EFF 0061;	
    // (ỿ) LATIN SMALL LETTER Y WITH LOOP	[1F81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1EFF, 0x0061 };
    uint32_t const ces[9] = { 0x1F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_490)
{
    // 1EFF 0041;	
    // (ỿ) LATIN SMALL LETTER Y WITH LOOP	[1F81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1EFF, 0x0041 };
    uint32_t const ces[9] = { 0x1F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_491)
{
    // 1EFE 0061;	
    // (Ỿ) LATIN CAPITAL LETTER Y WITH LOOP	[1F81 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x1EFE, 0x0061 };
    uint32_t const ces[9] = { 0x1F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_492)
{
    // 1EFE 0041;	
    // (Ỿ) LATIN CAPITAL LETTER Y WITH LOOP	[1F81 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x1EFE, 0x0041 };
    uint32_t const ces[9] = { 0x1F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_493)
{
    // 1EFF 0062;	
    // (ỿ) LATIN SMALL LETTER Y WITH LOOP	[1F81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1EFF, 0x0062 };
    uint32_t const ces[9] = { 0x1F81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_494)
{
    // 1EFE 0062;	
    // (Ỿ) LATIN CAPITAL LETTER Y WITH LOOP	[1F81 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x1EFE, 0x0062 };
    uint32_t const ces[9] = { 0x1F81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_495)
{
    // AB5A 0021;	
    // (ꭚ) LATIN SMALL LETTER Y WITH SHORT RIGHT LEG	[1F82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB5A, 0x0021 };
    uint32_t const ces[9] = { 0x1F82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_496)
{
    // AB5A 003F;	
    // (ꭚ) LATIN SMALL LETTER Y WITH SHORT RIGHT LEG	[1F82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB5A, 0x003F };
    uint32_t const ces[9] = { 0x1F82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_497)
{
    // AB5A 0061;	
    // (ꭚ) LATIN SMALL LETTER Y WITH SHORT RIGHT LEG	[1F82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB5A, 0x0061 };
    uint32_t const ces[9] = { 0x1F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_498)
{
    // AB5A 0041;	
    // (ꭚ) LATIN SMALL LETTER Y WITH SHORT RIGHT LEG	[1F82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB5A, 0x0041 };
    uint32_t const ces[9] = { 0x1F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_125_499)
{
    // AB5A 0062;	
    // (ꭚ) LATIN SMALL LETTER Y WITH SHORT RIGHT LEG	[1F82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB5A, 0x0062 };
    uint32_t const ces[9] = { 0x1F82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

