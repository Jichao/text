// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_060_000)
{
    // 1F4DB 0041;	
    // (📛) NAME BADGE	[14A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DB, 0x0041 };
    uint32_t const ces[9] = { 0x14A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_001)
{
    // 1F4DB 0062;	
    // (📛) NAME BADGE	[14A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DB, 0x0062 };
    uint32_t const ces[9] = { 0x14A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_002)
{
    // 1F4DC 0021;	
    // (📜) SCROLL	[14A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DC, 0x0021 };
    uint32_t const ces[9] = { 0x14A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_003)
{
    // 1F4DC 003F;	
    // (📜) SCROLL	[14A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DC, 0x003F };
    uint32_t const ces[9] = { 0x14A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_004)
{
    // 1F4DC 0061;	
    // (📜) SCROLL	[14A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DC, 0x0061 };
    uint32_t const ces[9] = { 0x14A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_005)
{
    // 1F4DC 0041;	
    // (📜) SCROLL	[14A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DC, 0x0041 };
    uint32_t const ces[9] = { 0x14A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_006)
{
    // 1F4DC 0062;	
    // (📜) SCROLL	[14A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DC, 0x0062 };
    uint32_t const ces[9] = { 0x14A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_007)
{
    // 1F4DD 0021;	
    // (📝) MEMO	[14A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DD, 0x0021 };
    uint32_t const ces[9] = { 0x14A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_008)
{
    // 1F4DD 003F;	
    // (📝) MEMO	[14A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DD, 0x003F };
    uint32_t const ces[9] = { 0x14A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_009)
{
    // 1F4DD 0061;	
    // (📝) MEMO	[14A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DD, 0x0061 };
    uint32_t const ces[9] = { 0x14A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_010)
{
    // 1F4DD 0041;	
    // (📝) MEMO	[14A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DD, 0x0041 };
    uint32_t const ces[9] = { 0x14A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_011)
{
    // 1F4DD 0062;	
    // (📝) MEMO	[14A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DD, 0x0062 };
    uint32_t const ces[9] = { 0x14A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_012)
{
    // 1F4DE 0021;	
    // (📞) TELEPHONE RECEIVER	[14A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DE, 0x0021 };
    uint32_t const ces[9] = { 0x14A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_013)
{
    // 1F4DE 003F;	
    // (📞) TELEPHONE RECEIVER	[14A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DE, 0x003F };
    uint32_t const ces[9] = { 0x14A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_014)
{
    // 1F4DE 0061;	
    // (📞) TELEPHONE RECEIVER	[14A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DE, 0x0061 };
    uint32_t const ces[9] = { 0x14A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_015)
{
    // 1F4DE 0041;	
    // (📞) TELEPHONE RECEIVER	[14A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DE, 0x0041 };
    uint32_t const ces[9] = { 0x14A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_016)
{
    // 1F4DE 0062;	
    // (📞) TELEPHONE RECEIVER	[14A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DE, 0x0062 };
    uint32_t const ces[9] = { 0x14A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_017)
{
    // 1F4DF 0021;	
    // (📟) PAGER	[14A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DF, 0x0021 };
    uint32_t const ces[9] = { 0x14A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_018)
{
    // 1F4DF 003F;	
    // (📟) PAGER	[14A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DF, 0x003F };
    uint32_t const ces[9] = { 0x14A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_019)
{
    // 1F4DF 0061;	
    // (📟) PAGER	[14A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DF, 0x0061 };
    uint32_t const ces[9] = { 0x14A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_020)
{
    // 1F4DF 0041;	
    // (📟) PAGER	[14A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4DF, 0x0041 };
    uint32_t const ces[9] = { 0x14A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_021)
{
    // 1F4DF 0062;	
    // (📟) PAGER	[14A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4DF, 0x0062 };
    uint32_t const ces[9] = { 0x14A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_022)
{
    // 1F4E0 0021;	
    // (📠) FAX MACHINE	[14A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E0, 0x0021 };
    uint32_t const ces[9] = { 0x14A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_023)
{
    // 1F4E0 003F;	
    // (📠) FAX MACHINE	[14A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E0, 0x003F };
    uint32_t const ces[9] = { 0x14A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_024)
{
    // 1F4E0 0061;	
    // (📠) FAX MACHINE	[14A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E0, 0x0061 };
    uint32_t const ces[9] = { 0x14A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_025)
{
    // 1F4E0 0041;	
    // (📠) FAX MACHINE	[14A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E0, 0x0041 };
    uint32_t const ces[9] = { 0x14A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_026)
{
    // 1F4E0 0062;	
    // (📠) FAX MACHINE	[14A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E0, 0x0062 };
    uint32_t const ces[9] = { 0x14A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_027)
{
    // 1F4E1 0021;	
    // (📡) SATELLITE ANTENNA	[14A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E1, 0x0021 };
    uint32_t const ces[9] = { 0x14A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_028)
{
    // 1F4E1 003F;	
    // (📡) SATELLITE ANTENNA	[14A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E1, 0x003F };
    uint32_t const ces[9] = { 0x14A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_029)
{
    // 1F4E1 0061;	
    // (📡) SATELLITE ANTENNA	[14A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E1, 0x0061 };
    uint32_t const ces[9] = { 0x14A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_030)
{
    // 1F4E1 0041;	
    // (📡) SATELLITE ANTENNA	[14A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E1, 0x0041 };
    uint32_t const ces[9] = { 0x14A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_031)
{
    // 1F4E1 0062;	
    // (📡) SATELLITE ANTENNA	[14A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E1, 0x0062 };
    uint32_t const ces[9] = { 0x14A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_032)
{
    // 1F4E2 0021;	
    // (📢) PUBLIC ADDRESS LOUDSPEAKER	[14A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E2, 0x0021 };
    uint32_t const ces[9] = { 0x14A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_033)
{
    // 1F4E2 003F;	
    // (📢) PUBLIC ADDRESS LOUDSPEAKER	[14A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E2, 0x003F };
    uint32_t const ces[9] = { 0x14A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_034)
{
    // 1F4E2 0061;	
    // (📢) PUBLIC ADDRESS LOUDSPEAKER	[14A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E2, 0x0061 };
    uint32_t const ces[9] = { 0x14A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_035)
{
    // 1F4E2 0041;	
    // (📢) PUBLIC ADDRESS LOUDSPEAKER	[14A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E2, 0x0041 };
    uint32_t const ces[9] = { 0x14A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_036)
{
    // 1F4E2 0062;	
    // (📢) PUBLIC ADDRESS LOUDSPEAKER	[14A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E2, 0x0062 };
    uint32_t const ces[9] = { 0x14A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_037)
{
    // 1F4E3 0021;	
    // (📣) CHEERING MEGAPHONE	[14AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E3, 0x0021 };
    uint32_t const ces[9] = { 0x14AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_038)
{
    // 1F4E3 003F;	
    // (📣) CHEERING MEGAPHONE	[14AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E3, 0x003F };
    uint32_t const ces[9] = { 0x14AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_039)
{
    // 1F4E3 0061;	
    // (📣) CHEERING MEGAPHONE	[14AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E3, 0x0061 };
    uint32_t const ces[9] = { 0x14AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_040)
{
    // 1F4E3 0041;	
    // (📣) CHEERING MEGAPHONE	[14AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E3, 0x0041 };
    uint32_t const ces[9] = { 0x14AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_041)
{
    // 1F4E3 0062;	
    // (📣) CHEERING MEGAPHONE	[14AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E3, 0x0062 };
    uint32_t const ces[9] = { 0x14AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_042)
{
    // 1F4E4 0021;	
    // (📤) OUTBOX TRAY	[14AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E4, 0x0021 };
    uint32_t const ces[9] = { 0x14AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_043)
{
    // 1F4E4 003F;	
    // (📤) OUTBOX TRAY	[14AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E4, 0x003F };
    uint32_t const ces[9] = { 0x14AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_044)
{
    // 1F4E4 0061;	
    // (📤) OUTBOX TRAY	[14AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E4, 0x0061 };
    uint32_t const ces[9] = { 0x14AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_045)
{
    // 1F4E4 0041;	
    // (📤) OUTBOX TRAY	[14AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E4, 0x0041 };
    uint32_t const ces[9] = { 0x14AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_046)
{
    // 1F4E4 0062;	
    // (📤) OUTBOX TRAY	[14AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E4, 0x0062 };
    uint32_t const ces[9] = { 0x14AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_047)
{
    // 1F4E5 0021;	
    // (📥) INBOX TRAY	[14AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E5, 0x0021 };
    uint32_t const ces[9] = { 0x14AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_048)
{
    // 1F4E5 003F;	
    // (📥) INBOX TRAY	[14AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E5, 0x003F };
    uint32_t const ces[9] = { 0x14AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_049)
{
    // 1F4E5 0061;	
    // (📥) INBOX TRAY	[14AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E5, 0x0061 };
    uint32_t const ces[9] = { 0x14AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_050)
{
    // 1F4E5 0041;	
    // (📥) INBOX TRAY	[14AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E5, 0x0041 };
    uint32_t const ces[9] = { 0x14AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_051)
{
    // 1F4E5 0062;	
    // (📥) INBOX TRAY	[14AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E5, 0x0062 };
    uint32_t const ces[9] = { 0x14AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_052)
{
    // 1F4E6 0021;	
    // (📦) PACKAGE	[14AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E6, 0x0021 };
    uint32_t const ces[9] = { 0x14AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_053)
{
    // 1F4E6 003F;	
    // (📦) PACKAGE	[14AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E6, 0x003F };
    uint32_t const ces[9] = { 0x14AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_054)
{
    // 1F4E6 0061;	
    // (📦) PACKAGE	[14AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E6, 0x0061 };
    uint32_t const ces[9] = { 0x14AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_055)
{
    // 1F4E6 0041;	
    // (📦) PACKAGE	[14AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E6, 0x0041 };
    uint32_t const ces[9] = { 0x14AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_056)
{
    // 1F4E6 0062;	
    // (📦) PACKAGE	[14AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E6, 0x0062 };
    uint32_t const ces[9] = { 0x14AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_057)
{
    // 1F4E7 0021;	
    // (📧) E-MAIL SYMBOL	[14AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E7, 0x0021 };
    uint32_t const ces[9] = { 0x14AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_058)
{
    // 1F4E7 003F;	
    // (📧) E-MAIL SYMBOL	[14AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E7, 0x003F };
    uint32_t const ces[9] = { 0x14AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_059)
{
    // 1F4E7 0061;	
    // (📧) E-MAIL SYMBOL	[14AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E7, 0x0061 };
    uint32_t const ces[9] = { 0x14AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_060)
{
    // 1F4E7 0041;	
    // (📧) E-MAIL SYMBOL	[14AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E7, 0x0041 };
    uint32_t const ces[9] = { 0x14AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_061)
{
    // 1F4E7 0062;	
    // (📧) E-MAIL SYMBOL	[14AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E7, 0x0062 };
    uint32_t const ces[9] = { 0x14AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_062)
{
    // 1F4E8 0021;	
    // (📨) INCOMING ENVELOPE	[14AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E8, 0x0021 };
    uint32_t const ces[9] = { 0x14AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_063)
{
    // 1F4E8 003F;	
    // (📨) INCOMING ENVELOPE	[14AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E8, 0x003F };
    uint32_t const ces[9] = { 0x14AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_064)
{
    // 1F4E8 0061;	
    // (📨) INCOMING ENVELOPE	[14AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E8, 0x0061 };
    uint32_t const ces[9] = { 0x14AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_065)
{
    // 1F4E8 0041;	
    // (📨) INCOMING ENVELOPE	[14AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E8, 0x0041 };
    uint32_t const ces[9] = { 0x14AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_066)
{
    // 1F4E8 0062;	
    // (📨) INCOMING ENVELOPE	[14AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E8, 0x0062 };
    uint32_t const ces[9] = { 0x14AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_067)
{
    // 1F4E9 0021;	
    // (📩) ENVELOPE WITH DOWNWARDS ARROW ABOVE	[14B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E9, 0x0021 };
    uint32_t const ces[9] = { 0x14B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_068)
{
    // 1F4E9 003F;	
    // (📩) ENVELOPE WITH DOWNWARDS ARROW ABOVE	[14B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E9, 0x003F };
    uint32_t const ces[9] = { 0x14B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_069)
{
    // 1F4E9 0061;	
    // (📩) ENVELOPE WITH DOWNWARDS ARROW ABOVE	[14B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E9, 0x0061 };
    uint32_t const ces[9] = { 0x14B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_070)
{
    // 1F4E9 0041;	
    // (📩) ENVELOPE WITH DOWNWARDS ARROW ABOVE	[14B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4E9, 0x0041 };
    uint32_t const ces[9] = { 0x14B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_071)
{
    // 1F4E9 0062;	
    // (📩) ENVELOPE WITH DOWNWARDS ARROW ABOVE	[14B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4E9, 0x0062 };
    uint32_t const ces[9] = { 0x14B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_072)
{
    // 1F4EA 0021;	
    // (📪) CLOSED MAILBOX WITH LOWERED FLAG	[14B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EA, 0x0021 };
    uint32_t const ces[9] = { 0x14B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_073)
{
    // 1F4EA 003F;	
    // (📪) CLOSED MAILBOX WITH LOWERED FLAG	[14B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EA, 0x003F };
    uint32_t const ces[9] = { 0x14B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_074)
{
    // 1F4EA 0061;	
    // (📪) CLOSED MAILBOX WITH LOWERED FLAG	[14B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EA, 0x0061 };
    uint32_t const ces[9] = { 0x14B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_075)
{
    // 1F4EA 0041;	
    // (📪) CLOSED MAILBOX WITH LOWERED FLAG	[14B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4EA, 0x0041 };
    uint32_t const ces[9] = { 0x14B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_076)
{
    // 1F4EA 0062;	
    // (📪) CLOSED MAILBOX WITH LOWERED FLAG	[14B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EA, 0x0062 };
    uint32_t const ces[9] = { 0x14B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_077)
{
    // 1F4EB 0021;	
    // (📫) CLOSED MAILBOX WITH RAISED FLAG	[14B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EB, 0x0021 };
    uint32_t const ces[9] = { 0x14B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_078)
{
    // 1F4EB 003F;	
    // (📫) CLOSED MAILBOX WITH RAISED FLAG	[14B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EB, 0x003F };
    uint32_t const ces[9] = { 0x14B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_079)
{
    // 1F4EB 0061;	
    // (📫) CLOSED MAILBOX WITH RAISED FLAG	[14B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EB, 0x0061 };
    uint32_t const ces[9] = { 0x14B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_080)
{
    // 1F4EB 0041;	
    // (📫) CLOSED MAILBOX WITH RAISED FLAG	[14B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4EB, 0x0041 };
    uint32_t const ces[9] = { 0x14B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_081)
{
    // 1F4EB 0062;	
    // (📫) CLOSED MAILBOX WITH RAISED FLAG	[14B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EB, 0x0062 };
    uint32_t const ces[9] = { 0x14B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_082)
{
    // 1F4EC 0021;	
    // (📬) OPEN MAILBOX WITH RAISED FLAG	[14B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EC, 0x0021 };
    uint32_t const ces[9] = { 0x14B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_083)
{
    // 1F4EC 003F;	
    // (📬) OPEN MAILBOX WITH RAISED FLAG	[14B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EC, 0x003F };
    uint32_t const ces[9] = { 0x14B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_084)
{
    // 1F4EC 0061;	
    // (📬) OPEN MAILBOX WITH RAISED FLAG	[14B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EC, 0x0061 };
    uint32_t const ces[9] = { 0x14B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_085)
{
    // 1F4EC 0041;	
    // (📬) OPEN MAILBOX WITH RAISED FLAG	[14B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4EC, 0x0041 };
    uint32_t const ces[9] = { 0x14B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_086)
{
    // 1F4EC 0062;	
    // (📬) OPEN MAILBOX WITH RAISED FLAG	[14B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EC, 0x0062 };
    uint32_t const ces[9] = { 0x14B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_087)
{
    // 1F4ED 0021;	
    // (📭) OPEN MAILBOX WITH LOWERED FLAG	[14B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4ED, 0x0021 };
    uint32_t const ces[9] = { 0x14B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_088)
{
    // 1F4ED 003F;	
    // (📭) OPEN MAILBOX WITH LOWERED FLAG	[14B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4ED, 0x003F };
    uint32_t const ces[9] = { 0x14B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_089)
{
    // 1F4ED 0061;	
    // (📭) OPEN MAILBOX WITH LOWERED FLAG	[14B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4ED, 0x0061 };
    uint32_t const ces[9] = { 0x14B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_090)
{
    // 1F4ED 0041;	
    // (📭) OPEN MAILBOX WITH LOWERED FLAG	[14B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4ED, 0x0041 };
    uint32_t const ces[9] = { 0x14B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_091)
{
    // 1F4ED 0062;	
    // (📭) OPEN MAILBOX WITH LOWERED FLAG	[14B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4ED, 0x0062 };
    uint32_t const ces[9] = { 0x14B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_092)
{
    // 1F4EE 0021;	
    // (📮) POSTBOX	[14B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EE, 0x0021 };
    uint32_t const ces[9] = { 0x14B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_093)
{
    // 1F4EE 003F;	
    // (📮) POSTBOX	[14B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EE, 0x003F };
    uint32_t const ces[9] = { 0x14B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_094)
{
    // 1F4EE 0061;	
    // (📮) POSTBOX	[14B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EE, 0x0061 };
    uint32_t const ces[9] = { 0x14B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_095)
{
    // 1F4EE 0041;	
    // (📮) POSTBOX	[14B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4EE, 0x0041 };
    uint32_t const ces[9] = { 0x14B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_096)
{
    // 1F4EE 0062;	
    // (📮) POSTBOX	[14B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EE, 0x0062 };
    uint32_t const ces[9] = { 0x14B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_097)
{
    // 1F4EF 0021;	
    // (📯) POSTAL HORN	[14B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EF, 0x0021 };
    uint32_t const ces[9] = { 0x14B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_098)
{
    // 1F4EF 003F;	
    // (📯) POSTAL HORN	[14B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EF, 0x003F };
    uint32_t const ces[9] = { 0x14B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_099)
{
    // 1F4EF 0061;	
    // (📯) POSTAL HORN	[14B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EF, 0x0061 };
    uint32_t const ces[9] = { 0x14B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_100)
{
    // 1F4EF 0041;	
    // (📯) POSTAL HORN	[14B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4EF, 0x0041 };
    uint32_t const ces[9] = { 0x14B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_101)
{
    // 1F4EF 0062;	
    // (📯) POSTAL HORN	[14B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4EF, 0x0062 };
    uint32_t const ces[9] = { 0x14B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_102)
{
    // 1F4F0 0021;	
    // (📰) NEWSPAPER	[14B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F0, 0x0021 };
    uint32_t const ces[9] = { 0x14B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_103)
{
    // 1F4F0 003F;	
    // (📰) NEWSPAPER	[14B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F0, 0x003F };
    uint32_t const ces[9] = { 0x14B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_104)
{
    // 1F4F0 0061;	
    // (📰) NEWSPAPER	[14B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F0, 0x0061 };
    uint32_t const ces[9] = { 0x14B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_105)
{
    // 1F4F0 0041;	
    // (📰) NEWSPAPER	[14B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F0, 0x0041 };
    uint32_t const ces[9] = { 0x14B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_106)
{
    // 1F4F0 0062;	
    // (📰) NEWSPAPER	[14B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F0, 0x0062 };
    uint32_t const ces[9] = { 0x14B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_107)
{
    // 1F4F1 0021;	
    // (📱) MOBILE PHONE	[14B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F1, 0x0021 };
    uint32_t const ces[9] = { 0x14B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_108)
{
    // 1F4F1 003F;	
    // (📱) MOBILE PHONE	[14B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F1, 0x003F };
    uint32_t const ces[9] = { 0x14B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_109)
{
    // 1F4F1 0061;	
    // (📱) MOBILE PHONE	[14B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F1, 0x0061 };
    uint32_t const ces[9] = { 0x14B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_110)
{
    // 1F4F1 0041;	
    // (📱) MOBILE PHONE	[14B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F1, 0x0041 };
    uint32_t const ces[9] = { 0x14B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_111)
{
    // 1F4F1 0062;	
    // (📱) MOBILE PHONE	[14B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F1, 0x0062 };
    uint32_t const ces[9] = { 0x14B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_112)
{
    // 1F4F2 0021;	
    // (📲) MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT	[14B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F2, 0x0021 };
    uint32_t const ces[9] = { 0x14B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_113)
{
    // 1F4F2 003F;	
    // (📲) MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT	[14B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F2, 0x003F };
    uint32_t const ces[9] = { 0x14B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_114)
{
    // 1F4F2 0061;	
    // (📲) MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT	[14B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F2, 0x0061 };
    uint32_t const ces[9] = { 0x14B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_115)
{
    // 1F4F2 0041;	
    // (📲) MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT	[14B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F2, 0x0041 };
    uint32_t const ces[9] = { 0x14B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_116)
{
    // 1F4F2 0062;	
    // (📲) MOBILE PHONE WITH RIGHTWARDS ARROW AT LEFT	[14B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F2, 0x0062 };
    uint32_t const ces[9] = { 0x14B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_117)
{
    // 1F4F3 0021;	
    // (📳) VIBRATION MODE	[14BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F3, 0x0021 };
    uint32_t const ces[9] = { 0x14BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_118)
{
    // 1F4F3 003F;	
    // (📳) VIBRATION MODE	[14BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F3, 0x003F };
    uint32_t const ces[9] = { 0x14BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_119)
{
    // 1F4F3 0061;	
    // (📳) VIBRATION MODE	[14BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F3, 0x0061 };
    uint32_t const ces[9] = { 0x14BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_120)
{
    // 1F4F3 0041;	
    // (📳) VIBRATION MODE	[14BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F3, 0x0041 };
    uint32_t const ces[9] = { 0x14BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_121)
{
    // 1F4F3 0062;	
    // (📳) VIBRATION MODE	[14BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F3, 0x0062 };
    uint32_t const ces[9] = { 0x14BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_122)
{
    // 1F4F4 0021;	
    // (📴) MOBILE PHONE OFF	[14BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F4, 0x0021 };
    uint32_t const ces[9] = { 0x14BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_123)
{
    // 1F4F4 003F;	
    // (📴) MOBILE PHONE OFF	[14BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F4, 0x003F };
    uint32_t const ces[9] = { 0x14BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_124)
{
    // 1F4F4 0061;	
    // (📴) MOBILE PHONE OFF	[14BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F4, 0x0061 };
    uint32_t const ces[9] = { 0x14BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_125)
{
    // 1F4F4 0041;	
    // (📴) MOBILE PHONE OFF	[14BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F4, 0x0041 };
    uint32_t const ces[9] = { 0x14BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_126)
{
    // 1F4F4 0062;	
    // (📴) MOBILE PHONE OFF	[14BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F4, 0x0062 };
    uint32_t const ces[9] = { 0x14BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_127)
{
    // 1F4F5 0021;	
    // (📵) NO MOBILE PHONES	[14BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F5, 0x0021 };
    uint32_t const ces[9] = { 0x14BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_128)
{
    // 1F4F5 003F;	
    // (📵) NO MOBILE PHONES	[14BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F5, 0x003F };
    uint32_t const ces[9] = { 0x14BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_129)
{
    // 1F4F5 0061;	
    // (📵) NO MOBILE PHONES	[14BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F5, 0x0061 };
    uint32_t const ces[9] = { 0x14BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_130)
{
    // 1F4F5 0041;	
    // (📵) NO MOBILE PHONES	[14BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F5, 0x0041 };
    uint32_t const ces[9] = { 0x14BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_131)
{
    // 1F4F5 0062;	
    // (📵) NO MOBILE PHONES	[14BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F5, 0x0062 };
    uint32_t const ces[9] = { 0x14BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_132)
{
    // 1F4F6 0021;	
    // (📶) ANTENNA WITH BARS	[14BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F6, 0x0021 };
    uint32_t const ces[9] = { 0x14BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_133)
{
    // 1F4F6 003F;	
    // (📶) ANTENNA WITH BARS	[14BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F6, 0x003F };
    uint32_t const ces[9] = { 0x14BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_134)
{
    // 1F4F6 0061;	
    // (📶) ANTENNA WITH BARS	[14BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F6, 0x0061 };
    uint32_t const ces[9] = { 0x14BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_135)
{
    // 1F4F6 0041;	
    // (📶) ANTENNA WITH BARS	[14BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F6, 0x0041 };
    uint32_t const ces[9] = { 0x14BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_136)
{
    // 1F4F6 0062;	
    // (📶) ANTENNA WITH BARS	[14BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F6, 0x0062 };
    uint32_t const ces[9] = { 0x14BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_137)
{
    // 1F4F7 0021;	
    // (📷) CAMERA	[14BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F7, 0x0021 };
    uint32_t const ces[9] = { 0x14BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_138)
{
    // 1F4F7 003F;	
    // (📷) CAMERA	[14BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F7, 0x003F };
    uint32_t const ces[9] = { 0x14BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_139)
{
    // 1F4F7 0061;	
    // (📷) CAMERA	[14BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F7, 0x0061 };
    uint32_t const ces[9] = { 0x14BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_140)
{
    // 1F4F7 0041;	
    // (📷) CAMERA	[14BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F7, 0x0041 };
    uint32_t const ces[9] = { 0x14BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_141)
{
    // 1F4F7 0062;	
    // (📷) CAMERA	[14BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F7, 0x0062 };
    uint32_t const ces[9] = { 0x14BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_142)
{
    // 1F4F8 0021;	
    // (📸) CAMERA WITH FLASH	[14BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F8, 0x0021 };
    uint32_t const ces[9] = { 0x14BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_143)
{
    // 1F4F8 003F;	
    // (📸) CAMERA WITH FLASH	[14BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F8, 0x003F };
    uint32_t const ces[9] = { 0x14BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_144)
{
    // 1F4F8 0061;	
    // (📸) CAMERA WITH FLASH	[14BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F8, 0x0061 };
    uint32_t const ces[9] = { 0x14BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_145)
{
    // 1F4F8 0041;	
    // (📸) CAMERA WITH FLASH	[14BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F8, 0x0041 };
    uint32_t const ces[9] = { 0x14BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_146)
{
    // 1F4F8 0062;	
    // (📸) CAMERA WITH FLASH	[14BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F8, 0x0062 };
    uint32_t const ces[9] = { 0x14BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_147)
{
    // 1F4F9 0021;	
    // (📹) VIDEO CAMERA	[14C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F9, 0x0021 };
    uint32_t const ces[9] = { 0x14C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_148)
{
    // 1F4F9 003F;	
    // (📹) VIDEO CAMERA	[14C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F9, 0x003F };
    uint32_t const ces[9] = { 0x14C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_149)
{
    // 1F4F9 0061;	
    // (📹) VIDEO CAMERA	[14C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F9, 0x0061 };
    uint32_t const ces[9] = { 0x14C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_150)
{
    // 1F4F9 0041;	
    // (📹) VIDEO CAMERA	[14C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4F9, 0x0041 };
    uint32_t const ces[9] = { 0x14C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_151)
{
    // 1F4F9 0062;	
    // (📹) VIDEO CAMERA	[14C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4F9, 0x0062 };
    uint32_t const ces[9] = { 0x14C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_152)
{
    // 1F4FA 0021;	
    // (📺) TELEVISION	[14C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FA, 0x0021 };
    uint32_t const ces[9] = { 0x14C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_153)
{
    // 1F4FA 003F;	
    // (📺) TELEVISION	[14C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FA, 0x003F };
    uint32_t const ces[9] = { 0x14C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_154)
{
    // 1F4FA 0061;	
    // (📺) TELEVISION	[14C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FA, 0x0061 };
    uint32_t const ces[9] = { 0x14C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_155)
{
    // 1F4FA 0041;	
    // (📺) TELEVISION	[14C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FA, 0x0041 };
    uint32_t const ces[9] = { 0x14C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_156)
{
    // 1F4FA 0062;	
    // (📺) TELEVISION	[14C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FA, 0x0062 };
    uint32_t const ces[9] = { 0x14C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_157)
{
    // 1F4FB 0021;	
    // (📻) RADIO	[14C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FB, 0x0021 };
    uint32_t const ces[9] = { 0x14C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_158)
{
    // 1F4FB 003F;	
    // (📻) RADIO	[14C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FB, 0x003F };
    uint32_t const ces[9] = { 0x14C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_159)
{
    // 1F4FB 0061;	
    // (📻) RADIO	[14C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FB, 0x0061 };
    uint32_t const ces[9] = { 0x14C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_160)
{
    // 1F4FB 0041;	
    // (📻) RADIO	[14C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FB, 0x0041 };
    uint32_t const ces[9] = { 0x14C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_161)
{
    // 1F4FB 0062;	
    // (📻) RADIO	[14C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FB, 0x0062 };
    uint32_t const ces[9] = { 0x14C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_162)
{
    // 1F4FC 0021;	
    // (📼) VIDEOCASSETTE	[14C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FC, 0x0021 };
    uint32_t const ces[9] = { 0x14C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_163)
{
    // 1F4FC 003F;	
    // (📼) VIDEOCASSETTE	[14C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FC, 0x003F };
    uint32_t const ces[9] = { 0x14C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_164)
{
    // 1F4FC 0061;	
    // (📼) VIDEOCASSETTE	[14C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FC, 0x0061 };
    uint32_t const ces[9] = { 0x14C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_165)
{
    // 1F4FC 0041;	
    // (📼) VIDEOCASSETTE	[14C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FC, 0x0041 };
    uint32_t const ces[9] = { 0x14C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_166)
{
    // 1F4FC 0062;	
    // (📼) VIDEOCASSETTE	[14C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FC, 0x0062 };
    uint32_t const ces[9] = { 0x14C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_167)
{
    // 1F4FD 0021;	
    // (📽) FILM PROJECTOR	[14C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FD, 0x0021 };
    uint32_t const ces[9] = { 0x14C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_168)
{
    // 1F4FD 003F;	
    // (📽) FILM PROJECTOR	[14C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FD, 0x003F };
    uint32_t const ces[9] = { 0x14C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_169)
{
    // 1F4FD 0061;	
    // (📽) FILM PROJECTOR	[14C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FD, 0x0061 };
    uint32_t const ces[9] = { 0x14C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_170)
{
    // 1F4FD 0041;	
    // (📽) FILM PROJECTOR	[14C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FD, 0x0041 };
    uint32_t const ces[9] = { 0x14C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_171)
{
    // 1F4FD 0062;	
    // (📽) FILM PROJECTOR	[14C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FD, 0x0062 };
    uint32_t const ces[9] = { 0x14C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_172)
{
    // 1F4FE 0021;	
    // (📾) PORTABLE STEREO	[14C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FE, 0x0021 };
    uint32_t const ces[9] = { 0x14C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_173)
{
    // 1F4FE 003F;	
    // (📾) PORTABLE STEREO	[14C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FE, 0x003F };
    uint32_t const ces[9] = { 0x14C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_174)
{
    // 1F4FE 0061;	
    // (📾) PORTABLE STEREO	[14C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FE, 0x0061 };
    uint32_t const ces[9] = { 0x14C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_175)
{
    // 1F4FE 0041;	
    // (📾) PORTABLE STEREO	[14C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FE, 0x0041 };
    uint32_t const ces[9] = { 0x14C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_176)
{
    // 1F4FE 0062;	
    // (📾) PORTABLE STEREO	[14C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FE, 0x0062 };
    uint32_t const ces[9] = { 0x14C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_177)
{
    // 1F4FF 0021;	
    // (📿) PRAYER BEADS	[14C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FF, 0x0021 };
    uint32_t const ces[9] = { 0x14C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_178)
{
    // 1F4FF 003F;	
    // (📿) PRAYER BEADS	[14C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FF, 0x003F };
    uint32_t const ces[9] = { 0x14C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_179)
{
    // 1F4FF 0061;	
    // (📿) PRAYER BEADS	[14C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FF, 0x0061 };
    uint32_t const ces[9] = { 0x14C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_180)
{
    // 1F4FF 0041;	
    // (📿) PRAYER BEADS	[14C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F4FF, 0x0041 };
    uint32_t const ces[9] = { 0x14C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_181)
{
    // 1F4FF 0062;	
    // (📿) PRAYER BEADS	[14C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F4FF, 0x0062 };
    uint32_t const ces[9] = { 0x14C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_182)
{
    // 1F500 0021;	
    // (🔀) TWISTED RIGHTWARDS ARROWS	[14C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F500, 0x0021 };
    uint32_t const ces[9] = { 0x14C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_183)
{
    // 1F500 003F;	
    // (🔀) TWISTED RIGHTWARDS ARROWS	[14C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F500, 0x003F };
    uint32_t const ces[9] = { 0x14C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_184)
{
    // 1F500 0061;	
    // (🔀) TWISTED RIGHTWARDS ARROWS	[14C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F500, 0x0061 };
    uint32_t const ces[9] = { 0x14C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_185)
{
    // 1F500 0041;	
    // (🔀) TWISTED RIGHTWARDS ARROWS	[14C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F500, 0x0041 };
    uint32_t const ces[9] = { 0x14C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_186)
{
    // 1F500 0062;	
    // (🔀) TWISTED RIGHTWARDS ARROWS	[14C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F500, 0x0062 };
    uint32_t const ces[9] = { 0x14C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_187)
{
    // 1F501 0021;	
    // (🔁) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS	[14C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F501, 0x0021 };
    uint32_t const ces[9] = { 0x14C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_188)
{
    // 1F501 003F;	
    // (🔁) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS	[14C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F501, 0x003F };
    uint32_t const ces[9] = { 0x14C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_189)
{
    // 1F501 0061;	
    // (🔁) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS	[14C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F501, 0x0061 };
    uint32_t const ces[9] = { 0x14C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_190)
{
    // 1F501 0041;	
    // (🔁) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS	[14C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F501, 0x0041 };
    uint32_t const ces[9] = { 0x14C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_191)
{
    // 1F501 0062;	
    // (🔁) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS	[14C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F501, 0x0062 };
    uint32_t const ces[9] = { 0x14C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_192)
{
    // 1F502 0021;	
    // (🔂) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY	[14C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F502, 0x0021 };
    uint32_t const ces[9] = { 0x14C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_193)
{
    // 1F502 003F;	
    // (🔂) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY	[14C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F502, 0x003F };
    uint32_t const ces[9] = { 0x14C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_194)
{
    // 1F502 0061;	
    // (🔂) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY	[14C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F502, 0x0061 };
    uint32_t const ces[9] = { 0x14C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_195)
{
    // 1F502 0041;	
    // (🔂) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY	[14C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F502, 0x0041 };
    uint32_t const ces[9] = { 0x14C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_196)
{
    // 1F502 0062;	
    // (🔂) CLOCKWISE RIGHTWARDS AND LEFTWARDS OPEN CIRCLE ARROWS WITH CIRCLED ONE OVERLAY	[14C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F502, 0x0062 };
    uint32_t const ces[9] = { 0x14C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_197)
{
    // 1F503 0021;	
    // (🔃) CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F503, 0x0021 };
    uint32_t const ces[9] = { 0x14CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_198)
{
    // 1F503 003F;	
    // (🔃) CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F503, 0x003F };
    uint32_t const ces[9] = { 0x14CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_199)
{
    // 1F503 0061;	
    // (🔃) CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F503, 0x0061 };
    uint32_t const ces[9] = { 0x14CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_200)
{
    // 1F503 0041;	
    // (🔃) CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F503, 0x0041 };
    uint32_t const ces[9] = { 0x14CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_201)
{
    // 1F503 0062;	
    // (🔃) CLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F503, 0x0062 };
    uint32_t const ces[9] = { 0x14CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_202)
{
    // 1F504 0021;	
    // (🔄) ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F504, 0x0021 };
    uint32_t const ces[9] = { 0x14CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_203)
{
    // 1F504 003F;	
    // (🔄) ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F504, 0x003F };
    uint32_t const ces[9] = { 0x14CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_204)
{
    // 1F504 0061;	
    // (🔄) ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F504, 0x0061 };
    uint32_t const ces[9] = { 0x14CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_205)
{
    // 1F504 0041;	
    // (🔄) ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F504, 0x0041 };
    uint32_t const ces[9] = { 0x14CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_206)
{
    // 1F504 0062;	
    // (🔄) ANTICLOCKWISE DOWNWARDS AND UPWARDS OPEN CIRCLE ARROWS	[14CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F504, 0x0062 };
    uint32_t const ces[9] = { 0x14CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_207)
{
    // 1F505 0021;	
    // (🔅) LOW BRIGHTNESS SYMBOL	[14CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F505, 0x0021 };
    uint32_t const ces[9] = { 0x14CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_208)
{
    // 1F505 003F;	
    // (🔅) LOW BRIGHTNESS SYMBOL	[14CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F505, 0x003F };
    uint32_t const ces[9] = { 0x14CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_209)
{
    // 1F505 0061;	
    // (🔅) LOW BRIGHTNESS SYMBOL	[14CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F505, 0x0061 };
    uint32_t const ces[9] = { 0x14CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_210)
{
    // 1F505 0041;	
    // (🔅) LOW BRIGHTNESS SYMBOL	[14CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F505, 0x0041 };
    uint32_t const ces[9] = { 0x14CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_211)
{
    // 1F505 0062;	
    // (🔅) LOW BRIGHTNESS SYMBOL	[14CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F505, 0x0062 };
    uint32_t const ces[9] = { 0x14CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_212)
{
    // 1F506 0021;	
    // (🔆) HIGH BRIGHTNESS SYMBOL	[14CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F506, 0x0021 };
    uint32_t const ces[9] = { 0x14CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_213)
{
    // 1F506 003F;	
    // (🔆) HIGH BRIGHTNESS SYMBOL	[14CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F506, 0x003F };
    uint32_t const ces[9] = { 0x14CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_214)
{
    // 1F506 0061;	
    // (🔆) HIGH BRIGHTNESS SYMBOL	[14CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F506, 0x0061 };
    uint32_t const ces[9] = { 0x14CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_215)
{
    // 1F506 0041;	
    // (🔆) HIGH BRIGHTNESS SYMBOL	[14CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F506, 0x0041 };
    uint32_t const ces[9] = { 0x14CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_216)
{
    // 1F506 0062;	
    // (🔆) HIGH BRIGHTNESS SYMBOL	[14CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F506, 0x0062 };
    uint32_t const ces[9] = { 0x14CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_217)
{
    // 1F507 0021;	
    // (🔇) SPEAKER WITH CANCELLATION STROKE	[14CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F507, 0x0021 };
    uint32_t const ces[9] = { 0x14CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_218)
{
    // 1F507 003F;	
    // (🔇) SPEAKER WITH CANCELLATION STROKE	[14CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F507, 0x003F };
    uint32_t const ces[9] = { 0x14CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_219)
{
    // 1F507 0061;	
    // (🔇) SPEAKER WITH CANCELLATION STROKE	[14CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F507, 0x0061 };
    uint32_t const ces[9] = { 0x14CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_220)
{
    // 1F507 0041;	
    // (🔇) SPEAKER WITH CANCELLATION STROKE	[14CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F507, 0x0041 };
    uint32_t const ces[9] = { 0x14CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_221)
{
    // 1F507 0062;	
    // (🔇) SPEAKER WITH CANCELLATION STROKE	[14CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F507, 0x0062 };
    uint32_t const ces[9] = { 0x14CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_222)
{
    // 1F508 0021;	
    // (🔈) SPEAKER	[14CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F508, 0x0021 };
    uint32_t const ces[9] = { 0x14CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_223)
{
    // 1F508 003F;	
    // (🔈) SPEAKER	[14CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F508, 0x003F };
    uint32_t const ces[9] = { 0x14CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_224)
{
    // 1F508 0061;	
    // (🔈) SPEAKER	[14CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F508, 0x0061 };
    uint32_t const ces[9] = { 0x14CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_225)
{
    // 1F508 0041;	
    // (🔈) SPEAKER	[14CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F508, 0x0041 };
    uint32_t const ces[9] = { 0x14CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_226)
{
    // 1F508 0062;	
    // (🔈) SPEAKER	[14CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F508, 0x0062 };
    uint32_t const ces[9] = { 0x14CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_227)
{
    // 1F509 0021;	
    // (🔉) SPEAKER WITH ONE SOUND WAVE	[14D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F509, 0x0021 };
    uint32_t const ces[9] = { 0x14D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_228)
{
    // 1F509 003F;	
    // (🔉) SPEAKER WITH ONE SOUND WAVE	[14D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F509, 0x003F };
    uint32_t const ces[9] = { 0x14D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_229)
{
    // 1F509 0061;	
    // (🔉) SPEAKER WITH ONE SOUND WAVE	[14D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F509, 0x0061 };
    uint32_t const ces[9] = { 0x14D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_230)
{
    // 1F509 0041;	
    // (🔉) SPEAKER WITH ONE SOUND WAVE	[14D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F509, 0x0041 };
    uint32_t const ces[9] = { 0x14D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_231)
{
    // 1F509 0062;	
    // (🔉) SPEAKER WITH ONE SOUND WAVE	[14D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F509, 0x0062 };
    uint32_t const ces[9] = { 0x14D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_232)
{
    // 1F50A 0021;	
    // (🔊) SPEAKER WITH THREE SOUND WAVES	[14D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50A, 0x0021 };
    uint32_t const ces[9] = { 0x14D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_233)
{
    // 1F50A 003F;	
    // (🔊) SPEAKER WITH THREE SOUND WAVES	[14D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50A, 0x003F };
    uint32_t const ces[9] = { 0x14D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_234)
{
    // 1F50A 0061;	
    // (🔊) SPEAKER WITH THREE SOUND WAVES	[14D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50A, 0x0061 };
    uint32_t const ces[9] = { 0x14D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_235)
{
    // 1F50A 0041;	
    // (🔊) SPEAKER WITH THREE SOUND WAVES	[14D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50A, 0x0041 };
    uint32_t const ces[9] = { 0x14D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_236)
{
    // 1F50A 0062;	
    // (🔊) SPEAKER WITH THREE SOUND WAVES	[14D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50A, 0x0062 };
    uint32_t const ces[9] = { 0x14D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_237)
{
    // 1F50B 0021;	
    // (🔋) BATTERY	[14D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50B, 0x0021 };
    uint32_t const ces[9] = { 0x14D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_238)
{
    // 1F50B 003F;	
    // (🔋) BATTERY	[14D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50B, 0x003F };
    uint32_t const ces[9] = { 0x14D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_239)
{
    // 1F50B 0061;	
    // (🔋) BATTERY	[14D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50B, 0x0061 };
    uint32_t const ces[9] = { 0x14D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_240)
{
    // 1F50B 0041;	
    // (🔋) BATTERY	[14D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50B, 0x0041 };
    uint32_t const ces[9] = { 0x14D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_241)
{
    // 1F50B 0062;	
    // (🔋) BATTERY	[14D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50B, 0x0062 };
    uint32_t const ces[9] = { 0x14D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_242)
{
    // 1F50C 0021;	
    // (🔌) ELECTRIC PLUG	[14D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50C, 0x0021 };
    uint32_t const ces[9] = { 0x14D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_243)
{
    // 1F50C 003F;	
    // (🔌) ELECTRIC PLUG	[14D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50C, 0x003F };
    uint32_t const ces[9] = { 0x14D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_244)
{
    // 1F50C 0061;	
    // (🔌) ELECTRIC PLUG	[14D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50C, 0x0061 };
    uint32_t const ces[9] = { 0x14D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_245)
{
    // 1F50C 0041;	
    // (🔌) ELECTRIC PLUG	[14D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50C, 0x0041 };
    uint32_t const ces[9] = { 0x14D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_246)
{
    // 1F50C 0062;	
    // (🔌) ELECTRIC PLUG	[14D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50C, 0x0062 };
    uint32_t const ces[9] = { 0x14D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_247)
{
    // 1F50D 0021;	
    // (🔍) LEFT-POINTING MAGNIFYING GLASS	[14D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50D, 0x0021 };
    uint32_t const ces[9] = { 0x14D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_248)
{
    // 1F50D 003F;	
    // (🔍) LEFT-POINTING MAGNIFYING GLASS	[14D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50D, 0x003F };
    uint32_t const ces[9] = { 0x14D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_249)
{
    // 1F50D 0061;	
    // (🔍) LEFT-POINTING MAGNIFYING GLASS	[14D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50D, 0x0061 };
    uint32_t const ces[9] = { 0x14D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_250)
{
    // 1F50D 0041;	
    // (🔍) LEFT-POINTING MAGNIFYING GLASS	[14D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50D, 0x0041 };
    uint32_t const ces[9] = { 0x14D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_251)
{
    // 1F50D 0062;	
    // (🔍) LEFT-POINTING MAGNIFYING GLASS	[14D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50D, 0x0062 };
    uint32_t const ces[9] = { 0x14D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_252)
{
    // 1F50E 0021;	
    // (🔎) RIGHT-POINTING MAGNIFYING GLASS	[14D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50E, 0x0021 };
    uint32_t const ces[9] = { 0x14D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_253)
{
    // 1F50E 003F;	
    // (🔎) RIGHT-POINTING MAGNIFYING GLASS	[14D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50E, 0x003F };
    uint32_t const ces[9] = { 0x14D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_254)
{
    // 1F50E 0061;	
    // (🔎) RIGHT-POINTING MAGNIFYING GLASS	[14D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50E, 0x0061 };
    uint32_t const ces[9] = { 0x14D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_255)
{
    // 1F50E 0041;	
    // (🔎) RIGHT-POINTING MAGNIFYING GLASS	[14D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50E, 0x0041 };
    uint32_t const ces[9] = { 0x14D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_256)
{
    // 1F50E 0062;	
    // (🔎) RIGHT-POINTING MAGNIFYING GLASS	[14D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50E, 0x0062 };
    uint32_t const ces[9] = { 0x14D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_257)
{
    // 1F50F 0021;	
    // (🔏) LOCK WITH INK PEN	[14D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50F, 0x0021 };
    uint32_t const ces[9] = { 0x14D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_258)
{
    // 1F50F 003F;	
    // (🔏) LOCK WITH INK PEN	[14D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50F, 0x003F };
    uint32_t const ces[9] = { 0x14D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_259)
{
    // 1F50F 0061;	
    // (🔏) LOCK WITH INK PEN	[14D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50F, 0x0061 };
    uint32_t const ces[9] = { 0x14D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_260)
{
    // 1F50F 0041;	
    // (🔏) LOCK WITH INK PEN	[14D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F50F, 0x0041 };
    uint32_t const ces[9] = { 0x14D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_261)
{
    // 1F50F 0062;	
    // (🔏) LOCK WITH INK PEN	[14D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F50F, 0x0062 };
    uint32_t const ces[9] = { 0x14D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_262)
{
    // 1F510 0021;	
    // (🔐) CLOSED LOCK WITH KEY	[14D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F510, 0x0021 };
    uint32_t const ces[9] = { 0x14D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_263)
{
    // 1F510 003F;	
    // (🔐) CLOSED LOCK WITH KEY	[14D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F510, 0x003F };
    uint32_t const ces[9] = { 0x14D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_264)
{
    // 1F510 0061;	
    // (🔐) CLOSED LOCK WITH KEY	[14D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F510, 0x0061 };
    uint32_t const ces[9] = { 0x14D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_265)
{
    // 1F510 0041;	
    // (🔐) CLOSED LOCK WITH KEY	[14D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F510, 0x0041 };
    uint32_t const ces[9] = { 0x14D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_266)
{
    // 1F510 0062;	
    // (🔐) CLOSED LOCK WITH KEY	[14D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F510, 0x0062 };
    uint32_t const ces[9] = { 0x14D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_267)
{
    // 1F511 0021;	
    // (🔑) KEY	[14D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F511, 0x0021 };
    uint32_t const ces[9] = { 0x14D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_268)
{
    // 1F511 003F;	
    // (🔑) KEY	[14D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F511, 0x003F };
    uint32_t const ces[9] = { 0x14D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_269)
{
    // 1F511 0061;	
    // (🔑) KEY	[14D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F511, 0x0061 };
    uint32_t const ces[9] = { 0x14D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_270)
{
    // 1F511 0041;	
    // (🔑) KEY	[14D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F511, 0x0041 };
    uint32_t const ces[9] = { 0x14D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_271)
{
    // 1F511 0062;	
    // (🔑) KEY	[14D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F511, 0x0062 };
    uint32_t const ces[9] = { 0x14D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_272)
{
    // 1F512 0021;	
    // (🔒) LOCK	[14D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F512, 0x0021 };
    uint32_t const ces[9] = { 0x14D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_273)
{
    // 1F512 003F;	
    // (🔒) LOCK	[14D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F512, 0x003F };
    uint32_t const ces[9] = { 0x14D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_274)
{
    // 1F512 0061;	
    // (🔒) LOCK	[14D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F512, 0x0061 };
    uint32_t const ces[9] = { 0x14D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_275)
{
    // 1F512 0041;	
    // (🔒) LOCK	[14D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F512, 0x0041 };
    uint32_t const ces[9] = { 0x14D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_276)
{
    // 1F512 0062;	
    // (🔒) LOCK	[14D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F512, 0x0062 };
    uint32_t const ces[9] = { 0x14D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_277)
{
    // 1F513 0021;	
    // (🔓) OPEN LOCK	[14DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F513, 0x0021 };
    uint32_t const ces[9] = { 0x14DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_278)
{
    // 1F513 003F;	
    // (🔓) OPEN LOCK	[14DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F513, 0x003F };
    uint32_t const ces[9] = { 0x14DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_279)
{
    // 1F513 0061;	
    // (🔓) OPEN LOCK	[14DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F513, 0x0061 };
    uint32_t const ces[9] = { 0x14DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_280)
{
    // 1F513 0041;	
    // (🔓) OPEN LOCK	[14DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F513, 0x0041 };
    uint32_t const ces[9] = { 0x14DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_281)
{
    // 1F513 0062;	
    // (🔓) OPEN LOCK	[14DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F513, 0x0062 };
    uint32_t const ces[9] = { 0x14DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_282)
{
    // 1F514 0021;	
    // (🔔) BELL	[14DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F514, 0x0021 };
    uint32_t const ces[9] = { 0x14DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_283)
{
    // 1F514 003F;	
    // (🔔) BELL	[14DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F514, 0x003F };
    uint32_t const ces[9] = { 0x14DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_284)
{
    // 1F514 0061;	
    // (🔔) BELL	[14DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F514, 0x0061 };
    uint32_t const ces[9] = { 0x14DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_285)
{
    // 1F514 0041;	
    // (🔔) BELL	[14DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F514, 0x0041 };
    uint32_t const ces[9] = { 0x14DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_286)
{
    // 1F514 0062;	
    // (🔔) BELL	[14DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F514, 0x0062 };
    uint32_t const ces[9] = { 0x14DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_287)
{
    // 1F515 0021;	
    // (🔕) BELL WITH CANCELLATION STROKE	[14DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F515, 0x0021 };
    uint32_t const ces[9] = { 0x14DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_288)
{
    // 1F515 003F;	
    // (🔕) BELL WITH CANCELLATION STROKE	[14DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F515, 0x003F };
    uint32_t const ces[9] = { 0x14DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_289)
{
    // 1F515 0061;	
    // (🔕) BELL WITH CANCELLATION STROKE	[14DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F515, 0x0061 };
    uint32_t const ces[9] = { 0x14DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_290)
{
    // 1F515 0041;	
    // (🔕) BELL WITH CANCELLATION STROKE	[14DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F515, 0x0041 };
    uint32_t const ces[9] = { 0x14DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_291)
{
    // 1F515 0062;	
    // (🔕) BELL WITH CANCELLATION STROKE	[14DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F515, 0x0062 };
    uint32_t const ces[9] = { 0x14DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_292)
{
    // 1F516 0021;	
    // (🔖) BOOKMARK	[14DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F516, 0x0021 };
    uint32_t const ces[9] = { 0x14DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_293)
{
    // 1F516 003F;	
    // (🔖) BOOKMARK	[14DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F516, 0x003F };
    uint32_t const ces[9] = { 0x14DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_294)
{
    // 1F516 0061;	
    // (🔖) BOOKMARK	[14DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F516, 0x0061 };
    uint32_t const ces[9] = { 0x14DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_295)
{
    // 1F516 0041;	
    // (🔖) BOOKMARK	[14DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F516, 0x0041 };
    uint32_t const ces[9] = { 0x14DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_296)
{
    // 1F516 0062;	
    // (🔖) BOOKMARK	[14DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F516, 0x0062 };
    uint32_t const ces[9] = { 0x14DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_297)
{
    // 1F517 0021;	
    // (🔗) LINK SYMBOL	[14DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F517, 0x0021 };
    uint32_t const ces[9] = { 0x14DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_298)
{
    // 1F517 003F;	
    // (🔗) LINK SYMBOL	[14DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F517, 0x003F };
    uint32_t const ces[9] = { 0x14DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_299)
{
    // 1F517 0061;	
    // (🔗) LINK SYMBOL	[14DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F517, 0x0061 };
    uint32_t const ces[9] = { 0x14DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_300)
{
    // 1F517 0041;	
    // (🔗) LINK SYMBOL	[14DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F517, 0x0041 };
    uint32_t const ces[9] = { 0x14DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_301)
{
    // 1F517 0062;	
    // (🔗) LINK SYMBOL	[14DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F517, 0x0062 };
    uint32_t const ces[9] = { 0x14DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_302)
{
    // 1F518 0021;	
    // (🔘) RADIO BUTTON	[14DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F518, 0x0021 };
    uint32_t const ces[9] = { 0x14DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_303)
{
    // 1F518 003F;	
    // (🔘) RADIO BUTTON	[14DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F518, 0x003F };
    uint32_t const ces[9] = { 0x14DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_304)
{
    // 1F518 0061;	
    // (🔘) RADIO BUTTON	[14DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F518, 0x0061 };
    uint32_t const ces[9] = { 0x14DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_305)
{
    // 1F518 0041;	
    // (🔘) RADIO BUTTON	[14DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F518, 0x0041 };
    uint32_t const ces[9] = { 0x14DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_306)
{
    // 1F518 0062;	
    // (🔘) RADIO BUTTON	[14DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F518, 0x0062 };
    uint32_t const ces[9] = { 0x14DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_307)
{
    // 1F519 0021;	
    // (🔙) BACK WITH LEFTWARDS ARROW ABOVE	[14E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F519, 0x0021 };
    uint32_t const ces[9] = { 0x14E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_308)
{
    // 1F519 003F;	
    // (🔙) BACK WITH LEFTWARDS ARROW ABOVE	[14E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F519, 0x003F };
    uint32_t const ces[9] = { 0x14E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_309)
{
    // 1F519 0061;	
    // (🔙) BACK WITH LEFTWARDS ARROW ABOVE	[14E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F519, 0x0061 };
    uint32_t const ces[9] = { 0x14E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_310)
{
    // 1F519 0041;	
    // (🔙) BACK WITH LEFTWARDS ARROW ABOVE	[14E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F519, 0x0041 };
    uint32_t const ces[9] = { 0x14E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_311)
{
    // 1F519 0062;	
    // (🔙) BACK WITH LEFTWARDS ARROW ABOVE	[14E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F519, 0x0062 };
    uint32_t const ces[9] = { 0x14E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_312)
{
    // 1F51A 0021;	
    // (🔚) END WITH LEFTWARDS ARROW ABOVE	[14E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51A, 0x0021 };
    uint32_t const ces[9] = { 0x14E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_313)
{
    // 1F51A 003F;	
    // (🔚) END WITH LEFTWARDS ARROW ABOVE	[14E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51A, 0x003F };
    uint32_t const ces[9] = { 0x14E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_314)
{
    // 1F51A 0061;	
    // (🔚) END WITH LEFTWARDS ARROW ABOVE	[14E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51A, 0x0061 };
    uint32_t const ces[9] = { 0x14E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_315)
{
    // 1F51A 0041;	
    // (🔚) END WITH LEFTWARDS ARROW ABOVE	[14E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51A, 0x0041 };
    uint32_t const ces[9] = { 0x14E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_316)
{
    // 1F51A 0062;	
    // (🔚) END WITH LEFTWARDS ARROW ABOVE	[14E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51A, 0x0062 };
    uint32_t const ces[9] = { 0x14E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_317)
{
    // 1F51B 0021;	
    // (🔛) ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE	[14E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51B, 0x0021 };
    uint32_t const ces[9] = { 0x14E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_318)
{
    // 1F51B 003F;	
    // (🔛) ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE	[14E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51B, 0x003F };
    uint32_t const ces[9] = { 0x14E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_319)
{
    // 1F51B 0061;	
    // (🔛) ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE	[14E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51B, 0x0061 };
    uint32_t const ces[9] = { 0x14E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_320)
{
    // 1F51B 0041;	
    // (🔛) ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE	[14E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51B, 0x0041 };
    uint32_t const ces[9] = { 0x14E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_321)
{
    // 1F51B 0062;	
    // (🔛) ON WITH EXCLAMATION MARK WITH LEFT RIGHT ARROW ABOVE	[14E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51B, 0x0062 };
    uint32_t const ces[9] = { 0x14E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_322)
{
    // 1F51C 0021;	
    // (🔜) SOON WITH RIGHTWARDS ARROW ABOVE	[14E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51C, 0x0021 };
    uint32_t const ces[9] = { 0x14E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_323)
{
    // 1F51C 003F;	
    // (🔜) SOON WITH RIGHTWARDS ARROW ABOVE	[14E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51C, 0x003F };
    uint32_t const ces[9] = { 0x14E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_324)
{
    // 1F51C 0061;	
    // (🔜) SOON WITH RIGHTWARDS ARROW ABOVE	[14E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51C, 0x0061 };
    uint32_t const ces[9] = { 0x14E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_325)
{
    // 1F51C 0041;	
    // (🔜) SOON WITH RIGHTWARDS ARROW ABOVE	[14E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51C, 0x0041 };
    uint32_t const ces[9] = { 0x14E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_326)
{
    // 1F51C 0062;	
    // (🔜) SOON WITH RIGHTWARDS ARROW ABOVE	[14E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51C, 0x0062 };
    uint32_t const ces[9] = { 0x14E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_327)
{
    // 1F51D 0021;	
    // (🔝) TOP WITH UPWARDS ARROW ABOVE	[14E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51D, 0x0021 };
    uint32_t const ces[9] = { 0x14E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_328)
{
    // 1F51D 003F;	
    // (🔝) TOP WITH UPWARDS ARROW ABOVE	[14E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51D, 0x003F };
    uint32_t const ces[9] = { 0x14E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_329)
{
    // 1F51D 0061;	
    // (🔝) TOP WITH UPWARDS ARROW ABOVE	[14E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51D, 0x0061 };
    uint32_t const ces[9] = { 0x14E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_330)
{
    // 1F51D 0041;	
    // (🔝) TOP WITH UPWARDS ARROW ABOVE	[14E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51D, 0x0041 };
    uint32_t const ces[9] = { 0x14E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_331)
{
    // 1F51D 0062;	
    // (🔝) TOP WITH UPWARDS ARROW ABOVE	[14E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51D, 0x0062 };
    uint32_t const ces[9] = { 0x14E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_332)
{
    // 1F51E 0021;	
    // (🔞) NO ONE UNDER EIGHTEEN SYMBOL	[14E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51E, 0x0021 };
    uint32_t const ces[9] = { 0x14E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_333)
{
    // 1F51E 003F;	
    // (🔞) NO ONE UNDER EIGHTEEN SYMBOL	[14E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51E, 0x003F };
    uint32_t const ces[9] = { 0x14E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_334)
{
    // 1F51E 0061;	
    // (🔞) NO ONE UNDER EIGHTEEN SYMBOL	[14E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51E, 0x0061 };
    uint32_t const ces[9] = { 0x14E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_335)
{
    // 1F51E 0041;	
    // (🔞) NO ONE UNDER EIGHTEEN SYMBOL	[14E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51E, 0x0041 };
    uint32_t const ces[9] = { 0x14E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_336)
{
    // 1F51E 0062;	
    // (🔞) NO ONE UNDER EIGHTEEN SYMBOL	[14E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51E, 0x0062 };
    uint32_t const ces[9] = { 0x14E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_337)
{
    // 1F51F 0021;	
    // (🔟) KEYCAP TEN	[14E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51F, 0x0021 };
    uint32_t const ces[9] = { 0x14E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_338)
{
    // 1F51F 003F;	
    // (🔟) KEYCAP TEN	[14E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51F, 0x003F };
    uint32_t const ces[9] = { 0x14E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_339)
{
    // 1F51F 0061;	
    // (🔟) KEYCAP TEN	[14E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51F, 0x0061 };
    uint32_t const ces[9] = { 0x14E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_340)
{
    // 1F51F 0041;	
    // (🔟) KEYCAP TEN	[14E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F51F, 0x0041 };
    uint32_t const ces[9] = { 0x14E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_341)
{
    // 1F51F 0062;	
    // (🔟) KEYCAP TEN	[14E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F51F, 0x0062 };
    uint32_t const ces[9] = { 0x14E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_342)
{
    // 1F520 0021;	
    // (🔠) INPUT SYMBOL FOR LATIN CAPITAL LETTERS	[14E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F520, 0x0021 };
    uint32_t const ces[9] = { 0x14E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_343)
{
    // 1F520 003F;	
    // (🔠) INPUT SYMBOL FOR LATIN CAPITAL LETTERS	[14E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F520, 0x003F };
    uint32_t const ces[9] = { 0x14E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_344)
{
    // 1F520 0061;	
    // (🔠) INPUT SYMBOL FOR LATIN CAPITAL LETTERS	[14E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F520, 0x0061 };
    uint32_t const ces[9] = { 0x14E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_345)
{
    // 1F520 0041;	
    // (🔠) INPUT SYMBOL FOR LATIN CAPITAL LETTERS	[14E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F520, 0x0041 };
    uint32_t const ces[9] = { 0x14E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_346)
{
    // 1F520 0062;	
    // (🔠) INPUT SYMBOL FOR LATIN CAPITAL LETTERS	[14E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F520, 0x0062 };
    uint32_t const ces[9] = { 0x14E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_347)
{
    // 1F521 0021;	
    // (🔡) INPUT SYMBOL FOR LATIN SMALL LETTERS	[14E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F521, 0x0021 };
    uint32_t const ces[9] = { 0x14E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_348)
{
    // 1F521 003F;	
    // (🔡) INPUT SYMBOL FOR LATIN SMALL LETTERS	[14E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F521, 0x003F };
    uint32_t const ces[9] = { 0x14E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_349)
{
    // 1F521 0061;	
    // (🔡) INPUT SYMBOL FOR LATIN SMALL LETTERS	[14E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F521, 0x0061 };
    uint32_t const ces[9] = { 0x14E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_350)
{
    // 1F521 0041;	
    // (🔡) INPUT SYMBOL FOR LATIN SMALL LETTERS	[14E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F521, 0x0041 };
    uint32_t const ces[9] = { 0x14E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_351)
{
    // 1F521 0062;	
    // (🔡) INPUT SYMBOL FOR LATIN SMALL LETTERS	[14E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F521, 0x0062 };
    uint32_t const ces[9] = { 0x14E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_352)
{
    // 1F522 0021;	
    // (🔢) INPUT SYMBOL FOR NUMBERS	[14E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F522, 0x0021 };
    uint32_t const ces[9] = { 0x14E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_353)
{
    // 1F522 003F;	
    // (🔢) INPUT SYMBOL FOR NUMBERS	[14E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F522, 0x003F };
    uint32_t const ces[9] = { 0x14E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_354)
{
    // 1F522 0061;	
    // (🔢) INPUT SYMBOL FOR NUMBERS	[14E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F522, 0x0061 };
    uint32_t const ces[9] = { 0x14E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_355)
{
    // 1F522 0041;	
    // (🔢) INPUT SYMBOL FOR NUMBERS	[14E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F522, 0x0041 };
    uint32_t const ces[9] = { 0x14E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_356)
{
    // 1F522 0062;	
    // (🔢) INPUT SYMBOL FOR NUMBERS	[14E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F522, 0x0062 };
    uint32_t const ces[9] = { 0x14E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_357)
{
    // 1F523 0021;	
    // (🔣) INPUT SYMBOL FOR SYMBOLS	[14EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F523, 0x0021 };
    uint32_t const ces[9] = { 0x14EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_358)
{
    // 1F523 003F;	
    // (🔣) INPUT SYMBOL FOR SYMBOLS	[14EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F523, 0x003F };
    uint32_t const ces[9] = { 0x14EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_359)
{
    // 1F523 0061;	
    // (🔣) INPUT SYMBOL FOR SYMBOLS	[14EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F523, 0x0061 };
    uint32_t const ces[9] = { 0x14EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_360)
{
    // 1F523 0041;	
    // (🔣) INPUT SYMBOL FOR SYMBOLS	[14EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F523, 0x0041 };
    uint32_t const ces[9] = { 0x14EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_361)
{
    // 1F523 0062;	
    // (🔣) INPUT SYMBOL FOR SYMBOLS	[14EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F523, 0x0062 };
    uint32_t const ces[9] = { 0x14EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_362)
{
    // 1F524 0021;	
    // (🔤) INPUT SYMBOL FOR LATIN LETTERS	[14EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F524, 0x0021 };
    uint32_t const ces[9] = { 0x14EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_363)
{
    // 1F524 003F;	
    // (🔤) INPUT SYMBOL FOR LATIN LETTERS	[14EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F524, 0x003F };
    uint32_t const ces[9] = { 0x14EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_364)
{
    // 1F524 0061;	
    // (🔤) INPUT SYMBOL FOR LATIN LETTERS	[14EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F524, 0x0061 };
    uint32_t const ces[9] = { 0x14EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_365)
{
    // 1F524 0041;	
    // (🔤) INPUT SYMBOL FOR LATIN LETTERS	[14EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F524, 0x0041 };
    uint32_t const ces[9] = { 0x14EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_366)
{
    // 1F524 0062;	
    // (🔤) INPUT SYMBOL FOR LATIN LETTERS	[14EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F524, 0x0062 };
    uint32_t const ces[9] = { 0x14EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_367)
{
    // 1F525 0021;	
    // (🔥) FIRE	[14EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F525, 0x0021 };
    uint32_t const ces[9] = { 0x14EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_368)
{
    // 1F525 003F;	
    // (🔥) FIRE	[14EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F525, 0x003F };
    uint32_t const ces[9] = { 0x14EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_369)
{
    // 1F525 0061;	
    // (🔥) FIRE	[14EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F525, 0x0061 };
    uint32_t const ces[9] = { 0x14EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_370)
{
    // 1F525 0041;	
    // (🔥) FIRE	[14EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F525, 0x0041 };
    uint32_t const ces[9] = { 0x14EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_371)
{
    // 1F525 0062;	
    // (🔥) FIRE	[14EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F525, 0x0062 };
    uint32_t const ces[9] = { 0x14EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_372)
{
    // 1F526 0021;	
    // (🔦) ELECTRIC TORCH	[14ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F526, 0x0021 };
    uint32_t const ces[9] = { 0x14ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_373)
{
    // 1F526 003F;	
    // (🔦) ELECTRIC TORCH	[14ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F526, 0x003F };
    uint32_t const ces[9] = { 0x14ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_374)
{
    // 1F526 0061;	
    // (🔦) ELECTRIC TORCH	[14ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F526, 0x0061 };
    uint32_t const ces[9] = { 0x14ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_375)
{
    // 1F526 0041;	
    // (🔦) ELECTRIC TORCH	[14ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F526, 0x0041 };
    uint32_t const ces[9] = { 0x14ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_376)
{
    // 1F526 0062;	
    // (🔦) ELECTRIC TORCH	[14ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F526, 0x0062 };
    uint32_t const ces[9] = { 0x14ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_377)
{
    // 1F527 0021;	
    // (🔧) WRENCH	[14EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F527, 0x0021 };
    uint32_t const ces[9] = { 0x14EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_378)
{
    // 1F527 003F;	
    // (🔧) WRENCH	[14EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F527, 0x003F };
    uint32_t const ces[9] = { 0x14EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_379)
{
    // 1F527 0061;	
    // (🔧) WRENCH	[14EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F527, 0x0061 };
    uint32_t const ces[9] = { 0x14EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_380)
{
    // 1F527 0041;	
    // (🔧) WRENCH	[14EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F527, 0x0041 };
    uint32_t const ces[9] = { 0x14EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_381)
{
    // 1F527 0062;	
    // (🔧) WRENCH	[14EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F527, 0x0062 };
    uint32_t const ces[9] = { 0x14EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_382)
{
    // 1F528 0021;	
    // (🔨) HAMMER	[14EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F528, 0x0021 };
    uint32_t const ces[9] = { 0x14EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_383)
{
    // 1F528 003F;	
    // (🔨) HAMMER	[14EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F528, 0x003F };
    uint32_t const ces[9] = { 0x14EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_384)
{
    // 1F528 0061;	
    // (🔨) HAMMER	[14EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F528, 0x0061 };
    uint32_t const ces[9] = { 0x14EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_385)
{
    // 1F528 0041;	
    // (🔨) HAMMER	[14EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F528, 0x0041 };
    uint32_t const ces[9] = { 0x14EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_386)
{
    // 1F528 0062;	
    // (🔨) HAMMER	[14EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F528, 0x0062 };
    uint32_t const ces[9] = { 0x14EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_387)
{
    // 1F529 0021;	
    // (🔩) NUT AND BOLT	[14F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F529, 0x0021 };
    uint32_t const ces[9] = { 0x14F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_388)
{
    // 1F529 003F;	
    // (🔩) NUT AND BOLT	[14F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F529, 0x003F };
    uint32_t const ces[9] = { 0x14F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_389)
{
    // 1F529 0061;	
    // (🔩) NUT AND BOLT	[14F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F529, 0x0061 };
    uint32_t const ces[9] = { 0x14F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_390)
{
    // 1F529 0041;	
    // (🔩) NUT AND BOLT	[14F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F529, 0x0041 };
    uint32_t const ces[9] = { 0x14F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_391)
{
    // 1F529 0062;	
    // (🔩) NUT AND BOLT	[14F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F529, 0x0062 };
    uint32_t const ces[9] = { 0x14F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_392)
{
    // 1F52A 0021;	
    // (🔪) HOCHO	[14F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52A, 0x0021 };
    uint32_t const ces[9] = { 0x14F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_393)
{
    // 1F52A 003F;	
    // (🔪) HOCHO	[14F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52A, 0x003F };
    uint32_t const ces[9] = { 0x14F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_394)
{
    // 1F52A 0061;	
    // (🔪) HOCHO	[14F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52A, 0x0061 };
    uint32_t const ces[9] = { 0x14F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_395)
{
    // 1F52A 0041;	
    // (🔪) HOCHO	[14F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52A, 0x0041 };
    uint32_t const ces[9] = { 0x14F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_396)
{
    // 1F52A 0062;	
    // (🔪) HOCHO	[14F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52A, 0x0062 };
    uint32_t const ces[9] = { 0x14F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_397)
{
    // 1F52B 0021;	
    // (🔫) PISTOL	[14F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52B, 0x0021 };
    uint32_t const ces[9] = { 0x14F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_398)
{
    // 1F52B 003F;	
    // (🔫) PISTOL	[14F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52B, 0x003F };
    uint32_t const ces[9] = { 0x14F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_399)
{
    // 1F52B 0061;	
    // (🔫) PISTOL	[14F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52B, 0x0061 };
    uint32_t const ces[9] = { 0x14F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_400)
{
    // 1F52B 0041;	
    // (🔫) PISTOL	[14F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52B, 0x0041 };
    uint32_t const ces[9] = { 0x14F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_401)
{
    // 1F52B 0062;	
    // (🔫) PISTOL	[14F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52B, 0x0062 };
    uint32_t const ces[9] = { 0x14F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_402)
{
    // 1F52C 0021;	
    // (🔬) MICROSCOPE	[14F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52C, 0x0021 };
    uint32_t const ces[9] = { 0x14F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_403)
{
    // 1F52C 003F;	
    // (🔬) MICROSCOPE	[14F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52C, 0x003F };
    uint32_t const ces[9] = { 0x14F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_404)
{
    // 1F52C 0061;	
    // (🔬) MICROSCOPE	[14F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52C, 0x0061 };
    uint32_t const ces[9] = { 0x14F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_405)
{
    // 1F52C 0041;	
    // (🔬) MICROSCOPE	[14F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52C, 0x0041 };
    uint32_t const ces[9] = { 0x14F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_406)
{
    // 1F52C 0062;	
    // (🔬) MICROSCOPE	[14F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52C, 0x0062 };
    uint32_t const ces[9] = { 0x14F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_407)
{
    // 1F52D 0021;	
    // (🔭) TELESCOPE	[14F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52D, 0x0021 };
    uint32_t const ces[9] = { 0x14F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_408)
{
    // 1F52D 003F;	
    // (🔭) TELESCOPE	[14F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52D, 0x003F };
    uint32_t const ces[9] = { 0x14F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_409)
{
    // 1F52D 0061;	
    // (🔭) TELESCOPE	[14F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52D, 0x0061 };
    uint32_t const ces[9] = { 0x14F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_410)
{
    // 1F52D 0041;	
    // (🔭) TELESCOPE	[14F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52D, 0x0041 };
    uint32_t const ces[9] = { 0x14F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_411)
{
    // 1F52D 0062;	
    // (🔭) TELESCOPE	[14F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52D, 0x0062 };
    uint32_t const ces[9] = { 0x14F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_412)
{
    // 1F52E 0021;	
    // (🔮) CRYSTAL BALL	[14F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52E, 0x0021 };
    uint32_t const ces[9] = { 0x14F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_413)
{
    // 1F52E 003F;	
    // (🔮) CRYSTAL BALL	[14F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52E, 0x003F };
    uint32_t const ces[9] = { 0x14F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_414)
{
    // 1F52E 0061;	
    // (🔮) CRYSTAL BALL	[14F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52E, 0x0061 };
    uint32_t const ces[9] = { 0x14F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_415)
{
    // 1F52E 0041;	
    // (🔮) CRYSTAL BALL	[14F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52E, 0x0041 };
    uint32_t const ces[9] = { 0x14F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_416)
{
    // 1F52E 0062;	
    // (🔮) CRYSTAL BALL	[14F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52E, 0x0062 };
    uint32_t const ces[9] = { 0x14F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_417)
{
    // 1F52F 0021;	
    // (🔯) SIX POINTED STAR WITH MIDDLE DOT	[14F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52F, 0x0021 };
    uint32_t const ces[9] = { 0x14F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_418)
{
    // 1F52F 003F;	
    // (🔯) SIX POINTED STAR WITH MIDDLE DOT	[14F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52F, 0x003F };
    uint32_t const ces[9] = { 0x14F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_419)
{
    // 1F52F 0061;	
    // (🔯) SIX POINTED STAR WITH MIDDLE DOT	[14F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52F, 0x0061 };
    uint32_t const ces[9] = { 0x14F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_420)
{
    // 1F52F 0041;	
    // (🔯) SIX POINTED STAR WITH MIDDLE DOT	[14F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F52F, 0x0041 };
    uint32_t const ces[9] = { 0x14F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_421)
{
    // 1F52F 0062;	
    // (🔯) SIX POINTED STAR WITH MIDDLE DOT	[14F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F52F, 0x0062 };
    uint32_t const ces[9] = { 0x14F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_422)
{
    // 1F530 0021;	
    // (🔰) JAPANESE SYMBOL FOR BEGINNER	[14F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F530, 0x0021 };
    uint32_t const ces[9] = { 0x14F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_423)
{
    // 1F530 003F;	
    // (🔰) JAPANESE SYMBOL FOR BEGINNER	[14F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F530, 0x003F };
    uint32_t const ces[9] = { 0x14F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_424)
{
    // 1F530 0061;	
    // (🔰) JAPANESE SYMBOL FOR BEGINNER	[14F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F530, 0x0061 };
    uint32_t const ces[9] = { 0x14F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_425)
{
    // 1F530 0041;	
    // (🔰) JAPANESE SYMBOL FOR BEGINNER	[14F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F530, 0x0041 };
    uint32_t const ces[9] = { 0x14F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_426)
{
    // 1F530 0062;	
    // (🔰) JAPANESE SYMBOL FOR BEGINNER	[14F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F530, 0x0062 };
    uint32_t const ces[9] = { 0x14F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_427)
{
    // 1F531 0021;	
    // (🔱) TRIDENT EMBLEM	[14F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F531, 0x0021 };
    uint32_t const ces[9] = { 0x14F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_428)
{
    // 1F531 003F;	
    // (🔱) TRIDENT EMBLEM	[14F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F531, 0x003F };
    uint32_t const ces[9] = { 0x14F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_429)
{
    // 1F531 0061;	
    // (🔱) TRIDENT EMBLEM	[14F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F531, 0x0061 };
    uint32_t const ces[9] = { 0x14F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_430)
{
    // 1F531 0041;	
    // (🔱) TRIDENT EMBLEM	[14F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F531, 0x0041 };
    uint32_t const ces[9] = { 0x14F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_431)
{
    // 1F531 0062;	
    // (🔱) TRIDENT EMBLEM	[14F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F531, 0x0062 };
    uint32_t const ces[9] = { 0x14F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_432)
{
    // 1F532 0021;	
    // (🔲) BLACK SQUARE BUTTON	[14F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F532, 0x0021 };
    uint32_t const ces[9] = { 0x14F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_433)
{
    // 1F532 003F;	
    // (🔲) BLACK SQUARE BUTTON	[14F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F532, 0x003F };
    uint32_t const ces[9] = { 0x14F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_434)
{
    // 1F532 0061;	
    // (🔲) BLACK SQUARE BUTTON	[14F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F532, 0x0061 };
    uint32_t const ces[9] = { 0x14F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_435)
{
    // 1F532 0041;	
    // (🔲) BLACK SQUARE BUTTON	[14F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F532, 0x0041 };
    uint32_t const ces[9] = { 0x14F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_436)
{
    // 1F532 0062;	
    // (🔲) BLACK SQUARE BUTTON	[14F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F532, 0x0062 };
    uint32_t const ces[9] = { 0x14F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_437)
{
    // 1F533 0021;	
    // (🔳) WHITE SQUARE BUTTON	[14FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F533, 0x0021 };
    uint32_t const ces[9] = { 0x14FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_438)
{
    // 1F533 003F;	
    // (🔳) WHITE SQUARE BUTTON	[14FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F533, 0x003F };
    uint32_t const ces[9] = { 0x14FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_439)
{
    // 1F533 0061;	
    // (🔳) WHITE SQUARE BUTTON	[14FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F533, 0x0061 };
    uint32_t const ces[9] = { 0x14FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_440)
{
    // 1F533 0041;	
    // (🔳) WHITE SQUARE BUTTON	[14FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F533, 0x0041 };
    uint32_t const ces[9] = { 0x14FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_441)
{
    // 1F533 0062;	
    // (🔳) WHITE SQUARE BUTTON	[14FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F533, 0x0062 };
    uint32_t const ces[9] = { 0x14FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_442)
{
    // 1F534 0021;	
    // (🔴) LARGE RED CIRCLE	[14FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F534, 0x0021 };
    uint32_t const ces[9] = { 0x14FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_443)
{
    // 1F534 003F;	
    // (🔴) LARGE RED CIRCLE	[14FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F534, 0x003F };
    uint32_t const ces[9] = { 0x14FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_444)
{
    // 1F534 0061;	
    // (🔴) LARGE RED CIRCLE	[14FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F534, 0x0061 };
    uint32_t const ces[9] = { 0x14FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_445)
{
    // 1F534 0041;	
    // (🔴) LARGE RED CIRCLE	[14FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F534, 0x0041 };
    uint32_t const ces[9] = { 0x14FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_446)
{
    // 1F534 0062;	
    // (🔴) LARGE RED CIRCLE	[14FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F534, 0x0062 };
    uint32_t const ces[9] = { 0x14FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_447)
{
    // 1F535 0021;	
    // (🔵) LARGE BLUE CIRCLE	[14FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F535, 0x0021 };
    uint32_t const ces[9] = { 0x14FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_448)
{
    // 1F535 003F;	
    // (🔵) LARGE BLUE CIRCLE	[14FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F535, 0x003F };
    uint32_t const ces[9] = { 0x14FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_449)
{
    // 1F535 0061;	
    // (🔵) LARGE BLUE CIRCLE	[14FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F535, 0x0061 };
    uint32_t const ces[9] = { 0x14FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_450)
{
    // 1F535 0041;	
    // (🔵) LARGE BLUE CIRCLE	[14FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F535, 0x0041 };
    uint32_t const ces[9] = { 0x14FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_451)
{
    // 1F535 0062;	
    // (🔵) LARGE BLUE CIRCLE	[14FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F535, 0x0062 };
    uint32_t const ces[9] = { 0x14FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_452)
{
    // 1F536 0021;	
    // (🔶) LARGE ORANGE DIAMOND	[14FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F536, 0x0021 };
    uint32_t const ces[9] = { 0x14FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_453)
{
    // 1F536 003F;	
    // (🔶) LARGE ORANGE DIAMOND	[14FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F536, 0x003F };
    uint32_t const ces[9] = { 0x14FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_454)
{
    // 1F536 0061;	
    // (🔶) LARGE ORANGE DIAMOND	[14FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F536, 0x0061 };
    uint32_t const ces[9] = { 0x14FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_455)
{
    // 1F536 0041;	
    // (🔶) LARGE ORANGE DIAMOND	[14FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F536, 0x0041 };
    uint32_t const ces[9] = { 0x14FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_456)
{
    // 1F536 0062;	
    // (🔶) LARGE ORANGE DIAMOND	[14FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F536, 0x0062 };
    uint32_t const ces[9] = { 0x14FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_457)
{
    // 1F537 0021;	
    // (🔷) LARGE BLUE DIAMOND	[14FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F537, 0x0021 };
    uint32_t const ces[9] = { 0x14FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_458)
{
    // 1F537 003F;	
    // (🔷) LARGE BLUE DIAMOND	[14FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F537, 0x003F };
    uint32_t const ces[9] = { 0x14FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_459)
{
    // 1F537 0061;	
    // (🔷) LARGE BLUE DIAMOND	[14FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F537, 0x0061 };
    uint32_t const ces[9] = { 0x14FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_460)
{
    // 1F537 0041;	
    // (🔷) LARGE BLUE DIAMOND	[14FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F537, 0x0041 };
    uint32_t const ces[9] = { 0x14FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_461)
{
    // 1F537 0062;	
    // (🔷) LARGE BLUE DIAMOND	[14FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F537, 0x0062 };
    uint32_t const ces[9] = { 0x14FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_462)
{
    // 1F538 0021;	
    // (🔸) SMALL ORANGE DIAMOND	[14FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F538, 0x0021 };
    uint32_t const ces[9] = { 0x14FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_463)
{
    // 1F538 003F;	
    // (🔸) SMALL ORANGE DIAMOND	[14FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F538, 0x003F };
    uint32_t const ces[9] = { 0x14FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_464)
{
    // 1F538 0061;	
    // (🔸) SMALL ORANGE DIAMOND	[14FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F538, 0x0061 };
    uint32_t const ces[9] = { 0x14FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_465)
{
    // 1F538 0041;	
    // (🔸) SMALL ORANGE DIAMOND	[14FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F538, 0x0041 };
    uint32_t const ces[9] = { 0x14FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_466)
{
    // 1F538 0062;	
    // (🔸) SMALL ORANGE DIAMOND	[14FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F538, 0x0062 };
    uint32_t const ces[9] = { 0x14FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_467)
{
    // 1F539 0021;	
    // (🔹) SMALL BLUE DIAMOND	[1500 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F539, 0x0021 };
    uint32_t const ces[9] = { 0x1500, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_468)
{
    // 1F539 003F;	
    // (🔹) SMALL BLUE DIAMOND	[1500 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F539, 0x003F };
    uint32_t const ces[9] = { 0x1500, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_469)
{
    // 1F539 0061;	
    // (🔹) SMALL BLUE DIAMOND	[1500 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F539, 0x0061 };
    uint32_t const ces[9] = { 0x1500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_470)
{
    // 1F539 0041;	
    // (🔹) SMALL BLUE DIAMOND	[1500 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F539, 0x0041 };
    uint32_t const ces[9] = { 0x1500, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_471)
{
    // 1F539 0062;	
    // (🔹) SMALL BLUE DIAMOND	[1500 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F539, 0x0062 };
    uint32_t const ces[9] = { 0x1500, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_472)
{
    // 1F53A 0021;	
    // (🔺) UP-POINTING RED TRIANGLE	[1501 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53A, 0x0021 };
    uint32_t const ces[9] = { 0x1501, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_473)
{
    // 1F53A 003F;	
    // (🔺) UP-POINTING RED TRIANGLE	[1501 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53A, 0x003F };
    uint32_t const ces[9] = { 0x1501, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_474)
{
    // 1F53A 0061;	
    // (🔺) UP-POINTING RED TRIANGLE	[1501 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53A, 0x0061 };
    uint32_t const ces[9] = { 0x1501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_475)
{
    // 1F53A 0041;	
    // (🔺) UP-POINTING RED TRIANGLE	[1501 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53A, 0x0041 };
    uint32_t const ces[9] = { 0x1501, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_476)
{
    // 1F53A 0062;	
    // (🔺) UP-POINTING RED TRIANGLE	[1501 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53A, 0x0062 };
    uint32_t const ces[9] = { 0x1501, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_477)
{
    // 1F53B 0021;	
    // (🔻) DOWN-POINTING RED TRIANGLE	[1502 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53B, 0x0021 };
    uint32_t const ces[9] = { 0x1502, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_478)
{
    // 1F53B 003F;	
    // (🔻) DOWN-POINTING RED TRIANGLE	[1502 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53B, 0x003F };
    uint32_t const ces[9] = { 0x1502, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_479)
{
    // 1F53B 0061;	
    // (🔻) DOWN-POINTING RED TRIANGLE	[1502 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53B, 0x0061 };
    uint32_t const ces[9] = { 0x1502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_480)
{
    // 1F53B 0041;	
    // (🔻) DOWN-POINTING RED TRIANGLE	[1502 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53B, 0x0041 };
    uint32_t const ces[9] = { 0x1502, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_481)
{
    // 1F53B 0062;	
    // (🔻) DOWN-POINTING RED TRIANGLE	[1502 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53B, 0x0062 };
    uint32_t const ces[9] = { 0x1502, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_482)
{
    // 1F53C 0021;	
    // (🔼) UP-POINTING SMALL RED TRIANGLE	[1503 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53C, 0x0021 };
    uint32_t const ces[9] = { 0x1503, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_483)
{
    // 1F53C 003F;	
    // (🔼) UP-POINTING SMALL RED TRIANGLE	[1503 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53C, 0x003F };
    uint32_t const ces[9] = { 0x1503, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_484)
{
    // 1F53C 0061;	
    // (🔼) UP-POINTING SMALL RED TRIANGLE	[1503 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53C, 0x0061 };
    uint32_t const ces[9] = { 0x1503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_485)
{
    // 1F53C 0041;	
    // (🔼) UP-POINTING SMALL RED TRIANGLE	[1503 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53C, 0x0041 };
    uint32_t const ces[9] = { 0x1503, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_486)
{
    // 1F53C 0062;	
    // (🔼) UP-POINTING SMALL RED TRIANGLE	[1503 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53C, 0x0062 };
    uint32_t const ces[9] = { 0x1503, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_487)
{
    // 1F53D 0021;	
    // (🔽) DOWN-POINTING SMALL RED TRIANGLE	[1504 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53D, 0x0021 };
    uint32_t const ces[9] = { 0x1504, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_488)
{
    // 1F53D 003F;	
    // (🔽) DOWN-POINTING SMALL RED TRIANGLE	[1504 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53D, 0x003F };
    uint32_t const ces[9] = { 0x1504, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_489)
{
    // 1F53D 0061;	
    // (🔽) DOWN-POINTING SMALL RED TRIANGLE	[1504 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53D, 0x0061 };
    uint32_t const ces[9] = { 0x1504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_490)
{
    // 1F53D 0041;	
    // (🔽) DOWN-POINTING SMALL RED TRIANGLE	[1504 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53D, 0x0041 };
    uint32_t const ces[9] = { 0x1504, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_491)
{
    // 1F53D 0062;	
    // (🔽) DOWN-POINTING SMALL RED TRIANGLE	[1504 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53D, 0x0062 };
    uint32_t const ces[9] = { 0x1504, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_492)
{
    // 1F53E 0021;	
    // (🔾) LOWER RIGHT SHADOWED WHITE CIRCLE	[1505 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53E, 0x0021 };
    uint32_t const ces[9] = { 0x1505, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_493)
{
    // 1F53E 003F;	
    // (🔾) LOWER RIGHT SHADOWED WHITE CIRCLE	[1505 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53E, 0x003F };
    uint32_t const ces[9] = { 0x1505, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_494)
{
    // 1F53E 0061;	
    // (🔾) LOWER RIGHT SHADOWED WHITE CIRCLE	[1505 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53E, 0x0061 };
    uint32_t const ces[9] = { 0x1505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_495)
{
    // 1F53E 0041;	
    // (🔾) LOWER RIGHT SHADOWED WHITE CIRCLE	[1505 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F53E, 0x0041 };
    uint32_t const ces[9] = { 0x1505, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_496)
{
    // 1F53E 0062;	
    // (🔾) LOWER RIGHT SHADOWED WHITE CIRCLE	[1505 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53E, 0x0062 };
    uint32_t const ces[9] = { 0x1505, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_497)
{
    // 1F53F 0021;	
    // (🔿) UPPER RIGHT SHADOWED WHITE CIRCLE	[1506 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53F, 0x0021 };
    uint32_t const ces[9] = { 0x1506, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_498)
{
    // 1F53F 003F;	
    // (🔿) UPPER RIGHT SHADOWED WHITE CIRCLE	[1506 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53F, 0x003F };
    uint32_t const ces[9] = { 0x1506, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_060_499)
{
    // 1F53F 0061;	
    // (🔿) UPPER RIGHT SHADOWED WHITE CIRCLE	[1506 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F53F, 0x0061 };
    uint32_t const ces[9] = { 0x1506, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

