// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_165_000)
{
    // 0960 0041;	
    // (ॠ) DEVANAGARI LETTER VOCALIC RR	[26DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0960, 0x0041 };
    uint32_t const ces[9] = { 0x26DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_001)
{
    // 0960 0062;	
    // (ॠ) DEVANAGARI LETTER VOCALIC RR	[26DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0960, 0x0062 };
    uint32_t const ces[9] = { 0x26DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_002)
{
    // 090C 0021;	
    // (ऌ) DEVANAGARI LETTER VOCALIC L	[26DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090C, 0x0021 };
    uint32_t const ces[9] = { 0x26DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_003)
{
    // 090C 003F;	
    // (ऌ) DEVANAGARI LETTER VOCALIC L	[26DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090C, 0x003F };
    uint32_t const ces[9] = { 0x26DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_004)
{
    // 090C 0061;	
    // (ऌ) DEVANAGARI LETTER VOCALIC L	[26DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090C, 0x0061 };
    uint32_t const ces[9] = { 0x26DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_005)
{
    // 090C 0041;	
    // (ऌ) DEVANAGARI LETTER VOCALIC L	[26DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090C, 0x0041 };
    uint32_t const ces[9] = { 0x26DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_006)
{
    // 090C 0062;	
    // (ऌ) DEVANAGARI LETTER VOCALIC L	[26DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090C, 0x0062 };
    uint32_t const ces[9] = { 0x26DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_007)
{
    // 0961 0021;	
    // (ॡ) DEVANAGARI LETTER VOCALIC LL	[26DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0961, 0x0021 };
    uint32_t const ces[9] = { 0x26DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_008)
{
    // 0961 003F;	
    // (ॡ) DEVANAGARI LETTER VOCALIC LL	[26DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0961, 0x003F };
    uint32_t const ces[9] = { 0x26DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_009)
{
    // 0961 0061;	
    // (ॡ) DEVANAGARI LETTER VOCALIC LL	[26DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0961, 0x0061 };
    uint32_t const ces[9] = { 0x26DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_010)
{
    // 0961 0041;	
    // (ॡ) DEVANAGARI LETTER VOCALIC LL	[26DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0961, 0x0041 };
    uint32_t const ces[9] = { 0x26DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_011)
{
    // 0961 0062;	
    // (ॡ) DEVANAGARI LETTER VOCALIC LL	[26DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0961, 0x0062 };
    uint32_t const ces[9] = { 0x26DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_012)
{
    // 090D 0021;	
    // (ऍ) DEVANAGARI LETTER CANDRA E	[26DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090D, 0x0021 };
    uint32_t const ces[9] = { 0x26DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_013)
{
    // 090D 003F;	
    // (ऍ) DEVANAGARI LETTER CANDRA E	[26DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090D, 0x003F };
    uint32_t const ces[9] = { 0x26DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_014)
{
    // 090D 0061;	
    // (ऍ) DEVANAGARI LETTER CANDRA E	[26DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090D, 0x0061 };
    uint32_t const ces[9] = { 0x26DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_015)
{
    // 090D 0041;	
    // (ऍ) DEVANAGARI LETTER CANDRA E	[26DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090D, 0x0041 };
    uint32_t const ces[9] = { 0x26DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_016)
{
    // 090D 0062;	
    // (ऍ) DEVANAGARI LETTER CANDRA E	[26DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090D, 0x0062 };
    uint32_t const ces[9] = { 0x26DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_017)
{
    // 090E 0021;	
    // (ऎ) DEVANAGARI LETTER SHORT E	[26E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090E, 0x0021 };
    uint32_t const ces[9] = { 0x26E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_018)
{
    // 090E 003F;	
    // (ऎ) DEVANAGARI LETTER SHORT E	[26E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090E, 0x003F };
    uint32_t const ces[9] = { 0x26E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_019)
{
    // 090E 0061;	
    // (ऎ) DEVANAGARI LETTER SHORT E	[26E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090E, 0x0061 };
    uint32_t const ces[9] = { 0x26E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_020)
{
    // 090E 0041;	
    // (ऎ) DEVANAGARI LETTER SHORT E	[26E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090E, 0x0041 };
    uint32_t const ces[9] = { 0x26E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_021)
{
    // 090E 0062;	
    // (ऎ) DEVANAGARI LETTER SHORT E	[26E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090E, 0x0062 };
    uint32_t const ces[9] = { 0x26E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_022)
{
    // 090F 0021;	
    // (ए) DEVANAGARI LETTER E	[26E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090F, 0x0021 };
    uint32_t const ces[9] = { 0x26E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_023)
{
    // 090F 003F;	
    // (ए) DEVANAGARI LETTER E	[26E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090F, 0x003F };
    uint32_t const ces[9] = { 0x26E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_024)
{
    // 090F 0061;	
    // (ए) DEVANAGARI LETTER E	[26E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090F, 0x0061 };
    uint32_t const ces[9] = { 0x26E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_025)
{
    // 090F 0041;	
    // (ए) DEVANAGARI LETTER E	[26E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090F, 0x0041 };
    uint32_t const ces[9] = { 0x26E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_026)
{
    // 090F 0062;	
    // (ए) DEVANAGARI LETTER E	[26E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090F, 0x0062 };
    uint32_t const ces[9] = { 0x26E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_027)
{
    // 0910 0021;	
    // (ऐ) DEVANAGARI LETTER AI	[26E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0910, 0x0021 };
    uint32_t const ces[9] = { 0x26E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_028)
{
    // 0910 003F;	
    // (ऐ) DEVANAGARI LETTER AI	[26E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0910, 0x003F };
    uint32_t const ces[9] = { 0x26E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_029)
{
    // 0910 0061;	
    // (ऐ) DEVANAGARI LETTER AI	[26E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0910, 0x0061 };
    uint32_t const ces[9] = { 0x26E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_030)
{
    // 0910 0041;	
    // (ऐ) DEVANAGARI LETTER AI	[26E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0910, 0x0041 };
    uint32_t const ces[9] = { 0x26E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_031)
{
    // 0910 0062;	
    // (ऐ) DEVANAGARI LETTER AI	[26E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0910, 0x0062 };
    uint32_t const ces[9] = { 0x26E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_032)
{
    // 0911 0021;	
    // (ऑ) DEVANAGARI LETTER CANDRA O	[26E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0911, 0x0021 };
    uint32_t const ces[9] = { 0x26E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_033)
{
    // 0911 003F;	
    // (ऑ) DEVANAGARI LETTER CANDRA O	[26E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0911, 0x003F };
    uint32_t const ces[9] = { 0x26E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_034)
{
    // 0911 0061;	
    // (ऑ) DEVANAGARI LETTER CANDRA O	[26E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0911, 0x0061 };
    uint32_t const ces[9] = { 0x26E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_035)
{
    // 0911 0041;	
    // (ऑ) DEVANAGARI LETTER CANDRA O	[26E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0911, 0x0041 };
    uint32_t const ces[9] = { 0x26E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_036)
{
    // 0911 0062;	
    // (ऑ) DEVANAGARI LETTER CANDRA O	[26E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0911, 0x0062 };
    uint32_t const ces[9] = { 0x26E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_037)
{
    // 0912 0021;	
    // (ऒ) DEVANAGARI LETTER SHORT O	[26E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0912, 0x0021 };
    uint32_t const ces[9] = { 0x26E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_038)
{
    // 0912 003F;	
    // (ऒ) DEVANAGARI LETTER SHORT O	[26E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0912, 0x003F };
    uint32_t const ces[9] = { 0x26E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_039)
{
    // 0912 0061;	
    // (ऒ) DEVANAGARI LETTER SHORT O	[26E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0912, 0x0061 };
    uint32_t const ces[9] = { 0x26E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_040)
{
    // 0912 0041;	
    // (ऒ) DEVANAGARI LETTER SHORT O	[26E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0912, 0x0041 };
    uint32_t const ces[9] = { 0x26E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_041)
{
    // 0912 0062;	
    // (ऒ) DEVANAGARI LETTER SHORT O	[26E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0912, 0x0062 };
    uint32_t const ces[9] = { 0x26E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_042)
{
    // 0913 0021;	
    // (ओ) DEVANAGARI LETTER O	[26E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0913, 0x0021 };
    uint32_t const ces[9] = { 0x26E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_043)
{
    // 0913 003F;	
    // (ओ) DEVANAGARI LETTER O	[26E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0913, 0x003F };
    uint32_t const ces[9] = { 0x26E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_044)
{
    // 0913 0061;	
    // (ओ) DEVANAGARI LETTER O	[26E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0913, 0x0061 };
    uint32_t const ces[9] = { 0x26E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_045)
{
    // 0913 0041;	
    // (ओ) DEVANAGARI LETTER O	[26E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0913, 0x0041 };
    uint32_t const ces[9] = { 0x26E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_046)
{
    // 0913 0062;	
    // (ओ) DEVANAGARI LETTER O	[26E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0913, 0x0062 };
    uint32_t const ces[9] = { 0x26E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_047)
{
    // 0914 0021;	
    // (औ) DEVANAGARI LETTER AU	[26E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0914, 0x0021 };
    uint32_t const ces[9] = { 0x26E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_048)
{
    // 0914 003F;	
    // (औ) DEVANAGARI LETTER AU	[26E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0914, 0x003F };
    uint32_t const ces[9] = { 0x26E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_049)
{
    // 0914 0061;	
    // (औ) DEVANAGARI LETTER AU	[26E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0914, 0x0061 };
    uint32_t const ces[9] = { 0x26E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_050)
{
    // 0914 0041;	
    // (औ) DEVANAGARI LETTER AU	[26E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0914, 0x0041 };
    uint32_t const ces[9] = { 0x26E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_051)
{
    // 0914 0062;	
    // (औ) DEVANAGARI LETTER AU	[26E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0914, 0x0062 };
    uint32_t const ces[9] = { 0x26E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_052)
{
    // 0915 0334 093C;	
    // (क̴) DEVANAGARI LETTER KA, COMBINING TILDE OVERLAY	[26E7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0915, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26E7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_053)
{
    // 0915 093C 0334;	
    // (क़) DEVANAGARI LETTER KA, DEVANAGARI SIGN NUKTA	[26E7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0915, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26E7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_054)
{
    // 0958 0334;	
    // (क़) DEVANAGARI LETTER QA	[26E7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0958, 0x0334 };
    uint32_t const ces[10] = { 0x26E7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_055)
{
    // 0915 0021;	
    // (क) DEVANAGARI LETTER KA	[26E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0915, 0x0021 };
    uint32_t const ces[9] = { 0x26E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_056)
{
    // 0958 0021;	
    // (क़) DEVANAGARI LETTER QA	[26E7 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0958, 0x0021 };
    uint32_t const ces[11] = { 0x26E7, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_057)
{
    // 0915 003F;	
    // (क) DEVANAGARI LETTER KA	[26E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0915, 0x003F };
    uint32_t const ces[9] = { 0x26E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_058)
{
    // 0958 003F;	
    // (क़) DEVANAGARI LETTER QA	[26E7 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0958, 0x003F };
    uint32_t const ces[11] = { 0x26E7, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_059)
{
    // 0915 0061;	
    // (क) DEVANAGARI LETTER KA	[26E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0915, 0x0061 };
    uint32_t const ces[9] = { 0x26E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_060)
{
    // 0915 0041;	
    // (क) DEVANAGARI LETTER KA	[26E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0915, 0x0041 };
    uint32_t const ces[9] = { 0x26E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_061)
{
    // 0958 0061;	
    // (क़) DEVANAGARI LETTER QA	[26E7 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0958, 0x0061 };
    uint32_t const ces[11] = { 0x26E7, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_062)
{
    // 0958 0041;	
    // (क़) DEVANAGARI LETTER QA	[26E7 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0958, 0x0041 };
    uint32_t const ces[11] = { 0x26E7, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_063)
{
    // 0915 0062;	
    // (क) DEVANAGARI LETTER KA	[26E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0915, 0x0062 };
    uint32_t const ces[9] = { 0x26E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_064)
{
    // 0958 0062;	
    // (क़) DEVANAGARI LETTER QA	[26E7 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0958, 0x0062 };
    uint32_t const ces[11] = { 0x26E7, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_065)
{
    // 0916 0334 093C;	
    // (ख̴) DEVANAGARI LETTER KHA, COMBINING TILDE OVERLAY	[26E8 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0916, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26E8, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_066)
{
    // 0916 093C 0334;	
    // (ख़) DEVANAGARI LETTER KHA, DEVANAGARI SIGN NUKTA	[26E8 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0916, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26E8, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_067)
{
    // 0959 0334;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0959, 0x0334 };
    uint32_t const ces[10] = { 0x26E8, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_068)
{
    // 0916 0021;	
    // (ख) DEVANAGARI LETTER KHA	[26E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0916, 0x0021 };
    uint32_t const ces[9] = { 0x26E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_069)
{
    // 0959 0021;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0959, 0x0021 };
    uint32_t const ces[11] = { 0x26E8, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_070)
{
    // 0916 003F;	
    // (ख) DEVANAGARI LETTER KHA	[26E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0916, 0x003F };
    uint32_t const ces[9] = { 0x26E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_071)
{
    // 0959 003F;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0959, 0x003F };
    uint32_t const ces[11] = { 0x26E8, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_072)
{
    // 0916 0061;	
    // (ख) DEVANAGARI LETTER KHA	[26E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0916, 0x0061 };
    uint32_t const ces[9] = { 0x26E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_073)
{
    // 0916 0041;	
    // (ख) DEVANAGARI LETTER KHA	[26E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0916, 0x0041 };
    uint32_t const ces[9] = { 0x26E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_074)
{
    // 0959 0061;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0959, 0x0061 };
    uint32_t const ces[11] = { 0x26E8, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_075)
{
    // 0959 0041;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0959, 0x0041 };
    uint32_t const ces[11] = { 0x26E8, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_076)
{
    // 0916 0062;	
    // (ख) DEVANAGARI LETTER KHA	[26E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0916, 0x0062 };
    uint32_t const ces[9] = { 0x26E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_077)
{
    // 0959 0062;	
    // (ख़) DEVANAGARI LETTER KHHA	[26E8 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0959, 0x0062 };
    uint32_t const ces[11] = { 0x26E8, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_078)
{
    // 0917 0334 093C;	
    // (ग̴) DEVANAGARI LETTER GA, COMBINING TILDE OVERLAY	[26E9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0917, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26E9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_079)
{
    // 0917 093C 0334;	
    // (ग़) DEVANAGARI LETTER GA, DEVANAGARI SIGN NUKTA	[26E9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0917, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26E9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_080)
{
    // 095A 0334;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095A, 0x0334 };
    uint32_t const ces[10] = { 0x26E9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_081)
{
    // 0917 0021;	
    // (ग) DEVANAGARI LETTER GA	[26E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0917, 0x0021 };
    uint32_t const ces[9] = { 0x26E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_082)
{
    // 095A 0021;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095A, 0x0021 };
    uint32_t const ces[11] = { 0x26E9, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_083)
{
    // 0917 003F;	
    // (ग) DEVANAGARI LETTER GA	[26E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0917, 0x003F };
    uint32_t const ces[9] = { 0x26E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_084)
{
    // 095A 003F;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095A, 0x003F };
    uint32_t const ces[11] = { 0x26E9, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_085)
{
    // 0917 0061;	
    // (ग) DEVANAGARI LETTER GA	[26E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0917, 0x0061 };
    uint32_t const ces[9] = { 0x26E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_086)
{
    // 0917 0041;	
    // (ग) DEVANAGARI LETTER GA	[26E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0917, 0x0041 };
    uint32_t const ces[9] = { 0x26E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_087)
{
    // 095A 0061;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095A, 0x0061 };
    uint32_t const ces[11] = { 0x26E9, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_088)
{
    // 095A 0041;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095A, 0x0041 };
    uint32_t const ces[11] = { 0x26E9, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_089)
{
    // 0917 0062;	
    // (ग) DEVANAGARI LETTER GA	[26E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0917, 0x0062 };
    uint32_t const ces[9] = { 0x26E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_090)
{
    // 095A 0062;	
    // (ग़) DEVANAGARI LETTER GHHA	[26E9 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095A, 0x0062 };
    uint32_t const ces[11] = { 0x26E9, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_091)
{
    // 097B 0021;	
    // (ॻ) DEVANAGARI LETTER GGA	[26EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097B, 0x0021 };
    uint32_t const ces[9] = { 0x26EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_092)
{
    // 097B 003F;	
    // (ॻ) DEVANAGARI LETTER GGA	[26EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097B, 0x003F };
    uint32_t const ces[9] = { 0x26EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_093)
{
    // 097B 0061;	
    // (ॻ) DEVANAGARI LETTER GGA	[26EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097B, 0x0061 };
    uint32_t const ces[9] = { 0x26EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_094)
{
    // 097B 0041;	
    // (ॻ) DEVANAGARI LETTER GGA	[26EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097B, 0x0041 };
    uint32_t const ces[9] = { 0x26EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_095)
{
    // 097B 0062;	
    // (ॻ) DEVANAGARI LETTER GGA	[26EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097B, 0x0062 };
    uint32_t const ces[9] = { 0x26EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_096)
{
    // 0918 0021;	
    // (घ) DEVANAGARI LETTER GHA	[26EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0918, 0x0021 };
    uint32_t const ces[9] = { 0x26EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_097)
{
    // 0918 003F;	
    // (घ) DEVANAGARI LETTER GHA	[26EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0918, 0x003F };
    uint32_t const ces[9] = { 0x26EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_098)
{
    // 0918 0061;	
    // (घ) DEVANAGARI LETTER GHA	[26EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0918, 0x0061 };
    uint32_t const ces[9] = { 0x26EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_099)
{
    // 0918 0041;	
    // (घ) DEVANAGARI LETTER GHA	[26EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0918, 0x0041 };
    uint32_t const ces[9] = { 0x26EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_100)
{
    // 0918 0062;	
    // (घ) DEVANAGARI LETTER GHA	[26EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0918, 0x0062 };
    uint32_t const ces[9] = { 0x26EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_101)
{
    // 0919 0021;	
    // (ङ) DEVANAGARI LETTER NGA	[26EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0919, 0x0021 };
    uint32_t const ces[9] = { 0x26EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_102)
{
    // 0919 003F;	
    // (ङ) DEVANAGARI LETTER NGA	[26EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0919, 0x003F };
    uint32_t const ces[9] = { 0x26EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_103)
{
    // 0919 0061;	
    // (ङ) DEVANAGARI LETTER NGA	[26EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0919, 0x0061 };
    uint32_t const ces[9] = { 0x26EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_104)
{
    // 0919 0041;	
    // (ङ) DEVANAGARI LETTER NGA	[26EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0919, 0x0041 };
    uint32_t const ces[9] = { 0x26EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_105)
{
    // 0919 0062;	
    // (ङ) DEVANAGARI LETTER NGA	[26EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0919, 0x0062 };
    uint32_t const ces[9] = { 0x26EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_106)
{
    // 091A 0021;	
    // (च) DEVANAGARI LETTER CA	[26ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091A, 0x0021 };
    uint32_t const ces[9] = { 0x26ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_107)
{
    // 091A 003F;	
    // (च) DEVANAGARI LETTER CA	[26ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091A, 0x003F };
    uint32_t const ces[9] = { 0x26ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_108)
{
    // 091A 0061;	
    // (च) DEVANAGARI LETTER CA	[26ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091A, 0x0061 };
    uint32_t const ces[9] = { 0x26ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_109)
{
    // 091A 0041;	
    // (च) DEVANAGARI LETTER CA	[26ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091A, 0x0041 };
    uint32_t const ces[9] = { 0x26ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_110)
{
    // 091A 0062;	
    // (च) DEVANAGARI LETTER CA	[26ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091A, 0x0062 };
    uint32_t const ces[9] = { 0x26ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_111)
{
    // 091B 0021;	
    // (छ) DEVANAGARI LETTER CHA	[26EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091B, 0x0021 };
    uint32_t const ces[9] = { 0x26EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_112)
{
    // 091B 003F;	
    // (छ) DEVANAGARI LETTER CHA	[26EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091B, 0x003F };
    uint32_t const ces[9] = { 0x26EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_113)
{
    // 091B 0061;	
    // (छ) DEVANAGARI LETTER CHA	[26EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091B, 0x0061 };
    uint32_t const ces[9] = { 0x26EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_114)
{
    // 091B 0041;	
    // (छ) DEVANAGARI LETTER CHA	[26EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091B, 0x0041 };
    uint32_t const ces[9] = { 0x26EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_115)
{
    // 091B 0062;	
    // (छ) DEVANAGARI LETTER CHA	[26EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091B, 0x0062 };
    uint32_t const ces[9] = { 0x26EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_116)
{
    // 091C 0334 093C;	
    // (ज̴) DEVANAGARI LETTER JA, COMBINING TILDE OVERLAY	[26EF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x091C, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26EF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_117)
{
    // 091C 093C 0334;	
    // (ज़) DEVANAGARI LETTER JA, DEVANAGARI SIGN NUKTA	[26EF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x091C, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26EF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_118)
{
    // 095B 0334;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095B, 0x0334 };
    uint32_t const ces[10] = { 0x26EF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_119)
{
    // 091C 0021;	
    // (ज) DEVANAGARI LETTER JA	[26EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091C, 0x0021 };
    uint32_t const ces[9] = { 0x26EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_120)
{
    // 095B 0021;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095B, 0x0021 };
    uint32_t const ces[11] = { 0x26EF, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_121)
{
    // 091C 003F;	
    // (ज) DEVANAGARI LETTER JA	[26EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091C, 0x003F };
    uint32_t const ces[9] = { 0x26EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_122)
{
    // 095B 003F;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095B, 0x003F };
    uint32_t const ces[11] = { 0x26EF, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_123)
{
    // 091C 0061;	
    // (ज) DEVANAGARI LETTER JA	[26EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091C, 0x0061 };
    uint32_t const ces[9] = { 0x26EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_124)
{
    // 091C 0041;	
    // (ज) DEVANAGARI LETTER JA	[26EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091C, 0x0041 };
    uint32_t const ces[9] = { 0x26EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_125)
{
    // 095B 0061;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095B, 0x0061 };
    uint32_t const ces[11] = { 0x26EF, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_126)
{
    // 095B 0041;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095B, 0x0041 };
    uint32_t const ces[11] = { 0x26EF, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_127)
{
    // 091C 0062;	
    // (ज) DEVANAGARI LETTER JA	[26EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091C, 0x0062 };
    uint32_t const ces[9] = { 0x26EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_128)
{
    // 095B 0062;	
    // (ज़) DEVANAGARI LETTER ZA	[26EF 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095B, 0x0062 };
    uint32_t const ces[11] = { 0x26EF, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_129)
{
    // 0979 0021;	
    // (ॹ) DEVANAGARI LETTER ZHA	[26F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0979, 0x0021 };
    uint32_t const ces[9] = { 0x26F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_130)
{
    // 0979 003F;	
    // (ॹ) DEVANAGARI LETTER ZHA	[26F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0979, 0x003F };
    uint32_t const ces[9] = { 0x26F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_131)
{
    // 0979 0061;	
    // (ॹ) DEVANAGARI LETTER ZHA	[26F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0979, 0x0061 };
    uint32_t const ces[9] = { 0x26F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_132)
{
    // 0979 0041;	
    // (ॹ) DEVANAGARI LETTER ZHA	[26F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0979, 0x0041 };
    uint32_t const ces[9] = { 0x26F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_133)
{
    // 0979 0062;	
    // (ॹ) DEVANAGARI LETTER ZHA	[26F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0979, 0x0062 };
    uint32_t const ces[9] = { 0x26F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_134)
{
    // 097C 0021;	
    // (ॼ) DEVANAGARI LETTER JJA	[26F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097C, 0x0021 };
    uint32_t const ces[9] = { 0x26F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_135)
{
    // 097C 003F;	
    // (ॼ) DEVANAGARI LETTER JJA	[26F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097C, 0x003F };
    uint32_t const ces[9] = { 0x26F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_136)
{
    // 097C 0061;	
    // (ॼ) DEVANAGARI LETTER JJA	[26F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097C, 0x0061 };
    uint32_t const ces[9] = { 0x26F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_137)
{
    // 097C 0041;	
    // (ॼ) DEVANAGARI LETTER JJA	[26F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097C, 0x0041 };
    uint32_t const ces[9] = { 0x26F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_138)
{
    // 097C 0062;	
    // (ॼ) DEVANAGARI LETTER JJA	[26F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097C, 0x0062 };
    uint32_t const ces[9] = { 0x26F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_139)
{
    // 091D 0021;	
    // (झ) DEVANAGARI LETTER JHA	[26F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091D, 0x0021 };
    uint32_t const ces[9] = { 0x26F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_140)
{
    // 091D 003F;	
    // (झ) DEVANAGARI LETTER JHA	[26F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091D, 0x003F };
    uint32_t const ces[9] = { 0x26F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_141)
{
    // 091D 0061;	
    // (झ) DEVANAGARI LETTER JHA	[26F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091D, 0x0061 };
    uint32_t const ces[9] = { 0x26F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_142)
{
    // 091D 0041;	
    // (झ) DEVANAGARI LETTER JHA	[26F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091D, 0x0041 };
    uint32_t const ces[9] = { 0x26F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_143)
{
    // 091D 0062;	
    // (झ) DEVANAGARI LETTER JHA	[26F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091D, 0x0062 };
    uint32_t const ces[9] = { 0x26F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_144)
{
    // 091E 0021;	
    // (ञ) DEVANAGARI LETTER NYA	[26F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091E, 0x0021 };
    uint32_t const ces[9] = { 0x26F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_145)
{
    // 091E 003F;	
    // (ञ) DEVANAGARI LETTER NYA	[26F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091E, 0x003F };
    uint32_t const ces[9] = { 0x26F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_146)
{
    // 091E 0061;	
    // (ञ) DEVANAGARI LETTER NYA	[26F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091E, 0x0061 };
    uint32_t const ces[9] = { 0x26F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_147)
{
    // 091E 0041;	
    // (ञ) DEVANAGARI LETTER NYA	[26F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091E, 0x0041 };
    uint32_t const ces[9] = { 0x26F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_148)
{
    // 091E 0062;	
    // (ञ) DEVANAGARI LETTER NYA	[26F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091E, 0x0062 };
    uint32_t const ces[9] = { 0x26F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_149)
{
    // 091F 0021;	
    // (ट) DEVANAGARI LETTER TTA	[26F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091F, 0x0021 };
    uint32_t const ces[9] = { 0x26F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_150)
{
    // 091F 003F;	
    // (ट) DEVANAGARI LETTER TTA	[26F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091F, 0x003F };
    uint32_t const ces[9] = { 0x26F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_151)
{
    // 091F 0061;	
    // (ट) DEVANAGARI LETTER TTA	[26F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091F, 0x0061 };
    uint32_t const ces[9] = { 0x26F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_152)
{
    // 091F 0041;	
    // (ट) DEVANAGARI LETTER TTA	[26F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x091F, 0x0041 };
    uint32_t const ces[9] = { 0x26F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_153)
{
    // 091F 0062;	
    // (ट) DEVANAGARI LETTER TTA	[26F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x091F, 0x0062 };
    uint32_t const ces[9] = { 0x26F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_154)
{
    // 0920 0021;	
    // (ठ) DEVANAGARI LETTER TTHA	[26F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0920, 0x0021 };
    uint32_t const ces[9] = { 0x26F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_155)
{
    // 0920 003F;	
    // (ठ) DEVANAGARI LETTER TTHA	[26F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0920, 0x003F };
    uint32_t const ces[9] = { 0x26F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_156)
{
    // 0920 0061;	
    // (ठ) DEVANAGARI LETTER TTHA	[26F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0920, 0x0061 };
    uint32_t const ces[9] = { 0x26F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_157)
{
    // 0920 0041;	
    // (ठ) DEVANAGARI LETTER TTHA	[26F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0920, 0x0041 };
    uint32_t const ces[9] = { 0x26F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_158)
{
    // 0920 0062;	
    // (ठ) DEVANAGARI LETTER TTHA	[26F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0920, 0x0062 };
    uint32_t const ces[9] = { 0x26F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_159)
{
    // 0978 0021;	
    // (ॸ) DEVANAGARI LETTER MARWARI DDA	[26F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0978, 0x0021 };
    uint32_t const ces[9] = { 0x26F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_160)
{
    // 0978 003F;	
    // (ॸ) DEVANAGARI LETTER MARWARI DDA	[26F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0978, 0x003F };
    uint32_t const ces[9] = { 0x26F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_161)
{
    // 0978 0061;	
    // (ॸ) DEVANAGARI LETTER MARWARI DDA	[26F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0978, 0x0061 };
    uint32_t const ces[9] = { 0x26F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_162)
{
    // 0978 0041;	
    // (ॸ) DEVANAGARI LETTER MARWARI DDA	[26F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0978, 0x0041 };
    uint32_t const ces[9] = { 0x26F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_163)
{
    // 0978 0062;	
    // (ॸ) DEVANAGARI LETTER MARWARI DDA	[26F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0978, 0x0062 };
    uint32_t const ces[9] = { 0x26F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_164)
{
    // 0921 0334 093C;	
    // (ड̴) DEVANAGARI LETTER DDA, COMBINING TILDE OVERLAY	[26F7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0921, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26F7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_165)
{
    // 0921 093C 0334;	
    // (ड़) DEVANAGARI LETTER DDA, DEVANAGARI SIGN NUKTA	[26F7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0921, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26F7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_166)
{
    // 095C 0334;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095C, 0x0334 };
    uint32_t const ces[10] = { 0x26F7, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_167)
{
    // 0921 0021;	
    // (ड) DEVANAGARI LETTER DDA	[26F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0921, 0x0021 };
    uint32_t const ces[9] = { 0x26F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_168)
{
    // 095C 0021;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095C, 0x0021 };
    uint32_t const ces[11] = { 0x26F7, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_169)
{
    // 0921 003F;	
    // (ड) DEVANAGARI LETTER DDA	[26F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0921, 0x003F };
    uint32_t const ces[9] = { 0x26F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_170)
{
    // 095C 003F;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095C, 0x003F };
    uint32_t const ces[11] = { 0x26F7, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_171)
{
    // 0921 0061;	
    // (ड) DEVANAGARI LETTER DDA	[26F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0921, 0x0061 };
    uint32_t const ces[9] = { 0x26F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_172)
{
    // 0921 0041;	
    // (ड) DEVANAGARI LETTER DDA	[26F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0921, 0x0041 };
    uint32_t const ces[9] = { 0x26F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_173)
{
    // 095C 0061;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095C, 0x0061 };
    uint32_t const ces[11] = { 0x26F7, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_174)
{
    // 095C 0041;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095C, 0x0041 };
    uint32_t const ces[11] = { 0x26F7, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_175)
{
    // 0921 0062;	
    // (ड) DEVANAGARI LETTER DDA	[26F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0921, 0x0062 };
    uint32_t const ces[9] = { 0x26F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_176)
{
    // 095C 0062;	
    // (ड़) DEVANAGARI LETTER DDDHA	[26F7 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095C, 0x0062 };
    uint32_t const ces[11] = { 0x26F7, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_177)
{
    // 097E 0021;	
    // (ॾ) DEVANAGARI LETTER DDDA	[26F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097E, 0x0021 };
    uint32_t const ces[9] = { 0x26F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_178)
{
    // 097E 003F;	
    // (ॾ) DEVANAGARI LETTER DDDA	[26F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097E, 0x003F };
    uint32_t const ces[9] = { 0x26F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_179)
{
    // 097E 0061;	
    // (ॾ) DEVANAGARI LETTER DDDA	[26F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097E, 0x0061 };
    uint32_t const ces[9] = { 0x26F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_180)
{
    // 097E 0041;	
    // (ॾ) DEVANAGARI LETTER DDDA	[26F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097E, 0x0041 };
    uint32_t const ces[9] = { 0x26F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_181)
{
    // 097E 0062;	
    // (ॾ) DEVANAGARI LETTER DDDA	[26F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097E, 0x0062 };
    uint32_t const ces[9] = { 0x26F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_182)
{
    // 0922 0334 093C;	
    // (ढ̴) DEVANAGARI LETTER DDHA, COMBINING TILDE OVERLAY	[26F9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0922, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26F9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_183)
{
    // 0922 093C 0334;	
    // (ढ़) DEVANAGARI LETTER DDHA, DEVANAGARI SIGN NUKTA	[26F9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0922, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26F9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_184)
{
    // 095D 0334;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095D, 0x0334 };
    uint32_t const ces[10] = { 0x26F9, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_185)
{
    // 0922 0021;	
    // (ढ) DEVANAGARI LETTER DDHA	[26F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0922, 0x0021 };
    uint32_t const ces[9] = { 0x26F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_186)
{
    // 095D 0021;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095D, 0x0021 };
    uint32_t const ces[11] = { 0x26F9, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_187)
{
    // 0922 003F;	
    // (ढ) DEVANAGARI LETTER DDHA	[26F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0922, 0x003F };
    uint32_t const ces[9] = { 0x26F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_188)
{
    // 095D 003F;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095D, 0x003F };
    uint32_t const ces[11] = { 0x26F9, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_189)
{
    // 0922 0061;	
    // (ढ) DEVANAGARI LETTER DDHA	[26F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0922, 0x0061 };
    uint32_t const ces[9] = { 0x26F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_190)
{
    // 0922 0041;	
    // (ढ) DEVANAGARI LETTER DDHA	[26F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0922, 0x0041 };
    uint32_t const ces[9] = { 0x26F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_191)
{
    // 095D 0061;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095D, 0x0061 };
    uint32_t const ces[11] = { 0x26F9, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_192)
{
    // 095D 0041;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095D, 0x0041 };
    uint32_t const ces[11] = { 0x26F9, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_193)
{
    // 0922 0062;	
    // (ढ) DEVANAGARI LETTER DDHA	[26F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0922, 0x0062 };
    uint32_t const ces[9] = { 0x26F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_194)
{
    // 095D 0062;	
    // (ढ़) DEVANAGARI LETTER RHA	[26F9 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095D, 0x0062 };
    uint32_t const ces[11] = { 0x26F9, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_195)
{
    // 0923 0021;	
    // (ण) DEVANAGARI LETTER NNA	[26FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0923, 0x0021 };
    uint32_t const ces[9] = { 0x26FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_196)
{
    // 0923 003F;	
    // (ण) DEVANAGARI LETTER NNA	[26FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0923, 0x003F };
    uint32_t const ces[9] = { 0x26FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_197)
{
    // 0923 0061;	
    // (ण) DEVANAGARI LETTER NNA	[26FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0923, 0x0061 };
    uint32_t const ces[9] = { 0x26FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_198)
{
    // 0923 0041;	
    // (ण) DEVANAGARI LETTER NNA	[26FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0923, 0x0041 };
    uint32_t const ces[9] = { 0x26FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_199)
{
    // 0923 0062;	
    // (ण) DEVANAGARI LETTER NNA	[26FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0923, 0x0062 };
    uint32_t const ces[9] = { 0x26FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_200)
{
    // 0924 0021;	
    // (त) DEVANAGARI LETTER TA	[26FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0924, 0x0021 };
    uint32_t const ces[9] = { 0x26FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_201)
{
    // 0924 003F;	
    // (त) DEVANAGARI LETTER TA	[26FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0924, 0x003F };
    uint32_t const ces[9] = { 0x26FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_202)
{
    // 0924 0061;	
    // (त) DEVANAGARI LETTER TA	[26FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0924, 0x0061 };
    uint32_t const ces[9] = { 0x26FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_203)
{
    // 0924 0041;	
    // (त) DEVANAGARI LETTER TA	[26FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0924, 0x0041 };
    uint32_t const ces[9] = { 0x26FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_204)
{
    // 0924 0062;	
    // (त) DEVANAGARI LETTER TA	[26FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0924, 0x0062 };
    uint32_t const ces[9] = { 0x26FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_205)
{
    // 0925 0021;	
    // (थ) DEVANAGARI LETTER THA	[26FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0925, 0x0021 };
    uint32_t const ces[9] = { 0x26FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_206)
{
    // 0925 003F;	
    // (थ) DEVANAGARI LETTER THA	[26FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0925, 0x003F };
    uint32_t const ces[9] = { 0x26FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_207)
{
    // 0925 0061;	
    // (थ) DEVANAGARI LETTER THA	[26FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0925, 0x0061 };
    uint32_t const ces[9] = { 0x26FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_208)
{
    // 0925 0041;	
    // (थ) DEVANAGARI LETTER THA	[26FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0925, 0x0041 };
    uint32_t const ces[9] = { 0x26FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_209)
{
    // 0925 0062;	
    // (थ) DEVANAGARI LETTER THA	[26FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0925, 0x0062 };
    uint32_t const ces[9] = { 0x26FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_210)
{
    // 0926 0021;	
    // (द) DEVANAGARI LETTER DA	[26FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0926, 0x0021 };
    uint32_t const ces[9] = { 0x26FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_211)
{
    // 0926 003F;	
    // (द) DEVANAGARI LETTER DA	[26FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0926, 0x003F };
    uint32_t const ces[9] = { 0x26FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_212)
{
    // 0926 0061;	
    // (द) DEVANAGARI LETTER DA	[26FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0926, 0x0061 };
    uint32_t const ces[9] = { 0x26FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_213)
{
    // 0926 0041;	
    // (द) DEVANAGARI LETTER DA	[26FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0926, 0x0041 };
    uint32_t const ces[9] = { 0x26FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_214)
{
    // 0926 0062;	
    // (द) DEVANAGARI LETTER DA	[26FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0926, 0x0062 };
    uint32_t const ces[9] = { 0x26FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_215)
{
    // 0927 0021;	
    // (ध) DEVANAGARI LETTER DHA	[26FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0927, 0x0021 };
    uint32_t const ces[9] = { 0x26FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_216)
{
    // 0927 003F;	
    // (ध) DEVANAGARI LETTER DHA	[26FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0927, 0x003F };
    uint32_t const ces[9] = { 0x26FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_217)
{
    // 0927 0061;	
    // (ध) DEVANAGARI LETTER DHA	[26FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0927, 0x0061 };
    uint32_t const ces[9] = { 0x26FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_218)
{
    // 0927 0041;	
    // (ध) DEVANAGARI LETTER DHA	[26FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0927, 0x0041 };
    uint32_t const ces[9] = { 0x26FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_219)
{
    // 0927 0062;	
    // (ध) DEVANAGARI LETTER DHA	[26FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0927, 0x0062 };
    uint32_t const ces[9] = { 0x26FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_220)
{
    // 0928 0334 093C;	
    // (न̴) DEVANAGARI LETTER NA, COMBINING TILDE OVERLAY	[26FF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0928, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x26FF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_221)
{
    // 0928 093C 0334;	
    // (ऩ) DEVANAGARI LETTER NA, DEVANAGARI SIGN NUKTA	[26FF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0928, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x26FF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_222)
{
    // 0929 0334;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0929, 0x0334 };
    uint32_t const ces[10] = { 0x26FF, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_223)
{
    // 0928 0021;	
    // (न) DEVANAGARI LETTER NA	[26FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0928, 0x0021 };
    uint32_t const ces[9] = { 0x26FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_224)
{
    // 0929 0021;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0929, 0x0021 };
    uint32_t const ces[11] = { 0x26FF, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_225)
{
    // 0928 003F;	
    // (न) DEVANAGARI LETTER NA	[26FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0928, 0x003F };
    uint32_t const ces[9] = { 0x26FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_226)
{
    // 0929 003F;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0929, 0x003F };
    uint32_t const ces[11] = { 0x26FF, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_227)
{
    // 0928 0061;	
    // (न) DEVANAGARI LETTER NA	[26FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0928, 0x0061 };
    uint32_t const ces[9] = { 0x26FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_228)
{
    // 0928 0041;	
    // (न) DEVANAGARI LETTER NA	[26FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0928, 0x0041 };
    uint32_t const ces[9] = { 0x26FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_229)
{
    // 0929 0061;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0929, 0x0061 };
    uint32_t const ces[11] = { 0x26FF, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_230)
{
    // 0929 0041;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0929, 0x0041 };
    uint32_t const ces[11] = { 0x26FF, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_231)
{
    // 0928 0062;	
    // (न) DEVANAGARI LETTER NA	[26FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0928, 0x0062 };
    uint32_t const ces[9] = { 0x26FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_232)
{
    // 0929 0062;	
    // (ऩ) DEVANAGARI LETTER NNNA	[26FF 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0929, 0x0062 };
    uint32_t const ces[11] = { 0x26FF, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_233)
{
    // 092A 0021;	
    // (प) DEVANAGARI LETTER PA	[2700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092A, 0x0021 };
    uint32_t const ces[9] = { 0x2700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_234)
{
    // 092A 003F;	
    // (प) DEVANAGARI LETTER PA	[2700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092A, 0x003F };
    uint32_t const ces[9] = { 0x2700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_235)
{
    // 092A 0061;	
    // (प) DEVANAGARI LETTER PA	[2700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092A, 0x0061 };
    uint32_t const ces[9] = { 0x2700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_236)
{
    // 092A 0041;	
    // (प) DEVANAGARI LETTER PA	[2700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092A, 0x0041 };
    uint32_t const ces[9] = { 0x2700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_237)
{
    // 092A 0062;	
    // (प) DEVANAGARI LETTER PA	[2700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092A, 0x0062 };
    uint32_t const ces[9] = { 0x2700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_238)
{
    // 092B 0334 093C;	
    // (फ̴) DEVANAGARI LETTER PHA, COMBINING TILDE OVERLAY	[2701 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x092B, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x2701, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_239)
{
    // 092B 093C 0334;	
    // (फ़) DEVANAGARI LETTER PHA, DEVANAGARI SIGN NUKTA	[2701 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x092B, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x2701, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_240)
{
    // 095E 0334;	
    // (फ़) DEVANAGARI LETTER FA	[2701 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095E, 0x0334 };
    uint32_t const ces[10] = { 0x2701, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_241)
{
    // 092B 0021;	
    // (फ) DEVANAGARI LETTER PHA	[2701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092B, 0x0021 };
    uint32_t const ces[9] = { 0x2701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_242)
{
    // 095E 0021;	
    // (फ़) DEVANAGARI LETTER FA	[2701 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095E, 0x0021 };
    uint32_t const ces[11] = { 0x2701, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_243)
{
    // 092B 003F;	
    // (फ) DEVANAGARI LETTER PHA	[2701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092B, 0x003F };
    uint32_t const ces[9] = { 0x2701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_244)
{
    // 095E 003F;	
    // (फ़) DEVANAGARI LETTER FA	[2701 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095E, 0x003F };
    uint32_t const ces[11] = { 0x2701, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_245)
{
    // 092B 0061;	
    // (फ) DEVANAGARI LETTER PHA	[2701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092B, 0x0061 };
    uint32_t const ces[9] = { 0x2701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_246)
{
    // 092B 0041;	
    // (फ) DEVANAGARI LETTER PHA	[2701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092B, 0x0041 };
    uint32_t const ces[9] = { 0x2701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_247)
{
    // 095E 0061;	
    // (फ़) DEVANAGARI LETTER FA	[2701 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095E, 0x0061 };
    uint32_t const ces[11] = { 0x2701, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_248)
{
    // 095E 0041;	
    // (फ़) DEVANAGARI LETTER FA	[2701 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095E, 0x0041 };
    uint32_t const ces[11] = { 0x2701, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_249)
{
    // 092B 0062;	
    // (फ) DEVANAGARI LETTER PHA	[2701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092B, 0x0062 };
    uint32_t const ces[9] = { 0x2701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_250)
{
    // 095E 0062;	
    // (फ़) DEVANAGARI LETTER FA	[2701 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095E, 0x0062 };
    uint32_t const ces[11] = { 0x2701, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_251)
{
    // 092C 0021;	
    // (ब) DEVANAGARI LETTER BA	[2702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092C, 0x0021 };
    uint32_t const ces[9] = { 0x2702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_252)
{
    // 092C 003F;	
    // (ब) DEVANAGARI LETTER BA	[2702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092C, 0x003F };
    uint32_t const ces[9] = { 0x2702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_253)
{
    // 092C 0061;	
    // (ब) DEVANAGARI LETTER BA	[2702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092C, 0x0061 };
    uint32_t const ces[9] = { 0x2702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_254)
{
    // 092C 0041;	
    // (ब) DEVANAGARI LETTER BA	[2702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092C, 0x0041 };
    uint32_t const ces[9] = { 0x2702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_255)
{
    // 092C 0062;	
    // (ब) DEVANAGARI LETTER BA	[2702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092C, 0x0062 };
    uint32_t const ces[9] = { 0x2702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_256)
{
    // 097F 0021;	
    // (ॿ) DEVANAGARI LETTER BBA	[2703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097F, 0x0021 };
    uint32_t const ces[9] = { 0x2703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_257)
{
    // 097F 003F;	
    // (ॿ) DEVANAGARI LETTER BBA	[2703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097F, 0x003F };
    uint32_t const ces[9] = { 0x2703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_258)
{
    // 097F 0061;	
    // (ॿ) DEVANAGARI LETTER BBA	[2703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097F, 0x0061 };
    uint32_t const ces[9] = { 0x2703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_259)
{
    // 097F 0041;	
    // (ॿ) DEVANAGARI LETTER BBA	[2703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097F, 0x0041 };
    uint32_t const ces[9] = { 0x2703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_260)
{
    // 097F 0062;	
    // (ॿ) DEVANAGARI LETTER BBA	[2703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097F, 0x0062 };
    uint32_t const ces[9] = { 0x2703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_261)
{
    // 092D 0021;	
    // (भ) DEVANAGARI LETTER BHA	[2704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092D, 0x0021 };
    uint32_t const ces[9] = { 0x2704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_262)
{
    // 092D 003F;	
    // (भ) DEVANAGARI LETTER BHA	[2704 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092D, 0x003F };
    uint32_t const ces[9] = { 0x2704, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_263)
{
    // 092D 0061;	
    // (भ) DEVANAGARI LETTER BHA	[2704 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092D, 0x0061 };
    uint32_t const ces[9] = { 0x2704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_264)
{
    // 092D 0041;	
    // (भ) DEVANAGARI LETTER BHA	[2704 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092D, 0x0041 };
    uint32_t const ces[9] = { 0x2704, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_265)
{
    // 092D 0062;	
    // (भ) DEVANAGARI LETTER BHA	[2704 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092D, 0x0062 };
    uint32_t const ces[9] = { 0x2704, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_266)
{
    // 092E 0021;	
    // (म) DEVANAGARI LETTER MA	[2705 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092E, 0x0021 };
    uint32_t const ces[9] = { 0x2705, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_267)
{
    // 092E 003F;	
    // (म) DEVANAGARI LETTER MA	[2705 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092E, 0x003F };
    uint32_t const ces[9] = { 0x2705, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_268)
{
    // 092E 0061;	
    // (म) DEVANAGARI LETTER MA	[2705 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092E, 0x0061 };
    uint32_t const ces[9] = { 0x2705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_269)
{
    // 092E 0041;	
    // (म) DEVANAGARI LETTER MA	[2705 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092E, 0x0041 };
    uint32_t const ces[9] = { 0x2705, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_270)
{
    // 092E 0062;	
    // (म) DEVANAGARI LETTER MA	[2705 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092E, 0x0062 };
    uint32_t const ces[9] = { 0x2705, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_271)
{
    // 092F 0334 093C;	
    // (य̴) DEVANAGARI LETTER YA, COMBINING TILDE OVERLAY	[2706 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x092F, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x2706, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_272)
{
    // 092F 093C 0334;	
    // (य़) DEVANAGARI LETTER YA, DEVANAGARI SIGN NUKTA	[2706 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x092F, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x2706, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_273)
{
    // 095F 0334;	
    // (य़) DEVANAGARI LETTER YYA	[2706 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095F, 0x0334 };
    uint32_t const ces[10] = { 0x2706, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_274)
{
    // 092F 0021;	
    // (य) DEVANAGARI LETTER YA	[2706 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092F, 0x0021 };
    uint32_t const ces[9] = { 0x2706, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_275)
{
    // 095F 0021;	
    // (य़) DEVANAGARI LETTER YYA	[2706 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095F, 0x0021 };
    uint32_t const ces[11] = { 0x2706, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_276)
{
    // 092F 003F;	
    // (य) DEVANAGARI LETTER YA	[2706 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092F, 0x003F };
    uint32_t const ces[9] = { 0x2706, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_277)
{
    // 095F 003F;	
    // (य़) DEVANAGARI LETTER YYA	[2706 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095F, 0x003F };
    uint32_t const ces[11] = { 0x2706, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_278)
{
    // 092F 0061;	
    // (य) DEVANAGARI LETTER YA	[2706 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092F, 0x0061 };
    uint32_t const ces[9] = { 0x2706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_279)
{
    // 092F 0041;	
    // (य) DEVANAGARI LETTER YA	[2706 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x092F, 0x0041 };
    uint32_t const ces[9] = { 0x2706, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_280)
{
    // 095F 0061;	
    // (य़) DEVANAGARI LETTER YYA	[2706 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095F, 0x0061 };
    uint32_t const ces[11] = { 0x2706, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_281)
{
    // 095F 0041;	
    // (य़) DEVANAGARI LETTER YYA	[2706 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x095F, 0x0041 };
    uint32_t const ces[11] = { 0x2706, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_282)
{
    // 092F 0062;	
    // (य) DEVANAGARI LETTER YA	[2706 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x092F, 0x0062 };
    uint32_t const ces[9] = { 0x2706, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_283)
{
    // 095F 0062;	
    // (य़) DEVANAGARI LETTER YYA	[2706 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x095F, 0x0062 };
    uint32_t const ces[11] = { 0x2706, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_284)
{
    // 097A 0021;	
    // (ॺ) DEVANAGARI LETTER HEAVY YA	[2707 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097A, 0x0021 };
    uint32_t const ces[9] = { 0x2707, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_285)
{
    // 097A 003F;	
    // (ॺ) DEVANAGARI LETTER HEAVY YA	[2707 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097A, 0x003F };
    uint32_t const ces[9] = { 0x2707, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_286)
{
    // 097A 0061;	
    // (ॺ) DEVANAGARI LETTER HEAVY YA	[2707 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097A, 0x0061 };
    uint32_t const ces[9] = { 0x2707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_287)
{
    // 097A 0041;	
    // (ॺ) DEVANAGARI LETTER HEAVY YA	[2707 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097A, 0x0041 };
    uint32_t const ces[9] = { 0x2707, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_288)
{
    // 097A 0062;	
    // (ॺ) DEVANAGARI LETTER HEAVY YA	[2707 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097A, 0x0062 };
    uint32_t const ces[9] = { 0x2707, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_289)
{
    // 0930 0334 093C;	
    // (र̴) DEVANAGARI LETTER RA, COMBINING TILDE OVERLAY	[2708 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0930, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x2708, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_290)
{
    // 0930 093C 0334;	
    // (ऱ) DEVANAGARI LETTER RA, DEVANAGARI SIGN NUKTA	[2708 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0930, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x2708, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_291)
{
    // 0931 0334;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0931, 0x0334 };
    uint32_t const ces[10] = { 0x2708, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_292)
{
    // 0930 0021;	
    // (र) DEVANAGARI LETTER RA	[2708 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0930, 0x0021 };
    uint32_t const ces[9] = { 0x2708, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_293)
{
    // 0931 0021;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0931, 0x0021 };
    uint32_t const ces[11] = { 0x2708, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_294)
{
    // 0930 003F;	
    // (र) DEVANAGARI LETTER RA	[2708 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0930, 0x003F };
    uint32_t const ces[9] = { 0x2708, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_295)
{
    // 0931 003F;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0931, 0x003F };
    uint32_t const ces[11] = { 0x2708, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_296)
{
    // 0930 0061;	
    // (र) DEVANAGARI LETTER RA	[2708 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0930, 0x0061 };
    uint32_t const ces[9] = { 0x2708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_297)
{
    // 0930 0041;	
    // (र) DEVANAGARI LETTER RA	[2708 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0930, 0x0041 };
    uint32_t const ces[9] = { 0x2708, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_298)
{
    // 0931 0061;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0931, 0x0061 };
    uint32_t const ces[11] = { 0x2708, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_299)
{
    // 0931 0041;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0931, 0x0041 };
    uint32_t const ces[11] = { 0x2708, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_300)
{
    // 0930 0062;	
    // (र) DEVANAGARI LETTER RA	[2708 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0930, 0x0062 };
    uint32_t const ces[9] = { 0x2708, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_301)
{
    // 0931 0062;	
    // (ऱ) DEVANAGARI LETTER RRA	[2708 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0931, 0x0062 };
    uint32_t const ces[11] = { 0x2708, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_302)
{
    // 0932 0021;	
    // (ल) DEVANAGARI LETTER LA	[2709 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0932, 0x0021 };
    uint32_t const ces[9] = { 0x2709, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_303)
{
    // 0932 003F;	
    // (ल) DEVANAGARI LETTER LA	[2709 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0932, 0x003F };
    uint32_t const ces[9] = { 0x2709, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_304)
{
    // 0932 0061;	
    // (ल) DEVANAGARI LETTER LA	[2709 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0932, 0x0061 };
    uint32_t const ces[9] = { 0x2709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_305)
{
    // 0932 0041;	
    // (ल) DEVANAGARI LETTER LA	[2709 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0932, 0x0041 };
    uint32_t const ces[9] = { 0x2709, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_306)
{
    // 0932 0062;	
    // (ल) DEVANAGARI LETTER LA	[2709 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0932, 0x0062 };
    uint32_t const ces[9] = { 0x2709, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_307)
{
    // 0933 0334 093C;	
    // (ळ̴) DEVANAGARI LETTER LLA, COMBINING TILDE OVERLAY	[270A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0933, 0x0334, 0x093C };
    uint32_t const ces[10] = { 0x270A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_308)
{
    // 0933 093C 0334;	
    // (ऴ) DEVANAGARI LETTER LLA, DEVANAGARI SIGN NUKTA	[270A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0933, 0x093C, 0x0334 };
    uint32_t const ces[10] = { 0x270A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_309)
{
    // 0934 0334;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A | 0020 004A 00C2 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0934, 0x0334 };
    uint32_t const ces[10] = { 0x270A, 0x0000, 0x0020, 0x004A, 0x00C2, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_310)
{
    // 0933 0021;	
    // (ळ) DEVANAGARI LETTER LLA	[270A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0933, 0x0021 };
    uint32_t const ces[9] = { 0x270A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_311)
{
    // 0934 0021;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A 0261 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0934, 0x0021 };
    uint32_t const ces[11] = { 0x270A, 0x0261, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_312)
{
    // 0933 003F;	
    // (ळ) DEVANAGARI LETTER LLA	[270A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0933, 0x003F };
    uint32_t const ces[9] = { 0x270A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_313)
{
    // 0934 003F;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A 0267 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0934, 0x003F };
    uint32_t const ces[11] = { 0x270A, 0x0267, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_314)
{
    // 0933 0061;	
    // (ळ) DEVANAGARI LETTER LLA	[270A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0933, 0x0061 };
    uint32_t const ces[9] = { 0x270A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_315)
{
    // 0933 0041;	
    // (ळ) DEVANAGARI LETTER LLA	[270A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0933, 0x0041 };
    uint32_t const ces[9] = { 0x270A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_316)
{
    // 0934 0061;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A 1CAD | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0934, 0x0061 };
    uint32_t const ces[11] = { 0x270A, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_317)
{
    // 0934 0041;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A 1CAD | 0020 00C2 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0934, 0x0041 };
    uint32_t const ces[11] = { 0x270A, 0x1CAD, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_318)
{
    // 0933 0062;	
    // (ळ) DEVANAGARI LETTER LLA	[270A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0933, 0x0062 };
    uint32_t const ces[9] = { 0x270A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_319)
{
    // 0934 0062;	
    // (ऴ) DEVANAGARI LETTER LLLA	[270A 1CC6 | 0020 00C2 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0934, 0x0062 };
    uint32_t const ces[11] = { 0x270A, 0x1CC6, 0x0000, 0x0020, 0x00C2, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_320)
{
    // 0935 0021;	
    // (व) DEVANAGARI LETTER VA	[270B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0935, 0x0021 };
    uint32_t const ces[9] = { 0x270B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_321)
{
    // 0935 003F;	
    // (व) DEVANAGARI LETTER VA	[270B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0935, 0x003F };
    uint32_t const ces[9] = { 0x270B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_322)
{
    // 0935 0061;	
    // (व) DEVANAGARI LETTER VA	[270B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0935, 0x0061 };
    uint32_t const ces[9] = { 0x270B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_323)
{
    // 0935 0041;	
    // (व) DEVANAGARI LETTER VA	[270B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0935, 0x0041 };
    uint32_t const ces[9] = { 0x270B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_324)
{
    // 0935 0062;	
    // (व) DEVANAGARI LETTER VA	[270B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0935, 0x0062 };
    uint32_t const ces[9] = { 0x270B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_325)
{
    // 0936 0021;	
    // (श) DEVANAGARI LETTER SHA	[270C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0936, 0x0021 };
    uint32_t const ces[9] = { 0x270C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_326)
{
    // 0936 003F;	
    // (श) DEVANAGARI LETTER SHA	[270C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0936, 0x003F };
    uint32_t const ces[9] = { 0x270C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_327)
{
    // 0936 0061;	
    // (श) DEVANAGARI LETTER SHA	[270C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0936, 0x0061 };
    uint32_t const ces[9] = { 0x270C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_328)
{
    // 0936 0041;	
    // (श) DEVANAGARI LETTER SHA	[270C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0936, 0x0041 };
    uint32_t const ces[9] = { 0x270C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_329)
{
    // 0936 0062;	
    // (श) DEVANAGARI LETTER SHA	[270C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0936, 0x0062 };
    uint32_t const ces[9] = { 0x270C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_330)
{
    // 0937 0021;	
    // (ष) DEVANAGARI LETTER SSA	[270D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0937, 0x0021 };
    uint32_t const ces[9] = { 0x270D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_331)
{
    // 0937 003F;	
    // (ष) DEVANAGARI LETTER SSA	[270D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0937, 0x003F };
    uint32_t const ces[9] = { 0x270D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_332)
{
    // 0937 0061;	
    // (ष) DEVANAGARI LETTER SSA	[270D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0937, 0x0061 };
    uint32_t const ces[9] = { 0x270D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_333)
{
    // 0937 0041;	
    // (ष) DEVANAGARI LETTER SSA	[270D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0937, 0x0041 };
    uint32_t const ces[9] = { 0x270D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_334)
{
    // 0937 0062;	
    // (ष) DEVANAGARI LETTER SSA	[270D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0937, 0x0062 };
    uint32_t const ces[9] = { 0x270D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_335)
{
    // 0938 0021;	
    // (स) DEVANAGARI LETTER SA	[270E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0938, 0x0021 };
    uint32_t const ces[9] = { 0x270E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_336)
{
    // 0938 003F;	
    // (स) DEVANAGARI LETTER SA	[270E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0938, 0x003F };
    uint32_t const ces[9] = { 0x270E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_337)
{
    // 0938 0061;	
    // (स) DEVANAGARI LETTER SA	[270E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0938, 0x0061 };
    uint32_t const ces[9] = { 0x270E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_338)
{
    // 0938 0041;	
    // (स) DEVANAGARI LETTER SA	[270E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0938, 0x0041 };
    uint32_t const ces[9] = { 0x270E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_339)
{
    // 0938 0062;	
    // (स) DEVANAGARI LETTER SA	[270E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0938, 0x0062 };
    uint32_t const ces[9] = { 0x270E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_340)
{
    // 0939 0021;	
    // (ह) DEVANAGARI LETTER HA	[270F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0939, 0x0021 };
    uint32_t const ces[9] = { 0x270F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_341)
{
    // 0939 003F;	
    // (ह) DEVANAGARI LETTER HA	[270F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0939, 0x003F };
    uint32_t const ces[9] = { 0x270F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_342)
{
    // 0939 0061;	
    // (ह) DEVANAGARI LETTER HA	[270F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0939, 0x0061 };
    uint32_t const ces[9] = { 0x270F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_343)
{
    // 0939 0041;	
    // (ह) DEVANAGARI LETTER HA	[270F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0939, 0x0041 };
    uint32_t const ces[9] = { 0x270F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_344)
{
    // 0939 0062;	
    // (ह) DEVANAGARI LETTER HA	[270F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0939, 0x0062 };
    uint32_t const ces[9] = { 0x270F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_345)
{
    // 093D 0021;	
    // (ऽ) DEVANAGARI SIGN AVAGRAHA	[2710 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093D, 0x0021 };
    uint32_t const ces[9] = { 0x2710, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_346)
{
    // 093D 003F;	
    // (ऽ) DEVANAGARI SIGN AVAGRAHA	[2710 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093D, 0x003F };
    uint32_t const ces[9] = { 0x2710, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_347)
{
    // 093D 0061;	
    // (ऽ) DEVANAGARI SIGN AVAGRAHA	[2710 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093D, 0x0061 };
    uint32_t const ces[9] = { 0x2710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_348)
{
    // 093D 0041;	
    // (ऽ) DEVANAGARI SIGN AVAGRAHA	[2710 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x093D, 0x0041 };
    uint32_t const ces[9] = { 0x2710, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_349)
{
    // 093D 0062;	
    // (ऽ) DEVANAGARI SIGN AVAGRAHA	[2710 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093D, 0x0062 };
    uint32_t const ces[9] = { 0x2710, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_350)
{
    // 097D 0021;	
    // (ॽ) DEVANAGARI LETTER GLOTTAL STOP	[2711 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097D, 0x0021 };
    uint32_t const ces[9] = { 0x2711, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_351)
{
    // 097D 003F;	
    // (ॽ) DEVANAGARI LETTER GLOTTAL STOP	[2711 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097D, 0x003F };
    uint32_t const ces[9] = { 0x2711, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_352)
{
    // 097D 0061;	
    // (ॽ) DEVANAGARI LETTER GLOTTAL STOP	[2711 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097D, 0x0061 };
    uint32_t const ces[9] = { 0x2711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_353)
{
    // 097D 0041;	
    // (ॽ) DEVANAGARI LETTER GLOTTAL STOP	[2711 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x097D, 0x0041 };
    uint32_t const ces[9] = { 0x2711, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_354)
{
    // 097D 0062;	
    // (ॽ) DEVANAGARI LETTER GLOTTAL STOP	[2711 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x097D, 0x0062 };
    uint32_t const ces[9] = { 0x2711, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_355)
{
    // 1CE9 0021;	
    // (ᳩ) VEDIC SIGN ANUSVARA ANTARGOMUKHA	[2712 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CE9, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_356)
{
    // 1CEA 0021;	
    // (ᳪ) VEDIC SIGN ANUSVARA BAHIRGOMUKHA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEA, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_357)
{
    // 1CEB 0021;	
    // (ᳫ) VEDIC SIGN ANUSVARA VAMAGOMUKHA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEB, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_358)
{
    // 1CEC 0021;	
    // (ᳬ) VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEC, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_359)
{
    // 1CEE 0021;	
    // (ᳮ) VEDIC SIGN HEXIFORM LONG ANUSVARA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEE, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_360)
{
    // 1CEF 0021;	
    // (ᳯ) VEDIC SIGN LONG ANUSVARA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEF, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_361)
{
    // 1CF0 0021;	
    // (ᳰ) VEDIC SIGN RTHANG LONG ANUSVARA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF0, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_362)
{
    // 1CF1 0021;	
    // (ᳱ) VEDIC SIGN ANUSVARA UBHAYATO MUKHA	[2712 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF1, 0x0021 };
    uint32_t const ces[9] = { 0x2712, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_363)
{
    // 1CE9 003F;	
    // (ᳩ) VEDIC SIGN ANUSVARA ANTARGOMUKHA	[2712 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CE9, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_364)
{
    // 1CEA 003F;	
    // (ᳪ) VEDIC SIGN ANUSVARA BAHIRGOMUKHA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEA, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_365)
{
    // 1CEB 003F;	
    // (ᳫ) VEDIC SIGN ANUSVARA VAMAGOMUKHA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEB, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_366)
{
    // 1CEC 003F;	
    // (ᳬ) VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEC, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_367)
{
    // 1CEE 003F;	
    // (ᳮ) VEDIC SIGN HEXIFORM LONG ANUSVARA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEE, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_368)
{
    // 1CEF 003F;	
    // (ᳯ) VEDIC SIGN LONG ANUSVARA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEF, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_369)
{
    // 1CF0 003F;	
    // (ᳰ) VEDIC SIGN RTHANG LONG ANUSVARA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF0, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_370)
{
    // 1CF1 003F;	
    // (ᳱ) VEDIC SIGN ANUSVARA UBHAYATO MUKHA	[2712 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF1, 0x003F };
    uint32_t const ces[9] = { 0x2712, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_371)
{
    // 1CE9 0061;	
    // (ᳩ) VEDIC SIGN ANUSVARA ANTARGOMUKHA	[2712 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CE9, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_372)
{
    // 1CE9 0041;	
    // (ᳩ) VEDIC SIGN ANUSVARA ANTARGOMUKHA	[2712 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1CE9, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_373)
{
    // 1CEA 0061;	
    // (ᳪ) VEDIC SIGN ANUSVARA BAHIRGOMUKHA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEA, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_374)
{
    // 1CEB 0061;	
    // (ᳫ) VEDIC SIGN ANUSVARA VAMAGOMUKHA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEB, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_375)
{
    // 1CEC 0061;	
    // (ᳬ) VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEC, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_376)
{
    // 1CEE 0061;	
    // (ᳮ) VEDIC SIGN HEXIFORM LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEE, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_377)
{
    // 1CEF 0061;	
    // (ᳯ) VEDIC SIGN LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEF, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_378)
{
    // 1CF0 0061;	
    // (ᳰ) VEDIC SIGN RTHANG LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF0, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_379)
{
    // 1CF1 0061;	
    // (ᳱ) VEDIC SIGN ANUSVARA UBHAYATO MUKHA	[2712 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF1, 0x0061 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_380)
{
    // 1CEA 0041;	
    // (ᳪ) VEDIC SIGN ANUSVARA BAHIRGOMUKHA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CEA, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_381)
{
    // 1CEB 0041;	
    // (ᳫ) VEDIC SIGN ANUSVARA VAMAGOMUKHA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CEB, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_382)
{
    // 1CEC 0041;	
    // (ᳬ) VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CEC, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_383)
{
    // 1CEE 0041;	
    // (ᳮ) VEDIC SIGN HEXIFORM LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CEE, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_384)
{
    // 1CEF 0041;	
    // (ᳯ) VEDIC SIGN LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CEF, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_385)
{
    // 1CF0 0041;	
    // (ᳰ) VEDIC SIGN RTHANG LONG ANUSVARA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CF0, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_386)
{
    // 1CF1 0041;	
    // (ᳱ) VEDIC SIGN ANUSVARA UBHAYATO MUKHA	[2712 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x1CF1, 0x0041 };
    uint32_t const ces[9] = { 0x2712, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_387)
{
    // 1CE9 0062;	
    // (ᳩ) VEDIC SIGN ANUSVARA ANTARGOMUKHA	[2712 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CE9, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_388)
{
    // 1CEA 0062;	
    // (ᳪ) VEDIC SIGN ANUSVARA BAHIRGOMUKHA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEA, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_389)
{
    // 1CEB 0062;	
    // (ᳫ) VEDIC SIGN ANUSVARA VAMAGOMUKHA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEB, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_390)
{
    // 1CEC 0062;	
    // (ᳬ) VEDIC SIGN ANUSVARA VAMAGOMUKHA WITH TAIL	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEC, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_391)
{
    // 1CEE 0062;	
    // (ᳮ) VEDIC SIGN HEXIFORM LONG ANUSVARA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEE, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_392)
{
    // 1CEF 0062;	
    // (ᳯ) VEDIC SIGN LONG ANUSVARA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CEF, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_393)
{
    // 1CF0 0062;	
    // (ᳰ) VEDIC SIGN RTHANG LONG ANUSVARA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF0, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_394)
{
    // 1CF1 0062;	
    // (ᳱ) VEDIC SIGN ANUSVARA UBHAYATO MUKHA	[2712 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x1CF1, 0x0062 };
    uint32_t const ces[9] = { 0x2712, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_395)
{
    // 1CF5 0021;	
    // (ᳵ) VEDIC SIGN JIHVAMULIYA	[2713 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF5, 0x0021 };
    uint32_t const ces[9] = { 0x2713, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_396)
{
    // 1CF5 003F;	
    // (ᳵ) VEDIC SIGN JIHVAMULIYA	[2713 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF5, 0x003F };
    uint32_t const ces[9] = { 0x2713, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_397)
{
    // 1CF5 0061;	
    // (ᳵ) VEDIC SIGN JIHVAMULIYA	[2713 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF5, 0x0061 };
    uint32_t const ces[9] = { 0x2713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_398)
{
    // 1CF5 0041;	
    // (ᳵ) VEDIC SIGN JIHVAMULIYA	[2713 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1CF5, 0x0041 };
    uint32_t const ces[9] = { 0x2713, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_399)
{
    // 1CF5 0062;	
    // (ᳵ) VEDIC SIGN JIHVAMULIYA	[2713 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF5, 0x0062 };
    uint32_t const ces[9] = { 0x2713, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_400)
{
    // 1CF6 0021;	
    // (ᳶ) VEDIC SIGN UPADHMANIYA	[2714 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF6, 0x0021 };
    uint32_t const ces[9] = { 0x2714, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_401)
{
    // 1CF6 003F;	
    // (ᳶ) VEDIC SIGN UPADHMANIYA	[2714 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF6, 0x003F };
    uint32_t const ces[9] = { 0x2714, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_402)
{
    // 1CF6 0061;	
    // (ᳶ) VEDIC SIGN UPADHMANIYA	[2714 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF6, 0x0061 };
    uint32_t const ces[9] = { 0x2714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_403)
{
    // 1CF6 0041;	
    // (ᳶ) VEDIC SIGN UPADHMANIYA	[2714 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1CF6, 0x0041 };
    uint32_t const ces[9] = { 0x2714, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_404)
{
    // 1CF6 0062;	
    // (ᳶ) VEDIC SIGN UPADHMANIYA	[2714 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1CF6, 0x0062 };
    uint32_t const ces[9] = { 0x2714, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_405)
{
    // A8F2 0021;	
    // (ꣲ) DEVANAGARI SIGN SPACING CANDRABINDU	[2715 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F2, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_406)
{
    // A8F3 0021;	
    // (ꣳ) DEVANAGARI SIGN CANDRABINDU VIRAMA	[2715 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F3, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_407)
{
    // A8F4 0021;	
    // (ꣴ) DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA	[2715 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F4, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_408)
{
    // A8F5 0021;	
    // (ꣵ) DEVANAGARI SIGN CANDRABINDU TWO	[2715 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F5, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_409)
{
    // A8F6 0021;	
    // (ꣶ) DEVANAGARI SIGN CANDRABINDU THREE	[2715 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F6, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_410)
{
    // A8F7 0021;	
    // (ꣷ) DEVANAGARI SIGN CANDRABINDU AVAGRAHA	[2715 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F7, 0x0021 };
    uint32_t const ces[9] = { 0x2715, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_411)
{
    // A8F2 003F;	
    // (ꣲ) DEVANAGARI SIGN SPACING CANDRABINDU	[2715 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F2, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_412)
{
    // A8F3 003F;	
    // (ꣳ) DEVANAGARI SIGN CANDRABINDU VIRAMA	[2715 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F3, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_413)
{
    // A8F4 003F;	
    // (ꣴ) DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA	[2715 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F4, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_414)
{
    // A8F5 003F;	
    // (ꣵ) DEVANAGARI SIGN CANDRABINDU TWO	[2715 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F5, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_415)
{
    // A8F6 003F;	
    // (ꣶ) DEVANAGARI SIGN CANDRABINDU THREE	[2715 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F6, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_416)
{
    // A8F7 003F;	
    // (ꣷ) DEVANAGARI SIGN CANDRABINDU AVAGRAHA	[2715 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F7, 0x003F };
    uint32_t const ces[9] = { 0x2715, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_417)
{
    // A8F2 0061;	
    // (ꣲ) DEVANAGARI SIGN SPACING CANDRABINDU	[2715 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F2, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_418)
{
    // A8F2 0041;	
    // (ꣲ) DEVANAGARI SIGN SPACING CANDRABINDU	[2715 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8F2, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_419)
{
    // A8F3 0061;	
    // (ꣳ) DEVANAGARI SIGN CANDRABINDU VIRAMA	[2715 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F3, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_420)
{
    // A8F4 0061;	
    // (ꣴ) DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA	[2715 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F4, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_421)
{
    // A8F5 0061;	
    // (ꣵ) DEVANAGARI SIGN CANDRABINDU TWO	[2715 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F5, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_422)
{
    // A8F6 0061;	
    // (ꣶ) DEVANAGARI SIGN CANDRABINDU THREE	[2715 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F6, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_423)
{
    // A8F7 0061;	
    // (ꣷ) DEVANAGARI SIGN CANDRABINDU AVAGRAHA	[2715 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F7, 0x0061 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_424)
{
    // A8F3 0041;	
    // (ꣳ) DEVANAGARI SIGN CANDRABINDU VIRAMA	[2715 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA8F3, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_425)
{
    // A8F4 0041;	
    // (ꣴ) DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA	[2715 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA8F4, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_426)
{
    // A8F5 0041;	
    // (ꣵ) DEVANAGARI SIGN CANDRABINDU TWO	[2715 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA8F5, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_427)
{
    // A8F6 0041;	
    // (ꣶ) DEVANAGARI SIGN CANDRABINDU THREE	[2715 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA8F6, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_428)
{
    // A8F7 0041;	
    // (ꣷ) DEVANAGARI SIGN CANDRABINDU AVAGRAHA	[2715 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0xA8F7, 0x0041 };
    uint32_t const ces[9] = { 0x2715, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_429)
{
    // A8F2 0062;	
    // (ꣲ) DEVANAGARI SIGN SPACING CANDRABINDU	[2715 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8F2, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_430)
{
    // A8F3 0062;	
    // (ꣳ) DEVANAGARI SIGN CANDRABINDU VIRAMA	[2715 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F3, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_431)
{
    // A8F4 0062;	
    // (ꣴ) DEVANAGARI SIGN DOUBLE CANDRABINDU VIRAMA	[2715 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F4, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_432)
{
    // A8F5 0062;	
    // (ꣵ) DEVANAGARI SIGN CANDRABINDU TWO	[2715 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F5, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_433)
{
    // A8F6 0062;	
    // (ꣶ) DEVANAGARI SIGN CANDRABINDU THREE	[2715 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F6, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_434)
{
    // A8F7 0062;	
    // (ꣷ) DEVANAGARI SIGN CANDRABINDU AVAGRAHA	[2715 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0xA8F7, 0x0062 };
    uint32_t const ces[9] = { 0x2715, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_435)
{
    // A8FB 0021;	
    // (ꣻ) DEVANAGARI HEADSTROKE	[2716 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FB, 0x0021 };
    uint32_t const ces[9] = { 0x2716, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_436)
{
    // A8FB 003F;	
    // (ꣻ) DEVANAGARI HEADSTROKE	[2716 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FB, 0x003F };
    uint32_t const ces[9] = { 0x2716, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_437)
{
    // A8FB 0061;	
    // (ꣻ) DEVANAGARI HEADSTROKE	[2716 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FB, 0x0061 };
    uint32_t const ces[9] = { 0x2716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_438)
{
    // A8FB 0041;	
    // (ꣻ) DEVANAGARI HEADSTROKE	[2716 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8FB, 0x0041 };
    uint32_t const ces[9] = { 0x2716, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_439)
{
    // A8FB 0062;	
    // (ꣻ) DEVANAGARI HEADSTROKE	[2716 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FB, 0x0062 };
    uint32_t const ces[9] = { 0x2716, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_440)
{
    // 093E 0021;	
    // (ा) DEVANAGARI VOWEL SIGN AA	[2717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093E, 0x0021 };
    uint32_t const ces[9] = { 0x2717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_441)
{
    // 093E 003F;	
    // (ा) DEVANAGARI VOWEL SIGN AA	[2717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093E, 0x003F };
    uint32_t const ces[9] = { 0x2717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_442)
{
    // 093E 0061;	
    // (ा) DEVANAGARI VOWEL SIGN AA	[2717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093E, 0x0061 };
    uint32_t const ces[9] = { 0x2717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_443)
{
    // 093E 0041;	
    // (ा) DEVANAGARI VOWEL SIGN AA	[2717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x093E, 0x0041 };
    uint32_t const ces[9] = { 0x2717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_444)
{
    // 093E 0062;	
    // (ा) DEVANAGARI VOWEL SIGN AA	[2717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093E, 0x0062 };
    uint32_t const ces[9] = { 0x2717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_445)
{
    // 093A 0021;	
    // (ऺ) DEVANAGARI VOWEL SIGN OE	[2718 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093A, 0x0021 };
    uint32_t const ces[9] = { 0x2718, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_446)
{
    // 093A 003F;	
    // (ऺ) DEVANAGARI VOWEL SIGN OE	[2718 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093A, 0x003F };
    uint32_t const ces[9] = { 0x2718, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_447)
{
    // 093A 0061;	
    // (ऺ) DEVANAGARI VOWEL SIGN OE	[2718 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093A, 0x0061 };
    uint32_t const ces[9] = { 0x2718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_448)
{
    // 093A 0041;	
    // (ऺ) DEVANAGARI VOWEL SIGN OE	[2718 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x093A, 0x0041 };
    uint32_t const ces[9] = { 0x2718, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_449)
{
    // 093A 0062;	
    // (ऺ) DEVANAGARI VOWEL SIGN OE	[2718 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093A, 0x0062 };
    uint32_t const ces[9] = { 0x2718, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_450)
{
    // 093B 0021;	
    // (ऻ) DEVANAGARI VOWEL SIGN OOE	[2719 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093B, 0x0021 };
    uint32_t const ces[9] = { 0x2719, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_451)
{
    // 093B 003F;	
    // (ऻ) DEVANAGARI VOWEL SIGN OOE	[2719 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093B, 0x003F };
    uint32_t const ces[9] = { 0x2719, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_452)
{
    // 093B 0061;	
    // (ऻ) DEVANAGARI VOWEL SIGN OOE	[2719 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093B, 0x0061 };
    uint32_t const ces[9] = { 0x2719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_453)
{
    // 093B 0041;	
    // (ऻ) DEVANAGARI VOWEL SIGN OOE	[2719 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x093B, 0x0041 };
    uint32_t const ces[9] = { 0x2719, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_454)
{
    // 093B 0062;	
    // (ऻ) DEVANAGARI VOWEL SIGN OOE	[2719 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093B, 0x0062 };
    uint32_t const ces[9] = { 0x2719, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_455)
{
    // 094F 0021;	
    // (ॏ) DEVANAGARI VOWEL SIGN AW	[271A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x094F, 0x0021 };
    uint32_t const ces[9] = { 0x271A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_456)
{
    // 094F 003F;	
    // (ॏ) DEVANAGARI VOWEL SIGN AW	[271A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x094F, 0x003F };
    uint32_t const ces[9] = { 0x271A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_457)
{
    // 094F 0061;	
    // (ॏ) DEVANAGARI VOWEL SIGN AW	[271A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x094F, 0x0061 };
    uint32_t const ces[9] = { 0x271A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_458)
{
    // 094F 0041;	
    // (ॏ) DEVANAGARI VOWEL SIGN AW	[271A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x094F, 0x0041 };
    uint32_t const ces[9] = { 0x271A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_459)
{
    // 094F 0062;	
    // (ॏ) DEVANAGARI VOWEL SIGN AW	[271A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x094F, 0x0062 };
    uint32_t const ces[9] = { 0x271A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_460)
{
    // 0956 0021;	
    // (ॖ) DEVANAGARI VOWEL SIGN UE	[271B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0956, 0x0021 };
    uint32_t const ces[9] = { 0x271B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_461)
{
    // 0956 003F;	
    // (ॖ) DEVANAGARI VOWEL SIGN UE	[271B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0956, 0x003F };
    uint32_t const ces[9] = { 0x271B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_462)
{
    // 0956 0061;	
    // (ॖ) DEVANAGARI VOWEL SIGN UE	[271B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0956, 0x0061 };
    uint32_t const ces[9] = { 0x271B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_463)
{
    // 0956 0041;	
    // (ॖ) DEVANAGARI VOWEL SIGN UE	[271B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0956, 0x0041 };
    uint32_t const ces[9] = { 0x271B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_464)
{
    // 0956 0062;	
    // (ॖ) DEVANAGARI VOWEL SIGN UE	[271B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0956, 0x0062 };
    uint32_t const ces[9] = { 0x271B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_465)
{
    // 0957 0021;	
    // (ॗ) DEVANAGARI VOWEL SIGN UUE	[271C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0957, 0x0021 };
    uint32_t const ces[9] = { 0x271C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_466)
{
    // 0957 003F;	
    // (ॗ) DEVANAGARI VOWEL SIGN UUE	[271C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0957, 0x003F };
    uint32_t const ces[9] = { 0x271C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_467)
{
    // 0957 0061;	
    // (ॗ) DEVANAGARI VOWEL SIGN UUE	[271C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0957, 0x0061 };
    uint32_t const ces[9] = { 0x271C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_468)
{
    // 0957 0041;	
    // (ॗ) DEVANAGARI VOWEL SIGN UUE	[271C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0957, 0x0041 };
    uint32_t const ces[9] = { 0x271C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_469)
{
    // 0957 0062;	
    // (ॗ) DEVANAGARI VOWEL SIGN UUE	[271C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0957, 0x0062 };
    uint32_t const ces[9] = { 0x271C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_470)
{
    // 093F 0021;	
    // (ि) DEVANAGARI VOWEL SIGN I	[271D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093F, 0x0021 };
    uint32_t const ces[9] = { 0x271D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_471)
{
    // 093F 003F;	
    // (ि) DEVANAGARI VOWEL SIGN I	[271D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093F, 0x003F };
    uint32_t const ces[9] = { 0x271D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_472)
{
    // 093F 0061;	
    // (ि) DEVANAGARI VOWEL SIGN I	[271D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093F, 0x0061 };
    uint32_t const ces[9] = { 0x271D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_473)
{
    // 093F 0041;	
    // (ि) DEVANAGARI VOWEL SIGN I	[271D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x093F, 0x0041 };
    uint32_t const ces[9] = { 0x271D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_474)
{
    // 093F 0062;	
    // (ि) DEVANAGARI VOWEL SIGN I	[271D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x093F, 0x0062 };
    uint32_t const ces[9] = { 0x271D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_475)
{
    // 0940 0021;	
    // (ी) DEVANAGARI VOWEL SIGN II	[271E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0940, 0x0021 };
    uint32_t const ces[9] = { 0x271E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_476)
{
    // 0940 003F;	
    // (ी) DEVANAGARI VOWEL SIGN II	[271E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0940, 0x003F };
    uint32_t const ces[9] = { 0x271E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_477)
{
    // 0940 0061;	
    // (ी) DEVANAGARI VOWEL SIGN II	[271E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0940, 0x0061 };
    uint32_t const ces[9] = { 0x271E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_478)
{
    // 0940 0041;	
    // (ी) DEVANAGARI VOWEL SIGN II	[271E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0940, 0x0041 };
    uint32_t const ces[9] = { 0x271E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_479)
{
    // 0940 0062;	
    // (ी) DEVANAGARI VOWEL SIGN II	[271E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0940, 0x0062 };
    uint32_t const ces[9] = { 0x271E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_480)
{
    // 0941 0021;	
    // (ु) DEVANAGARI VOWEL SIGN U	[271F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0941, 0x0021 };
    uint32_t const ces[9] = { 0x271F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_481)
{
    // 0941 003F;	
    // (ु) DEVANAGARI VOWEL SIGN U	[271F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0941, 0x003F };
    uint32_t const ces[9] = { 0x271F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_482)
{
    // 0941 0061;	
    // (ु) DEVANAGARI VOWEL SIGN U	[271F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0941, 0x0061 };
    uint32_t const ces[9] = { 0x271F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_483)
{
    // 0941 0041;	
    // (ु) DEVANAGARI VOWEL SIGN U	[271F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0941, 0x0041 };
    uint32_t const ces[9] = { 0x271F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_484)
{
    // 0941 0062;	
    // (ु) DEVANAGARI VOWEL SIGN U	[271F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0941, 0x0062 };
    uint32_t const ces[9] = { 0x271F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_485)
{
    // 0942 0021;	
    // (ू) DEVANAGARI VOWEL SIGN UU	[2720 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0942, 0x0021 };
    uint32_t const ces[9] = { 0x2720, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_486)
{
    // 0942 003F;	
    // (ू) DEVANAGARI VOWEL SIGN UU	[2720 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0942, 0x003F };
    uint32_t const ces[9] = { 0x2720, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_487)
{
    // 0942 0061;	
    // (ू) DEVANAGARI VOWEL SIGN UU	[2720 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0942, 0x0061 };
    uint32_t const ces[9] = { 0x2720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_488)
{
    // 0942 0041;	
    // (ू) DEVANAGARI VOWEL SIGN UU	[2720 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0942, 0x0041 };
    uint32_t const ces[9] = { 0x2720, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_489)
{
    // 0942 0062;	
    // (ू) DEVANAGARI VOWEL SIGN UU	[2720 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0942, 0x0062 };
    uint32_t const ces[9] = { 0x2720, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_490)
{
    // 0943 0021;	
    // (ृ) DEVANAGARI VOWEL SIGN VOCALIC R	[2721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0943, 0x0021 };
    uint32_t const ces[9] = { 0x2721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_491)
{
    // 0943 003F;	
    // (ृ) DEVANAGARI VOWEL SIGN VOCALIC R	[2721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0943, 0x003F };
    uint32_t const ces[9] = { 0x2721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_492)
{
    // 0943 0061;	
    // (ृ) DEVANAGARI VOWEL SIGN VOCALIC R	[2721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0943, 0x0061 };
    uint32_t const ces[9] = { 0x2721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_493)
{
    // 0943 0041;	
    // (ृ) DEVANAGARI VOWEL SIGN VOCALIC R	[2721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0943, 0x0041 };
    uint32_t const ces[9] = { 0x2721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_494)
{
    // 0943 0062;	
    // (ृ) DEVANAGARI VOWEL SIGN VOCALIC R	[2721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0943, 0x0062 };
    uint32_t const ces[9] = { 0x2721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_495)
{
    // 0944 0021;	
    // (ॄ) DEVANAGARI VOWEL SIGN VOCALIC RR	[2722 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0944, 0x0021 };
    uint32_t const ces[9] = { 0x2722, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_496)
{
    // 0944 003F;	
    // (ॄ) DEVANAGARI VOWEL SIGN VOCALIC RR	[2722 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0944, 0x003F };
    uint32_t const ces[9] = { 0x2722, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_497)
{
    // 0944 0061;	
    // (ॄ) DEVANAGARI VOWEL SIGN VOCALIC RR	[2722 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0944, 0x0061 };
    uint32_t const ces[9] = { 0x2722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_498)
{
    // 0944 0041;	
    // (ॄ) DEVANAGARI VOWEL SIGN VOCALIC RR	[2722 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0944, 0x0041 };
    uint32_t const ces[9] = { 0x2722, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_165_499)
{
    // 0944 0062;	
    // (ॄ) DEVANAGARI VOWEL SIGN VOCALIC RR	[2722 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0944, 0x0062 };
    uint32_t const ces[9] = { 0x2722, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

