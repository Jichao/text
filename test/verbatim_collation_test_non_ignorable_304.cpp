// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_304_000)
{
    // 132E9 003F;	
    // (𓋩) EGYPTIAN HIEROGLYPH S020	[5333 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E9, 0x003F };
    uint32_t const ces[9] = { 0x5333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_001)
{
    // 132E9 0061;	
    // (𓋩) EGYPTIAN HIEROGLYPH S020	[5333 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E9, 0x0061 };
    uint32_t const ces[9] = { 0x5333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_002)
{
    // 132E9 0041;	
    // (𓋩) EGYPTIAN HIEROGLYPH S020	[5333 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132E9, 0x0041 };
    uint32_t const ces[9] = { 0x5333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_003)
{
    // 132E9 0062;	
    // (𓋩) EGYPTIAN HIEROGLYPH S020	[5333 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132E9, 0x0062 };
    uint32_t const ces[9] = { 0x5333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_004)
{
    // 132EA 0021;	
    // (𓋪) EGYPTIAN HIEROGLYPH S021	[5334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EA, 0x0021 };
    uint32_t const ces[9] = { 0x5334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_005)
{
    // 132EA 003F;	
    // (𓋪) EGYPTIAN HIEROGLYPH S021	[5334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EA, 0x003F };
    uint32_t const ces[9] = { 0x5334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_006)
{
    // 132EA 0061;	
    // (𓋪) EGYPTIAN HIEROGLYPH S021	[5334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EA, 0x0061 };
    uint32_t const ces[9] = { 0x5334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_007)
{
    // 132EA 0041;	
    // (𓋪) EGYPTIAN HIEROGLYPH S021	[5334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132EA, 0x0041 };
    uint32_t const ces[9] = { 0x5334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_008)
{
    // 132EA 0062;	
    // (𓋪) EGYPTIAN HIEROGLYPH S021	[5334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EA, 0x0062 };
    uint32_t const ces[9] = { 0x5334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_009)
{
    // 132EB 0021;	
    // (𓋫) EGYPTIAN HIEROGLYPH S022	[5335 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EB, 0x0021 };
    uint32_t const ces[9] = { 0x5335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_010)
{
    // 132EB 003F;	
    // (𓋫) EGYPTIAN HIEROGLYPH S022	[5335 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EB, 0x003F };
    uint32_t const ces[9] = { 0x5335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_011)
{
    // 132EB 0061;	
    // (𓋫) EGYPTIAN HIEROGLYPH S022	[5335 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EB, 0x0061 };
    uint32_t const ces[9] = { 0x5335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_012)
{
    // 132EB 0041;	
    // (𓋫) EGYPTIAN HIEROGLYPH S022	[5335 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132EB, 0x0041 };
    uint32_t const ces[9] = { 0x5335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_013)
{
    // 132EB 0062;	
    // (𓋫) EGYPTIAN HIEROGLYPH S022	[5335 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EB, 0x0062 };
    uint32_t const ces[9] = { 0x5335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_014)
{
    // 132EC 0021;	
    // (𓋬) EGYPTIAN HIEROGLYPH S023	[5336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EC, 0x0021 };
    uint32_t const ces[9] = { 0x5336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_015)
{
    // 132EC 003F;	
    // (𓋬) EGYPTIAN HIEROGLYPH S023	[5336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EC, 0x003F };
    uint32_t const ces[9] = { 0x5336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_016)
{
    // 132EC 0061;	
    // (𓋬) EGYPTIAN HIEROGLYPH S023	[5336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EC, 0x0061 };
    uint32_t const ces[9] = { 0x5336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_017)
{
    // 132EC 0041;	
    // (𓋬) EGYPTIAN HIEROGLYPH S023	[5336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132EC, 0x0041 };
    uint32_t const ces[9] = { 0x5336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_018)
{
    // 132EC 0062;	
    // (𓋬) EGYPTIAN HIEROGLYPH S023	[5336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EC, 0x0062 };
    uint32_t const ces[9] = { 0x5336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_019)
{
    // 132ED 0021;	
    // (𓋭) EGYPTIAN HIEROGLYPH S024	[5337 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132ED, 0x0021 };
    uint32_t const ces[9] = { 0x5337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_020)
{
    // 132ED 003F;	
    // (𓋭) EGYPTIAN HIEROGLYPH S024	[5337 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132ED, 0x003F };
    uint32_t const ces[9] = { 0x5337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_021)
{
    // 132ED 0061;	
    // (𓋭) EGYPTIAN HIEROGLYPH S024	[5337 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132ED, 0x0061 };
    uint32_t const ces[9] = { 0x5337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_022)
{
    // 132ED 0041;	
    // (𓋭) EGYPTIAN HIEROGLYPH S024	[5337 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132ED, 0x0041 };
    uint32_t const ces[9] = { 0x5337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_023)
{
    // 132ED 0062;	
    // (𓋭) EGYPTIAN HIEROGLYPH S024	[5337 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132ED, 0x0062 };
    uint32_t const ces[9] = { 0x5337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_024)
{
    // 132EE 0021;	
    // (𓋮) EGYPTIAN HIEROGLYPH S025	[5338 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EE, 0x0021 };
    uint32_t const ces[9] = { 0x5338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_025)
{
    // 132EE 003F;	
    // (𓋮) EGYPTIAN HIEROGLYPH S025	[5338 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EE, 0x003F };
    uint32_t const ces[9] = { 0x5338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_026)
{
    // 132EE 0061;	
    // (𓋮) EGYPTIAN HIEROGLYPH S025	[5338 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EE, 0x0061 };
    uint32_t const ces[9] = { 0x5338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_027)
{
    // 132EE 0041;	
    // (𓋮) EGYPTIAN HIEROGLYPH S025	[5338 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132EE, 0x0041 };
    uint32_t const ces[9] = { 0x5338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_028)
{
    // 132EE 0062;	
    // (𓋮) EGYPTIAN HIEROGLYPH S025	[5338 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EE, 0x0062 };
    uint32_t const ces[9] = { 0x5338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_029)
{
    // 132EF 0021;	
    // (𓋯) EGYPTIAN HIEROGLYPH S026	[5339 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EF, 0x0021 };
    uint32_t const ces[9] = { 0x5339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_030)
{
    // 132EF 003F;	
    // (𓋯) EGYPTIAN HIEROGLYPH S026	[5339 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EF, 0x003F };
    uint32_t const ces[9] = { 0x5339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_031)
{
    // 132EF 0061;	
    // (𓋯) EGYPTIAN HIEROGLYPH S026	[5339 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EF, 0x0061 };
    uint32_t const ces[9] = { 0x5339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_032)
{
    // 132EF 0041;	
    // (𓋯) EGYPTIAN HIEROGLYPH S026	[5339 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132EF, 0x0041 };
    uint32_t const ces[9] = { 0x5339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_033)
{
    // 132EF 0062;	
    // (𓋯) EGYPTIAN HIEROGLYPH S026	[5339 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132EF, 0x0062 };
    uint32_t const ces[9] = { 0x5339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_034)
{
    // 132F0 0021;	
    // (𓋰) EGYPTIAN HIEROGLYPH S026A	[533A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F0, 0x0021 };
    uint32_t const ces[9] = { 0x533A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_035)
{
    // 132F0 003F;	
    // (𓋰) EGYPTIAN HIEROGLYPH S026A	[533A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F0, 0x003F };
    uint32_t const ces[9] = { 0x533A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_036)
{
    // 132F0 0061;	
    // (𓋰) EGYPTIAN HIEROGLYPH S026A	[533A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F0, 0x0061 };
    uint32_t const ces[9] = { 0x533A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_037)
{
    // 132F0 0041;	
    // (𓋰) EGYPTIAN HIEROGLYPH S026A	[533A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F0, 0x0041 };
    uint32_t const ces[9] = { 0x533A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_038)
{
    // 132F0 0062;	
    // (𓋰) EGYPTIAN HIEROGLYPH S026A	[533A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F0, 0x0062 };
    uint32_t const ces[9] = { 0x533A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_039)
{
    // 132F1 0021;	
    // (𓋱) EGYPTIAN HIEROGLYPH S026B	[533B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F1, 0x0021 };
    uint32_t const ces[9] = { 0x533B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_040)
{
    // 132F1 003F;	
    // (𓋱) EGYPTIAN HIEROGLYPH S026B	[533B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F1, 0x003F };
    uint32_t const ces[9] = { 0x533B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_041)
{
    // 132F1 0061;	
    // (𓋱) EGYPTIAN HIEROGLYPH S026B	[533B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F1, 0x0061 };
    uint32_t const ces[9] = { 0x533B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_042)
{
    // 132F1 0041;	
    // (𓋱) EGYPTIAN HIEROGLYPH S026B	[533B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F1, 0x0041 };
    uint32_t const ces[9] = { 0x533B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_043)
{
    // 132F1 0062;	
    // (𓋱) EGYPTIAN HIEROGLYPH S026B	[533B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F1, 0x0062 };
    uint32_t const ces[9] = { 0x533B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_044)
{
    // 132F2 0021;	
    // (𓋲) EGYPTIAN HIEROGLYPH S027	[533C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F2, 0x0021 };
    uint32_t const ces[9] = { 0x533C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_045)
{
    // 132F2 003F;	
    // (𓋲) EGYPTIAN HIEROGLYPH S027	[533C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F2, 0x003F };
    uint32_t const ces[9] = { 0x533C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_046)
{
    // 132F2 0061;	
    // (𓋲) EGYPTIAN HIEROGLYPH S027	[533C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F2, 0x0061 };
    uint32_t const ces[9] = { 0x533C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_047)
{
    // 132F2 0041;	
    // (𓋲) EGYPTIAN HIEROGLYPH S027	[533C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F2, 0x0041 };
    uint32_t const ces[9] = { 0x533C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_048)
{
    // 132F2 0062;	
    // (𓋲) EGYPTIAN HIEROGLYPH S027	[533C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F2, 0x0062 };
    uint32_t const ces[9] = { 0x533C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_049)
{
    // 132F3 0021;	
    // (𓋳) EGYPTIAN HIEROGLYPH S028	[533D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F3, 0x0021 };
    uint32_t const ces[9] = { 0x533D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_050)
{
    // 132F3 003F;	
    // (𓋳) EGYPTIAN HIEROGLYPH S028	[533D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F3, 0x003F };
    uint32_t const ces[9] = { 0x533D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_051)
{
    // 132F3 0061;	
    // (𓋳) EGYPTIAN HIEROGLYPH S028	[533D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F3, 0x0061 };
    uint32_t const ces[9] = { 0x533D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_052)
{
    // 132F3 0041;	
    // (𓋳) EGYPTIAN HIEROGLYPH S028	[533D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F3, 0x0041 };
    uint32_t const ces[9] = { 0x533D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_053)
{
    // 132F3 0062;	
    // (𓋳) EGYPTIAN HIEROGLYPH S028	[533D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F3, 0x0062 };
    uint32_t const ces[9] = { 0x533D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_054)
{
    // 132F4 0021;	
    // (𓋴) EGYPTIAN HIEROGLYPH S029	[533E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F4, 0x0021 };
    uint32_t const ces[9] = { 0x533E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_055)
{
    // 132F4 003F;	
    // (𓋴) EGYPTIAN HIEROGLYPH S029	[533E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F4, 0x003F };
    uint32_t const ces[9] = { 0x533E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_056)
{
    // 132F4 0061;	
    // (𓋴) EGYPTIAN HIEROGLYPH S029	[533E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F4, 0x0061 };
    uint32_t const ces[9] = { 0x533E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_057)
{
    // 132F4 0041;	
    // (𓋴) EGYPTIAN HIEROGLYPH S029	[533E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F4, 0x0041 };
    uint32_t const ces[9] = { 0x533E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_058)
{
    // 132F4 0062;	
    // (𓋴) EGYPTIAN HIEROGLYPH S029	[533E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F4, 0x0062 };
    uint32_t const ces[9] = { 0x533E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_059)
{
    // 132F5 0021;	
    // (𓋵) EGYPTIAN HIEROGLYPH S030	[533F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F5, 0x0021 };
    uint32_t const ces[9] = { 0x533F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_060)
{
    // 132F5 003F;	
    // (𓋵) EGYPTIAN HIEROGLYPH S030	[533F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F5, 0x003F };
    uint32_t const ces[9] = { 0x533F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_061)
{
    // 132F5 0061;	
    // (𓋵) EGYPTIAN HIEROGLYPH S030	[533F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F5, 0x0061 };
    uint32_t const ces[9] = { 0x533F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_062)
{
    // 132F5 0041;	
    // (𓋵) EGYPTIAN HIEROGLYPH S030	[533F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F5, 0x0041 };
    uint32_t const ces[9] = { 0x533F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_063)
{
    // 132F5 0062;	
    // (𓋵) EGYPTIAN HIEROGLYPH S030	[533F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F5, 0x0062 };
    uint32_t const ces[9] = { 0x533F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_064)
{
    // 132F6 0021;	
    // (𓋶) EGYPTIAN HIEROGLYPH S031	[5340 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F6, 0x0021 };
    uint32_t const ces[9] = { 0x5340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_065)
{
    // 132F6 003F;	
    // (𓋶) EGYPTIAN HIEROGLYPH S031	[5340 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F6, 0x003F };
    uint32_t const ces[9] = { 0x5340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_066)
{
    // 132F6 0061;	
    // (𓋶) EGYPTIAN HIEROGLYPH S031	[5340 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F6, 0x0061 };
    uint32_t const ces[9] = { 0x5340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_067)
{
    // 132F6 0041;	
    // (𓋶) EGYPTIAN HIEROGLYPH S031	[5340 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F6, 0x0041 };
    uint32_t const ces[9] = { 0x5340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_068)
{
    // 132F6 0062;	
    // (𓋶) EGYPTIAN HIEROGLYPH S031	[5340 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F6, 0x0062 };
    uint32_t const ces[9] = { 0x5340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_069)
{
    // 132F7 0021;	
    // (𓋷) EGYPTIAN HIEROGLYPH S032	[5341 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F7, 0x0021 };
    uint32_t const ces[9] = { 0x5341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_070)
{
    // 132F7 003F;	
    // (𓋷) EGYPTIAN HIEROGLYPH S032	[5341 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F7, 0x003F };
    uint32_t const ces[9] = { 0x5341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_071)
{
    // 132F7 0061;	
    // (𓋷) EGYPTIAN HIEROGLYPH S032	[5341 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F7, 0x0061 };
    uint32_t const ces[9] = { 0x5341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_072)
{
    // 132F7 0041;	
    // (𓋷) EGYPTIAN HIEROGLYPH S032	[5341 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F7, 0x0041 };
    uint32_t const ces[9] = { 0x5341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_073)
{
    // 132F7 0062;	
    // (𓋷) EGYPTIAN HIEROGLYPH S032	[5341 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F7, 0x0062 };
    uint32_t const ces[9] = { 0x5341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_074)
{
    // 132F8 0021;	
    // (𓋸) EGYPTIAN HIEROGLYPH S033	[5342 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F8, 0x0021 };
    uint32_t const ces[9] = { 0x5342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_075)
{
    // 132F8 003F;	
    // (𓋸) EGYPTIAN HIEROGLYPH S033	[5342 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F8, 0x003F };
    uint32_t const ces[9] = { 0x5342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_076)
{
    // 132F8 0061;	
    // (𓋸) EGYPTIAN HIEROGLYPH S033	[5342 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F8, 0x0061 };
    uint32_t const ces[9] = { 0x5342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_077)
{
    // 132F8 0041;	
    // (𓋸) EGYPTIAN HIEROGLYPH S033	[5342 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F8, 0x0041 };
    uint32_t const ces[9] = { 0x5342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_078)
{
    // 132F8 0062;	
    // (𓋸) EGYPTIAN HIEROGLYPH S033	[5342 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F8, 0x0062 };
    uint32_t const ces[9] = { 0x5342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_079)
{
    // 132F9 0021;	
    // (𓋹) EGYPTIAN HIEROGLYPH S034	[5343 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F9, 0x0021 };
    uint32_t const ces[9] = { 0x5343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_080)
{
    // 132F9 003F;	
    // (𓋹) EGYPTIAN HIEROGLYPH S034	[5343 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F9, 0x003F };
    uint32_t const ces[9] = { 0x5343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_081)
{
    // 132F9 0061;	
    // (𓋹) EGYPTIAN HIEROGLYPH S034	[5343 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F9, 0x0061 };
    uint32_t const ces[9] = { 0x5343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_082)
{
    // 132F9 0041;	
    // (𓋹) EGYPTIAN HIEROGLYPH S034	[5343 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132F9, 0x0041 };
    uint32_t const ces[9] = { 0x5343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_083)
{
    // 132F9 0062;	
    // (𓋹) EGYPTIAN HIEROGLYPH S034	[5343 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132F9, 0x0062 };
    uint32_t const ces[9] = { 0x5343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_084)
{
    // 132FA 0021;	
    // (𓋺) EGYPTIAN HIEROGLYPH S035	[5344 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FA, 0x0021 };
    uint32_t const ces[9] = { 0x5344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_085)
{
    // 132FA 003F;	
    // (𓋺) EGYPTIAN HIEROGLYPH S035	[5344 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FA, 0x003F };
    uint32_t const ces[9] = { 0x5344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_086)
{
    // 132FA 0061;	
    // (𓋺) EGYPTIAN HIEROGLYPH S035	[5344 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FA, 0x0061 };
    uint32_t const ces[9] = { 0x5344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_087)
{
    // 132FA 0041;	
    // (𓋺) EGYPTIAN HIEROGLYPH S035	[5344 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FA, 0x0041 };
    uint32_t const ces[9] = { 0x5344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_088)
{
    // 132FA 0062;	
    // (𓋺) EGYPTIAN HIEROGLYPH S035	[5344 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FA, 0x0062 };
    uint32_t const ces[9] = { 0x5344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_089)
{
    // 132FB 0021;	
    // (𓋻) EGYPTIAN HIEROGLYPH S035A	[5345 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FB, 0x0021 };
    uint32_t const ces[9] = { 0x5345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_090)
{
    // 132FB 003F;	
    // (𓋻) EGYPTIAN HIEROGLYPH S035A	[5345 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FB, 0x003F };
    uint32_t const ces[9] = { 0x5345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_091)
{
    // 132FB 0061;	
    // (𓋻) EGYPTIAN HIEROGLYPH S035A	[5345 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FB, 0x0061 };
    uint32_t const ces[9] = { 0x5345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_092)
{
    // 132FB 0041;	
    // (𓋻) EGYPTIAN HIEROGLYPH S035A	[5345 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FB, 0x0041 };
    uint32_t const ces[9] = { 0x5345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_093)
{
    // 132FB 0062;	
    // (𓋻) EGYPTIAN HIEROGLYPH S035A	[5345 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FB, 0x0062 };
    uint32_t const ces[9] = { 0x5345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_094)
{
    // 132FC 0021;	
    // (𓋼) EGYPTIAN HIEROGLYPH S036	[5346 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FC, 0x0021 };
    uint32_t const ces[9] = { 0x5346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_095)
{
    // 132FC 003F;	
    // (𓋼) EGYPTIAN HIEROGLYPH S036	[5346 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FC, 0x003F };
    uint32_t const ces[9] = { 0x5346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_096)
{
    // 132FC 0061;	
    // (𓋼) EGYPTIAN HIEROGLYPH S036	[5346 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FC, 0x0061 };
    uint32_t const ces[9] = { 0x5346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_097)
{
    // 132FC 0041;	
    // (𓋼) EGYPTIAN HIEROGLYPH S036	[5346 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FC, 0x0041 };
    uint32_t const ces[9] = { 0x5346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_098)
{
    // 132FC 0062;	
    // (𓋼) EGYPTIAN HIEROGLYPH S036	[5346 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FC, 0x0062 };
    uint32_t const ces[9] = { 0x5346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_099)
{
    // 132FD 0021;	
    // (𓋽) EGYPTIAN HIEROGLYPH S037	[5347 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FD, 0x0021 };
    uint32_t const ces[9] = { 0x5347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_100)
{
    // 132FD 003F;	
    // (𓋽) EGYPTIAN HIEROGLYPH S037	[5347 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FD, 0x003F };
    uint32_t const ces[9] = { 0x5347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_101)
{
    // 132FD 0061;	
    // (𓋽) EGYPTIAN HIEROGLYPH S037	[5347 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FD, 0x0061 };
    uint32_t const ces[9] = { 0x5347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_102)
{
    // 132FD 0041;	
    // (𓋽) EGYPTIAN HIEROGLYPH S037	[5347 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FD, 0x0041 };
    uint32_t const ces[9] = { 0x5347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_103)
{
    // 132FD 0062;	
    // (𓋽) EGYPTIAN HIEROGLYPH S037	[5347 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FD, 0x0062 };
    uint32_t const ces[9] = { 0x5347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_104)
{
    // 132FE 0021;	
    // (𓋾) EGYPTIAN HIEROGLYPH S038	[5348 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FE, 0x0021 };
    uint32_t const ces[9] = { 0x5348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_105)
{
    // 132FE 003F;	
    // (𓋾) EGYPTIAN HIEROGLYPH S038	[5348 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FE, 0x003F };
    uint32_t const ces[9] = { 0x5348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_106)
{
    // 132FE 0061;	
    // (𓋾) EGYPTIAN HIEROGLYPH S038	[5348 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FE, 0x0061 };
    uint32_t const ces[9] = { 0x5348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_107)
{
    // 132FE 0041;	
    // (𓋾) EGYPTIAN HIEROGLYPH S038	[5348 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FE, 0x0041 };
    uint32_t const ces[9] = { 0x5348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_108)
{
    // 132FE 0062;	
    // (𓋾) EGYPTIAN HIEROGLYPH S038	[5348 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FE, 0x0062 };
    uint32_t const ces[9] = { 0x5348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_109)
{
    // 132FF 0021;	
    // (𓋿) EGYPTIAN HIEROGLYPH S039	[5349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FF, 0x0021 };
    uint32_t const ces[9] = { 0x5349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_110)
{
    // 132FF 003F;	
    // (𓋿) EGYPTIAN HIEROGLYPH S039	[5349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FF, 0x003F };
    uint32_t const ces[9] = { 0x5349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_111)
{
    // 132FF 0061;	
    // (𓋿) EGYPTIAN HIEROGLYPH S039	[5349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FF, 0x0061 };
    uint32_t const ces[9] = { 0x5349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_112)
{
    // 132FF 0041;	
    // (𓋿) EGYPTIAN HIEROGLYPH S039	[5349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x132FF, 0x0041 };
    uint32_t const ces[9] = { 0x5349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_113)
{
    // 132FF 0062;	
    // (𓋿) EGYPTIAN HIEROGLYPH S039	[5349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x132FF, 0x0062 };
    uint32_t const ces[9] = { 0x5349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_114)
{
    // 13300 0021;	
    // (𓌀) EGYPTIAN HIEROGLYPH S040	[534A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13300, 0x0021 };
    uint32_t const ces[9] = { 0x534A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_115)
{
    // 13300 003F;	
    // (𓌀) EGYPTIAN HIEROGLYPH S040	[534A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13300, 0x003F };
    uint32_t const ces[9] = { 0x534A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_116)
{
    // 13300 0061;	
    // (𓌀) EGYPTIAN HIEROGLYPH S040	[534A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13300, 0x0061 };
    uint32_t const ces[9] = { 0x534A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_117)
{
    // 13300 0041;	
    // (𓌀) EGYPTIAN HIEROGLYPH S040	[534A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13300, 0x0041 };
    uint32_t const ces[9] = { 0x534A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_118)
{
    // 13300 0062;	
    // (𓌀) EGYPTIAN HIEROGLYPH S040	[534A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13300, 0x0062 };
    uint32_t const ces[9] = { 0x534A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_119)
{
    // 13301 0021;	
    // (𓌁) EGYPTIAN HIEROGLYPH S041	[534B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13301, 0x0021 };
    uint32_t const ces[9] = { 0x534B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_120)
{
    // 13301 003F;	
    // (𓌁) EGYPTIAN HIEROGLYPH S041	[534B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13301, 0x003F };
    uint32_t const ces[9] = { 0x534B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_121)
{
    // 13301 0061;	
    // (𓌁) EGYPTIAN HIEROGLYPH S041	[534B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13301, 0x0061 };
    uint32_t const ces[9] = { 0x534B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_122)
{
    // 13301 0041;	
    // (𓌁) EGYPTIAN HIEROGLYPH S041	[534B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13301, 0x0041 };
    uint32_t const ces[9] = { 0x534B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_123)
{
    // 13301 0062;	
    // (𓌁) EGYPTIAN HIEROGLYPH S041	[534B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13301, 0x0062 };
    uint32_t const ces[9] = { 0x534B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_124)
{
    // 13302 0021;	
    // (𓌂) EGYPTIAN HIEROGLYPH S042	[534C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13302, 0x0021 };
    uint32_t const ces[9] = { 0x534C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_125)
{
    // 13302 003F;	
    // (𓌂) EGYPTIAN HIEROGLYPH S042	[534C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13302, 0x003F };
    uint32_t const ces[9] = { 0x534C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_126)
{
    // 13302 0061;	
    // (𓌂) EGYPTIAN HIEROGLYPH S042	[534C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13302, 0x0061 };
    uint32_t const ces[9] = { 0x534C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_127)
{
    // 13302 0041;	
    // (𓌂) EGYPTIAN HIEROGLYPH S042	[534C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13302, 0x0041 };
    uint32_t const ces[9] = { 0x534C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_128)
{
    // 13302 0062;	
    // (𓌂) EGYPTIAN HIEROGLYPH S042	[534C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13302, 0x0062 };
    uint32_t const ces[9] = { 0x534C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_129)
{
    // 13303 0021;	
    // (𓌃) EGYPTIAN HIEROGLYPH S043	[534D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13303, 0x0021 };
    uint32_t const ces[9] = { 0x534D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_130)
{
    // 13303 003F;	
    // (𓌃) EGYPTIAN HIEROGLYPH S043	[534D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13303, 0x003F };
    uint32_t const ces[9] = { 0x534D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_131)
{
    // 13303 0061;	
    // (𓌃) EGYPTIAN HIEROGLYPH S043	[534D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13303, 0x0061 };
    uint32_t const ces[9] = { 0x534D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_132)
{
    // 13303 0041;	
    // (𓌃) EGYPTIAN HIEROGLYPH S043	[534D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13303, 0x0041 };
    uint32_t const ces[9] = { 0x534D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_133)
{
    // 13303 0062;	
    // (𓌃) EGYPTIAN HIEROGLYPH S043	[534D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13303, 0x0062 };
    uint32_t const ces[9] = { 0x534D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_134)
{
    // 13304 0021;	
    // (𓌄) EGYPTIAN HIEROGLYPH S044	[534E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13304, 0x0021 };
    uint32_t const ces[9] = { 0x534E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_135)
{
    // 13304 003F;	
    // (𓌄) EGYPTIAN HIEROGLYPH S044	[534E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13304, 0x003F };
    uint32_t const ces[9] = { 0x534E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_136)
{
    // 13304 0061;	
    // (𓌄) EGYPTIAN HIEROGLYPH S044	[534E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13304, 0x0061 };
    uint32_t const ces[9] = { 0x534E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_137)
{
    // 13304 0041;	
    // (𓌄) EGYPTIAN HIEROGLYPH S044	[534E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13304, 0x0041 };
    uint32_t const ces[9] = { 0x534E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_138)
{
    // 13304 0062;	
    // (𓌄) EGYPTIAN HIEROGLYPH S044	[534E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13304, 0x0062 };
    uint32_t const ces[9] = { 0x534E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_139)
{
    // 13305 0021;	
    // (𓌅) EGYPTIAN HIEROGLYPH S045	[534F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13305, 0x0021 };
    uint32_t const ces[9] = { 0x534F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_140)
{
    // 13305 003F;	
    // (𓌅) EGYPTIAN HIEROGLYPH S045	[534F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13305, 0x003F };
    uint32_t const ces[9] = { 0x534F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_141)
{
    // 13305 0061;	
    // (𓌅) EGYPTIAN HIEROGLYPH S045	[534F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13305, 0x0061 };
    uint32_t const ces[9] = { 0x534F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_142)
{
    // 13305 0041;	
    // (𓌅) EGYPTIAN HIEROGLYPH S045	[534F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13305, 0x0041 };
    uint32_t const ces[9] = { 0x534F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_143)
{
    // 13305 0062;	
    // (𓌅) EGYPTIAN HIEROGLYPH S045	[534F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13305, 0x0062 };
    uint32_t const ces[9] = { 0x534F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_144)
{
    // 13306 0021;	
    // (𓌆) EGYPTIAN HIEROGLYPH S046	[5350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13306, 0x0021 };
    uint32_t const ces[9] = { 0x5350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_145)
{
    // 13306 003F;	
    // (𓌆) EGYPTIAN HIEROGLYPH S046	[5350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13306, 0x003F };
    uint32_t const ces[9] = { 0x5350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_146)
{
    // 13306 0061;	
    // (𓌆) EGYPTIAN HIEROGLYPH S046	[5350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13306, 0x0061 };
    uint32_t const ces[9] = { 0x5350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_147)
{
    // 13306 0041;	
    // (𓌆) EGYPTIAN HIEROGLYPH S046	[5350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13306, 0x0041 };
    uint32_t const ces[9] = { 0x5350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_148)
{
    // 13306 0062;	
    // (𓌆) EGYPTIAN HIEROGLYPH S046	[5350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13306, 0x0062 };
    uint32_t const ces[9] = { 0x5350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_149)
{
    // 13307 0021;	
    // (𓌇) EGYPTIAN HIEROGLYPH T001	[5351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13307, 0x0021 };
    uint32_t const ces[9] = { 0x5351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_150)
{
    // 13307 003F;	
    // (𓌇) EGYPTIAN HIEROGLYPH T001	[5351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13307, 0x003F };
    uint32_t const ces[9] = { 0x5351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_151)
{
    // 13307 0061;	
    // (𓌇) EGYPTIAN HIEROGLYPH T001	[5351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13307, 0x0061 };
    uint32_t const ces[9] = { 0x5351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_152)
{
    // 13307 0041;	
    // (𓌇) EGYPTIAN HIEROGLYPH T001	[5351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13307, 0x0041 };
    uint32_t const ces[9] = { 0x5351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_153)
{
    // 13307 0062;	
    // (𓌇) EGYPTIAN HIEROGLYPH T001	[5351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13307, 0x0062 };
    uint32_t const ces[9] = { 0x5351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_154)
{
    // 13308 0021;	
    // (𓌈) EGYPTIAN HIEROGLYPH T002	[5352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13308, 0x0021 };
    uint32_t const ces[9] = { 0x5352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_155)
{
    // 13308 003F;	
    // (𓌈) EGYPTIAN HIEROGLYPH T002	[5352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13308, 0x003F };
    uint32_t const ces[9] = { 0x5352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_156)
{
    // 13308 0061;	
    // (𓌈) EGYPTIAN HIEROGLYPH T002	[5352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13308, 0x0061 };
    uint32_t const ces[9] = { 0x5352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_157)
{
    // 13308 0041;	
    // (𓌈) EGYPTIAN HIEROGLYPH T002	[5352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13308, 0x0041 };
    uint32_t const ces[9] = { 0x5352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_158)
{
    // 13308 0062;	
    // (𓌈) EGYPTIAN HIEROGLYPH T002	[5352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13308, 0x0062 };
    uint32_t const ces[9] = { 0x5352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_159)
{
    // 13309 0021;	
    // (𓌉) EGYPTIAN HIEROGLYPH T003	[5353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13309, 0x0021 };
    uint32_t const ces[9] = { 0x5353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_160)
{
    // 13309 003F;	
    // (𓌉) EGYPTIAN HIEROGLYPH T003	[5353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13309, 0x003F };
    uint32_t const ces[9] = { 0x5353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_161)
{
    // 13309 0061;	
    // (𓌉) EGYPTIAN HIEROGLYPH T003	[5353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13309, 0x0061 };
    uint32_t const ces[9] = { 0x5353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_162)
{
    // 13309 0041;	
    // (𓌉) EGYPTIAN HIEROGLYPH T003	[5353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13309, 0x0041 };
    uint32_t const ces[9] = { 0x5353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_163)
{
    // 13309 0062;	
    // (𓌉) EGYPTIAN HIEROGLYPH T003	[5353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13309, 0x0062 };
    uint32_t const ces[9] = { 0x5353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_164)
{
    // 1330A 0021;	
    // (𓌊) EGYPTIAN HIEROGLYPH T003A	[5354 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330A, 0x0021 };
    uint32_t const ces[9] = { 0x5354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_165)
{
    // 1330A 003F;	
    // (𓌊) EGYPTIAN HIEROGLYPH T003A	[5354 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330A, 0x003F };
    uint32_t const ces[9] = { 0x5354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_166)
{
    // 1330A 0061;	
    // (𓌊) EGYPTIAN HIEROGLYPH T003A	[5354 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330A, 0x0061 };
    uint32_t const ces[9] = { 0x5354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_167)
{
    // 1330A 0041;	
    // (𓌊) EGYPTIAN HIEROGLYPH T003A	[5354 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330A, 0x0041 };
    uint32_t const ces[9] = { 0x5354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_168)
{
    // 1330A 0062;	
    // (𓌊) EGYPTIAN HIEROGLYPH T003A	[5354 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330A, 0x0062 };
    uint32_t const ces[9] = { 0x5354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_169)
{
    // 1330B 0021;	
    // (𓌋) EGYPTIAN HIEROGLYPH T004	[5355 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330B, 0x0021 };
    uint32_t const ces[9] = { 0x5355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_170)
{
    // 1330B 003F;	
    // (𓌋) EGYPTIAN HIEROGLYPH T004	[5355 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330B, 0x003F };
    uint32_t const ces[9] = { 0x5355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_171)
{
    // 1330B 0061;	
    // (𓌋) EGYPTIAN HIEROGLYPH T004	[5355 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330B, 0x0061 };
    uint32_t const ces[9] = { 0x5355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_172)
{
    // 1330B 0041;	
    // (𓌋) EGYPTIAN HIEROGLYPH T004	[5355 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330B, 0x0041 };
    uint32_t const ces[9] = { 0x5355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_173)
{
    // 1330B 0062;	
    // (𓌋) EGYPTIAN HIEROGLYPH T004	[5355 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330B, 0x0062 };
    uint32_t const ces[9] = { 0x5355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_174)
{
    // 1330C 0021;	
    // (𓌌) EGYPTIAN HIEROGLYPH T005	[5356 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330C, 0x0021 };
    uint32_t const ces[9] = { 0x5356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_175)
{
    // 1330C 003F;	
    // (𓌌) EGYPTIAN HIEROGLYPH T005	[5356 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330C, 0x003F };
    uint32_t const ces[9] = { 0x5356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_176)
{
    // 1330C 0061;	
    // (𓌌) EGYPTIAN HIEROGLYPH T005	[5356 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330C, 0x0061 };
    uint32_t const ces[9] = { 0x5356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_177)
{
    // 1330C 0041;	
    // (𓌌) EGYPTIAN HIEROGLYPH T005	[5356 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330C, 0x0041 };
    uint32_t const ces[9] = { 0x5356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_178)
{
    // 1330C 0062;	
    // (𓌌) EGYPTIAN HIEROGLYPH T005	[5356 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330C, 0x0062 };
    uint32_t const ces[9] = { 0x5356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_179)
{
    // 1330D 0021;	
    // (𓌍) EGYPTIAN HIEROGLYPH T006	[5357 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330D, 0x0021 };
    uint32_t const ces[9] = { 0x5357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_180)
{
    // 1330D 003F;	
    // (𓌍) EGYPTIAN HIEROGLYPH T006	[5357 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330D, 0x003F };
    uint32_t const ces[9] = { 0x5357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_181)
{
    // 1330D 0061;	
    // (𓌍) EGYPTIAN HIEROGLYPH T006	[5357 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330D, 0x0061 };
    uint32_t const ces[9] = { 0x5357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_182)
{
    // 1330D 0041;	
    // (𓌍) EGYPTIAN HIEROGLYPH T006	[5357 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330D, 0x0041 };
    uint32_t const ces[9] = { 0x5357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_183)
{
    // 1330D 0062;	
    // (𓌍) EGYPTIAN HIEROGLYPH T006	[5357 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330D, 0x0062 };
    uint32_t const ces[9] = { 0x5357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_184)
{
    // 1330E 0021;	
    // (𓌎) EGYPTIAN HIEROGLYPH T007	[5358 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330E, 0x0021 };
    uint32_t const ces[9] = { 0x5358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_185)
{
    // 1330E 003F;	
    // (𓌎) EGYPTIAN HIEROGLYPH T007	[5358 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330E, 0x003F };
    uint32_t const ces[9] = { 0x5358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_186)
{
    // 1330E 0061;	
    // (𓌎) EGYPTIAN HIEROGLYPH T007	[5358 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330E, 0x0061 };
    uint32_t const ces[9] = { 0x5358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_187)
{
    // 1330E 0041;	
    // (𓌎) EGYPTIAN HIEROGLYPH T007	[5358 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330E, 0x0041 };
    uint32_t const ces[9] = { 0x5358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_188)
{
    // 1330E 0062;	
    // (𓌎) EGYPTIAN HIEROGLYPH T007	[5358 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330E, 0x0062 };
    uint32_t const ces[9] = { 0x5358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_189)
{
    // 1330F 0021;	
    // (𓌏) EGYPTIAN HIEROGLYPH T007A	[5359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330F, 0x0021 };
    uint32_t const ces[9] = { 0x5359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_190)
{
    // 1330F 003F;	
    // (𓌏) EGYPTIAN HIEROGLYPH T007A	[5359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330F, 0x003F };
    uint32_t const ces[9] = { 0x5359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_191)
{
    // 1330F 0061;	
    // (𓌏) EGYPTIAN HIEROGLYPH T007A	[5359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330F, 0x0061 };
    uint32_t const ces[9] = { 0x5359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_192)
{
    // 1330F 0041;	
    // (𓌏) EGYPTIAN HIEROGLYPH T007A	[5359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1330F, 0x0041 };
    uint32_t const ces[9] = { 0x5359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_193)
{
    // 1330F 0062;	
    // (𓌏) EGYPTIAN HIEROGLYPH T007A	[5359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1330F, 0x0062 };
    uint32_t const ces[9] = { 0x5359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_194)
{
    // 13310 0021;	
    // (𓌐) EGYPTIAN HIEROGLYPH T008	[535A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13310, 0x0021 };
    uint32_t const ces[9] = { 0x535A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_195)
{
    // 13310 003F;	
    // (𓌐) EGYPTIAN HIEROGLYPH T008	[535A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13310, 0x003F };
    uint32_t const ces[9] = { 0x535A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_196)
{
    // 13310 0061;	
    // (𓌐) EGYPTIAN HIEROGLYPH T008	[535A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13310, 0x0061 };
    uint32_t const ces[9] = { 0x535A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_197)
{
    // 13310 0041;	
    // (𓌐) EGYPTIAN HIEROGLYPH T008	[535A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13310, 0x0041 };
    uint32_t const ces[9] = { 0x535A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_198)
{
    // 13310 0062;	
    // (𓌐) EGYPTIAN HIEROGLYPH T008	[535A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13310, 0x0062 };
    uint32_t const ces[9] = { 0x535A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_199)
{
    // 13311 0021;	
    // (𓌑) EGYPTIAN HIEROGLYPH T008A	[535B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13311, 0x0021 };
    uint32_t const ces[9] = { 0x535B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_200)
{
    // 13311 003F;	
    // (𓌑) EGYPTIAN HIEROGLYPH T008A	[535B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13311, 0x003F };
    uint32_t const ces[9] = { 0x535B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_201)
{
    // 13311 0061;	
    // (𓌑) EGYPTIAN HIEROGLYPH T008A	[535B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13311, 0x0061 };
    uint32_t const ces[9] = { 0x535B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_202)
{
    // 13311 0041;	
    // (𓌑) EGYPTIAN HIEROGLYPH T008A	[535B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13311, 0x0041 };
    uint32_t const ces[9] = { 0x535B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_203)
{
    // 13311 0062;	
    // (𓌑) EGYPTIAN HIEROGLYPH T008A	[535B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13311, 0x0062 };
    uint32_t const ces[9] = { 0x535B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_204)
{
    // 13312 0021;	
    // (𓌒) EGYPTIAN HIEROGLYPH T009	[535C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13312, 0x0021 };
    uint32_t const ces[9] = { 0x535C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_205)
{
    // 13312 003F;	
    // (𓌒) EGYPTIAN HIEROGLYPH T009	[535C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13312, 0x003F };
    uint32_t const ces[9] = { 0x535C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_206)
{
    // 13312 0061;	
    // (𓌒) EGYPTIAN HIEROGLYPH T009	[535C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13312, 0x0061 };
    uint32_t const ces[9] = { 0x535C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_207)
{
    // 13312 0041;	
    // (𓌒) EGYPTIAN HIEROGLYPH T009	[535C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13312, 0x0041 };
    uint32_t const ces[9] = { 0x535C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_208)
{
    // 13312 0062;	
    // (𓌒) EGYPTIAN HIEROGLYPH T009	[535C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13312, 0x0062 };
    uint32_t const ces[9] = { 0x535C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_209)
{
    // 13313 0021;	
    // (𓌓) EGYPTIAN HIEROGLYPH T009A	[535D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13313, 0x0021 };
    uint32_t const ces[9] = { 0x535D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_210)
{
    // 13313 003F;	
    // (𓌓) EGYPTIAN HIEROGLYPH T009A	[535D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13313, 0x003F };
    uint32_t const ces[9] = { 0x535D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_211)
{
    // 13313 0061;	
    // (𓌓) EGYPTIAN HIEROGLYPH T009A	[535D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13313, 0x0061 };
    uint32_t const ces[9] = { 0x535D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_212)
{
    // 13313 0041;	
    // (𓌓) EGYPTIAN HIEROGLYPH T009A	[535D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13313, 0x0041 };
    uint32_t const ces[9] = { 0x535D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_213)
{
    // 13313 0062;	
    // (𓌓) EGYPTIAN HIEROGLYPH T009A	[535D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13313, 0x0062 };
    uint32_t const ces[9] = { 0x535D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_214)
{
    // 13314 0021;	
    // (𓌔) EGYPTIAN HIEROGLYPH T010	[535E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13314, 0x0021 };
    uint32_t const ces[9] = { 0x535E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_215)
{
    // 13314 003F;	
    // (𓌔) EGYPTIAN HIEROGLYPH T010	[535E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13314, 0x003F };
    uint32_t const ces[9] = { 0x535E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_216)
{
    // 13314 0061;	
    // (𓌔) EGYPTIAN HIEROGLYPH T010	[535E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13314, 0x0061 };
    uint32_t const ces[9] = { 0x535E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_217)
{
    // 13314 0041;	
    // (𓌔) EGYPTIAN HIEROGLYPH T010	[535E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13314, 0x0041 };
    uint32_t const ces[9] = { 0x535E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_218)
{
    // 13314 0062;	
    // (𓌔) EGYPTIAN HIEROGLYPH T010	[535E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13314, 0x0062 };
    uint32_t const ces[9] = { 0x535E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_219)
{
    // 13315 0021;	
    // (𓌕) EGYPTIAN HIEROGLYPH T011	[535F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13315, 0x0021 };
    uint32_t const ces[9] = { 0x535F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_220)
{
    // 13315 003F;	
    // (𓌕) EGYPTIAN HIEROGLYPH T011	[535F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13315, 0x003F };
    uint32_t const ces[9] = { 0x535F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_221)
{
    // 13315 0061;	
    // (𓌕) EGYPTIAN HIEROGLYPH T011	[535F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13315, 0x0061 };
    uint32_t const ces[9] = { 0x535F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_222)
{
    // 13315 0041;	
    // (𓌕) EGYPTIAN HIEROGLYPH T011	[535F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13315, 0x0041 };
    uint32_t const ces[9] = { 0x535F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_223)
{
    // 13315 0062;	
    // (𓌕) EGYPTIAN HIEROGLYPH T011	[535F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13315, 0x0062 };
    uint32_t const ces[9] = { 0x535F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_224)
{
    // 13316 0021;	
    // (𓌖) EGYPTIAN HIEROGLYPH T011A	[5360 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13316, 0x0021 };
    uint32_t const ces[9] = { 0x5360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_225)
{
    // 13316 003F;	
    // (𓌖) EGYPTIAN HIEROGLYPH T011A	[5360 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13316, 0x003F };
    uint32_t const ces[9] = { 0x5360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_226)
{
    // 13316 0061;	
    // (𓌖) EGYPTIAN HIEROGLYPH T011A	[5360 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13316, 0x0061 };
    uint32_t const ces[9] = { 0x5360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_227)
{
    // 13316 0041;	
    // (𓌖) EGYPTIAN HIEROGLYPH T011A	[5360 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13316, 0x0041 };
    uint32_t const ces[9] = { 0x5360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_228)
{
    // 13316 0062;	
    // (𓌖) EGYPTIAN HIEROGLYPH T011A	[5360 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13316, 0x0062 };
    uint32_t const ces[9] = { 0x5360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_229)
{
    // 13317 0021;	
    // (𓌗) EGYPTIAN HIEROGLYPH T012	[5361 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13317, 0x0021 };
    uint32_t const ces[9] = { 0x5361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_230)
{
    // 13317 003F;	
    // (𓌗) EGYPTIAN HIEROGLYPH T012	[5361 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13317, 0x003F };
    uint32_t const ces[9] = { 0x5361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_231)
{
    // 13317 0061;	
    // (𓌗) EGYPTIAN HIEROGLYPH T012	[5361 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13317, 0x0061 };
    uint32_t const ces[9] = { 0x5361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_232)
{
    // 13317 0041;	
    // (𓌗) EGYPTIAN HIEROGLYPH T012	[5361 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13317, 0x0041 };
    uint32_t const ces[9] = { 0x5361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_233)
{
    // 13317 0062;	
    // (𓌗) EGYPTIAN HIEROGLYPH T012	[5361 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13317, 0x0062 };
    uint32_t const ces[9] = { 0x5361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_234)
{
    // 13318 0021;	
    // (𓌘) EGYPTIAN HIEROGLYPH T013	[5362 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13318, 0x0021 };
    uint32_t const ces[9] = { 0x5362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_235)
{
    // 13318 003F;	
    // (𓌘) EGYPTIAN HIEROGLYPH T013	[5362 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13318, 0x003F };
    uint32_t const ces[9] = { 0x5362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_236)
{
    // 13318 0061;	
    // (𓌘) EGYPTIAN HIEROGLYPH T013	[5362 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13318, 0x0061 };
    uint32_t const ces[9] = { 0x5362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_237)
{
    // 13318 0041;	
    // (𓌘) EGYPTIAN HIEROGLYPH T013	[5362 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13318, 0x0041 };
    uint32_t const ces[9] = { 0x5362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_238)
{
    // 13318 0062;	
    // (𓌘) EGYPTIAN HIEROGLYPH T013	[5362 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13318, 0x0062 };
    uint32_t const ces[9] = { 0x5362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_239)
{
    // 13319 0021;	
    // (𓌙) EGYPTIAN HIEROGLYPH T014	[5363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13319, 0x0021 };
    uint32_t const ces[9] = { 0x5363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_240)
{
    // 13319 003F;	
    // (𓌙) EGYPTIAN HIEROGLYPH T014	[5363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13319, 0x003F };
    uint32_t const ces[9] = { 0x5363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_241)
{
    // 13319 0061;	
    // (𓌙) EGYPTIAN HIEROGLYPH T014	[5363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13319, 0x0061 };
    uint32_t const ces[9] = { 0x5363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_242)
{
    // 13319 0041;	
    // (𓌙) EGYPTIAN HIEROGLYPH T014	[5363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13319, 0x0041 };
    uint32_t const ces[9] = { 0x5363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_243)
{
    // 13319 0062;	
    // (𓌙) EGYPTIAN HIEROGLYPH T014	[5363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13319, 0x0062 };
    uint32_t const ces[9] = { 0x5363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_244)
{
    // 1331A 0021;	
    // (𓌚) EGYPTIAN HIEROGLYPH T015	[5364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331A, 0x0021 };
    uint32_t const ces[9] = { 0x5364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_245)
{
    // 1331A 003F;	
    // (𓌚) EGYPTIAN HIEROGLYPH T015	[5364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331A, 0x003F };
    uint32_t const ces[9] = { 0x5364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_246)
{
    // 1331A 0061;	
    // (𓌚) EGYPTIAN HIEROGLYPH T015	[5364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331A, 0x0061 };
    uint32_t const ces[9] = { 0x5364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_247)
{
    // 1331A 0041;	
    // (𓌚) EGYPTIAN HIEROGLYPH T015	[5364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331A, 0x0041 };
    uint32_t const ces[9] = { 0x5364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_248)
{
    // 1331A 0062;	
    // (𓌚) EGYPTIAN HIEROGLYPH T015	[5364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331A, 0x0062 };
    uint32_t const ces[9] = { 0x5364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_249)
{
    // 1331B 0021;	
    // (𓌛) EGYPTIAN HIEROGLYPH T016	[5365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331B, 0x0021 };
    uint32_t const ces[9] = { 0x5365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_250)
{
    // 1331B 003F;	
    // (𓌛) EGYPTIAN HIEROGLYPH T016	[5365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331B, 0x003F };
    uint32_t const ces[9] = { 0x5365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_251)
{
    // 1331B 0061;	
    // (𓌛) EGYPTIAN HIEROGLYPH T016	[5365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331B, 0x0061 };
    uint32_t const ces[9] = { 0x5365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_252)
{
    // 1331B 0041;	
    // (𓌛) EGYPTIAN HIEROGLYPH T016	[5365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331B, 0x0041 };
    uint32_t const ces[9] = { 0x5365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_253)
{
    // 1331B 0062;	
    // (𓌛) EGYPTIAN HIEROGLYPH T016	[5365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331B, 0x0062 };
    uint32_t const ces[9] = { 0x5365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_254)
{
    // 1331C 0021;	
    // (𓌜) EGYPTIAN HIEROGLYPH T016A	[5366 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331C, 0x0021 };
    uint32_t const ces[9] = { 0x5366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_255)
{
    // 1331C 003F;	
    // (𓌜) EGYPTIAN HIEROGLYPH T016A	[5366 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331C, 0x003F };
    uint32_t const ces[9] = { 0x5366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_256)
{
    // 1331C 0061;	
    // (𓌜) EGYPTIAN HIEROGLYPH T016A	[5366 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331C, 0x0061 };
    uint32_t const ces[9] = { 0x5366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_257)
{
    // 1331C 0041;	
    // (𓌜) EGYPTIAN HIEROGLYPH T016A	[5366 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331C, 0x0041 };
    uint32_t const ces[9] = { 0x5366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_258)
{
    // 1331C 0062;	
    // (𓌜) EGYPTIAN HIEROGLYPH T016A	[5366 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331C, 0x0062 };
    uint32_t const ces[9] = { 0x5366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_259)
{
    // 1331D 0021;	
    // (𓌝) EGYPTIAN HIEROGLYPH T017	[5367 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331D, 0x0021 };
    uint32_t const ces[9] = { 0x5367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_260)
{
    // 1331D 003F;	
    // (𓌝) EGYPTIAN HIEROGLYPH T017	[5367 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331D, 0x003F };
    uint32_t const ces[9] = { 0x5367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_261)
{
    // 1331D 0061;	
    // (𓌝) EGYPTIAN HIEROGLYPH T017	[5367 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331D, 0x0061 };
    uint32_t const ces[9] = { 0x5367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_262)
{
    // 1331D 0041;	
    // (𓌝) EGYPTIAN HIEROGLYPH T017	[5367 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331D, 0x0041 };
    uint32_t const ces[9] = { 0x5367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_263)
{
    // 1331D 0062;	
    // (𓌝) EGYPTIAN HIEROGLYPH T017	[5367 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331D, 0x0062 };
    uint32_t const ces[9] = { 0x5367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_264)
{
    // 1331E 0021;	
    // (𓌞) EGYPTIAN HIEROGLYPH T018	[5368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331E, 0x0021 };
    uint32_t const ces[9] = { 0x5368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_265)
{
    // 1331E 003F;	
    // (𓌞) EGYPTIAN HIEROGLYPH T018	[5368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331E, 0x003F };
    uint32_t const ces[9] = { 0x5368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_266)
{
    // 1331E 0061;	
    // (𓌞) EGYPTIAN HIEROGLYPH T018	[5368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331E, 0x0061 };
    uint32_t const ces[9] = { 0x5368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_267)
{
    // 1331E 0041;	
    // (𓌞) EGYPTIAN HIEROGLYPH T018	[5368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331E, 0x0041 };
    uint32_t const ces[9] = { 0x5368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_268)
{
    // 1331E 0062;	
    // (𓌞) EGYPTIAN HIEROGLYPH T018	[5368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331E, 0x0062 };
    uint32_t const ces[9] = { 0x5368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_269)
{
    // 1331F 0021;	
    // (𓌟) EGYPTIAN HIEROGLYPH T019	[5369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331F, 0x0021 };
    uint32_t const ces[9] = { 0x5369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_270)
{
    // 1331F 003F;	
    // (𓌟) EGYPTIAN HIEROGLYPH T019	[5369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331F, 0x003F };
    uint32_t const ces[9] = { 0x5369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_271)
{
    // 1331F 0061;	
    // (𓌟) EGYPTIAN HIEROGLYPH T019	[5369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331F, 0x0061 };
    uint32_t const ces[9] = { 0x5369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_272)
{
    // 1331F 0041;	
    // (𓌟) EGYPTIAN HIEROGLYPH T019	[5369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1331F, 0x0041 };
    uint32_t const ces[9] = { 0x5369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_273)
{
    // 1331F 0062;	
    // (𓌟) EGYPTIAN HIEROGLYPH T019	[5369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1331F, 0x0062 };
    uint32_t const ces[9] = { 0x5369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_274)
{
    // 13320 0021;	
    // (𓌠) EGYPTIAN HIEROGLYPH T020	[536A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13320, 0x0021 };
    uint32_t const ces[9] = { 0x536A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_275)
{
    // 13320 003F;	
    // (𓌠) EGYPTIAN HIEROGLYPH T020	[536A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13320, 0x003F };
    uint32_t const ces[9] = { 0x536A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_276)
{
    // 13320 0061;	
    // (𓌠) EGYPTIAN HIEROGLYPH T020	[536A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13320, 0x0061 };
    uint32_t const ces[9] = { 0x536A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_277)
{
    // 13320 0041;	
    // (𓌠) EGYPTIAN HIEROGLYPH T020	[536A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13320, 0x0041 };
    uint32_t const ces[9] = { 0x536A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_278)
{
    // 13320 0062;	
    // (𓌠) EGYPTIAN HIEROGLYPH T020	[536A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13320, 0x0062 };
    uint32_t const ces[9] = { 0x536A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_279)
{
    // 13321 0021;	
    // (𓌡) EGYPTIAN HIEROGLYPH T021	[536B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13321, 0x0021 };
    uint32_t const ces[9] = { 0x536B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_280)
{
    // 13321 003F;	
    // (𓌡) EGYPTIAN HIEROGLYPH T021	[536B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13321, 0x003F };
    uint32_t const ces[9] = { 0x536B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_281)
{
    // 13321 0061;	
    // (𓌡) EGYPTIAN HIEROGLYPH T021	[536B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13321, 0x0061 };
    uint32_t const ces[9] = { 0x536B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_282)
{
    // 13321 0041;	
    // (𓌡) EGYPTIAN HIEROGLYPH T021	[536B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13321, 0x0041 };
    uint32_t const ces[9] = { 0x536B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_283)
{
    // 13321 0062;	
    // (𓌡) EGYPTIAN HIEROGLYPH T021	[536B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13321, 0x0062 };
    uint32_t const ces[9] = { 0x536B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_284)
{
    // 13322 0021;	
    // (𓌢) EGYPTIAN HIEROGLYPH T022	[536C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13322, 0x0021 };
    uint32_t const ces[9] = { 0x536C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_285)
{
    // 13322 003F;	
    // (𓌢) EGYPTIAN HIEROGLYPH T022	[536C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13322, 0x003F };
    uint32_t const ces[9] = { 0x536C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_286)
{
    // 13322 0061;	
    // (𓌢) EGYPTIAN HIEROGLYPH T022	[536C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13322, 0x0061 };
    uint32_t const ces[9] = { 0x536C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_287)
{
    // 13322 0041;	
    // (𓌢) EGYPTIAN HIEROGLYPH T022	[536C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13322, 0x0041 };
    uint32_t const ces[9] = { 0x536C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_288)
{
    // 13322 0062;	
    // (𓌢) EGYPTIAN HIEROGLYPH T022	[536C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13322, 0x0062 };
    uint32_t const ces[9] = { 0x536C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_289)
{
    // 13323 0021;	
    // (𓌣) EGYPTIAN HIEROGLYPH T023	[536D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13323, 0x0021 };
    uint32_t const ces[9] = { 0x536D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_290)
{
    // 13323 003F;	
    // (𓌣) EGYPTIAN HIEROGLYPH T023	[536D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13323, 0x003F };
    uint32_t const ces[9] = { 0x536D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_291)
{
    // 13323 0061;	
    // (𓌣) EGYPTIAN HIEROGLYPH T023	[536D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13323, 0x0061 };
    uint32_t const ces[9] = { 0x536D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_292)
{
    // 13323 0041;	
    // (𓌣) EGYPTIAN HIEROGLYPH T023	[536D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13323, 0x0041 };
    uint32_t const ces[9] = { 0x536D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_293)
{
    // 13323 0062;	
    // (𓌣) EGYPTIAN HIEROGLYPH T023	[536D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13323, 0x0062 };
    uint32_t const ces[9] = { 0x536D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_294)
{
    // 13324 0021;	
    // (𓌤) EGYPTIAN HIEROGLYPH T024	[536E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13324, 0x0021 };
    uint32_t const ces[9] = { 0x536E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_295)
{
    // 13324 003F;	
    // (𓌤) EGYPTIAN HIEROGLYPH T024	[536E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13324, 0x003F };
    uint32_t const ces[9] = { 0x536E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_296)
{
    // 13324 0061;	
    // (𓌤) EGYPTIAN HIEROGLYPH T024	[536E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13324, 0x0061 };
    uint32_t const ces[9] = { 0x536E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_297)
{
    // 13324 0041;	
    // (𓌤) EGYPTIAN HIEROGLYPH T024	[536E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13324, 0x0041 };
    uint32_t const ces[9] = { 0x536E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_298)
{
    // 13324 0062;	
    // (𓌤) EGYPTIAN HIEROGLYPH T024	[536E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13324, 0x0062 };
    uint32_t const ces[9] = { 0x536E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_299)
{
    // 13325 0021;	
    // (𓌥) EGYPTIAN HIEROGLYPH T025	[536F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13325, 0x0021 };
    uint32_t const ces[9] = { 0x536F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_300)
{
    // 13325 003F;	
    // (𓌥) EGYPTIAN HIEROGLYPH T025	[536F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13325, 0x003F };
    uint32_t const ces[9] = { 0x536F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_301)
{
    // 13325 0061;	
    // (𓌥) EGYPTIAN HIEROGLYPH T025	[536F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13325, 0x0061 };
    uint32_t const ces[9] = { 0x536F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_302)
{
    // 13325 0041;	
    // (𓌥) EGYPTIAN HIEROGLYPH T025	[536F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13325, 0x0041 };
    uint32_t const ces[9] = { 0x536F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_303)
{
    // 13325 0062;	
    // (𓌥) EGYPTIAN HIEROGLYPH T025	[536F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13325, 0x0062 };
    uint32_t const ces[9] = { 0x536F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_304)
{
    // 13326 0021;	
    // (𓌦) EGYPTIAN HIEROGLYPH T026	[5370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13326, 0x0021 };
    uint32_t const ces[9] = { 0x5370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_305)
{
    // 13326 003F;	
    // (𓌦) EGYPTIAN HIEROGLYPH T026	[5370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13326, 0x003F };
    uint32_t const ces[9] = { 0x5370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_306)
{
    // 13326 0061;	
    // (𓌦) EGYPTIAN HIEROGLYPH T026	[5370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13326, 0x0061 };
    uint32_t const ces[9] = { 0x5370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_307)
{
    // 13326 0041;	
    // (𓌦) EGYPTIAN HIEROGLYPH T026	[5370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13326, 0x0041 };
    uint32_t const ces[9] = { 0x5370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_308)
{
    // 13326 0062;	
    // (𓌦) EGYPTIAN HIEROGLYPH T026	[5370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13326, 0x0062 };
    uint32_t const ces[9] = { 0x5370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_309)
{
    // 13327 0021;	
    // (𓌧) EGYPTIAN HIEROGLYPH T027	[5371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13327, 0x0021 };
    uint32_t const ces[9] = { 0x5371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_310)
{
    // 13327 003F;	
    // (𓌧) EGYPTIAN HIEROGLYPH T027	[5371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13327, 0x003F };
    uint32_t const ces[9] = { 0x5371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_311)
{
    // 13327 0061;	
    // (𓌧) EGYPTIAN HIEROGLYPH T027	[5371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13327, 0x0061 };
    uint32_t const ces[9] = { 0x5371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_312)
{
    // 13327 0041;	
    // (𓌧) EGYPTIAN HIEROGLYPH T027	[5371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13327, 0x0041 };
    uint32_t const ces[9] = { 0x5371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_313)
{
    // 13327 0062;	
    // (𓌧) EGYPTIAN HIEROGLYPH T027	[5371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13327, 0x0062 };
    uint32_t const ces[9] = { 0x5371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_314)
{
    // 13328 0021;	
    // (𓌨) EGYPTIAN HIEROGLYPH T028	[5372 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13328, 0x0021 };
    uint32_t const ces[9] = { 0x5372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_315)
{
    // 13328 003F;	
    // (𓌨) EGYPTIAN HIEROGLYPH T028	[5372 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13328, 0x003F };
    uint32_t const ces[9] = { 0x5372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_316)
{
    // 13328 0061;	
    // (𓌨) EGYPTIAN HIEROGLYPH T028	[5372 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13328, 0x0061 };
    uint32_t const ces[9] = { 0x5372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_317)
{
    // 13328 0041;	
    // (𓌨) EGYPTIAN HIEROGLYPH T028	[5372 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13328, 0x0041 };
    uint32_t const ces[9] = { 0x5372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_318)
{
    // 13328 0062;	
    // (𓌨) EGYPTIAN HIEROGLYPH T028	[5372 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13328, 0x0062 };
    uint32_t const ces[9] = { 0x5372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_319)
{
    // 13329 0021;	
    // (𓌩) EGYPTIAN HIEROGLYPH T029	[5373 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13329, 0x0021 };
    uint32_t const ces[9] = { 0x5373, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_320)
{
    // 13329 003F;	
    // (𓌩) EGYPTIAN HIEROGLYPH T029	[5373 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13329, 0x003F };
    uint32_t const ces[9] = { 0x5373, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_321)
{
    // 13329 0061;	
    // (𓌩) EGYPTIAN HIEROGLYPH T029	[5373 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13329, 0x0061 };
    uint32_t const ces[9] = { 0x5373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_322)
{
    // 13329 0041;	
    // (𓌩) EGYPTIAN HIEROGLYPH T029	[5373 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13329, 0x0041 };
    uint32_t const ces[9] = { 0x5373, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_323)
{
    // 13329 0062;	
    // (𓌩) EGYPTIAN HIEROGLYPH T029	[5373 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13329, 0x0062 };
    uint32_t const ces[9] = { 0x5373, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_324)
{
    // 1332A 0021;	
    // (𓌪) EGYPTIAN HIEROGLYPH T030	[5374 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332A, 0x0021 };
    uint32_t const ces[9] = { 0x5374, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_325)
{
    // 1332A 003F;	
    // (𓌪) EGYPTIAN HIEROGLYPH T030	[5374 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332A, 0x003F };
    uint32_t const ces[9] = { 0x5374, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_326)
{
    // 1332A 0061;	
    // (𓌪) EGYPTIAN HIEROGLYPH T030	[5374 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332A, 0x0061 };
    uint32_t const ces[9] = { 0x5374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_327)
{
    // 1332A 0041;	
    // (𓌪) EGYPTIAN HIEROGLYPH T030	[5374 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332A, 0x0041 };
    uint32_t const ces[9] = { 0x5374, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_328)
{
    // 1332A 0062;	
    // (𓌪) EGYPTIAN HIEROGLYPH T030	[5374 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332A, 0x0062 };
    uint32_t const ces[9] = { 0x5374, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_329)
{
    // 1332B 0021;	
    // (𓌫) EGYPTIAN HIEROGLYPH T031	[5375 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332B, 0x0021 };
    uint32_t const ces[9] = { 0x5375, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_330)
{
    // 1332B 003F;	
    // (𓌫) EGYPTIAN HIEROGLYPH T031	[5375 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332B, 0x003F };
    uint32_t const ces[9] = { 0x5375, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_331)
{
    // 1332B 0061;	
    // (𓌫) EGYPTIAN HIEROGLYPH T031	[5375 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332B, 0x0061 };
    uint32_t const ces[9] = { 0x5375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_332)
{
    // 1332B 0041;	
    // (𓌫) EGYPTIAN HIEROGLYPH T031	[5375 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332B, 0x0041 };
    uint32_t const ces[9] = { 0x5375, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_333)
{
    // 1332B 0062;	
    // (𓌫) EGYPTIAN HIEROGLYPH T031	[5375 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332B, 0x0062 };
    uint32_t const ces[9] = { 0x5375, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_334)
{
    // 1332C 0021;	
    // (𓌬) EGYPTIAN HIEROGLYPH T032	[5376 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332C, 0x0021 };
    uint32_t const ces[9] = { 0x5376, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_335)
{
    // 1332C 003F;	
    // (𓌬) EGYPTIAN HIEROGLYPH T032	[5376 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332C, 0x003F };
    uint32_t const ces[9] = { 0x5376, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_336)
{
    // 1332C 0061;	
    // (𓌬) EGYPTIAN HIEROGLYPH T032	[5376 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332C, 0x0061 };
    uint32_t const ces[9] = { 0x5376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_337)
{
    // 1332C 0041;	
    // (𓌬) EGYPTIAN HIEROGLYPH T032	[5376 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332C, 0x0041 };
    uint32_t const ces[9] = { 0x5376, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_338)
{
    // 1332C 0062;	
    // (𓌬) EGYPTIAN HIEROGLYPH T032	[5376 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332C, 0x0062 };
    uint32_t const ces[9] = { 0x5376, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_339)
{
    // 1332D 0021;	
    // (𓌭) EGYPTIAN HIEROGLYPH T032A	[5377 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332D, 0x0021 };
    uint32_t const ces[9] = { 0x5377, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_340)
{
    // 1332D 003F;	
    // (𓌭) EGYPTIAN HIEROGLYPH T032A	[5377 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332D, 0x003F };
    uint32_t const ces[9] = { 0x5377, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_341)
{
    // 1332D 0061;	
    // (𓌭) EGYPTIAN HIEROGLYPH T032A	[5377 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332D, 0x0061 };
    uint32_t const ces[9] = { 0x5377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_342)
{
    // 1332D 0041;	
    // (𓌭) EGYPTIAN HIEROGLYPH T032A	[5377 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332D, 0x0041 };
    uint32_t const ces[9] = { 0x5377, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_343)
{
    // 1332D 0062;	
    // (𓌭) EGYPTIAN HIEROGLYPH T032A	[5377 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332D, 0x0062 };
    uint32_t const ces[9] = { 0x5377, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_344)
{
    // 1332E 0021;	
    // (𓌮) EGYPTIAN HIEROGLYPH T033	[5378 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332E, 0x0021 };
    uint32_t const ces[9] = { 0x5378, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_345)
{
    // 1332E 003F;	
    // (𓌮) EGYPTIAN HIEROGLYPH T033	[5378 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332E, 0x003F };
    uint32_t const ces[9] = { 0x5378, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_346)
{
    // 1332E 0061;	
    // (𓌮) EGYPTIAN HIEROGLYPH T033	[5378 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332E, 0x0061 };
    uint32_t const ces[9] = { 0x5378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_347)
{
    // 1332E 0041;	
    // (𓌮) EGYPTIAN HIEROGLYPH T033	[5378 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332E, 0x0041 };
    uint32_t const ces[9] = { 0x5378, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_348)
{
    // 1332E 0062;	
    // (𓌮) EGYPTIAN HIEROGLYPH T033	[5378 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332E, 0x0062 };
    uint32_t const ces[9] = { 0x5378, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_349)
{
    // 1332F 0021;	
    // (𓌯) EGYPTIAN HIEROGLYPH T033A	[5379 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332F, 0x0021 };
    uint32_t const ces[9] = { 0x5379, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_350)
{
    // 1332F 003F;	
    // (𓌯) EGYPTIAN HIEROGLYPH T033A	[5379 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332F, 0x003F };
    uint32_t const ces[9] = { 0x5379, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_351)
{
    // 1332F 0061;	
    // (𓌯) EGYPTIAN HIEROGLYPH T033A	[5379 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332F, 0x0061 };
    uint32_t const ces[9] = { 0x5379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_352)
{
    // 1332F 0041;	
    // (𓌯) EGYPTIAN HIEROGLYPH T033A	[5379 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1332F, 0x0041 };
    uint32_t const ces[9] = { 0x5379, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_353)
{
    // 1332F 0062;	
    // (𓌯) EGYPTIAN HIEROGLYPH T033A	[5379 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1332F, 0x0062 };
    uint32_t const ces[9] = { 0x5379, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_354)
{
    // 13330 0021;	
    // (𓌰) EGYPTIAN HIEROGLYPH T034	[537A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13330, 0x0021 };
    uint32_t const ces[9] = { 0x537A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_355)
{
    // 13330 003F;	
    // (𓌰) EGYPTIAN HIEROGLYPH T034	[537A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13330, 0x003F };
    uint32_t const ces[9] = { 0x537A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_356)
{
    // 13330 0061;	
    // (𓌰) EGYPTIAN HIEROGLYPH T034	[537A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13330, 0x0061 };
    uint32_t const ces[9] = { 0x537A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_357)
{
    // 13330 0041;	
    // (𓌰) EGYPTIAN HIEROGLYPH T034	[537A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13330, 0x0041 };
    uint32_t const ces[9] = { 0x537A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_358)
{
    // 13330 0062;	
    // (𓌰) EGYPTIAN HIEROGLYPH T034	[537A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13330, 0x0062 };
    uint32_t const ces[9] = { 0x537A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_359)
{
    // 13331 0021;	
    // (𓌱) EGYPTIAN HIEROGLYPH T035	[537B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13331, 0x0021 };
    uint32_t const ces[9] = { 0x537B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_360)
{
    // 13331 003F;	
    // (𓌱) EGYPTIAN HIEROGLYPH T035	[537B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13331, 0x003F };
    uint32_t const ces[9] = { 0x537B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_361)
{
    // 13331 0061;	
    // (𓌱) EGYPTIAN HIEROGLYPH T035	[537B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13331, 0x0061 };
    uint32_t const ces[9] = { 0x537B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_362)
{
    // 13331 0041;	
    // (𓌱) EGYPTIAN HIEROGLYPH T035	[537B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13331, 0x0041 };
    uint32_t const ces[9] = { 0x537B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_363)
{
    // 13331 0062;	
    // (𓌱) EGYPTIAN HIEROGLYPH T035	[537B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13331, 0x0062 };
    uint32_t const ces[9] = { 0x537B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_364)
{
    // 13332 0021;	
    // (𓌲) EGYPTIAN HIEROGLYPH T036	[537C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13332, 0x0021 };
    uint32_t const ces[9] = { 0x537C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_365)
{
    // 13332 003F;	
    // (𓌲) EGYPTIAN HIEROGLYPH T036	[537C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13332, 0x003F };
    uint32_t const ces[9] = { 0x537C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_366)
{
    // 13332 0061;	
    // (𓌲) EGYPTIAN HIEROGLYPH T036	[537C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13332, 0x0061 };
    uint32_t const ces[9] = { 0x537C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_367)
{
    // 13332 0041;	
    // (𓌲) EGYPTIAN HIEROGLYPH T036	[537C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13332, 0x0041 };
    uint32_t const ces[9] = { 0x537C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_368)
{
    // 13332 0062;	
    // (𓌲) EGYPTIAN HIEROGLYPH T036	[537C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13332, 0x0062 };
    uint32_t const ces[9] = { 0x537C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_369)
{
    // 13333 0021;	
    // (𓌳) EGYPTIAN HIEROGLYPH U001	[537D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13333, 0x0021 };
    uint32_t const ces[9] = { 0x537D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_370)
{
    // 13333 003F;	
    // (𓌳) EGYPTIAN HIEROGLYPH U001	[537D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13333, 0x003F };
    uint32_t const ces[9] = { 0x537D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_371)
{
    // 13333 0061;	
    // (𓌳) EGYPTIAN HIEROGLYPH U001	[537D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13333, 0x0061 };
    uint32_t const ces[9] = { 0x537D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_372)
{
    // 13333 0041;	
    // (𓌳) EGYPTIAN HIEROGLYPH U001	[537D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13333, 0x0041 };
    uint32_t const ces[9] = { 0x537D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_373)
{
    // 13333 0062;	
    // (𓌳) EGYPTIAN HIEROGLYPH U001	[537D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13333, 0x0062 };
    uint32_t const ces[9] = { 0x537D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_374)
{
    // 13334 0021;	
    // (𓌴) EGYPTIAN HIEROGLYPH U002	[537E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13334, 0x0021 };
    uint32_t const ces[9] = { 0x537E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_375)
{
    // 13334 003F;	
    // (𓌴) EGYPTIAN HIEROGLYPH U002	[537E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13334, 0x003F };
    uint32_t const ces[9] = { 0x537E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_376)
{
    // 13334 0061;	
    // (𓌴) EGYPTIAN HIEROGLYPH U002	[537E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13334, 0x0061 };
    uint32_t const ces[9] = { 0x537E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_377)
{
    // 13334 0041;	
    // (𓌴) EGYPTIAN HIEROGLYPH U002	[537E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13334, 0x0041 };
    uint32_t const ces[9] = { 0x537E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_378)
{
    // 13334 0062;	
    // (𓌴) EGYPTIAN HIEROGLYPH U002	[537E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13334, 0x0062 };
    uint32_t const ces[9] = { 0x537E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_379)
{
    // 13335 0021;	
    // (𓌵) EGYPTIAN HIEROGLYPH U003	[537F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13335, 0x0021 };
    uint32_t const ces[9] = { 0x537F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_380)
{
    // 13335 003F;	
    // (𓌵) EGYPTIAN HIEROGLYPH U003	[537F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13335, 0x003F };
    uint32_t const ces[9] = { 0x537F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_381)
{
    // 13335 0061;	
    // (𓌵) EGYPTIAN HIEROGLYPH U003	[537F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13335, 0x0061 };
    uint32_t const ces[9] = { 0x537F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_382)
{
    // 13335 0041;	
    // (𓌵) EGYPTIAN HIEROGLYPH U003	[537F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13335, 0x0041 };
    uint32_t const ces[9] = { 0x537F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_383)
{
    // 13335 0062;	
    // (𓌵) EGYPTIAN HIEROGLYPH U003	[537F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13335, 0x0062 };
    uint32_t const ces[9] = { 0x537F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_384)
{
    // 13336 0021;	
    // (𓌶) EGYPTIAN HIEROGLYPH U004	[5380 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13336, 0x0021 };
    uint32_t const ces[9] = { 0x5380, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_385)
{
    // 13336 003F;	
    // (𓌶) EGYPTIAN HIEROGLYPH U004	[5380 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13336, 0x003F };
    uint32_t const ces[9] = { 0x5380, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_386)
{
    // 13336 0061;	
    // (𓌶) EGYPTIAN HIEROGLYPH U004	[5380 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13336, 0x0061 };
    uint32_t const ces[9] = { 0x5380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_387)
{
    // 13336 0041;	
    // (𓌶) EGYPTIAN HIEROGLYPH U004	[5380 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13336, 0x0041 };
    uint32_t const ces[9] = { 0x5380, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_388)
{
    // 13336 0062;	
    // (𓌶) EGYPTIAN HIEROGLYPH U004	[5380 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13336, 0x0062 };
    uint32_t const ces[9] = { 0x5380, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_389)
{
    // 13337 0021;	
    // (𓌷) EGYPTIAN HIEROGLYPH U005	[5381 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13337, 0x0021 };
    uint32_t const ces[9] = { 0x5381, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_390)
{
    // 13337 003F;	
    // (𓌷) EGYPTIAN HIEROGLYPH U005	[5381 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13337, 0x003F };
    uint32_t const ces[9] = { 0x5381, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_391)
{
    // 13337 0061;	
    // (𓌷) EGYPTIAN HIEROGLYPH U005	[5381 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13337, 0x0061 };
    uint32_t const ces[9] = { 0x5381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_392)
{
    // 13337 0041;	
    // (𓌷) EGYPTIAN HIEROGLYPH U005	[5381 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13337, 0x0041 };
    uint32_t const ces[9] = { 0x5381, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_393)
{
    // 13337 0062;	
    // (𓌷) EGYPTIAN HIEROGLYPH U005	[5381 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13337, 0x0062 };
    uint32_t const ces[9] = { 0x5381, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_394)
{
    // 13338 0021;	
    // (𓌸) EGYPTIAN HIEROGLYPH U006	[5382 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13338, 0x0021 };
    uint32_t const ces[9] = { 0x5382, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_395)
{
    // 13338 003F;	
    // (𓌸) EGYPTIAN HIEROGLYPH U006	[5382 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13338, 0x003F };
    uint32_t const ces[9] = { 0x5382, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_396)
{
    // 13338 0061;	
    // (𓌸) EGYPTIAN HIEROGLYPH U006	[5382 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13338, 0x0061 };
    uint32_t const ces[9] = { 0x5382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_397)
{
    // 13338 0041;	
    // (𓌸) EGYPTIAN HIEROGLYPH U006	[5382 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13338, 0x0041 };
    uint32_t const ces[9] = { 0x5382, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_398)
{
    // 13338 0062;	
    // (𓌸) EGYPTIAN HIEROGLYPH U006	[5382 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13338, 0x0062 };
    uint32_t const ces[9] = { 0x5382, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_399)
{
    // 13339 0021;	
    // (𓌹) EGYPTIAN HIEROGLYPH U006A	[5383 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13339, 0x0021 };
    uint32_t const ces[9] = { 0x5383, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_400)
{
    // 13339 003F;	
    // (𓌹) EGYPTIAN HIEROGLYPH U006A	[5383 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13339, 0x003F };
    uint32_t const ces[9] = { 0x5383, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_401)
{
    // 13339 0061;	
    // (𓌹) EGYPTIAN HIEROGLYPH U006A	[5383 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13339, 0x0061 };
    uint32_t const ces[9] = { 0x5383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_402)
{
    // 13339 0041;	
    // (𓌹) EGYPTIAN HIEROGLYPH U006A	[5383 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13339, 0x0041 };
    uint32_t const ces[9] = { 0x5383, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_403)
{
    // 13339 0062;	
    // (𓌹) EGYPTIAN HIEROGLYPH U006A	[5383 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13339, 0x0062 };
    uint32_t const ces[9] = { 0x5383, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_404)
{
    // 1333A 0021;	
    // (𓌺) EGYPTIAN HIEROGLYPH U006B	[5384 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333A, 0x0021 };
    uint32_t const ces[9] = { 0x5384, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_405)
{
    // 1333A 003F;	
    // (𓌺) EGYPTIAN HIEROGLYPH U006B	[5384 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333A, 0x003F };
    uint32_t const ces[9] = { 0x5384, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_406)
{
    // 1333A 0061;	
    // (𓌺) EGYPTIAN HIEROGLYPH U006B	[5384 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333A, 0x0061 };
    uint32_t const ces[9] = { 0x5384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_407)
{
    // 1333A 0041;	
    // (𓌺) EGYPTIAN HIEROGLYPH U006B	[5384 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333A, 0x0041 };
    uint32_t const ces[9] = { 0x5384, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_408)
{
    // 1333A 0062;	
    // (𓌺) EGYPTIAN HIEROGLYPH U006B	[5384 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333A, 0x0062 };
    uint32_t const ces[9] = { 0x5384, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_409)
{
    // 1333B 0021;	
    // (𓌻) EGYPTIAN HIEROGLYPH U007	[5385 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333B, 0x0021 };
    uint32_t const ces[9] = { 0x5385, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_410)
{
    // 1333B 003F;	
    // (𓌻) EGYPTIAN HIEROGLYPH U007	[5385 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333B, 0x003F };
    uint32_t const ces[9] = { 0x5385, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_411)
{
    // 1333B 0061;	
    // (𓌻) EGYPTIAN HIEROGLYPH U007	[5385 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333B, 0x0061 };
    uint32_t const ces[9] = { 0x5385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_412)
{
    // 1333B 0041;	
    // (𓌻) EGYPTIAN HIEROGLYPH U007	[5385 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333B, 0x0041 };
    uint32_t const ces[9] = { 0x5385, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_413)
{
    // 1333B 0062;	
    // (𓌻) EGYPTIAN HIEROGLYPH U007	[5385 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333B, 0x0062 };
    uint32_t const ces[9] = { 0x5385, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_414)
{
    // 1333C 0021;	
    // (𓌼) EGYPTIAN HIEROGLYPH U008	[5386 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333C, 0x0021 };
    uint32_t const ces[9] = { 0x5386, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_415)
{
    // 1333C 003F;	
    // (𓌼) EGYPTIAN HIEROGLYPH U008	[5386 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333C, 0x003F };
    uint32_t const ces[9] = { 0x5386, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_416)
{
    // 1333C 0061;	
    // (𓌼) EGYPTIAN HIEROGLYPH U008	[5386 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333C, 0x0061 };
    uint32_t const ces[9] = { 0x5386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_417)
{
    // 1333C 0041;	
    // (𓌼) EGYPTIAN HIEROGLYPH U008	[5386 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333C, 0x0041 };
    uint32_t const ces[9] = { 0x5386, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_418)
{
    // 1333C 0062;	
    // (𓌼) EGYPTIAN HIEROGLYPH U008	[5386 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333C, 0x0062 };
    uint32_t const ces[9] = { 0x5386, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_419)
{
    // 1333D 0021;	
    // (𓌽) EGYPTIAN HIEROGLYPH U009	[5387 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333D, 0x0021 };
    uint32_t const ces[9] = { 0x5387, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_420)
{
    // 1333D 003F;	
    // (𓌽) EGYPTIAN HIEROGLYPH U009	[5387 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333D, 0x003F };
    uint32_t const ces[9] = { 0x5387, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_421)
{
    // 1333D 0061;	
    // (𓌽) EGYPTIAN HIEROGLYPH U009	[5387 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333D, 0x0061 };
    uint32_t const ces[9] = { 0x5387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_422)
{
    // 1333D 0041;	
    // (𓌽) EGYPTIAN HIEROGLYPH U009	[5387 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333D, 0x0041 };
    uint32_t const ces[9] = { 0x5387, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_423)
{
    // 1333D 0062;	
    // (𓌽) EGYPTIAN HIEROGLYPH U009	[5387 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333D, 0x0062 };
    uint32_t const ces[9] = { 0x5387, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_424)
{
    // 1333E 0021;	
    // (𓌾) EGYPTIAN HIEROGLYPH U010	[5388 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333E, 0x0021 };
    uint32_t const ces[9] = { 0x5388, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_425)
{
    // 1333E 003F;	
    // (𓌾) EGYPTIAN HIEROGLYPH U010	[5388 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333E, 0x003F };
    uint32_t const ces[9] = { 0x5388, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_426)
{
    // 1333E 0061;	
    // (𓌾) EGYPTIAN HIEROGLYPH U010	[5388 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333E, 0x0061 };
    uint32_t const ces[9] = { 0x5388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_427)
{
    // 1333E 0041;	
    // (𓌾) EGYPTIAN HIEROGLYPH U010	[5388 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333E, 0x0041 };
    uint32_t const ces[9] = { 0x5388, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_428)
{
    // 1333E 0062;	
    // (𓌾) EGYPTIAN HIEROGLYPH U010	[5388 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333E, 0x0062 };
    uint32_t const ces[9] = { 0x5388, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_429)
{
    // 1333F 0021;	
    // (𓌿) EGYPTIAN HIEROGLYPH U011	[5389 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333F, 0x0021 };
    uint32_t const ces[9] = { 0x5389, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_430)
{
    // 1333F 003F;	
    // (𓌿) EGYPTIAN HIEROGLYPH U011	[5389 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333F, 0x003F };
    uint32_t const ces[9] = { 0x5389, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_431)
{
    // 1333F 0061;	
    // (𓌿) EGYPTIAN HIEROGLYPH U011	[5389 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333F, 0x0061 };
    uint32_t const ces[9] = { 0x5389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_432)
{
    // 1333F 0041;	
    // (𓌿) EGYPTIAN HIEROGLYPH U011	[5389 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1333F, 0x0041 };
    uint32_t const ces[9] = { 0x5389, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_433)
{
    // 1333F 0062;	
    // (𓌿) EGYPTIAN HIEROGLYPH U011	[5389 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1333F, 0x0062 };
    uint32_t const ces[9] = { 0x5389, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_434)
{
    // 13340 0021;	
    // (𓍀) EGYPTIAN HIEROGLYPH U012	[538A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13340, 0x0021 };
    uint32_t const ces[9] = { 0x538A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_435)
{
    // 13340 003F;	
    // (𓍀) EGYPTIAN HIEROGLYPH U012	[538A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13340, 0x003F };
    uint32_t const ces[9] = { 0x538A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_436)
{
    // 13340 0061;	
    // (𓍀) EGYPTIAN HIEROGLYPH U012	[538A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13340, 0x0061 };
    uint32_t const ces[9] = { 0x538A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_437)
{
    // 13340 0041;	
    // (𓍀) EGYPTIAN HIEROGLYPH U012	[538A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13340, 0x0041 };
    uint32_t const ces[9] = { 0x538A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_438)
{
    // 13340 0062;	
    // (𓍀) EGYPTIAN HIEROGLYPH U012	[538A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13340, 0x0062 };
    uint32_t const ces[9] = { 0x538A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_439)
{
    // 13341 0021;	
    // (𓍁) EGYPTIAN HIEROGLYPH U013	[538B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13341, 0x0021 };
    uint32_t const ces[9] = { 0x538B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_440)
{
    // 13341 003F;	
    // (𓍁) EGYPTIAN HIEROGLYPH U013	[538B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13341, 0x003F };
    uint32_t const ces[9] = { 0x538B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_441)
{
    // 13341 0061;	
    // (𓍁) EGYPTIAN HIEROGLYPH U013	[538B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13341, 0x0061 };
    uint32_t const ces[9] = { 0x538B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_442)
{
    // 13341 0041;	
    // (𓍁) EGYPTIAN HIEROGLYPH U013	[538B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13341, 0x0041 };
    uint32_t const ces[9] = { 0x538B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_443)
{
    // 13341 0062;	
    // (𓍁) EGYPTIAN HIEROGLYPH U013	[538B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13341, 0x0062 };
    uint32_t const ces[9] = { 0x538B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_444)
{
    // 13342 0021;	
    // (𓍂) EGYPTIAN HIEROGLYPH U014	[538C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13342, 0x0021 };
    uint32_t const ces[9] = { 0x538C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_445)
{
    // 13342 003F;	
    // (𓍂) EGYPTIAN HIEROGLYPH U014	[538C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13342, 0x003F };
    uint32_t const ces[9] = { 0x538C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_446)
{
    // 13342 0061;	
    // (𓍂) EGYPTIAN HIEROGLYPH U014	[538C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13342, 0x0061 };
    uint32_t const ces[9] = { 0x538C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_447)
{
    // 13342 0041;	
    // (𓍂) EGYPTIAN HIEROGLYPH U014	[538C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13342, 0x0041 };
    uint32_t const ces[9] = { 0x538C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_448)
{
    // 13342 0062;	
    // (𓍂) EGYPTIAN HIEROGLYPH U014	[538C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13342, 0x0062 };
    uint32_t const ces[9] = { 0x538C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_449)
{
    // 13343 0021;	
    // (𓍃) EGYPTIAN HIEROGLYPH U015	[538D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13343, 0x0021 };
    uint32_t const ces[9] = { 0x538D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_450)
{
    // 13343 003F;	
    // (𓍃) EGYPTIAN HIEROGLYPH U015	[538D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13343, 0x003F };
    uint32_t const ces[9] = { 0x538D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_451)
{
    // 13343 0061;	
    // (𓍃) EGYPTIAN HIEROGLYPH U015	[538D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13343, 0x0061 };
    uint32_t const ces[9] = { 0x538D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_452)
{
    // 13343 0041;	
    // (𓍃) EGYPTIAN HIEROGLYPH U015	[538D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13343, 0x0041 };
    uint32_t const ces[9] = { 0x538D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_453)
{
    // 13343 0062;	
    // (𓍃) EGYPTIAN HIEROGLYPH U015	[538D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13343, 0x0062 };
    uint32_t const ces[9] = { 0x538D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_454)
{
    // 13344 0021;	
    // (𓍄) EGYPTIAN HIEROGLYPH U016	[538E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13344, 0x0021 };
    uint32_t const ces[9] = { 0x538E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_455)
{
    // 13344 003F;	
    // (𓍄) EGYPTIAN HIEROGLYPH U016	[538E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13344, 0x003F };
    uint32_t const ces[9] = { 0x538E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_456)
{
    // 13344 0061;	
    // (𓍄) EGYPTIAN HIEROGLYPH U016	[538E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13344, 0x0061 };
    uint32_t const ces[9] = { 0x538E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_457)
{
    // 13344 0041;	
    // (𓍄) EGYPTIAN HIEROGLYPH U016	[538E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13344, 0x0041 };
    uint32_t const ces[9] = { 0x538E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_458)
{
    // 13344 0062;	
    // (𓍄) EGYPTIAN HIEROGLYPH U016	[538E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13344, 0x0062 };
    uint32_t const ces[9] = { 0x538E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_459)
{
    // 13345 0021;	
    // (𓍅) EGYPTIAN HIEROGLYPH U017	[538F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13345, 0x0021 };
    uint32_t const ces[9] = { 0x538F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_460)
{
    // 13345 003F;	
    // (𓍅) EGYPTIAN HIEROGLYPH U017	[538F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13345, 0x003F };
    uint32_t const ces[9] = { 0x538F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_461)
{
    // 13345 0061;	
    // (𓍅) EGYPTIAN HIEROGLYPH U017	[538F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13345, 0x0061 };
    uint32_t const ces[9] = { 0x538F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_462)
{
    // 13345 0041;	
    // (𓍅) EGYPTIAN HIEROGLYPH U017	[538F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13345, 0x0041 };
    uint32_t const ces[9] = { 0x538F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_463)
{
    // 13345 0062;	
    // (𓍅) EGYPTIAN HIEROGLYPH U017	[538F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13345, 0x0062 };
    uint32_t const ces[9] = { 0x538F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_464)
{
    // 13346 0021;	
    // (𓍆) EGYPTIAN HIEROGLYPH U018	[5390 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13346, 0x0021 };
    uint32_t const ces[9] = { 0x5390, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_465)
{
    // 13346 003F;	
    // (𓍆) EGYPTIAN HIEROGLYPH U018	[5390 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13346, 0x003F };
    uint32_t const ces[9] = { 0x5390, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_466)
{
    // 13346 0061;	
    // (𓍆) EGYPTIAN HIEROGLYPH U018	[5390 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13346, 0x0061 };
    uint32_t const ces[9] = { 0x5390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_467)
{
    // 13346 0041;	
    // (𓍆) EGYPTIAN HIEROGLYPH U018	[5390 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13346, 0x0041 };
    uint32_t const ces[9] = { 0x5390, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_468)
{
    // 13346 0062;	
    // (𓍆) EGYPTIAN HIEROGLYPH U018	[5390 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13346, 0x0062 };
    uint32_t const ces[9] = { 0x5390, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_469)
{
    // 13347 0021;	
    // (𓍇) EGYPTIAN HIEROGLYPH U019	[5391 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13347, 0x0021 };
    uint32_t const ces[9] = { 0x5391, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_470)
{
    // 13347 003F;	
    // (𓍇) EGYPTIAN HIEROGLYPH U019	[5391 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13347, 0x003F };
    uint32_t const ces[9] = { 0x5391, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_471)
{
    // 13347 0061;	
    // (𓍇) EGYPTIAN HIEROGLYPH U019	[5391 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13347, 0x0061 };
    uint32_t const ces[9] = { 0x5391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_472)
{
    // 13347 0041;	
    // (𓍇) EGYPTIAN HIEROGLYPH U019	[5391 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13347, 0x0041 };
    uint32_t const ces[9] = { 0x5391, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_473)
{
    // 13347 0062;	
    // (𓍇) EGYPTIAN HIEROGLYPH U019	[5391 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13347, 0x0062 };
    uint32_t const ces[9] = { 0x5391, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_474)
{
    // 13348 0021;	
    // (𓍈) EGYPTIAN HIEROGLYPH U020	[5392 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13348, 0x0021 };
    uint32_t const ces[9] = { 0x5392, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_475)
{
    // 13348 003F;	
    // (𓍈) EGYPTIAN HIEROGLYPH U020	[5392 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13348, 0x003F };
    uint32_t const ces[9] = { 0x5392, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_476)
{
    // 13348 0061;	
    // (𓍈) EGYPTIAN HIEROGLYPH U020	[5392 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13348, 0x0061 };
    uint32_t const ces[9] = { 0x5392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_477)
{
    // 13348 0041;	
    // (𓍈) EGYPTIAN HIEROGLYPH U020	[5392 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13348, 0x0041 };
    uint32_t const ces[9] = { 0x5392, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_478)
{
    // 13348 0062;	
    // (𓍈) EGYPTIAN HIEROGLYPH U020	[5392 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13348, 0x0062 };
    uint32_t const ces[9] = { 0x5392, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_479)
{
    // 13349 0021;	
    // (𓍉) EGYPTIAN HIEROGLYPH U021	[5393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13349, 0x0021 };
    uint32_t const ces[9] = { 0x5393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_480)
{
    // 13349 003F;	
    // (𓍉) EGYPTIAN HIEROGLYPH U021	[5393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13349, 0x003F };
    uint32_t const ces[9] = { 0x5393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_481)
{
    // 13349 0061;	
    // (𓍉) EGYPTIAN HIEROGLYPH U021	[5393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13349, 0x0061 };
    uint32_t const ces[9] = { 0x5393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_482)
{
    // 13349 0041;	
    // (𓍉) EGYPTIAN HIEROGLYPH U021	[5393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13349, 0x0041 };
    uint32_t const ces[9] = { 0x5393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_483)
{
    // 13349 0062;	
    // (𓍉) EGYPTIAN HIEROGLYPH U021	[5393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13349, 0x0062 };
    uint32_t const ces[9] = { 0x5393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_484)
{
    // 1334A 0021;	
    // (𓍊) EGYPTIAN HIEROGLYPH U022	[5394 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334A, 0x0021 };
    uint32_t const ces[9] = { 0x5394, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_485)
{
    // 1334A 003F;	
    // (𓍊) EGYPTIAN HIEROGLYPH U022	[5394 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334A, 0x003F };
    uint32_t const ces[9] = { 0x5394, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_486)
{
    // 1334A 0061;	
    // (𓍊) EGYPTIAN HIEROGLYPH U022	[5394 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334A, 0x0061 };
    uint32_t const ces[9] = { 0x5394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_487)
{
    // 1334A 0041;	
    // (𓍊) EGYPTIAN HIEROGLYPH U022	[5394 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1334A, 0x0041 };
    uint32_t const ces[9] = { 0x5394, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_488)
{
    // 1334A 0062;	
    // (𓍊) EGYPTIAN HIEROGLYPH U022	[5394 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334A, 0x0062 };
    uint32_t const ces[9] = { 0x5394, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_489)
{
    // 1334B 0021;	
    // (𓍋) EGYPTIAN HIEROGLYPH U023	[5395 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334B, 0x0021 };
    uint32_t const ces[9] = { 0x5395, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_490)
{
    // 1334B 003F;	
    // (𓍋) EGYPTIAN HIEROGLYPH U023	[5395 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334B, 0x003F };
    uint32_t const ces[9] = { 0x5395, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_491)
{
    // 1334B 0061;	
    // (𓍋) EGYPTIAN HIEROGLYPH U023	[5395 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334B, 0x0061 };
    uint32_t const ces[9] = { 0x5395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_492)
{
    // 1334B 0041;	
    // (𓍋) EGYPTIAN HIEROGLYPH U023	[5395 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1334B, 0x0041 };
    uint32_t const ces[9] = { 0x5395, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_493)
{
    // 1334B 0062;	
    // (𓍋) EGYPTIAN HIEROGLYPH U023	[5395 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334B, 0x0062 };
    uint32_t const ces[9] = { 0x5395, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_494)
{
    // 1334C 0021;	
    // (𓍌) EGYPTIAN HIEROGLYPH U023A	[5396 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334C, 0x0021 };
    uint32_t const ces[9] = { 0x5396, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_495)
{
    // 1334C 003F;	
    // (𓍌) EGYPTIAN HIEROGLYPH U023A	[5396 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334C, 0x003F };
    uint32_t const ces[9] = { 0x5396, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_496)
{
    // 1334C 0061;	
    // (𓍌) EGYPTIAN HIEROGLYPH U023A	[5396 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334C, 0x0061 };
    uint32_t const ces[9] = { 0x5396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_497)
{
    // 1334C 0041;	
    // (𓍌) EGYPTIAN HIEROGLYPH U023A	[5396 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1334C, 0x0041 };
    uint32_t const ces[9] = { 0x5396, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_498)
{
    // 1334C 0062;	
    // (𓍌) EGYPTIAN HIEROGLYPH U023A	[5396 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334C, 0x0062 };
    uint32_t const ces[9] = { 0x5396, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_304_499)
{
    // 1334D 0021;	
    // (𓍍) EGYPTIAN HIEROGLYPH U024	[5397 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1334D, 0x0021 };
    uint32_t const ces[9] = { 0x5397, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

