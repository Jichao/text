// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_096_000)
{
    // A6E2  ; [.39C0.0020.0002] 
    // BAMUM LETTER MEN

    uint32_t const cps[1] = { 0xa6e2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_001)
{
    // A6E3  ; [.39C1.0020.0002] 
    // BAMUM LETTER MA

    uint32_t const cps[1] = { 0xa6e3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_002)
{
    // A6E4  ; [.39C2.0020.0002] 
    // BAMUM LETTER TI

    uint32_t const cps[1] = { 0xa6e4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_003)
{
    // A6E5  ; [.39C3.0020.0002] 
    // BAMUM LETTER KI

    uint32_t const cps[1] = { 0xa6e5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_004)
{
    // A6E6  ; [.39C4.0020.0002] 
    // BAMUM LETTER MO

    uint32_t const cps[1] = { 0xa6e6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_005)
{
    // A6E7  ; [.39C5.0020.0002] 
    // BAMUM LETTER MBAA

    uint32_t const cps[1] = { 0xa6e7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_006)
{
    // A6E8  ; [.39C6.0020.0002] 
    // BAMUM LETTER TET

    uint32_t const cps[1] = { 0xa6e8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_007)
{
    // A6E9  ; [.39C7.0020.0002] 
    // BAMUM LETTER KPA

    uint32_t const cps[1] = { 0xa6e9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_008)
{
    // A6EA  ; [.39C8.0020.0002] 
    // BAMUM LETTER TEN

    uint32_t const cps[1] = { 0xa6ea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_009)
{
    // A6EB  ; [.39C9.0020.0002] 
    // BAMUM LETTER NTUU

    uint32_t const cps[1] = { 0xa6eb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_010)
{
    // A6EC  ; [.39CA.0020.0002] 
    // BAMUM LETTER SAMBA

    uint32_t const cps[1] = { 0xa6ec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_011)
{
    // A6ED  ; [.39CB.0020.0002] 
    // BAMUM LETTER FAAMAE

    uint32_t const cps[1] = { 0xa6ed };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_012)
{
    // A6EE  ; [.39CC.0020.0002] 
    // BAMUM LETTER KOVUU

    uint32_t const cps[1] = { 0xa6ee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_013)
{
    // A6EF  ; [.39CD.0020.0002] 
    // BAMUM LETTER KOGHOM

    uint32_t const cps[1] = { 0xa6ef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_014)
{
    // A6F0  ; [.0000.00B6.0002] 
    // BAMUM COMBINING MARK KOQNDON

    uint32_t const cps[1] = { 0xa6f0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x96), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_015)
{
    // A6F1  ; [.0000.00B7.0002] 
    // BAMUM COMBINING MARK TUKWENTIS

    uint32_t const cps[1] = { 0xa6f1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x97), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_016)
{
    // A6F2  ; [*02D8.0020.0002] 
    // BAMUM NJAEMLI

    uint32_t const cps[1] = { 0xa6f2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_017)
{
    // A6F3  ; [*0288.0020.0002] 
    // BAMUM FULL STOP

    uint32_t const cps[1] = { 0xa6f3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x288), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_018)
{
    // A6F4  ; [*0260.0020.0002] 
    // BAMUM COLON

    uint32_t const cps[1] = { 0xa6f4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x260), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_019)
{
    // A6F5  ; [*0230.0020.0002] 
    // BAMUM COMMA

    uint32_t const cps[1] = { 0xa6f5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x230), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_020)
{
    // A6F6  ; [*0238.0020.0002] 
    // BAMUM SEMICOLON

    uint32_t const cps[1] = { 0xa6f6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x238), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_021)
{
    // A6F7  ; [*0272.0020.0002] 
    // BAMUM QUESTION MARK

    uint32_t const cps[1] = { 0xa6f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x272), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_022)
{
    // A700  ; [*04E6.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YIN PING

    uint32_t const cps[1] = { 0xa700 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_023)
{
    // A701  ; [*04E7.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YANG PING

    uint32_t const cps[1] = { 0xa701 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_024)
{
    // A702  ; [*04E8.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YIN SHANG

    uint32_t const cps[1] = { 0xa702 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_025)
{
    // A703  ; [*04E9.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YANG SHANG

    uint32_t const cps[1] = { 0xa703 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_026)
{
    // A704  ; [*04EA.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YIN QU

    uint32_t const cps[1] = { 0xa704 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_027)
{
    // A705  ; [*04EB.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YANG QU

    uint32_t const cps[1] = { 0xa705 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_028)
{
    // A706  ; [*04EC.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YIN RU

    uint32_t const cps[1] = { 0xa706 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_029)
{
    // A707  ; [*04ED.0020.0002] 
    // MODIFIER LETTER CHINESE TONE YANG RU

    uint32_t const cps[1] = { 0xa707 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_030)
{
    // A708  ; [*04EE.0020.0002] 
    // MODIFIER LETTER EXTRA-HIGH DOTTED TONE BAR

    uint32_t const cps[1] = { 0xa708 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_031)
{
    // A709  ; [*04EF.0020.0002] 
    // MODIFIER LETTER HIGH DOTTED TONE BAR

    uint32_t const cps[1] = { 0xa709 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_032)
{
    // A70A  ; [*04F0.0020.0002] 
    // MODIFIER LETTER MID DOTTED TONE BAR

    uint32_t const cps[1] = { 0xa70a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_033)
{
    // A70B  ; [*04F1.0020.0002] 
    // MODIFIER LETTER LOW DOTTED TONE BAR

    uint32_t const cps[1] = { 0xa70b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_034)
{
    // A70C  ; [*04F2.0020.0002] 
    // MODIFIER LETTER EXTRA-LOW DOTTED TONE BAR

    uint32_t const cps[1] = { 0xa70c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_035)
{
    // A70D  ; [*04F3.0020.0002] 
    // MODIFIER LETTER EXTRA-HIGH DOTTED LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa70d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_036)
{
    // A70E  ; [*04F4.0020.0002] 
    // MODIFIER LETTER HIGH DOTTED LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa70e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_037)
{
    // A70F  ; [*04F5.0020.0002] 
    // MODIFIER LETTER MID DOTTED LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa70f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_038)
{
    // A710  ; [*04F6.0020.0002] 
    // MODIFIER LETTER LOW DOTTED LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa710 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_039)
{
    // A711  ; [*04F7.0020.0002] 
    // MODIFIER LETTER EXTRA-LOW DOTTED LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa711 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_040)
{
    // A712  ; [*04F8.0020.0002] 
    // MODIFIER LETTER EXTRA-HIGH LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa712 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_041)
{
    // A713  ; [*04F9.0020.0002] 
    // MODIFIER LETTER HIGH LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa713 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_042)
{
    // A714  ; [*04FA.0020.0002] 
    // MODIFIER LETTER MID LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa714 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_043)
{
    // A715  ; [*04FB.0020.0002] 
    // MODIFIER LETTER LOW LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa715 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_044)
{
    // A716  ; [*04FC.0020.0002] 
    // MODIFIER LETTER EXTRA-LOW LEFT-STEM TONE BAR

    uint32_t const cps[1] = { 0xa716 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_045)
{
    // A717  ; [*04FD.0020.0002] 
    // MODIFIER LETTER DOT VERTICAL BAR

    uint32_t const cps[1] = { 0xa717 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_046)
{
    // A718  ; [*04FE.0020.0002] 
    // MODIFIER LETTER DOT SLASH

    uint32_t const cps[1] = { 0xa718 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_047)
{
    // A719  ; [*04FF.0020.0002] 
    // MODIFIER LETTER DOT HORIZONTAL BAR

    uint32_t const cps[1] = { 0xa719 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_048)
{
    // A71A  ; [*0500.0020.0002] 
    // MODIFIER LETTER LOWER RIGHT CORNER ANGLE

    uint32_t const cps[1] = { 0xa71a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x500), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_049)
{
    // A71B  ; [*0501.0020.0002] 
    // MODIFIER LETTER RAISED UP ARROW

    uint32_t const cps[1] = { 0xa71b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x501), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_050)
{
    // A71C  ; [*0502.0020.0002] 
    // MODIFIER LETTER RAISED DOWN ARROW

    uint32_t const cps[1] = { 0xa71c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x502), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_051)
{
    // A71D  ; [*0503.0020.0002] 
    // MODIFIER LETTER RAISED EXCLAMATION MARK

    uint32_t const cps[1] = { 0xa71d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x503), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_052)
{
    // A71E  ; [*0504.0020.0002] 
    // MODIFIER LETTER RAISED INVERTED EXCLAMATION MARK

    uint32_t const cps[1] = { 0xa71e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x504), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_053)
{
    // A71F  ; [*0505.0020.0002] 
    // MODIFIER LETTER LOW INVERTED EXCLAMATION MARK

    uint32_t const cps[1] = { 0xa71f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x505), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_054)
{
    // A720  ; [*0506.0020.0002] 
    // MODIFIER LETTER STRESS AND HIGH TONE

    uint32_t const cps[1] = { 0xa720 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x506), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_055)
{
    // A721  ; [*0507.0020.0002] 
    // MODIFIER LETTER STRESS AND LOW TONE

    uint32_t const cps[1] = { 0xa721 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x507), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_056)
{
    // A722  ; [.1FE7.0020.0008] 
    // LATIN CAPITAL LETTER EGYPTOLOGICAL ALEF

    uint32_t const cps[1] = { 0xa722 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fe7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_057)
{
    // A723  ; [.1FE7.0020.0002] 
    // LATIN SMALL LETTER EGYPTOLOGICAL ALEF

    uint32_t const cps[1] = { 0xa723 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fe7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_058)
{
    // A724  ; [.1FF2.0020.0008] 
    // LATIN CAPITAL LETTER EGYPTOLOGICAL AIN

    uint32_t const cps[1] = { 0xa724 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ff2), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_059)
{
    // A725  ; [.1FF2.0020.0002] 
    // LATIN SMALL LETTER EGYPTOLOGICAL AIN

    uint32_t const cps[1] = { 0xa725 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ff2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_060)
{
    // A726  ; [.1D91.0020.0008] 
    // LATIN CAPITAL LETTER HENG

    uint32_t const cps[1] = { 0xa726 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d91), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_061)
{
    // A727  ; [.1D91.0020.0002] 
    // LATIN SMALL LETTER HENG

    uint32_t const cps[1] = { 0xa727 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_062)
{
    // A728  ; [.1EFB.0020.000A][.1F87.0020.0004] 
    // LATIN CAPITAL LETTER TZ

    uint32_t const cps[1] = { 0xa728 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_063)
{
    // A729  ; [.1EFB.0020.0004][.1F87.0020.0004] 
    // LATIN SMALL LETTER TZ

    uint32_t const cps[1] = { 0xa729 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f87), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_064)
{
    // A72A  ; [.1FCC.0020.0008] 
    // LATIN CAPITAL LETTER TRESILLO

    uint32_t const cps[1] = { 0xa72a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcc), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_065)
{
    // A72B  ; [.1FCC.0020.0002] 
    // LATIN SMALL LETTER TRESILLO

    uint32_t const cps[1] = { 0xa72b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_066)
{
    // A72C  ; [.1FCD.0020.0008] 
    // LATIN CAPITAL LETTER CUATRILLO

    uint32_t const cps[1] = { 0xa72c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcd), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_067)
{
    // A72D  ; [.1FCD.0020.0002] 
    // LATIN SMALL LETTER CUATRILLO

    uint32_t const cps[1] = { 0xa72d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_068)
{
    // A72E  ; [.1FCE.0020.0008] 
    // LATIN CAPITAL LETTER CUATRILLO WITH COMMA

    uint32_t const cps[1] = { 0xa72e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fce), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_069)
{
    // A72F  ; [.1FCE.0020.0002] 
    // LATIN SMALL LETTER CUATRILLO WITH COMMA

    uint32_t const cps[1] = { 0xa72f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_070)
{
    // A730  ; [.1D4F.0020.0002] 
    // LATIN LETTER SMALL CAPITAL F

    uint32_t const cps[1] = { 0xa730 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_071)
{
    // A731  ; [.1EDB.0020.0002] 
    // LATIN LETTER SMALL CAPITAL S

    uint32_t const cps[1] = { 0xa731 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1edb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_072)
{
    // A732  ; [.1CAD.0020.000A][.1CAD.0020.000A] 
    // LATIN CAPITAL LETTER AA

    uint32_t const cps[1] = { 0xa732 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_073)
{
    // A733  ; [.1CAD.0020.0004][.1CAD.0020.0004] 
    // LATIN SMALL LETTER AA

    uint32_t const cps[1] = { 0xa733 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_074)
{
    // A734  ; [.1CAD.0020.000A][.1E43.0020.000A] 
    // LATIN CAPITAL LETTER AO

    uint32_t const cps[1] = { 0xa734 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_075)
{
    // A735  ; [.1CAD.0020.0004][.1E43.0020.0004] 
    // LATIN SMALL LETTER AO

    uint32_t const cps[1] = { 0xa735 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_076)
{
    // A736  ; [.1CAD.0020.000A][.1F1B.0020.000A] 
    // LATIN CAPITAL LETTER AU

    uint32_t const cps[1] = { 0xa736 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_077)
{
    // A737  ; [.1CAD.0020.0004][.1F1B.0020.0004] 
    // LATIN SMALL LETTER AU

    uint32_t const cps[1] = { 0xa737 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_078)
{
    // A738  ; [.1CAD.0020.000A][.1F49.0020.000A] 
    // LATIN CAPITAL LETTER AV

    uint32_t const cps[1] = { 0xa738 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_079)
{
    // A739  ; [.1CAD.0020.0004][.1F49.0020.0004] 
    // LATIN SMALL LETTER AV

    uint32_t const cps[1] = { 0xa739 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_080)
{
    // A73A  ; [.1CAD.0020.000A][.0000.0111.0004][.1F49.0020.000A] 
    // LATIN CAPITAL LETTER AV WITH HORIZONTAL BAR

    uint32_t const cps[1] = { 0xa73a };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_096_081)
{
    // A73B  ; [.1CAD.0020.0004][.0000.0111.0004][.1F49.0020.0004] 
    // LATIN SMALL LETTER AV WITH HORIZONTAL BAR

    uint32_t const cps[1] = { 0xa73b };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)}, {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_096_082)
{
    // A73C  ; [.1CAD.0020.000A][.1F71.0020.000A] 
    // LATIN CAPITAL LETTER AY

    uint32_t const cps[1] = { 0xa73c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_083)
{
    // A73D  ; [.1CAD.0020.0004][.1F71.0020.0004] 
    // LATIN SMALL LETTER AY

    uint32_t const cps[1] = { 0xa73d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_084)
{
    // A73E  ; [.1CF4.0020.0008] 
    // LATIN CAPITAL LETTER REVERSED C WITH DOT

    uint32_t const cps[1] = { 0xa73e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_085)
{
    // A73F  ; [.1CF4.0020.0002] 
    // LATIN SMALL LETTER REVERSED C WITH DOT

    uint32_t const cps[1] = { 0xa73f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cf4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_086)
{
    // A740  ; [.1DD6.0020.0008] 
    // LATIN CAPITAL LETTER K WITH STROKE

    uint32_t const cps[1] = { 0xa740 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_087)
{
    // A741  ; [.1DD6.0020.0002] 
    // LATIN SMALL LETTER K WITH STROKE

    uint32_t const cps[1] = { 0xa741 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_088)
{
    // A742  ; [.1DD7.0020.0008] 
    // LATIN CAPITAL LETTER K WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa742 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_089)
{
    // A743  ; [.1DD7.0020.0002] 
    // LATIN SMALL LETTER K WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa743 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_090)
{
    // A744  ; [.1DD8.0020.0008] 
    // LATIN CAPITAL LETTER K WITH STROKE AND DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa744 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_091)
{
    // A745  ; [.1DD8.0020.0002] 
    // LATIN SMALL LETTER K WITH STROKE AND DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa745 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_092)
{
    // A746  ; [.1DE5.0020.0008] 
    // LATIN CAPITAL LETTER BROKEN L

    uint32_t const cps[1] = { 0xa746 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_093)
{
    // A747  ; [.1DE5.0020.0002] 
    // LATIN SMALL LETTER BROKEN L

    uint32_t const cps[1] = { 0xa747 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_094)
{
    // A748  ; [.1DE7.0020.0008] 
    // LATIN CAPITAL LETTER L WITH HIGH STROKE

    uint32_t const cps[1] = { 0xa748 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de7), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_095)
{
    // A749  ; [.1DE7.0020.0002] 
    // LATIN SMALL LETTER L WITH HIGH STROKE

    uint32_t const cps[1] = { 0xa749 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1de7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_096)
{
    // A74A  ; [.1E67.0020.0008] 
    // LATIN CAPITAL LETTER O WITH LONG STROKE OVERLAY

    uint32_t const cps[1] = { 0xa74a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e67), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_097)
{
    // A74B  ; [.1E67.0020.0002] 
    // LATIN SMALL LETTER O WITH LONG STROKE OVERLAY

    uint32_t const cps[1] = { 0xa74b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_098)
{
    // A74C  ; [.1E5F.0020.0008] 
    // LATIN CAPITAL LETTER O WITH LOOP

    uint32_t const cps[1] = { 0xa74c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e5f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_099)
{
    // A74D  ; [.1E5F.0020.0002] 
    // LATIN SMALL LETTER O WITH LOOP

    uint32_t const cps[1] = { 0xa74d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_100)
{
    // A74E  ; [.1E43.0020.000A][.1E43.0020.000A] 
    // LATIN CAPITAL LETTER OO

    uint32_t const cps[1] = { 0xa74e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_101)
{
    // A74F  ; [.1E43.0020.0004][.1E43.0020.0004] 
    // LATIN SMALL LETTER OO

    uint32_t const cps[1] = { 0xa74f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_102)
{
    // A750  ; [.1E78.0020.0008] 
    // LATIN CAPITAL LETTER P WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa750 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e78), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_103)
{
    // A751  ; [.1E78.0020.0002] 
    // LATIN SMALL LETTER P WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa751 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_104)
{
    // A752  ; [.1E7F.0020.0008] 
    // LATIN CAPITAL LETTER P WITH FLOURISH

    uint32_t const cps[1] = { 0xa752 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e7f), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_105)
{
    // A753  ; [.1E7F.0020.0002] 
    // LATIN SMALL LETTER P WITH FLOURISH

    uint32_t const cps[1] = { 0xa753 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_106)
{
    // A754  ; [.1E80.0020.0008] 
    // LATIN CAPITAL LETTER P WITH SQUIRREL TAIL

    uint32_t const cps[1] = { 0xa754 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e80), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_107)
{
    // A755  ; [.1E80.0020.0002] 
    // LATIN SMALL LETTER P WITH SQUIRREL TAIL

    uint32_t const cps[1] = { 0xa755 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_108)
{
    // A756  ; [.1E8B.0020.0008] 
    // LATIN CAPITAL LETTER Q WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa756 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e8b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_109)
{
    // A757  ; [.1E8B.0020.0002] 
    // LATIN SMALL LETTER Q WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa757 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_110)
{
    // A758  ; [.1E8C.0020.0008] 
    // LATIN CAPITAL LETTER Q WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa758 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e8c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_111)
{
    // A759  ; [.1E8C.0020.0002] 
    // LATIN SMALL LETTER Q WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa759 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_112)
{
    // A75A  ; [.1EA3.0020.0008] 
    // LATIN CAPITAL LETTER R ROTUNDA

    uint32_t const cps[1] = { 0xa75a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ea3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_113)
{
    // A75B  ; [.1EA3.0020.0002] 
    // LATIN SMALL LETTER R ROTUNDA

    uint32_t const cps[1] = { 0xa75b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ea3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_114)
{
    // A75C  ; [.1ED6.0020.0008] 
    // LATIN CAPITAL LETTER RUM ROTUNDA

    uint32_t const cps[1] = { 0xa75c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_115)
{
    // A75D  ; [.1ED6.0020.0002] 
    // LATIN SMALL LETTER RUM ROTUNDA

    uint32_t const cps[1] = { 0xa75d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_116)
{
    // A75E  ; [.1F4E.0020.0008] 
    // LATIN CAPITAL LETTER V WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa75e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f4e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_117)
{
    // A75F  ; [.1F4E.0020.0002] 
    // LATIN SMALL LETTER V WITH DIAGONAL STROKE

    uint32_t const cps[1] = { 0xa75f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_118)
{
    // A760  ; [.1F49.0020.000A][.1F71.0020.000A] 
    // LATIN CAPITAL LETTER VY

    uint32_t const cps[1] = { 0xa760 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0xa)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_119)
{
    // A761  ; [.1F49.0020.0004][.1F71.0020.0004] 
    // LATIN SMALL LETTER VY

    uint32_t const cps[1] = { 0xa761 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f49), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1f71), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_120)
{
    // A762  ; [.1FA3.0020.0008] 
    // LATIN CAPITAL LETTER VISIGOTHIC Z

    uint32_t const cps[1] = { 0xa762 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_121)
{
    // A763  ; [.1FA3.0020.0002] 
    // LATIN SMALL LETTER VISIGOTHIC Z

    uint32_t const cps[1] = { 0xa763 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fa3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_122)
{
    // A764  ; [.1FBA.0020.0008] 
    // LATIN CAPITAL LETTER THORN WITH STROKE

    uint32_t const cps[1] = { 0xa764 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fba), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_123)
{
    // A765  ; [.1FBA.0020.0002] 
    // LATIN SMALL LETTER THORN WITH STROKE

    uint32_t const cps[1] = { 0xa765 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_124)
{
    // A766  ; [.1FBB.0020.0008] 
    // LATIN CAPITAL LETTER THORN WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa766 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fbb), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_125)
{
    // A767  ; [.1FBB.0020.0002] 
    // LATIN SMALL LETTER THORN WITH STROKE THROUGH DESCENDER

    uint32_t const cps[1] = { 0xa767 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_126)
{
    // A768  ; [.1FC0.0020.0008] 
    // LATIN CAPITAL LETTER VEND

    uint32_t const cps[1] = { 0xa768 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_127)
{
    // A769  ; [.1FC0.0020.0002] 
    // LATIN SMALL LETTER VEND

    uint32_t const cps[1] = { 0xa769 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_128)
{
    // A76A  ; [.1FC4.0020.0008] 
    // LATIN CAPITAL LETTER ET

    uint32_t const cps[1] = { 0xa76a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc4), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_129)
{
    // A76B  ; [.1FC4.0020.0002] 
    // LATIN SMALL LETTER ET

    uint32_t const cps[1] = { 0xa76b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_130)
{
    // A76C  ; [.1FC5.0020.0008] 
    // LATIN CAPITAL LETTER IS

    uint32_t const cps[1] = { 0xa76c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_131)
{
    // A76D  ; [.1FC5.0020.0002] 
    // LATIN SMALL LETTER IS

    uint32_t const cps[1] = { 0xa76d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_132)
{
    // A76E  ; [.1FC6.0020.0008] 
    // LATIN CAPITAL LETTER CON

    uint32_t const cps[1] = { 0xa76e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc6), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_133)
{
    // A76F  ; [.1FC6.0020.0002] 
    // LATIN SMALL LETTER CON

    uint32_t const cps[1] = { 0xa76f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_134)
{
    // A770  ; [.1FC6.0020.0014] 
    // MODIFIER LETTER US

    uint32_t const cps[1] = { 0xa770 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc6), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_135)
{
    // A771  ; [.1D0E.0020.0002] 
    // LATIN SMALL LETTER DUM

    uint32_t const cps[1] = { 0xa771 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_136)
{
    // A772  ; [.1E02.0020.0002] 
    // LATIN SMALL LETTER LUM

    uint32_t const cps[1] = { 0xa772 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_137)
{
    // A773  ; [.1E1E.0020.0002] 
    // LATIN SMALL LETTER MUM

    uint32_t const cps[1] = { 0xa773 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_138)
{
    // A774  ; [.1E3D.0020.0002] 
    // LATIN SMALL LETTER NUM

    uint32_t const cps[1] = { 0xa774 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_139)
{
    // A775  ; [.1ED4.0020.0002] 
    // LATIN SMALL LETTER RUM

    uint32_t const cps[1] = { 0xa775 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_140)
{
    // A776  ; [.1ED5.0020.0002] 
    // LATIN LETTER SMALL CAPITAL RUM

    uint32_t const cps[1] = { 0xa776 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ed5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_141)
{
    // A777  ; [.1F16.0020.0002] 
    // LATIN SMALL LETTER TUM

    uint32_t const cps[1] = { 0xa777 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_142)
{
    // A778  ; [.1FC7.0020.0002] 
    // LATIN SMALL LETTER UM

    uint32_t const cps[1] = { 0xa778 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_143)
{
    // A779  ; [.1CF5.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR D

    uint32_t const cps[1] = { 0xa779 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_144)
{
    // A77A  ; [.1CF5.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER INSULAR D

    uint32_t const cps[1] = { 0xa77a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cf5), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_145)
{
    // A77B  ; [.1D4B.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR F

    uint32_t const cps[1] = { 0xa77b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_146)
{
    // A77C  ; [.1D4B.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER INSULAR F

    uint32_t const cps[1] = { 0xa77c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_147)
{
    // A77D  ; [.1D5A.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR G

    uint32_t const cps[1] = { 0xa77d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_096_148)
{
    // A77E  ; [.1D75.0020.0008] 
    // LATIN CAPITAL LETTER TURNED INSULAR G

    uint32_t const cps[1] = { 0xa77e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d75), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_096_149)
{
    // A77F  ; [.1D75.0020.0002] 
    // LATIN SMALL LETTER TURNED INSULAR G

    uint32_t const cps[1] = { 0xa77f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

