// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_092_000)
{
    uint32_t const cps[2] = { 0x007F, 0x0061 };

    // 007F 0061;	
    // ('\u007F') <DELETE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 007F 0061;	
    // ('\u007F') <DELETE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_001)
{
    uint32_t const cps[2] = { 0x0080, 0x0061 };

    // 0080 0061;	
    // ('\u0080') <control>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0080 0061;	
    // ('\u0080') <control>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_002)
{
    uint32_t const cps[2] = { 0x0081, 0x0061 };

    // 0081 0061;	
    // ('\u0081') <control>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0081 0061;	
    // ('\u0081') <control>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_003)
{
    uint32_t const cps[2] = { 0x0082, 0x0061 };

    // 0082 0061;	
    // ('\u0082') <BREAK PERMITTED HERE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0082 0061;	
    // ('\u0082') <BREAK PERMITTED HERE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_004)
{
    uint32_t const cps[2] = { 0x0083, 0x0061 };

    // 0083 0061;	
    // ('\u0083') <NO BREAK HERE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0083 0061;	
    // ('\u0083') <NO BREAK HERE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_005)
{
    uint32_t const cps[2] = { 0x0084, 0x0061 };

    // 0084 0061;	
    // ('\u0084') <control>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0084 0061;	
    // ('\u0084') <control>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_006)
{
    uint32_t const cps[2] = { 0x0086, 0x0061 };

    // 0086 0061;	
    // ('\u0086') <START OF SELECTED AREA>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0086 0061;	
    // ('\u0086') <START OF SELECTED AREA>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_007)
{
    uint32_t const cps[2] = { 0x0087, 0x0061 };

    // 0087 0061;	
    // ('\u0087') <END OF SELECTED AREA>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0087 0061;	
    // ('\u0087') <END OF SELECTED AREA>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_008)
{
    uint32_t const cps[2] = { 0x0088, 0x0061 };

    // 0088 0061;	
    // ('\u0088') <CHARACTER TABULATION SET>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0088 0061;	
    // ('\u0088') <CHARACTER TABULATION SET>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_009)
{
    uint32_t const cps[2] = { 0x0089, 0x0061 };

    // 0089 0061;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0089 0061;	
    // ('\u0089') <CHARACTER TABULATION WITH JUSTIFICATION>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_010)
{
    uint32_t const cps[2] = { 0x008A, 0x0061 };

    // 008A 0061;	
    // ('\u008A') <LINE TABULATION SET>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008A 0061;	
    // ('\u008A') <LINE TABULATION SET>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_011)
{
    uint32_t const cps[2] = { 0x008B, 0x0061 };

    // 008B 0061;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008B 0061;	
    // ('\u008B') <PARTIAL LINE FORWARD>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_012)
{
    uint32_t const cps[2] = { 0x008C, 0x0061 };

    // 008C 0061;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008C 0061;	
    // ('\u008C') <PARTIAL LINE BACKWARD>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_013)
{
    uint32_t const cps[2] = { 0x008D, 0x0061 };

    // 008D 0061;	
    // ('\u008D') <REVERSE LINE FEED>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008D 0061;	
    // ('\u008D') <REVERSE LINE FEED>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_014)
{
    uint32_t const cps[2] = { 0x008E, 0x0061 };

    // 008E 0061;	
    // ('\u008E') <SINGLE SHIFT TWO>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008E 0061;	
    // ('\u008E') <SINGLE SHIFT TWO>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_015)
{
    uint32_t const cps[2] = { 0x008F, 0x0061 };

    // 008F 0061;	
    // ('\u008F') <SINGLE SHIFT THREE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 008F 0061;	
    // ('\u008F') <SINGLE SHIFT THREE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_016)
{
    uint32_t const cps[2] = { 0x0090, 0x0061 };

    // 0090 0061;	
    // ('\u0090') <DEVICE CONTROL STRING>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0090 0061;	
    // ('\u0090') <DEVICE CONTROL STRING>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_017)
{
    uint32_t const cps[2] = { 0x0091, 0x0061 };

    // 0091 0061;	
    // ('\u0091') <PRIVATE USE ONE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0091 0061;	
    // ('\u0091') <PRIVATE USE ONE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_018)
{
    uint32_t const cps[2] = { 0x0092, 0x0061 };

    // 0092 0061;	
    // ('\u0092') <PRIVATE USE TWO>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0092 0061;	
    // ('\u0092') <PRIVATE USE TWO>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_019)
{
    uint32_t const cps[2] = { 0x0093, 0x0061 };

    // 0093 0061;	
    // ('\u0093') <SET TRANSMIT STATE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0093 0061;	
    // ('\u0093') <SET TRANSMIT STATE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_020)
{
    uint32_t const cps[2] = { 0x0094, 0x0061 };

    // 0094 0061;	
    // ('\u0094') <CANCEL CHARACTER>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0094 0061;	
    // ('\u0094') <CANCEL CHARACTER>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_021)
{
    uint32_t const cps[2] = { 0x0095, 0x0061 };

    // 0095 0061;	
    // ('\u0095') <MESSAGE WAITING>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0095 0061;	
    // ('\u0095') <MESSAGE WAITING>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_022)
{
    uint32_t const cps[2] = { 0x0096, 0x0061 };

    // 0096 0061;	
    // ('\u0096') <START OF GUARDED AREA>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0096 0061;	
    // ('\u0096') <START OF GUARDED AREA>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_023)
{
    uint32_t const cps[2] = { 0x0097, 0x0061 };

    // 0097 0061;	
    // ('\u0097') <END OF GUARDED AREA>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0097 0061;	
    // ('\u0097') <END OF GUARDED AREA>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_024)
{
    uint32_t const cps[2] = { 0x0098, 0x0061 };

    // 0098 0061;	
    // ('\u0098') <START OF STRING>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0098 0061;	
    // ('\u0098') <START OF STRING>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_025)
{
    uint32_t const cps[2] = { 0x0099, 0x0061 };

    // 0099 0061;	
    // ('\u0099') <control>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0099 0061;	
    // ('\u0099') <control>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_026)
{
    uint32_t const cps[2] = { 0x009A, 0x0061 };

    // 009A 0061;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009A 0061;	
    // ('\u009A') <SINGLE CHARACTER INTRODUCER>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_027)
{
    uint32_t const cps[2] = { 0x009B, 0x0061 };

    // 009B 0061;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009B 0061;	
    // ('\u009B') <CONTROL SEQUENCE INTRODUCER>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_028)
{
    uint32_t const cps[2] = { 0x009C, 0x0061 };

    // 009C 0061;	
    // ('\u009C') <STRING TERMINATOR>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009C 0061;	
    // ('\u009C') <STRING TERMINATOR>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_029)
{
    uint32_t const cps[2] = { 0x009D, 0x0061 };

    // 009D 0061;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009D 0061;	
    // ('\u009D') <OPERATING SYSTEM COMMAND>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_030)
{
    uint32_t const cps[2] = { 0x009E, 0x0061 };

    // 009E 0061;	
    // ('\u009E') <PRIVACY MESSAGE>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009E 0061;	
    // ('\u009E') <PRIVACY MESSAGE>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_031)
{
    uint32_t const cps[2] = { 0x009F, 0x0061 };

    // 009F 0061;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 009F 0061;	
    // ('\u009F') <APPLICATION PROGRAM COMMAND>	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_032)
{
    uint32_t const cps[2] = { 0x00AD, 0x0061 };

    // 00AD 0061;	
    // ('\u00AD') SOFT HYPHEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00AD 0061;	
    // ('\u00AD') SOFT HYPHEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_033)
{
    uint32_t const cps[2] = { 0x034F, 0x0061 };

    // 034F 0061;	
    // (͏) COMBINING GRAPHEME JOINER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 034F 0061;	
    // (͏) COMBINING GRAPHEME JOINER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_034)
{
    uint32_t const cps[2] = { 0x0488, 0x0061 };

    // 0488 0061;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0488 0061;	
    // (҈) COMBINING CYRILLIC HUNDRED THOUSANDS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_035)
{
    uint32_t const cps[2] = { 0x0489, 0x0061 };

    // 0489 0061;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0489 0061;	
    // (҉) COMBINING CYRILLIC MILLIONS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_036)
{
    uint32_t const cps[2] = { 0x0591, 0x0061 };

    // 0591 0061;	
    // (֑) HEBREW ACCENT ETNAHTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0591 0061;	
    // (֑) HEBREW ACCENT ETNAHTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_037)
{
    uint32_t const cps[2] = { 0x0592, 0x0061 };

    // 0592 0061;	
    // (֒) HEBREW ACCENT SEGOL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0592 0061;	
    // (֒) HEBREW ACCENT SEGOL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_038)
{
    uint32_t const cps[2] = { 0x0593, 0x0061 };

    // 0593 0061;	
    // (֓) HEBREW ACCENT SHALSHELET	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0593 0061;	
    // (֓) HEBREW ACCENT SHALSHELET	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_039)
{
    uint32_t const cps[2] = { 0x0594, 0x0061 };

    // 0594 0061;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0594 0061;	
    // (֔) HEBREW ACCENT ZAQEF QATAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_040)
{
    uint32_t const cps[2] = { 0x0595, 0x0061 };

    // 0595 0061;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0595 0061;	
    // (֕) HEBREW ACCENT ZAQEF GADOL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_041)
{
    uint32_t const cps[2] = { 0x0596, 0x0061 };

    // 0596 0061;	
    // (֖) HEBREW ACCENT TIPEHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0596 0061;	
    // (֖) HEBREW ACCENT TIPEHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_042)
{
    uint32_t const cps[2] = { 0x0597, 0x0061 };

    // 0597 0061;	
    // (֗) HEBREW ACCENT REVIA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0597 0061;	
    // (֗) HEBREW ACCENT REVIA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_043)
{
    uint32_t const cps[2] = { 0x0598, 0x0061 };

    // 0598 0061;	
    // (֘) HEBREW ACCENT ZARQA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0598 0061;	
    // (֘) HEBREW ACCENT ZARQA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_044)
{
    uint32_t const cps[2] = { 0x0599, 0x0061 };

    // 0599 0061;	
    // (֙) HEBREW ACCENT PASHTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0599 0061;	
    // (֙) HEBREW ACCENT PASHTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_045)
{
    uint32_t const cps[2] = { 0x059A, 0x0061 };

    // 059A 0061;	
    // (֚) HEBREW ACCENT YETIV	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059A 0061;	
    // (֚) HEBREW ACCENT YETIV	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_046)
{
    uint32_t const cps[2] = { 0x059B, 0x0061 };

    // 059B 0061;	
    // (֛) HEBREW ACCENT TEVIR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059B 0061;	
    // (֛) HEBREW ACCENT TEVIR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_047)
{
    uint32_t const cps[2] = { 0x059C, 0x0061 };

    // 059C 0061;	
    // (֜) HEBREW ACCENT GERESH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059C 0061;	
    // (֜) HEBREW ACCENT GERESH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_048)
{
    uint32_t const cps[2] = { 0x059D, 0x0061 };

    // 059D 0061;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059D 0061;	
    // (֝) HEBREW ACCENT GERESH MUQDAM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_049)
{
    uint32_t const cps[2] = { 0x059E, 0x0061 };

    // 059E 0061;	
    // (֞) HEBREW ACCENT GERSHAYIM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059E 0061;	
    // (֞) HEBREW ACCENT GERSHAYIM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_050)
{
    uint32_t const cps[2] = { 0x059F, 0x0061 };

    // 059F 0061;	
    // (֟) HEBREW ACCENT QARNEY PARA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 059F 0061;	
    // (֟) HEBREW ACCENT QARNEY PARA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_051)
{
    uint32_t const cps[2] = { 0x05A0, 0x0061 };

    // 05A0 0061;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A0 0061;	
    // (֠) HEBREW ACCENT TELISHA GEDOLA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_052)
{
    uint32_t const cps[2] = { 0x05A1, 0x0061 };

    // 05A1 0061;	
    // (֡) HEBREW ACCENT PAZER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A1 0061;	
    // (֡) HEBREW ACCENT PAZER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_053)
{
    uint32_t const cps[2] = { 0x05A2, 0x0061 };

    // 05A2 0061;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A2 0061;	
    // (֢) HEBREW ACCENT ATNAH HAFUKH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_054)
{
    uint32_t const cps[2] = { 0x05A3, 0x0061 };

    // 05A3 0061;	
    // (֣) HEBREW ACCENT MUNAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A3 0061;	
    // (֣) HEBREW ACCENT MUNAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_055)
{
    uint32_t const cps[2] = { 0x05A4, 0x0061 };

    // 05A4 0061;	
    // (֤) HEBREW ACCENT MAHAPAKH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A4 0061;	
    // (֤) HEBREW ACCENT MAHAPAKH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_056)
{
    uint32_t const cps[2] = { 0x05A5, 0x0061 };

    // 05A5 0061;	
    // (֥) HEBREW ACCENT MERKHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A5 0061;	
    // (֥) HEBREW ACCENT MERKHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_057)
{
    uint32_t const cps[2] = { 0x05A6, 0x0061 };

    // 05A6 0061;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A6 0061;	
    // (֦) HEBREW ACCENT MERKHA KEFULA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_058)
{
    uint32_t const cps[2] = { 0x05A7, 0x0061 };

    // 05A7 0061;	
    // (֧) HEBREW ACCENT DARGA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A7 0061;	
    // (֧) HEBREW ACCENT DARGA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_059)
{
    uint32_t const cps[2] = { 0x05A8, 0x0061 };

    // 05A8 0061;	
    // (֨) HEBREW ACCENT QADMA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A8 0061;	
    // (֨) HEBREW ACCENT QADMA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_060)
{
    uint32_t const cps[2] = { 0x05A9, 0x0061 };

    // 05A9 0061;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05A9 0061;	
    // (֩) HEBREW ACCENT TELISHA QETANA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_061)
{
    uint32_t const cps[2] = { 0x05AA, 0x0061 };

    // 05AA 0061;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AA 0061;	
    // (֪) HEBREW ACCENT YERAH BEN YOMO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_062)
{
    uint32_t const cps[2] = { 0x05AB, 0x0061 };

    // 05AB 0061;	
    // (֫) HEBREW ACCENT OLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AB 0061;	
    // (֫) HEBREW ACCENT OLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_063)
{
    uint32_t const cps[2] = { 0x05AC, 0x0061 };

    // 05AC 0061;	
    // (֬) HEBREW ACCENT ILUY	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AC 0061;	
    // (֬) HEBREW ACCENT ILUY	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_064)
{
    uint32_t const cps[2] = { 0x05AD, 0x0061 };

    // 05AD 0061;	
    // (֭) HEBREW ACCENT DEHI	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AD 0061;	
    // (֭) HEBREW ACCENT DEHI	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_065)
{
    uint32_t const cps[2] = { 0x05AE, 0x0061 };

    // 05AE 0061;	
    // (֮) HEBREW ACCENT ZINOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AE 0061;	
    // (֮) HEBREW ACCENT ZINOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_066)
{
    uint32_t const cps[2] = { 0x05AF, 0x0061 };

    // 05AF 0061;	
    // (֯) HEBREW MARK MASORA CIRCLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05AF 0061;	
    // (֯) HEBREW MARK MASORA CIRCLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_067)
{
    uint32_t const cps[2] = { 0x05BD, 0x0061 };

    // 05BD 0061;	
    // (ֽ) HEBREW POINT METEG	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05BD 0061;	
    // (ֽ) HEBREW POINT METEG	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_068)
{
    uint32_t const cps[2] = { 0x05C4, 0x0061 };

    // 05C4 0061;	
    // (ׄ) HEBREW MARK UPPER DOT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C4 0061;	
    // (ׄ) HEBREW MARK UPPER DOT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_069)
{
    uint32_t const cps[2] = { 0x05C5, 0x0061 };

    // 05C5 0061;	
    // (ׅ) HEBREW MARK LOWER DOT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 05C5 0061;	
    // (ׅ) HEBREW MARK LOWER DOT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_070)
{
    uint32_t const cps[2] = { 0x0600, 0x0061 };

    // 0600 0061;	
    // ('\u0600') ARABIC NUMBER SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0600 0061;	
    // ('\u0600') ARABIC NUMBER SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_071)
{
    uint32_t const cps[2] = { 0x0601, 0x0061 };

    // 0601 0061;	
    // ('\u0601') ARABIC SIGN SANAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0601 0061;	
    // ('\u0601') ARABIC SIGN SANAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_072)
{
    uint32_t const cps[2] = { 0x0602, 0x0061 };

    // 0602 0061;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0602 0061;	
    // ('\u0602') ARABIC FOOTNOTE MARKER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_073)
{
    uint32_t const cps[2] = { 0x0603, 0x0061 };

    // 0603 0061;	
    // ('\u0603') ARABIC SIGN SAFHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0603 0061;	
    // ('\u0603') ARABIC SIGN SAFHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_074)
{
    uint32_t const cps[2] = { 0x0604, 0x0061 };

    // 0604 0061;	
    // ('\u0604') ARABIC SIGN SAMVAT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0604 0061;	
    // ('\u0604') ARABIC SIGN SAMVAT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_075)
{
    uint32_t const cps[2] = { 0x0605, 0x0061 };

    // 0605 0061;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0605 0061;	
    // ('\u0605') ARABIC NUMBER MARK ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_076)
{
    uint32_t const cps[2] = { 0x0610, 0x0061 };

    // 0610 0061;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0610 0061;	
    // (ؐ) ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_077)
{
    uint32_t const cps[2] = { 0x0611, 0x0061 };

    // 0611 0061;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0611 0061;	
    // (ؑ) ARABIC SIGN ALAYHE ASSALLAM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_078)
{
    uint32_t const cps[2] = { 0x0612, 0x0061 };

    // 0612 0061;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0612 0061;	
    // (ؒ) ARABIC SIGN RAHMATULLAH ALAYHE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_079)
{
    uint32_t const cps[2] = { 0x0613, 0x0061 };

    // 0613 0061;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0613 0061;	
    // (ؓ) ARABIC SIGN RADI ALLAHOU ANHU	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_080)
{
    uint32_t const cps[2] = { 0x0614, 0x0061 };

    // 0614 0061;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0614 0061;	
    // (ؔ) ARABIC SIGN TAKHALLUS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_081)
{
    uint32_t const cps[2] = { 0x0615, 0x0061 };

    // 0615 0061;	
    // (ؕ) ARABIC SMALL HIGH TAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0615 0061;	
    // (ؕ) ARABIC SMALL HIGH TAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_082)
{
    uint32_t const cps[2] = { 0x0616, 0x0061 };

    // 0616 0061;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0616 0061;	
    // (ؖ) ARABIC SMALL HIGH LIGATURE ALEF WITH LAM WITH YEH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_083)
{
    uint32_t const cps[2] = { 0x0617, 0x0061 };

    // 0617 0061;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0617 0061;	
    // (ؗ) ARABIC SMALL HIGH ZAIN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_084)
{
    uint32_t const cps[2] = { 0x0618, 0x0061 };

    // 0618 0061;	
    // (ؘ) ARABIC SMALL FATHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0618 0061;	
    // (ؘ) ARABIC SMALL FATHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_085)
{
    uint32_t const cps[2] = { 0x0619, 0x0061 };

    // 0619 0061;	
    // (ؙ) ARABIC SMALL DAMMA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0619 0061;	
    // (ؙ) ARABIC SMALL DAMMA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_086)
{
    uint32_t const cps[2] = { 0x061A, 0x0061 };

    // 061A 0061;	
    // (ؚ) ARABIC SMALL KASRA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061A 0061;	
    // (ؚ) ARABIC SMALL KASRA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_087)
{
    uint32_t const cps[2] = { 0x061C, 0x0061 };

    // 061C 0061;	
    // ('\u061C') ARABIC LETTER MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 061C 0061;	
    // ('\u061C') ARABIC LETTER MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_088)
{
    uint32_t const cps[2] = { 0x0640, 0x0061 };

    // 0640 0061;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0640 0061;	
    // (‎‎ـ‎‎) ARABIC TATWEEL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_089)
{
    uint32_t const cps[2] = { 0x06D6, 0x0061 };

    // 06D6 0061;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D6 0061;	
    // (ۖ) ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_090)
{
    uint32_t const cps[2] = { 0x06D7, 0x0061 };

    // 06D7 0061;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D7 0061;	
    // (ۗ) ARABIC SMALL HIGH LIGATURE QAF WITH LAM WITH ALEF MAKSURA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_091)
{
    uint32_t const cps[2] = { 0x06D8, 0x0061 };

    // 06D8 0061;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D8 0061;	
    // (ۘ) ARABIC SMALL HIGH MEEM INITIAL FORM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_092)
{
    uint32_t const cps[2] = { 0x06D9, 0x0061 };

    // 06D9 0061;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06D9 0061;	
    // (ۙ) ARABIC SMALL HIGH LAM ALEF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_093)
{
    uint32_t const cps[2] = { 0x06DA, 0x0061 };

    // 06DA 0061;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DA 0061;	
    // (ۚ) ARABIC SMALL HIGH JEEM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_094)
{
    uint32_t const cps[2] = { 0x06DB, 0x0061 };

    // 06DB 0061;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DB 0061;	
    // (ۛ) ARABIC SMALL HIGH THREE DOTS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_095)
{
    uint32_t const cps[2] = { 0x06DC, 0x0061 };

    // 06DC 0061;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DC 0061;	
    // (ۜ) ARABIC SMALL HIGH SEEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_096)
{
    uint32_t const cps[2] = { 0x06DD, 0x0061 };

    // 06DD 0061;	
    // ('\u06DD') ARABIC END OF AYAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DD 0061;	
    // ('\u06DD') ARABIC END OF AYAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_097)
{
    uint32_t const cps[2] = { 0x06DF, 0x0061 };

    // 06DF 0061;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06DF 0061;	
    // (۟) ARABIC SMALL HIGH ROUNDED ZERO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_098)
{
    uint32_t const cps[2] = { 0x06E0, 0x0061 };

    // 06E0 0061;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E0 0061;	
    // (۠) ARABIC SMALL HIGH UPRIGHT RECTANGULAR ZERO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_099)
{
    uint32_t const cps[2] = { 0x06E1, 0x0061 };

    // 06E1 0061;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E1 0061;	
    // (ۡ) ARABIC SMALL HIGH DOTLESS HEAD OF KHAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_100)
{
    uint32_t const cps[2] = { 0x06E2, 0x0061 };

    // 06E2 0061;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E2 0061;	
    // (ۢ) ARABIC SMALL HIGH MEEM ISOLATED FORM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_101)
{
    uint32_t const cps[2] = { 0x06E3, 0x0061 };

    // 06E3 0061;	
    // (ۣ) ARABIC SMALL LOW SEEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E3 0061;	
    // (ۣ) ARABIC SMALL LOW SEEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_102)
{
    uint32_t const cps[2] = { 0x06E4, 0x0061 };

    // 06E4 0061;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E4 0061;	
    // (ۤ) ARABIC SMALL HIGH MADDA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_103)
{
    uint32_t const cps[2] = { 0x06E7, 0x0061 };

    // 06E7 0061;	
    // (ۧ) ARABIC SMALL HIGH YEH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E7 0061;	
    // (ۧ) ARABIC SMALL HIGH YEH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_104)
{
    uint32_t const cps[2] = { 0x06E8, 0x0061 };

    // 06E8 0061;	
    // (ۨ) ARABIC SMALL HIGH NOON	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06E8 0061;	
    // (ۨ) ARABIC SMALL HIGH NOON	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_105)
{
    uint32_t const cps[2] = { 0x06EA, 0x0061 };

    // 06EA 0061;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EA 0061;	
    // (۪) ARABIC EMPTY CENTRE LOW STOP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_106)
{
    uint32_t const cps[2] = { 0x06EB, 0x0061 };

    // 06EB 0061;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EB 0061;	
    // (۫) ARABIC EMPTY CENTRE HIGH STOP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_107)
{
    uint32_t const cps[2] = { 0x06EC, 0x0061 };

    // 06EC 0061;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06EC 0061;	
    // (۬) ARABIC ROUNDED HIGH STOP WITH FILLED CENTRE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_108)
{
    uint32_t const cps[2] = { 0x06ED, 0x0061 };

    // 06ED 0061;	
    // (ۭ) ARABIC SMALL LOW MEEM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 06ED 0061;	
    // (ۭ) ARABIC SMALL LOW MEEM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_109)
{
    uint32_t const cps[2] = { 0x070F, 0x0061 };

    // 070F 0061;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 070F 0061;	
    // ('\u070F') SYRIAC ABBREVIATION MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_110)
{
    uint32_t const cps[2] = { 0x0740, 0x0061 };

    // 0740 0061;	
    // (݀) SYRIAC FEMININE DOT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0740 0061;	
    // (݀) SYRIAC FEMININE DOT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_111)
{
    uint32_t const cps[2] = { 0x0743, 0x0061 };

    // 0743 0061;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0743 0061;	
    // (݃) SYRIAC TWO VERTICAL DOTS ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_112)
{
    uint32_t const cps[2] = { 0x0744, 0x0061 };

    // 0744 0061;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0744 0061;	
    // (݄) SYRIAC TWO VERTICAL DOTS BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_113)
{
    uint32_t const cps[2] = { 0x0747, 0x0061 };

    // 0747 0061;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0747 0061;	
    // (݇) SYRIAC OBLIQUE LINE ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_114)
{
    uint32_t const cps[2] = { 0x0748, 0x0061 };

    // 0748 0061;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0748 0061;	
    // (݈) SYRIAC OBLIQUE LINE BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_115)
{
    uint32_t const cps[2] = { 0x0749, 0x0061 };

    // 0749 0061;	
    // (݉) SYRIAC MUSIC	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0749 0061;	
    // (݉) SYRIAC MUSIC	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_116)
{
    uint32_t const cps[2] = { 0x074A, 0x0061 };

    // 074A 0061;	
    // (݊) SYRIAC BARREKH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 074A 0061;	
    // (݊) SYRIAC BARREKH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_117)
{
    uint32_t const cps[2] = { 0x07FA, 0x0061 };

    // 07FA 0061;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 07FA 0061;	
    // (‎‎ߺ‎‎) NKO LAJANYALAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_118)
{
    uint32_t const cps[2] = { 0x08D4, 0x0061 };

    // 08D4 0061;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D4 0061;	
    // (ࣔ) ARABIC SMALL HIGH WORD AR-RUB	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_119)
{
    uint32_t const cps[2] = { 0x08D5, 0x0061 };

    // 08D5 0061;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D5 0061;	
    // (ࣕ) ARABIC SMALL HIGH SAD	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_120)
{
    uint32_t const cps[2] = { 0x08D6, 0x0061 };

    // 08D6 0061;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D6 0061;	
    // (ࣖ) ARABIC SMALL HIGH AIN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_121)
{
    uint32_t const cps[2] = { 0x08D7, 0x0061 };

    // 08D7 0061;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D7 0061;	
    // (ࣗ) ARABIC SMALL HIGH QAF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_122)
{
    uint32_t const cps[2] = { 0x08D8, 0x0061 };

    // 08D8 0061;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D8 0061;	
    // (ࣘ) ARABIC SMALL HIGH NOON WITH KASRA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_123)
{
    uint32_t const cps[2] = { 0x08D9, 0x0061 };

    // 08D9 0061;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08D9 0061;	
    // (ࣙ) ARABIC SMALL LOW NOON WITH KASRA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_124)
{
    uint32_t const cps[2] = { 0x08DA, 0x0061 };

    // 08DA 0061;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DA 0061;	
    // (ࣚ) ARABIC SMALL HIGH WORD ATH-THALATHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_125)
{
    uint32_t const cps[2] = { 0x08DB, 0x0061 };

    // 08DB 0061;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DB 0061;	
    // (ࣛ) ARABIC SMALL HIGH WORD AS-SAJDA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_126)
{
    uint32_t const cps[2] = { 0x08DC, 0x0061 };

    // 08DC 0061;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DC 0061;	
    // (ࣜ) ARABIC SMALL HIGH WORD AN-NISF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_127)
{
    uint32_t const cps[2] = { 0x08DD, 0x0061 };

    // 08DD 0061;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DD 0061;	
    // (ࣝ) ARABIC SMALL HIGH WORD SAKTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_128)
{
    uint32_t const cps[2] = { 0x08DE, 0x0061 };

    // 08DE 0061;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DE 0061;	
    // (ࣞ) ARABIC SMALL HIGH WORD QIF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_129)
{
    uint32_t const cps[2] = { 0x08DF, 0x0061 };

    // 08DF 0061;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08DF 0061;	
    // (ࣟ) ARABIC SMALL HIGH WORD WAQFA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_130)
{
    uint32_t const cps[2] = { 0x08E0, 0x0061 };

    // 08E0 0061;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E0 0061;	
    // (࣠) ARABIC SMALL HIGH FOOTNOTE MARKER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_131)
{
    uint32_t const cps[2] = { 0x08E1, 0x0061 };

    // 08E1 0061;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E1 0061;	
    // (࣡) ARABIC SMALL HIGH SIGN SAFHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_132)
{
    uint32_t const cps[2] = { 0x08E2, 0x0061 };

    // 08E2 0061;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08E2 0061;	
    // ('\u08E2') ARABIC DISPUTED END OF AYAH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_133)
{
    uint32_t const cps[2] = { 0x08EA, 0x0061 };

    // 08EA 0061;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EA 0061;	
    // (࣪) ARABIC TONE ONE DOT ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_134)
{
    uint32_t const cps[2] = { 0x08EB, 0x0061 };

    // 08EB 0061;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EB 0061;	
    // (࣫) ARABIC TONE TWO DOTS ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_135)
{
    uint32_t const cps[2] = { 0x08EC, 0x0061 };

    // 08EC 0061;	
    // (࣬) ARABIC TONE LOOP ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EC 0061;	
    // (࣬) ARABIC TONE LOOP ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_136)
{
    uint32_t const cps[2] = { 0x08ED, 0x0061 };

    // 08ED 0061;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08ED 0061;	
    // (࣭) ARABIC TONE ONE DOT BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_137)
{
    uint32_t const cps[2] = { 0x08EE, 0x0061 };

    // 08EE 0061;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EE 0061;	
    // (࣮) ARABIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_138)
{
    uint32_t const cps[2] = { 0x08EF, 0x0061 };

    // 08EF 0061;	
    // (࣯) ARABIC TONE LOOP BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08EF 0061;	
    // (࣯) ARABIC TONE LOOP BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_139)
{
    uint32_t const cps[2] = { 0x08F3, 0x0061 };

    // 08F3 0061;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 08F3 0061;	
    // (ࣳ) ARABIC SMALL HIGH WAW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_140)
{
    uint32_t const cps[2] = { 0x0951, 0x0061 };

    // 0951 0061;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0951 0061;	
    // (॑) DEVANAGARI STRESS SIGN UDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_141)
{
    uint32_t const cps[2] = { 0x0952, 0x0061 };

    // 0952 0061;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0952 0061;	
    // (॒) DEVANAGARI STRESS SIGN ANUDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_142)
{
    uint32_t const cps[2] = { 0x0F18, 0x0061 };

    // 0F18 0061;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F18 0061;	
    // (༘) TIBETAN ASTROLOGICAL SIGN -KHYUD PA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_143)
{
    uint32_t const cps[2] = { 0x0F19, 0x0061 };

    // 0F19 0061;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F19 0061;	
    // (༙) TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_144)
{
    uint32_t const cps[2] = { 0x0F35, 0x0061 };

    // 0F35 0061;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F35 0061;	
    // (༵) TIBETAN MARK NGAS BZUNG NYI ZLA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_145)
{
    uint32_t const cps[2] = { 0x0F37, 0x0061 };

    // 0F37 0061;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F37 0061;	
    // (༷) TIBETAN MARK NGAS BZUNG SGOR RTAGS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_146)
{
    uint32_t const cps[2] = { 0x0F3E, 0x0061 };

    // 0F3E 0061;	
    // (༾) TIBETAN SIGN YAR TSHES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3E 0061;	
    // (༾) TIBETAN SIGN YAR TSHES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_147)
{
    uint32_t const cps[2] = { 0x0F3F, 0x0061 };

    // 0F3F 0061;	
    // (༿) TIBETAN SIGN MAR TSHES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F3F 0061;	
    // (༿) TIBETAN SIGN MAR TSHES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_148)
{
    uint32_t const cps[2] = { 0x0F82, 0x0061 };

    // 0F82 0061;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F82 0061;	
    // (ྂ) TIBETAN SIGN NYI ZLA NAA DA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_149)
{
    uint32_t const cps[2] = { 0x0F83, 0x0061 };

    // 0F83 0061;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F83 0061;	
    // (ྃ) TIBETAN SIGN SNA LDAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_150)
{
    uint32_t const cps[2] = { 0x0F86, 0x0061 };

    // 0F86 0061;	
    // (྆) TIBETAN SIGN LCI RTAGS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F86 0061;	
    // (྆) TIBETAN SIGN LCI RTAGS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_151)
{
    uint32_t const cps[2] = { 0x0F87, 0x0061 };

    // 0F87 0061;	
    // (྇) TIBETAN SIGN YANG RTAGS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0F87 0061;	
    // (྇) TIBETAN SIGN YANG RTAGS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_152)
{
    uint32_t const cps[2] = { 0x0FC6, 0x0061 };

    // 0FC6 0061;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0FC6 0061;	
    // (࿆) TIBETAN SYMBOL PADMA GDAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_153)
{
    uint32_t const cps[2] = { 0x17B4, 0x0061 };

    // 17B4 0061;	
    // (឴) KHMER VOWEL INHERENT AQ	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B4 0061;	
    // (឴) KHMER VOWEL INHERENT AQ	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_154)
{
    uint32_t const cps[2] = { 0x17B5, 0x0061 };

    // 17B5 0061;	
    // (឵) KHMER VOWEL INHERENT AA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17B5 0061;	
    // (឵) KHMER VOWEL INHERENT AA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_155)
{
    uint32_t const cps[2] = { 0x17D3, 0x0061 };

    // 17D3 0061;	
    // (៓) KHMER SIGN BATHAMASAT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 17D3 0061;	
    // (៓) KHMER SIGN BATHAMASAT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_156)
{
    uint32_t const cps[2] = { 0x180A, 0x0061 };

    // 180A 0061;	
    // (᠊) MONGOLIAN NIRUGU	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180A 0061;	
    // (᠊) MONGOLIAN NIRUGU	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_157)
{
    uint32_t const cps[2] = { 0x180B, 0x0061 };

    // 180B 0061;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180B 0061;	
    // (᠋) MONGOLIAN FREE VARIATION SELECTOR ONE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_158)
{
    uint32_t const cps[2] = { 0x180C, 0x0061 };

    // 180C 0061;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180C 0061;	
    // (᠌) MONGOLIAN FREE VARIATION SELECTOR TWO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_159)
{
    uint32_t const cps[2] = { 0x180D, 0x0061 };

    // 180D 0061;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180D 0061;	
    // (᠍) MONGOLIAN FREE VARIATION SELECTOR THREE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_160)
{
    uint32_t const cps[2] = { 0x180E, 0x0061 };

    // 180E 0061;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 180E 0061;	
    // ('\u180E') MONGOLIAN VOWEL SEPARATOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_161)
{
    uint32_t const cps[2] = { 0x1A7F, 0x0061 };

    // 1A7F 0061;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1A7F 0061;	
    // (᩿) TAI THAM COMBINING CRYPTOGRAMMIC DOT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_162)
{
    uint32_t const cps[2] = { 0x1B6B, 0x0061 };

    // 1B6B 0061;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6B 0061;	
    // (᭫) BALINESE MUSICAL SYMBOL COMBINING TEGEH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_163)
{
    uint32_t const cps[2] = { 0x1B6C, 0x0061 };

    // 1B6C 0061;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6C 0061;	
    // (᭬) BALINESE MUSICAL SYMBOL COMBINING ENDEP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_164)
{
    uint32_t const cps[2] = { 0x1B6D, 0x0061 };

    // 1B6D 0061;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6D 0061;	
    // (᭭) BALINESE MUSICAL SYMBOL COMBINING KEMPUL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_165)
{
    uint32_t const cps[2] = { 0x1B6E, 0x0061 };

    // 1B6E 0061;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6E 0061;	
    // (᭮) BALINESE MUSICAL SYMBOL COMBINING KEMPLI	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_166)
{
    uint32_t const cps[2] = { 0x1B6F, 0x0061 };

    // 1B6F 0061;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B6F 0061;	
    // (᭯) BALINESE MUSICAL SYMBOL COMBINING JEGOGAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_167)
{
    uint32_t const cps[2] = { 0x1B70, 0x0061 };

    // 1B70 0061;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B70 0061;	
    // (᭰) BALINESE MUSICAL SYMBOL COMBINING KEMPUL WITH JEGOGAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_168)
{
    uint32_t const cps[2] = { 0x1B71, 0x0061 };

    // 1B71 0061;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B71 0061;	
    // (᭱) BALINESE MUSICAL SYMBOL COMBINING KEMPLI WITH JEGOGAN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_169)
{
    uint32_t const cps[2] = { 0x1B72, 0x0061 };

    // 1B72 0061;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B72 0061;	
    // (᭲) BALINESE MUSICAL SYMBOL COMBINING BENDE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_170)
{
    uint32_t const cps[2] = { 0x1B73, 0x0061 };

    // 1B73 0061;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1B73 0061;	
    // (᭳) BALINESE MUSICAL SYMBOL COMBINING GONG	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_171)
{
    uint32_t const cps[2] = { 0x1CD0, 0x0061 };

    // 1CD0 0061;	
    // (᳐) VEDIC TONE KARSHANA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD0 0061;	
    // (᳐) VEDIC TONE KARSHANA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_172)
{
    uint32_t const cps[2] = { 0x1CD1, 0x0061 };

    // 1CD1 0061;	
    // (᳑) VEDIC TONE SHARA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD1 0061;	
    // (᳑) VEDIC TONE SHARA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_173)
{
    uint32_t const cps[2] = { 0x1CD2, 0x0061 };

    // 1CD2 0061;	
    // (᳒) VEDIC TONE PRENKHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD2 0061;	
    // (᳒) VEDIC TONE PRENKHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_174)
{
    uint32_t const cps[2] = { 0x1CD3, 0x0061 };

    // 1CD3 0061;	
    // (᳓) VEDIC SIGN NIHSHVASA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD3 0061;	
    // (᳓) VEDIC SIGN NIHSHVASA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_175)
{
    uint32_t const cps[2] = { 0x1CD4, 0x0061 };

    // 1CD4 0061;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD4 0061;	
    // (᳔) VEDIC SIGN YAJURVEDIC MIDLINE SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_176)
{
    uint32_t const cps[2] = { 0x1CD5, 0x0061 };

    // 1CD5 0061;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD5 0061;	
    // (᳕) VEDIC TONE YAJURVEDIC AGGRAVATED INDEPENDENT SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_177)
{
    uint32_t const cps[2] = { 0x1CD6, 0x0061 };

    // 1CD6 0061;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD6 0061;	
    // (᳖) VEDIC TONE YAJURVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_178)
{
    uint32_t const cps[2] = { 0x1CD7, 0x0061 };

    // 1CD7 0061;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD7 0061;	
    // (᳗) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_179)
{
    uint32_t const cps[2] = { 0x1CD8, 0x0061 };

    // 1CD8 0061;	
    // (᳘) VEDIC TONE CANDRA BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD8 0061;	
    // (᳘) VEDIC TONE CANDRA BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_180)
{
    uint32_t const cps[2] = { 0x1CD9, 0x0061 };

    // 1CD9 0061;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CD9 0061;	
    // (᳙) VEDIC TONE YAJURVEDIC KATHAKA INDEPENDENT SVARITA SCHROEDER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_181)
{
    uint32_t const cps[2] = { 0x1CDA, 0x0061 };

    // 1CDA 0061;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDA 0061;	
    // (᳚) VEDIC TONE DOUBLE SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_182)
{
    uint32_t const cps[2] = { 0x1CDB, 0x0061 };

    // 1CDB 0061;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDB 0061;	
    // (᳛) VEDIC TONE TRIPLE SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_183)
{
    uint32_t const cps[2] = { 0x1CDC, 0x0061 };

    // 1CDC 0061;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDC 0061;	
    // (᳜) VEDIC TONE KATHAKA ANUDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_184)
{
    uint32_t const cps[2] = { 0x1CDD, 0x0061 };

    // 1CDD 0061;	
    // (᳝) VEDIC TONE DOT BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDD 0061;	
    // (᳝) VEDIC TONE DOT BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_185)
{
    uint32_t const cps[2] = { 0x1CDE, 0x0061 };

    // 1CDE 0061;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDE 0061;	
    // (᳞) VEDIC TONE TWO DOTS BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_186)
{
    uint32_t const cps[2] = { 0x1CDF, 0x0061 };

    // 1CDF 0061;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CDF 0061;	
    // (᳟) VEDIC TONE THREE DOTS BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_187)
{
    uint32_t const cps[2] = { 0x1CE0, 0x0061 };

    // 1CE0 0061;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE0 0061;	
    // (᳠) VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_188)
{
    uint32_t const cps[2] = { 0x1CE1, 0x0061 };

    // 1CE1 0061;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE1 0061;	
    // (᳡) VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_189)
{
    uint32_t const cps[2] = { 0x1CE2, 0x0061 };

    // 1CE2 0061;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE2 0061;	
    // (᳢) VEDIC SIGN VISARGA SVARITA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_190)
{
    uint32_t const cps[2] = { 0x1CE3, 0x0061 };

    // 1CE3 0061;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE3 0061;	
    // (᳣) VEDIC SIGN VISARGA UDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_191)
{
    uint32_t const cps[2] = { 0x1CE4, 0x0061 };

    // 1CE4 0061;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE4 0061;	
    // (᳤) VEDIC SIGN REVERSED VISARGA UDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_192)
{
    uint32_t const cps[2] = { 0x1CE5, 0x0061 };

    // 1CE5 0061;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE5 0061;	
    // (᳥) VEDIC SIGN VISARGA ANUDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_193)
{
    uint32_t const cps[2] = { 0x1CE6, 0x0061 };

    // 1CE6 0061;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE6 0061;	
    // (᳦) VEDIC SIGN REVERSED VISARGA ANUDATTA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_194)
{
    uint32_t const cps[2] = { 0x1CE7, 0x0061 };

    // 1CE7 0061;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE7 0061;	
    // (᳧) VEDIC SIGN VISARGA UDATTA WITH TAIL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_195)
{
    uint32_t const cps[2] = { 0x1CE8, 0x0061 };

    // 1CE8 0061;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CE8 0061;	
    // (᳨) VEDIC SIGN VISARGA ANUDATTA WITH TAIL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_196)
{
    uint32_t const cps[2] = { 0x1CF4, 0x0061 };

    // 1CF4 0061;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF4 0061;	
    // (᳴) VEDIC TONE CANDRA ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_197)
{
    uint32_t const cps[2] = { 0x1CF7, 0x0061 };

    // 1CF7 0061;	
    // (᳷) VEDIC SIGN ATIKRAMA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF7 0061;	
    // (᳷) VEDIC SIGN ATIKRAMA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_198)
{
    uint32_t const cps[2] = { 0x1CF8, 0x0061 };

    // 1CF8 0061;	
    // (᳸) VEDIC TONE RING ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF8 0061;	
    // (᳸) VEDIC TONE RING ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_199)
{
    uint32_t const cps[2] = { 0x1CF9, 0x0061 };

    // 1CF9 0061;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1CF9 0061;	
    // (᳹) VEDIC TONE DOUBLE RING ABOVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_200)
{
    uint32_t const cps[2] = { 0x200B, 0x0061 };

    // 200B 0061;	
    // ('\u200B') ZERO WIDTH SPACE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200B 0061;	
    // ('\u200B') ZERO WIDTH SPACE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_201)
{
    uint32_t const cps[2] = { 0x200C, 0x0061 };

    // 200C 0061;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200C 0061;	
    // ('\u200C') ZERO WIDTH NON-JOINER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_202)
{
    uint32_t const cps[2] = { 0x200D, 0x0061 };

    // 200D 0061;	
    // ('\u200D') ZERO WIDTH JOINER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200D 0061;	
    // ('\u200D') ZERO WIDTH JOINER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_203)
{
    uint32_t const cps[2] = { 0x200E, 0x0061 };

    // 200E 0061;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200E 0061;	
    // ('\u200E') LEFT-TO-RIGHT MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_204)
{
    uint32_t const cps[2] = { 0x200F, 0x0061 };

    // 200F 0061;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 200F 0061;	
    // ('\u200F') RIGHT-TO-LEFT MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_205)
{
    uint32_t const cps[2] = { 0x202A, 0x0061 };

    // 202A 0061;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202A 0061;	
    // ('\u202A') LEFT-TO-RIGHT EMBEDDING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_206)
{
    uint32_t const cps[2] = { 0x202B, 0x0061 };

    // 202B 0061;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202B 0061;	
    // ('\u202B') RIGHT-TO-LEFT EMBEDDING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_207)
{
    uint32_t const cps[2] = { 0x202C, 0x0061 };

    // 202C 0061;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202C 0061;	
    // ('\u202C') POP DIRECTIONAL FORMATTING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_208)
{
    uint32_t const cps[2] = { 0x202D, 0x0061 };

    // 202D 0061;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202D 0061;	
    // ('\u202D') LEFT-TO-RIGHT OVERRIDE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_209)
{
    uint32_t const cps[2] = { 0x202E, 0x0061 };

    // 202E 0061;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 202E 0061;	
    // ('\u202E') RIGHT-TO-LEFT OVERRIDE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_210)
{
    uint32_t const cps[2] = { 0x2060, 0x0061 };

    // 2060 0061;	
    // ('\u2060') WORD JOINER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2060 0061;	
    // ('\u2060') WORD JOINER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_211)
{
    uint32_t const cps[2] = { 0x2061, 0x0061 };

    // 2061 0061;	
    // ('\u2061') FUNCTION APPLICATION	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2061 0061;	
    // ('\u2061') FUNCTION APPLICATION	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_212)
{
    uint32_t const cps[2] = { 0x2062, 0x0061 };

    // 2062 0061;	
    // ('\u2062') INVISIBLE TIMES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2062 0061;	
    // ('\u2062') INVISIBLE TIMES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_213)
{
    uint32_t const cps[2] = { 0x2063, 0x0061 };

    // 2063 0061;	
    // ('\u2063') INVISIBLE SEPARATOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2063 0061;	
    // ('\u2063') INVISIBLE SEPARATOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_214)
{
    uint32_t const cps[2] = { 0x2064, 0x0061 };

    // 2064 0061;	
    // ('\u2064') INVISIBLE PLUS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2064 0061;	
    // ('\u2064') INVISIBLE PLUS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_215)
{
    uint32_t const cps[2] = { 0x2066, 0x0061 };

    // 2066 0061;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2066 0061;	
    // ('\u2066') LEFT-TO-RIGHT ISOLATE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_216)
{
    uint32_t const cps[2] = { 0x2067, 0x0061 };

    // 2067 0061;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2067 0061;	
    // ('\u2067') RIGHT-TO-LEFT ISOLATE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_217)
{
    uint32_t const cps[2] = { 0x2068, 0x0061 };

    // 2068 0061;	
    // ('\u2068') FIRST STRONG ISOLATE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2068 0061;	
    // ('\u2068') FIRST STRONG ISOLATE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_218)
{
    uint32_t const cps[2] = { 0x2069, 0x0061 };

    // 2069 0061;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2069 0061;	
    // ('\u2069') POP DIRECTIONAL ISOLATE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_219)
{
    uint32_t const cps[2] = { 0x206A, 0x0061 };

    // 206A 0061;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206A 0061;	
    // ('\u206A') INHIBIT SYMMETRIC SWAPPING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_220)
{
    uint32_t const cps[2] = { 0x206B, 0x0061 };

    // 206B 0061;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206B 0061;	
    // ('\u206B') ACTIVATE SYMMETRIC SWAPPING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_221)
{
    uint32_t const cps[2] = { 0x206C, 0x0061 };

    // 206C 0061;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206C 0061;	
    // ('\u206C') INHIBIT ARABIC FORM SHAPING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_222)
{
    uint32_t const cps[2] = { 0x206D, 0x0061 };

    // 206D 0061;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206D 0061;	
    // ('\u206D') ACTIVATE ARABIC FORM SHAPING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_223)
{
    uint32_t const cps[2] = { 0x206E, 0x0061 };

    // 206E 0061;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206E 0061;	
    // ('\u206E') NATIONAL DIGIT SHAPES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_224)
{
    uint32_t const cps[2] = { 0x206F, 0x0061 };

    // 206F 0061;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 206F 0061;	
    // ('\u206F') NOMINAL DIGIT SHAPES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_225)
{
    uint32_t const cps[2] = { 0x2D7F, 0x0061 };

    // 2D7F 0061;	
    // (⵿) TIFINAGH CONSONANT JOINER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2D7F 0061;	
    // (⵿) TIFINAGH CONSONANT JOINER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_226)
{
    uint32_t const cps[2] = { 0xA670, 0x0061 };

    // A670 0061;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A670 0061;	
    // (꙰) COMBINING CYRILLIC TEN MILLIONS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_227)
{
    uint32_t const cps[2] = { 0xA671, 0x0061 };

    // A671 0061;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A671 0061;	
    // (꙱) COMBINING CYRILLIC HUNDRED MILLIONS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_228)
{
    uint32_t const cps[2] = { 0xA672, 0x0061 };

    // A672 0061;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A672 0061;	
    // (꙲) COMBINING CYRILLIC THOUSAND MILLIONS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_229)
{
    uint32_t const cps[2] = { 0xA8E0, 0x0061 };

    // A8E0 0061;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E0 0061;	
    // (꣠) COMBINING DEVANAGARI DIGIT ZERO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_230)
{
    uint32_t const cps[2] = { 0xA8E1, 0x0061 };

    // A8E1 0061;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E1 0061;	
    // (꣡) COMBINING DEVANAGARI DIGIT ONE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_231)
{
    uint32_t const cps[2] = { 0xA8E2, 0x0061 };

    // A8E2 0061;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E2 0061;	
    // (꣢) COMBINING DEVANAGARI DIGIT TWO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_232)
{
    uint32_t const cps[2] = { 0xA8E3, 0x0061 };

    // A8E3 0061;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E3 0061;	
    // (꣣) COMBINING DEVANAGARI DIGIT THREE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_233)
{
    uint32_t const cps[2] = { 0xA8E4, 0x0061 };

    // A8E4 0061;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E4 0061;	
    // (꣤) COMBINING DEVANAGARI DIGIT FOUR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_234)
{
    uint32_t const cps[2] = { 0xA8E5, 0x0061 };

    // A8E5 0061;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E5 0061;	
    // (꣥) COMBINING DEVANAGARI DIGIT FIVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_235)
{
    uint32_t const cps[2] = { 0xA8E6, 0x0061 };

    // A8E6 0061;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E6 0061;	
    // (꣦) COMBINING DEVANAGARI DIGIT SIX	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_236)
{
    uint32_t const cps[2] = { 0xA8E7, 0x0061 };

    // A8E7 0061;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E7 0061;	
    // (꣧) COMBINING DEVANAGARI DIGIT SEVEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_237)
{
    uint32_t const cps[2] = { 0xA8E8, 0x0061 };

    // A8E8 0061;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E8 0061;	
    // (꣨) COMBINING DEVANAGARI DIGIT EIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_238)
{
    uint32_t const cps[2] = { 0xA8E9, 0x0061 };

    // A8E9 0061;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8E9 0061;	
    // (꣩) COMBINING DEVANAGARI DIGIT NINE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_239)
{
    uint32_t const cps[2] = { 0xA8EA, 0x0061 };

    // A8EA 0061;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EA 0061;	
    // (꣪) COMBINING DEVANAGARI LETTER A	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_240)
{
    uint32_t const cps[2] = { 0xA8EB, 0x0061 };

    // A8EB 0061;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EB 0061;	
    // (꣫) COMBINING DEVANAGARI LETTER U	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_241)
{
    uint32_t const cps[2] = { 0xA8EC, 0x0061 };

    // A8EC 0061;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EC 0061;	
    // (꣬) COMBINING DEVANAGARI LETTER KA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_242)
{
    uint32_t const cps[2] = { 0xA8ED, 0x0061 };

    // A8ED 0061;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8ED 0061;	
    // (꣭) COMBINING DEVANAGARI LETTER NA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_243)
{
    uint32_t const cps[2] = { 0xA8EE, 0x0061 };

    // A8EE 0061;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EE 0061;	
    // (꣮) COMBINING DEVANAGARI LETTER PA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_244)
{
    uint32_t const cps[2] = { 0xA8EF, 0x0061 };

    // A8EF 0061;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8EF 0061;	
    // (꣯) COMBINING DEVANAGARI LETTER RA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_245)
{
    uint32_t const cps[2] = { 0xA8F0, 0x0061 };

    // A8F0 0061;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F0 0061;	
    // (꣰) COMBINING DEVANAGARI LETTER VI	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_246)
{
    uint32_t const cps[2] = { 0xA8F1, 0x0061 };

    // A8F1 0061;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A8F1 0061;	
    // (꣱) COMBINING DEVANAGARI SIGN AVAGRAHA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_247)
{
    uint32_t const cps[2] = { 0xFE00, 0x0061 };

    // FE00 0061;	
    // (︀) VARIATION SELECTOR-1	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE00 0061;	
    // (︀) VARIATION SELECTOR-1	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_248)
{
    uint32_t const cps[2] = { 0xFE01, 0x0061 };

    // FE01 0061;	
    // (︁) VARIATION SELECTOR-2	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE01 0061;	
    // (︁) VARIATION SELECTOR-2	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_249)
{
    uint32_t const cps[2] = { 0xFE02, 0x0061 };

    // FE02 0061;	
    // (︂) VARIATION SELECTOR-3	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE02 0061;	
    // (︂) VARIATION SELECTOR-3	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_250)
{
    uint32_t const cps[2] = { 0xFE03, 0x0061 };

    // FE03 0061;	
    // (︃) VARIATION SELECTOR-4	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE03 0061;	
    // (︃) VARIATION SELECTOR-4	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_251)
{
    uint32_t const cps[2] = { 0xFE04, 0x0061 };

    // FE04 0061;	
    // (︄) VARIATION SELECTOR-5	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE04 0061;	
    // (︄) VARIATION SELECTOR-5	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_252)
{
    uint32_t const cps[2] = { 0xFE05, 0x0061 };

    // FE05 0061;	
    // (︅) VARIATION SELECTOR-6	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE05 0061;	
    // (︅) VARIATION SELECTOR-6	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_253)
{
    uint32_t const cps[2] = { 0xFE06, 0x0061 };

    // FE06 0061;	
    // (︆) VARIATION SELECTOR-7	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE06 0061;	
    // (︆) VARIATION SELECTOR-7	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_254)
{
    uint32_t const cps[2] = { 0xFE07, 0x0061 };

    // FE07 0061;	
    // (︇) VARIATION SELECTOR-8	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE07 0061;	
    // (︇) VARIATION SELECTOR-8	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_255)
{
    uint32_t const cps[2] = { 0xFE08, 0x0061 };

    // FE08 0061;	
    // (︈) VARIATION SELECTOR-9	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE08 0061;	
    // (︈) VARIATION SELECTOR-9	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_256)
{
    uint32_t const cps[2] = { 0xFE09, 0x0061 };

    // FE09 0061;	
    // (︉) VARIATION SELECTOR-10	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE09 0061;	
    // (︉) VARIATION SELECTOR-10	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_257)
{
    uint32_t const cps[2] = { 0xFE0A, 0x0061 };

    // FE0A 0061;	
    // (︊) VARIATION SELECTOR-11	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0A 0061;	
    // (︊) VARIATION SELECTOR-11	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_258)
{
    uint32_t const cps[2] = { 0xFE0B, 0x0061 };

    // FE0B 0061;	
    // (︋) VARIATION SELECTOR-12	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0B 0061;	
    // (︋) VARIATION SELECTOR-12	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_259)
{
    uint32_t const cps[2] = { 0xFE0C, 0x0061 };

    // FE0C 0061;	
    // (︌) VARIATION SELECTOR-13	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0C 0061;	
    // (︌) VARIATION SELECTOR-13	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_260)
{
    uint32_t const cps[2] = { 0xFE0D, 0x0061 };

    // FE0D 0061;	
    // (︍) VARIATION SELECTOR-14	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0D 0061;	
    // (︍) VARIATION SELECTOR-14	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_261)
{
    uint32_t const cps[2] = { 0xFE0E, 0x0061 };

    // FE0E 0061;	
    // (︎) VARIATION SELECTOR-15	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0E 0061;	
    // (︎) VARIATION SELECTOR-15	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_262)
{
    uint32_t const cps[2] = { 0xFE0F, 0x0061 };

    // FE0F 0061;	
    // (️) VARIATION SELECTOR-16	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE0F 0061;	
    // (️) VARIATION SELECTOR-16	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_263)
{
    uint32_t const cps[2] = { 0xFE21, 0x0061 };

    // FE21 0061;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE21 0061;	
    // (︡) COMBINING LIGATURE RIGHT HALF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_264)
{
    uint32_t const cps[2] = { 0xFE23, 0x0061 };

    // FE23 0061;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE23 0061;	
    // (︣) COMBINING DOUBLE TILDE RIGHT HALF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_265)
{
    uint32_t const cps[2] = { 0xFE24, 0x0061 };

    // FE24 0061;	
    // (︤) COMBINING MACRON LEFT HALF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE24 0061;	
    // (︤) COMBINING MACRON LEFT HALF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_266)
{
    uint32_t const cps[2] = { 0xFE25, 0x0061 };

    // FE25 0061;	
    // (︥) COMBINING MACRON RIGHT HALF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE25 0061;	
    // (︥) COMBINING MACRON RIGHT HALF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_267)
{
    uint32_t const cps[2] = { 0xFE26, 0x0061 };

    // FE26 0061;	
    // (︦) COMBINING CONJOINING MACRON	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE26 0061;	
    // (︦) COMBINING CONJOINING MACRON	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_268)
{
    uint32_t const cps[2] = { 0xFE28, 0x0061 };

    // FE28 0061;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE28 0061;	
    // (︨) COMBINING LIGATURE RIGHT HALF BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_269)
{
    uint32_t const cps[2] = { 0xFE2A, 0x0061 };

    // FE2A 0061;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2A 0061;	
    // (︪) COMBINING TILDE RIGHT HALF BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_270)
{
    uint32_t const cps[2] = { 0xFE2B, 0x0061 };

    // FE2B 0061;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2B 0061;	
    // (︫) COMBINING MACRON LEFT HALF BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_271)
{
    uint32_t const cps[2] = { 0xFE2C, 0x0061 };

    // FE2C 0061;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2C 0061;	
    // (︬) COMBINING MACRON RIGHT HALF BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_272)
{
    uint32_t const cps[2] = { 0xFE2D, 0x0061 };

    // FE2D 0061;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2D 0061;	
    // (︭) COMBINING CONJOINING MACRON BELOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_273)
{
    uint32_t const cps[2] = { 0xFE2F, 0x0061 };

    // FE2F 0061;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE2F 0061;	
    // (︯) COMBINING CYRILLIC TITLO RIGHT HALF	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_274)
{
    uint32_t const cps[2] = { 0xFE73, 0x0061 };

    // FE73 0061;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FE73 0061;	
    // (‎‎ﹳ‎‎) ARABIC TAIL FRAGMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_275)
{
    uint32_t const cps[2] = { 0xFEFF, 0x0061 };

    // FEFF 0061;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FEFF 0061;	
    // ('\uFEFF') ZERO WIDTH NO-BREAK SPACE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_276)
{
    uint32_t const cps[2] = { 0xFFF9, 0x0061 };

    // FFF9 0061;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFF9 0061;	
    // ('\uFFF9') INTERLINEAR ANNOTATION ANCHOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_277)
{
    uint32_t const cps[2] = { 0xFFFA, 0x0061 };

    // FFFA 0061;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFA 0061;	
    // ('\uFFFA') INTERLINEAR ANNOTATION SEPARATOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_278)
{
    uint32_t const cps[2] = { 0xFFFB, 0x0061 };

    // FFFB 0061;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FFFB 0061;	
    // ('\uFFFB') INTERLINEAR ANNOTATION TERMINATOR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_279)
{
    uint32_t const cps[2] = { 0x102E0, 0x0061 };

    // 102E0 0061;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 102E0 0061;	
    // (𐋠) COPTIC EPACT THOUSANDS MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_280)
{
    uint32_t const cps[2] = { 0x110BD, 0x0061 };

    // 110BD 0061;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 110BD 0061;	
    // ('\U000110BD') KAITHI NUMBER SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_281)
{
    uint32_t const cps[2] = { 0x11366, 0x0061 };

    // 11366 0061;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11366 0061;	
    // (𑍦) COMBINING GRANTHA DIGIT ZERO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_282)
{
    uint32_t const cps[2] = { 0x11367, 0x0061 };

    // 11367 0061;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11367 0061;	
    // (𑍧) COMBINING GRANTHA DIGIT ONE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_283)
{
    uint32_t const cps[2] = { 0x11368, 0x0061 };

    // 11368 0061;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11368 0061;	
    // (𑍨) COMBINING GRANTHA DIGIT TWO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_284)
{
    uint32_t const cps[2] = { 0x11369, 0x0061 };

    // 11369 0061;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11369 0061;	
    // (𑍩) COMBINING GRANTHA DIGIT THREE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_285)
{
    uint32_t const cps[2] = { 0x1136A, 0x0061 };

    // 1136A 0061;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136A 0061;	
    // (𑍪) COMBINING GRANTHA DIGIT FOUR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_286)
{
    uint32_t const cps[2] = { 0x1136B, 0x0061 };

    // 1136B 0061;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136B 0061;	
    // (𑍫) COMBINING GRANTHA DIGIT FIVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_287)
{
    uint32_t const cps[2] = { 0x1136C, 0x0061 };

    // 1136C 0061;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1136C 0061;	
    // (𑍬) COMBINING GRANTHA DIGIT SIX	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_288)
{
    uint32_t const cps[2] = { 0x11370, 0x0061 };

    // 11370 0061;	
    // (𑍰) COMBINING GRANTHA LETTER A	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11370 0061;	
    // (𑍰) COMBINING GRANTHA LETTER A	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_289)
{
    uint32_t const cps[2] = { 0x11371, 0x0061 };

    // 11371 0061;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11371 0061;	
    // (𑍱) COMBINING GRANTHA LETTER KA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_290)
{
    uint32_t const cps[2] = { 0x11372, 0x0061 };

    // 11372 0061;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11372 0061;	
    // (𑍲) COMBINING GRANTHA LETTER NA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_291)
{
    uint32_t const cps[2] = { 0x11373, 0x0061 };

    // 11373 0061;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11373 0061;	
    // (𑍳) COMBINING GRANTHA LETTER VI	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_292)
{
    uint32_t const cps[2] = { 0x11374, 0x0061 };

    // 11374 0061;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 11374 0061;	
    // (𑍴) COMBINING GRANTHA LETTER PA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_293)
{
    uint32_t const cps[2] = { 0x1BCA0, 0x0061 };

    // 1BCA0 0061;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA0 0061;	
    // ('\U0001BCA0') SHORTHAND FORMAT LETTER OVERLAP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_294)
{
    uint32_t const cps[2] = { 0x1BCA1, 0x0061 };

    // 1BCA1 0061;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA1 0061;	
    // ('\U0001BCA1') SHORTHAND FORMAT CONTINUING OVERLAP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_295)
{
    uint32_t const cps[2] = { 0x1BCA2, 0x0061 };

    // 1BCA2 0061;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA2 0061;	
    // ('\U0001BCA2') SHORTHAND FORMAT DOWN STEP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_296)
{
    uint32_t const cps[2] = { 0x1BCA3, 0x0061 };

    // 1BCA3 0061;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1BCA3 0061;	
    // ('\U0001BCA3') SHORTHAND FORMAT UP STEP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_297)
{
    uint32_t const cps[2] = { 0x1D165, 0x0061 };

    // 1D165 0061;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D165 0061;	
    // (𝅥) MUSICAL SYMBOL COMBINING STEM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_298)
{
    uint32_t const cps[2] = { 0x1D166, 0x0061 };

    // 1D166 0061;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D166 0061;	
    // (𝅦) MUSICAL SYMBOL COMBINING SPRECHGESANG STEM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_299)
{
    uint32_t const cps[2] = { 0x1D167, 0x0061 };

    // 1D167 0061;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D167 0061;	
    // (𝅧) MUSICAL SYMBOL COMBINING TREMOLO-1	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_300)
{
    uint32_t const cps[2] = { 0x1D168, 0x0061 };

    // 1D168 0061;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D168 0061;	
    // (𝅨) MUSICAL SYMBOL COMBINING TREMOLO-2	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_301)
{
    uint32_t const cps[2] = { 0x1D169, 0x0061 };

    // 1D169 0061;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D169 0061;	
    // (𝅩) MUSICAL SYMBOL COMBINING TREMOLO-3	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_302)
{
    uint32_t const cps[2] = { 0x1D16D, 0x0061 };

    // 1D16D 0061;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16D 0061;	
    // (𝅭) MUSICAL SYMBOL COMBINING AUGMENTATION DOT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_303)
{
    uint32_t const cps[2] = { 0x1D16E, 0x0061 };

    // 1D16E 0061;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16E 0061;	
    // (𝅮) MUSICAL SYMBOL COMBINING FLAG-1	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_304)
{
    uint32_t const cps[2] = { 0x1D16F, 0x0061 };

    // 1D16F 0061;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D16F 0061;	
    // (𝅯) MUSICAL SYMBOL COMBINING FLAG-2	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_305)
{
    uint32_t const cps[2] = { 0x1D170, 0x0061 };

    // 1D170 0061;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D170 0061;	
    // (𝅰) MUSICAL SYMBOL COMBINING FLAG-3	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_306)
{
    uint32_t const cps[2] = { 0x1D171, 0x0061 };

    // 1D171 0061;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D171 0061;	
    // (𝅱) MUSICAL SYMBOL COMBINING FLAG-4	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_307)
{
    uint32_t const cps[2] = { 0x1D172, 0x0061 };

    // 1D172 0061;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D172 0061;	
    // (𝅲) MUSICAL SYMBOL COMBINING FLAG-5	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_308)
{
    uint32_t const cps[2] = { 0x1D173, 0x0061 };

    // 1D173 0061;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D173 0061;	
    // ('\U0001D173') MUSICAL SYMBOL BEGIN BEAM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_309)
{
    uint32_t const cps[2] = { 0x1D174, 0x0061 };

    // 1D174 0061;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D174 0061;	
    // ('\U0001D174') MUSICAL SYMBOL END BEAM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_310)
{
    uint32_t const cps[2] = { 0x1D175, 0x0061 };

    // 1D175 0061;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D175 0061;	
    // ('\U0001D175') MUSICAL SYMBOL BEGIN TIE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_311)
{
    uint32_t const cps[2] = { 0x1D176, 0x0061 };

    // 1D176 0061;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D176 0061;	
    // ('\U0001D176') MUSICAL SYMBOL END TIE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_312)
{
    uint32_t const cps[2] = { 0x1D177, 0x0061 };

    // 1D177 0061;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D177 0061;	
    // ('\U0001D177') MUSICAL SYMBOL BEGIN SLUR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_313)
{
    uint32_t const cps[2] = { 0x1D178, 0x0061 };

    // 1D178 0061;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D178 0061;	
    // ('\U0001D178') MUSICAL SYMBOL END SLUR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_314)
{
    uint32_t const cps[2] = { 0x1D179, 0x0061 };

    // 1D179 0061;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D179 0061;	
    // ('\U0001D179') MUSICAL SYMBOL BEGIN PHRASE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_315)
{
    uint32_t const cps[2] = { 0x1D17A, 0x0061 };

    // 1D17A 0061;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17A 0061;	
    // ('\U0001D17A') MUSICAL SYMBOL END PHRASE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_316)
{
    uint32_t const cps[2] = { 0x1D17B, 0x0061 };

    // 1D17B 0061;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17B 0061;	
    // (𝅻) MUSICAL SYMBOL COMBINING ACCENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_317)
{
    uint32_t const cps[2] = { 0x1D17C, 0x0061 };

    // 1D17C 0061;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17C 0061;	
    // (𝅼) MUSICAL SYMBOL COMBINING STACCATO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_318)
{
    uint32_t const cps[2] = { 0x1D17D, 0x0061 };

    // 1D17D 0061;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17D 0061;	
    // (𝅽) MUSICAL SYMBOL COMBINING TENUTO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_319)
{
    uint32_t const cps[2] = { 0x1D17E, 0x0061 };

    // 1D17E 0061;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17E 0061;	
    // (𝅾) MUSICAL SYMBOL COMBINING STACCATISSIMO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_320)
{
    uint32_t const cps[2] = { 0x1D17F, 0x0061 };

    // 1D17F 0061;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D17F 0061;	
    // (𝅿) MUSICAL SYMBOL COMBINING MARCATO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_321)
{
    uint32_t const cps[2] = { 0x1D180, 0x0061 };

    // 1D180 0061;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D180 0061;	
    // (𝆀) MUSICAL SYMBOL COMBINING MARCATO-STACCATO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_322)
{
    uint32_t const cps[2] = { 0x1D181, 0x0061 };

    // 1D181 0061;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D181 0061;	
    // (𝆁) MUSICAL SYMBOL COMBINING ACCENT-STACCATO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_323)
{
    uint32_t const cps[2] = { 0x1D182, 0x0061 };

    // 1D182 0061;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D182 0061;	
    // (𝆂) MUSICAL SYMBOL COMBINING LOURE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_324)
{
    uint32_t const cps[2] = { 0x1D185, 0x0061 };

    // 1D185 0061;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D185 0061;	
    // (𝆅) MUSICAL SYMBOL COMBINING DOIT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_325)
{
    uint32_t const cps[2] = { 0x1D186, 0x0061 };

    // 1D186 0061;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D186 0061;	
    // (𝆆) MUSICAL SYMBOL COMBINING RIP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_326)
{
    uint32_t const cps[2] = { 0x1D187, 0x0061 };

    // 1D187 0061;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D187 0061;	
    // (𝆇) MUSICAL SYMBOL COMBINING FLIP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_327)
{
    uint32_t const cps[2] = { 0x1D188, 0x0061 };

    // 1D188 0061;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D188 0061;	
    // (𝆈) MUSICAL SYMBOL COMBINING SMEAR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_328)
{
    uint32_t const cps[2] = { 0x1D189, 0x0061 };

    // 1D189 0061;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D189 0061;	
    // (𝆉) MUSICAL SYMBOL COMBINING BEND	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_329)
{
    uint32_t const cps[2] = { 0x1D18A, 0x0061 };

    // 1D18A 0061;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18A 0061;	
    // (𝆊) MUSICAL SYMBOL COMBINING DOUBLE TONGUE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_330)
{
    uint32_t const cps[2] = { 0x1D18B, 0x0061 };

    // 1D18B 0061;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D18B 0061;	
    // (𝆋) MUSICAL SYMBOL COMBINING TRIPLE TONGUE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_331)
{
    uint32_t const cps[2] = { 0x1D1AA, 0x0061 };

    // 1D1AA 0061;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AA 0061;	
    // (𝆪) MUSICAL SYMBOL COMBINING DOWN BOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_332)
{
    uint32_t const cps[2] = { 0x1D1AB, 0x0061 };

    // 1D1AB 0061;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AB 0061;	
    // (𝆫) MUSICAL SYMBOL COMBINING UP BOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_333)
{
    uint32_t const cps[2] = { 0x1D1AC, 0x0061 };

    // 1D1AC 0061;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AC 0061;	
    // (𝆬) MUSICAL SYMBOL COMBINING HARMONIC	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_334)
{
    uint32_t const cps[2] = { 0x1D1AD, 0x0061 };

    // 1D1AD 0061;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D1AD 0061;	
    // (𝆭) MUSICAL SYMBOL COMBINING SNAP PIZZICATO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_335)
{
    uint32_t const cps[2] = { 0x1D242, 0x0061 };

    // 1D242 0061;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D242 0061;	
    // (𝉂) COMBINING GREEK MUSICAL TRISEME	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_336)
{
    uint32_t const cps[2] = { 0x1D243, 0x0061 };

    // 1D243 0061;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D243 0061;	
    // (𝉃) COMBINING GREEK MUSICAL TETRASEME	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_337)
{
    uint32_t const cps[2] = { 0x1D244, 0x0061 };

    // 1D244 0061;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D244 0061;	
    // (𝉄) COMBINING GREEK MUSICAL PENTASEME	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_338)
{
    uint32_t const cps[2] = { 0x1DA00, 0x0061 };

    // 1DA00 0061;	
    // (𝨀) SIGNWRITING HEAD RIM	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA00 0061;	
    // (𝨀) SIGNWRITING HEAD RIM	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_339)
{
    uint32_t const cps[2] = { 0x1DA01, 0x0061 };

    // 1DA01 0061;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA01 0061;	
    // (𝨁) SIGNWRITING HEAD MOVEMENT-WALLPLANE STRAIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_340)
{
    uint32_t const cps[2] = { 0x1DA02, 0x0061 };

    // 1DA02 0061;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA02 0061;	
    // (𝨂) SIGNWRITING HEAD MOVEMENT-WALLPLANE TILT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_341)
{
    uint32_t const cps[2] = { 0x1DA03, 0x0061 };

    // 1DA03 0061;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA03 0061;	
    // (𝨃) SIGNWRITING HEAD MOVEMENT-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_342)
{
    uint32_t const cps[2] = { 0x1DA04, 0x0061 };

    // 1DA04 0061;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA04 0061;	
    // (𝨄) SIGNWRITING HEAD MOVEMENT-WALLPLANE CURVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_343)
{
    uint32_t const cps[2] = { 0x1DA05, 0x0061 };

    // 1DA05 0061;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA05 0061;	
    // (𝨅) SIGNWRITING HEAD MOVEMENT-FLOORPLANE CURVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_344)
{
    uint32_t const cps[2] = { 0x1DA06, 0x0061 };

    // 1DA06 0061;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA06 0061;	
    // (𝨆) SIGNWRITING HEAD MOVEMENT CIRCLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_345)
{
    uint32_t const cps[2] = { 0x1DA07, 0x0061 };

    // 1DA07 0061;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA07 0061;	
    // (𝨇) SIGNWRITING FACE DIRECTION POSITION NOSE FORWARD TILTING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_346)
{
    uint32_t const cps[2] = { 0x1DA08, 0x0061 };

    // 1DA08 0061;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA08 0061;	
    // (𝨈) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_347)
{
    uint32_t const cps[2] = { 0x1DA09, 0x0061 };

    // 1DA09 0061;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA09 0061;	
    // (𝨉) SIGNWRITING FACE DIRECTION POSITION NOSE UP OR DOWN TILTING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_348)
{
    uint32_t const cps[2] = { 0x1DA0A, 0x0061 };

    // 1DA0A 0061;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0A 0061;	
    // (𝨊) SIGNWRITING EYEBROWS STRAIGHT UP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_349)
{
    uint32_t const cps[2] = { 0x1DA0B, 0x0061 };

    // 1DA0B 0061;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0B 0061;	
    // (𝨋) SIGNWRITING EYEBROWS STRAIGHT NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_350)
{
    uint32_t const cps[2] = { 0x1DA0C, 0x0061 };

    // 1DA0C 0061;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0C 0061;	
    // (𝨌) SIGNWRITING EYEBROWS STRAIGHT DOWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_351)
{
    uint32_t const cps[2] = { 0x1DA0D, 0x0061 };

    // 1DA0D 0061;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0D 0061;	
    // (𝨍) SIGNWRITING DREAMY EYEBROWS NEUTRAL DOWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_352)
{
    uint32_t const cps[2] = { 0x1DA0E, 0x0061 };

    // 1DA0E 0061;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0E 0061;	
    // (𝨎) SIGNWRITING DREAMY EYEBROWS DOWN NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_353)
{
    uint32_t const cps[2] = { 0x1DA0F, 0x0061 };

    // 1DA0F 0061;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA0F 0061;	
    // (𝨏) SIGNWRITING DREAMY EYEBROWS UP NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_354)
{
    uint32_t const cps[2] = { 0x1DA10, 0x0061 };

    // 1DA10 0061;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA10 0061;	
    // (𝨐) SIGNWRITING DREAMY EYEBROWS NEUTRAL UP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_355)
{
    uint32_t const cps[2] = { 0x1DA11, 0x0061 };

    // 1DA11 0061;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA11 0061;	
    // (𝨑) SIGNWRITING FOREHEAD NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_356)
{
    uint32_t const cps[2] = { 0x1DA12, 0x0061 };

    // 1DA12 0061;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA12 0061;	
    // (𝨒) SIGNWRITING FOREHEAD CONTACT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_357)
{
    uint32_t const cps[2] = { 0x1DA13, 0x0061 };

    // 1DA13 0061;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA13 0061;	
    // (𝨓) SIGNWRITING FOREHEAD WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_358)
{
    uint32_t const cps[2] = { 0x1DA14, 0x0061 };

    // 1DA14 0061;	
    // (𝨔) SIGNWRITING EYES OPEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA14 0061;	
    // (𝨔) SIGNWRITING EYES OPEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_359)
{
    uint32_t const cps[2] = { 0x1DA15, 0x0061 };

    // 1DA15 0061;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA15 0061;	
    // (𝨕) SIGNWRITING EYES SQUEEZED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_360)
{
    uint32_t const cps[2] = { 0x1DA16, 0x0061 };

    // 1DA16 0061;	
    // (𝨖) SIGNWRITING EYES CLOSED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA16 0061;	
    // (𝨖) SIGNWRITING EYES CLOSED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_361)
{
    uint32_t const cps[2] = { 0x1DA17, 0x0061 };

    // 1DA17 0061;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA17 0061;	
    // (𝨗) SIGNWRITING EYE BLINK SINGLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_362)
{
    uint32_t const cps[2] = { 0x1DA18, 0x0061 };

    // 1DA18 0061;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA18 0061;	
    // (𝨘) SIGNWRITING EYE BLINK MULTIPLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_363)
{
    uint32_t const cps[2] = { 0x1DA19, 0x0061 };

    // 1DA19 0061;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA19 0061;	
    // (𝨙) SIGNWRITING EYES HALF OPEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_364)
{
    uint32_t const cps[2] = { 0x1DA1A, 0x0061 };

    // 1DA1A 0061;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1A 0061;	
    // (𝨚) SIGNWRITING EYES WIDE OPEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_365)
{
    uint32_t const cps[2] = { 0x1DA1B, 0x0061 };

    // 1DA1B 0061;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1B 0061;	
    // (𝨛) SIGNWRITING EYES HALF CLOSED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_366)
{
    uint32_t const cps[2] = { 0x1DA1C, 0x0061 };

    // 1DA1C 0061;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1C 0061;	
    // (𝨜) SIGNWRITING EYES WIDENING MOVEMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_367)
{
    uint32_t const cps[2] = { 0x1DA1D, 0x0061 };

    // 1DA1D 0061;	
    // (𝨝) SIGNWRITING EYE WINK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1D 0061;	
    // (𝨝) SIGNWRITING EYE WINK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_368)
{
    uint32_t const cps[2] = { 0x1DA1E, 0x0061 };

    // 1DA1E 0061;	
    // (𝨞) SIGNWRITING EYELASHES UP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1E 0061;	
    // (𝨞) SIGNWRITING EYELASHES UP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_369)
{
    uint32_t const cps[2] = { 0x1DA1F, 0x0061 };

    // 1DA1F 0061;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA1F 0061;	
    // (𝨟) SIGNWRITING EYELASHES DOWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_370)
{
    uint32_t const cps[2] = { 0x1DA20, 0x0061 };

    // 1DA20 0061;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA20 0061;	
    // (𝨠) SIGNWRITING EYELASHES FLUTTERING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_371)
{
    uint32_t const cps[2] = { 0x1DA21, 0x0061 };

    // 1DA21 0061;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA21 0061;	
    // (𝨡) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_372)
{
    uint32_t const cps[2] = { 0x1DA22, 0x0061 };

    // 1DA22 0061;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA22 0061;	
    // (𝨢) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_373)
{
    uint32_t const cps[2] = { 0x1DA23, 0x0061 };

    // 1DA23 0061;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA23 0061;	
    // (𝨣) SIGNWRITING EYEGAZE-WALLPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_374)
{
    uint32_t const cps[2] = { 0x1DA24, 0x0061 };

    // 1DA24 0061;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA24 0061;	
    // (𝨤) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_375)
{
    uint32_t const cps[2] = { 0x1DA25, 0x0061 };

    // 1DA25 0061;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA25 0061;	
    // (𝨥) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT DOUBLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_376)
{
    uint32_t const cps[2] = { 0x1DA26, 0x0061 };

    // 1DA26 0061;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA26 0061;	
    // (𝨦) SIGNWRITING EYEGAZE-FLOORPLANE STRAIGHT ALTERNATING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_377)
{
    uint32_t const cps[2] = { 0x1DA27, 0x0061 };

    // 1DA27 0061;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA27 0061;	
    // (𝨧) SIGNWRITING EYEGAZE-WALLPLANE CURVED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_378)
{
    uint32_t const cps[2] = { 0x1DA28, 0x0061 };

    // 1DA28 0061;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA28 0061;	
    // (𝨨) SIGNWRITING EYEGAZE-FLOORPLANE CURVED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_379)
{
    uint32_t const cps[2] = { 0x1DA29, 0x0061 };

    // 1DA29 0061;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA29 0061;	
    // (𝨩) SIGNWRITING EYEGAZE-WALLPLANE CIRCLING	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_380)
{
    uint32_t const cps[2] = { 0x1DA2A, 0x0061 };

    // 1DA2A 0061;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2A 0061;	
    // (𝨪) SIGNWRITING CHEEKS PUFFED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_381)
{
    uint32_t const cps[2] = { 0x1DA2B, 0x0061 };

    // 1DA2B 0061;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2B 0061;	
    // (𝨫) SIGNWRITING CHEEKS NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_382)
{
    uint32_t const cps[2] = { 0x1DA2C, 0x0061 };

    // 1DA2C 0061;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2C 0061;	
    // (𝨬) SIGNWRITING CHEEKS SUCKED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_383)
{
    uint32_t const cps[2] = { 0x1DA2D, 0x0061 };

    // 1DA2D 0061;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2D 0061;	
    // (𝨭) SIGNWRITING TENSE CHEEKS HIGH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_384)
{
    uint32_t const cps[2] = { 0x1DA2E, 0x0061 };

    // 1DA2E 0061;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2E 0061;	
    // (𝨮) SIGNWRITING TENSE CHEEKS MIDDLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_385)
{
    uint32_t const cps[2] = { 0x1DA2F, 0x0061 };

    // 1DA2F 0061;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA2F 0061;	
    // (𝨯) SIGNWRITING TENSE CHEEKS LOW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_386)
{
    uint32_t const cps[2] = { 0x1DA30, 0x0061 };

    // 1DA30 0061;	
    // (𝨰) SIGNWRITING EARS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA30 0061;	
    // (𝨰) SIGNWRITING EARS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_387)
{
    uint32_t const cps[2] = { 0x1DA31, 0x0061 };

    // 1DA31 0061;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA31 0061;	
    // (𝨱) SIGNWRITING NOSE NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_388)
{
    uint32_t const cps[2] = { 0x1DA32, 0x0061 };

    // 1DA32 0061;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA32 0061;	
    // (𝨲) SIGNWRITING NOSE CONTACT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_389)
{
    uint32_t const cps[2] = { 0x1DA33, 0x0061 };

    // 1DA33 0061;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA33 0061;	
    // (𝨳) SIGNWRITING NOSE WRINKLES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_390)
{
    uint32_t const cps[2] = { 0x1DA34, 0x0061 };

    // 1DA34 0061;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA34 0061;	
    // (𝨴) SIGNWRITING NOSE WIGGLES	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_391)
{
    uint32_t const cps[2] = { 0x1DA35, 0x0061 };

    // 1DA35 0061;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA35 0061;	
    // (𝨵) SIGNWRITING AIR BLOWING OUT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_392)
{
    uint32_t const cps[2] = { 0x1DA36, 0x0061 };

    // 1DA36 0061;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA36 0061;	
    // (𝨶) SIGNWRITING AIR SUCKING IN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_393)
{
    uint32_t const cps[2] = { 0x1DA3B, 0x0061 };

    // 1DA3B 0061;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3B 0061;	
    // (𝨻) SIGNWRITING MOUTH CLOSED NEUTRAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_394)
{
    uint32_t const cps[2] = { 0x1DA3C, 0x0061 };

    // 1DA3C 0061;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3C 0061;	
    // (𝨼) SIGNWRITING MOUTH CLOSED FORWARD	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_395)
{
    uint32_t const cps[2] = { 0x1DA3D, 0x0061 };

    // 1DA3D 0061;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3D 0061;	
    // (𝨽) SIGNWRITING MOUTH CLOSED CONTACT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_396)
{
    uint32_t const cps[2] = { 0x1DA3E, 0x0061 };

    // 1DA3E 0061;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3E 0061;	
    // (𝨾) SIGNWRITING MOUTH SMILE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_397)
{
    uint32_t const cps[2] = { 0x1DA3F, 0x0061 };

    // 1DA3F 0061;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA3F 0061;	
    // (𝨿) SIGNWRITING MOUTH SMILE WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_398)
{
    uint32_t const cps[2] = { 0x1DA40, 0x0061 };

    // 1DA40 0061;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA40 0061;	
    // (𝩀) SIGNWRITING MOUTH SMILE OPEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_399)
{
    uint32_t const cps[2] = { 0x1DA41, 0x0061 };

    // 1DA41 0061;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA41 0061;	
    // (𝩁) SIGNWRITING MOUTH FROWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_400)
{
    uint32_t const cps[2] = { 0x1DA42, 0x0061 };

    // 1DA42 0061;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA42 0061;	
    // (𝩂) SIGNWRITING MOUTH FROWN WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_401)
{
    uint32_t const cps[2] = { 0x1DA43, 0x0061 };

    // 1DA43 0061;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA43 0061;	
    // (𝩃) SIGNWRITING MOUTH FROWN OPEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_402)
{
    uint32_t const cps[2] = { 0x1DA44, 0x0061 };

    // 1DA44 0061;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA44 0061;	
    // (𝩄) SIGNWRITING MOUTH OPEN CIRCLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_403)
{
    uint32_t const cps[2] = { 0x1DA45, 0x0061 };

    // 1DA45 0061;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA45 0061;	
    // (𝩅) SIGNWRITING MOUTH OPEN FORWARD	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_404)
{
    uint32_t const cps[2] = { 0x1DA46, 0x0061 };

    // 1DA46 0061;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA46 0061;	
    // (𝩆) SIGNWRITING MOUTH OPEN WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_405)
{
    uint32_t const cps[2] = { 0x1DA47, 0x0061 };

    // 1DA47 0061;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA47 0061;	
    // (𝩇) SIGNWRITING MOUTH OPEN OVAL	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_406)
{
    uint32_t const cps[2] = { 0x1DA48, 0x0061 };

    // 1DA48 0061;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA48 0061;	
    // (𝩈) SIGNWRITING MOUTH OPEN OVAL WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_407)
{
    uint32_t const cps[2] = { 0x1DA49, 0x0061 };

    // 1DA49 0061;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA49 0061;	
    // (𝩉) SIGNWRITING MOUTH OPEN OVAL YAWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_408)
{
    uint32_t const cps[2] = { 0x1DA4A, 0x0061 };

    // 1DA4A 0061;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4A 0061;	
    // (𝩊) SIGNWRITING MOUTH OPEN RECTANGLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_409)
{
    uint32_t const cps[2] = { 0x1DA4B, 0x0061 };

    // 1DA4B 0061;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4B 0061;	
    // (𝩋) SIGNWRITING MOUTH OPEN RECTANGLE WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_410)
{
    uint32_t const cps[2] = { 0x1DA4C, 0x0061 };

    // 1DA4C 0061;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4C 0061;	
    // (𝩌) SIGNWRITING MOUTH OPEN RECTANGLE YAWN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_411)
{
    uint32_t const cps[2] = { 0x1DA4D, 0x0061 };

    // 1DA4D 0061;	
    // (𝩍) SIGNWRITING MOUTH KISS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4D 0061;	
    // (𝩍) SIGNWRITING MOUTH KISS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_412)
{
    uint32_t const cps[2] = { 0x1DA4E, 0x0061 };

    // 1DA4E 0061;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4E 0061;	
    // (𝩎) SIGNWRITING MOUTH KISS FORWARD	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_413)
{
    uint32_t const cps[2] = { 0x1DA4F, 0x0061 };

    // 1DA4F 0061;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA4F 0061;	
    // (𝩏) SIGNWRITING MOUTH KISS WRINKLED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_414)
{
    uint32_t const cps[2] = { 0x1DA50, 0x0061 };

    // 1DA50 0061;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA50 0061;	
    // (𝩐) SIGNWRITING MOUTH TENSE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_415)
{
    uint32_t const cps[2] = { 0x1DA51, 0x0061 };

    // 1DA51 0061;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA51 0061;	
    // (𝩑) SIGNWRITING MOUTH TENSE FORWARD	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_416)
{
    uint32_t const cps[2] = { 0x1DA52, 0x0061 };

    // 1DA52 0061;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA52 0061;	
    // (𝩒) SIGNWRITING MOUTH TENSE SUCKED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_417)
{
    uint32_t const cps[2] = { 0x1DA53, 0x0061 };

    // 1DA53 0061;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA53 0061;	
    // (𝩓) SIGNWRITING LIPS PRESSED TOGETHER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_418)
{
    uint32_t const cps[2] = { 0x1DA54, 0x0061 };

    // 1DA54 0061;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA54 0061;	
    // (𝩔) SIGNWRITING LIP LOWER OVER UPPER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_419)
{
    uint32_t const cps[2] = { 0x1DA55, 0x0061 };

    // 1DA55 0061;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA55 0061;	
    // (𝩕) SIGNWRITING LIP UPPER OVER LOWER	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_420)
{
    uint32_t const cps[2] = { 0x1DA56, 0x0061 };

    // 1DA56 0061;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA56 0061;	
    // (𝩖) SIGNWRITING MOUTH CORNERS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_421)
{
    uint32_t const cps[2] = { 0x1DA57, 0x0061 };

    // 1DA57 0061;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA57 0061;	
    // (𝩗) SIGNWRITING MOUTH WRINKLES SINGLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_422)
{
    uint32_t const cps[2] = { 0x1DA58, 0x0061 };

    // 1DA58 0061;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA58 0061;	
    // (𝩘) SIGNWRITING MOUTH WRINKLES DOUBLE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_423)
{
    uint32_t const cps[2] = { 0x1DA59, 0x0061 };

    // 1DA59 0061;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA59 0061;	
    // (𝩙) SIGNWRITING TONGUE STICKING OUT FAR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_424)
{
    uint32_t const cps[2] = { 0x1DA5A, 0x0061 };

    // 1DA5A 0061;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5A 0061;	
    // (𝩚) SIGNWRITING TONGUE LICKING LIPS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_425)
{
    uint32_t const cps[2] = { 0x1DA5B, 0x0061 };

    // 1DA5B 0061;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5B 0061;	
    // (𝩛) SIGNWRITING TONGUE TIP BETWEEN LIPS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_426)
{
    uint32_t const cps[2] = { 0x1DA5C, 0x0061 };

    // 1DA5C 0061;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5C 0061;	
    // (𝩜) SIGNWRITING TONGUE TIP TOUCHING INSIDE MOUTH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_427)
{
    uint32_t const cps[2] = { 0x1DA5D, 0x0061 };

    // 1DA5D 0061;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5D 0061;	
    // (𝩝) SIGNWRITING TONGUE INSIDE MOUTH RELAXED	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_428)
{
    uint32_t const cps[2] = { 0x1DA5E, 0x0061 };

    // 1DA5E 0061;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5E 0061;	
    // (𝩞) SIGNWRITING TONGUE MOVES AGAINST CHEEK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_429)
{
    uint32_t const cps[2] = { 0x1DA5F, 0x0061 };

    // 1DA5F 0061;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA5F 0061;	
    // (𝩟) SIGNWRITING TONGUE CENTRE STICKING OUT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_430)
{
    uint32_t const cps[2] = { 0x1DA60, 0x0061 };

    // 1DA60 0061;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA60 0061;	
    // (𝩠) SIGNWRITING TONGUE CENTRE INSIDE MOUTH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_431)
{
    uint32_t const cps[2] = { 0x1DA61, 0x0061 };

    // 1DA61 0061;	
    // (𝩡) SIGNWRITING TEETH	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA61 0061;	
    // (𝩡) SIGNWRITING TEETH	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_432)
{
    uint32_t const cps[2] = { 0x1DA62, 0x0061 };

    // 1DA62 0061;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA62 0061;	
    // (𝩢) SIGNWRITING TEETH MOVEMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_433)
{
    uint32_t const cps[2] = { 0x1DA63, 0x0061 };

    // 1DA63 0061;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA63 0061;	
    // (𝩣) SIGNWRITING TEETH ON TONGUE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_434)
{
    uint32_t const cps[2] = { 0x1DA64, 0x0061 };

    // 1DA64 0061;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA64 0061;	
    // (𝩤) SIGNWRITING TEETH ON TONGUE MOVEMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_435)
{
    uint32_t const cps[2] = { 0x1DA65, 0x0061 };

    // 1DA65 0061;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA65 0061;	
    // (𝩥) SIGNWRITING TEETH ON LIPS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_436)
{
    uint32_t const cps[2] = { 0x1DA66, 0x0061 };

    // 1DA66 0061;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA66 0061;	
    // (𝩦) SIGNWRITING TEETH ON LIPS MOVEMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_437)
{
    uint32_t const cps[2] = { 0x1DA67, 0x0061 };

    // 1DA67 0061;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA67 0061;	
    // (𝩧) SIGNWRITING TEETH BITE LIPS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_438)
{
    uint32_t const cps[2] = { 0x1DA68, 0x0061 };

    // 1DA68 0061;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA68 0061;	
    // (𝩨) SIGNWRITING MOVEMENT-WALLPLANE JAW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_439)
{
    uint32_t const cps[2] = { 0x1DA69, 0x0061 };

    // 1DA69 0061;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA69 0061;	
    // (𝩩) SIGNWRITING MOVEMENT-FLOORPLANE JAW	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_440)
{
    uint32_t const cps[2] = { 0x1DA6A, 0x0061 };

    // 1DA6A 0061;	
    // (𝩪) SIGNWRITING NECK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6A 0061;	
    // (𝩪) SIGNWRITING NECK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_441)
{
    uint32_t const cps[2] = { 0x1DA6B, 0x0061 };

    // 1DA6B 0061;	
    // (𝩫) SIGNWRITING HAIR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6B 0061;	
    // (𝩫) SIGNWRITING HAIR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_442)
{
    uint32_t const cps[2] = { 0x1DA6C, 0x0061 };

    // 1DA6C 0061;	
    // (𝩬) SIGNWRITING EXCITEMENT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA6C 0061;	
    // (𝩬) SIGNWRITING EXCITEMENT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_443)
{
    uint32_t const cps[2] = { 0x1DA75, 0x0061 };

    // 1DA75 0061;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA75 0061;	
    // (𝩵) SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_444)
{
    uint32_t const cps[2] = { 0x1DA84, 0x0061 };

    // 1DA84 0061;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA84 0061;	
    // (𝪄) SIGNWRITING LOCATION HEAD NECK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_445)
{
    uint32_t const cps[2] = { 0x1DA9B, 0x0061 };

    // 1DA9B 0061;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9B 0061;	
    // (𝪛) SIGNWRITING FILL MODIFIER-2	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_446)
{
    uint32_t const cps[2] = { 0x1DA9C, 0x0061 };

    // 1DA9C 0061;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9C 0061;	
    // (𝪜) SIGNWRITING FILL MODIFIER-3	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_447)
{
    uint32_t const cps[2] = { 0x1DA9D, 0x0061 };

    // 1DA9D 0061;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9D 0061;	
    // (𝪝) SIGNWRITING FILL MODIFIER-4	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_448)
{
    uint32_t const cps[2] = { 0x1DA9E, 0x0061 };

    // 1DA9E 0061;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9E 0061;	
    // (𝪞) SIGNWRITING FILL MODIFIER-5	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_449)
{
    uint32_t const cps[2] = { 0x1DA9F, 0x0061 };

    // 1DA9F 0061;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DA9F 0061;	
    // (𝪟) SIGNWRITING FILL MODIFIER-6	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_450)
{
    uint32_t const cps[2] = { 0x1DAA1, 0x0061 };

    // 1DAA1 0061;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA1 0061;	
    // (𝪡) SIGNWRITING ROTATION MODIFIER-2	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_451)
{
    uint32_t const cps[2] = { 0x1DAA2, 0x0061 };

    // 1DAA2 0061;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA2 0061;	
    // (𝪢) SIGNWRITING ROTATION MODIFIER-3	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_452)
{
    uint32_t const cps[2] = { 0x1DAA3, 0x0061 };

    // 1DAA3 0061;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA3 0061;	
    // (𝪣) SIGNWRITING ROTATION MODIFIER-4	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_453)
{
    uint32_t const cps[2] = { 0x1DAA4, 0x0061 };

    // 1DAA4 0061;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA4 0061;	
    // (𝪤) SIGNWRITING ROTATION MODIFIER-5	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_454)
{
    uint32_t const cps[2] = { 0x1DAA5, 0x0061 };

    // 1DAA5 0061;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA5 0061;	
    // (𝪥) SIGNWRITING ROTATION MODIFIER-6	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_455)
{
    uint32_t const cps[2] = { 0x1DAA6, 0x0061 };

    // 1DAA6 0061;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA6 0061;	
    // (𝪦) SIGNWRITING ROTATION MODIFIER-7	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_456)
{
    uint32_t const cps[2] = { 0x1DAA7, 0x0061 };

    // 1DAA7 0061;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA7 0061;	
    // (𝪧) SIGNWRITING ROTATION MODIFIER-8	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_457)
{
    uint32_t const cps[2] = { 0x1DAA8, 0x0061 };

    // 1DAA8 0061;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA8 0061;	
    // (𝪨) SIGNWRITING ROTATION MODIFIER-9	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_458)
{
    uint32_t const cps[2] = { 0x1DAA9, 0x0061 };

    // 1DAA9 0061;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAA9 0061;	
    // (𝪩) SIGNWRITING ROTATION MODIFIER-10	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_459)
{
    uint32_t const cps[2] = { 0x1DAAA, 0x0061 };

    // 1DAAA 0061;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAA 0061;	
    // (𝪪) SIGNWRITING ROTATION MODIFIER-11	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_460)
{
    uint32_t const cps[2] = { 0x1DAAB, 0x0061 };

    // 1DAAB 0061;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAB 0061;	
    // (𝪫) SIGNWRITING ROTATION MODIFIER-12	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_461)
{
    uint32_t const cps[2] = { 0x1DAAC, 0x0061 };

    // 1DAAC 0061;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAC 0061;	
    // (𝪬) SIGNWRITING ROTATION MODIFIER-13	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_462)
{
    uint32_t const cps[2] = { 0x1DAAD, 0x0061 };

    // 1DAAD 0061;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAD 0061;	
    // (𝪭) SIGNWRITING ROTATION MODIFIER-14	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_463)
{
    uint32_t const cps[2] = { 0x1DAAE, 0x0061 };

    // 1DAAE 0061;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAE 0061;	
    // (𝪮) SIGNWRITING ROTATION MODIFIER-15	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_464)
{
    uint32_t const cps[2] = { 0x1DAAF, 0x0061 };

    // 1DAAF 0061;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DAAF 0061;	
    // (𝪯) SIGNWRITING ROTATION MODIFIER-16	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_465)
{
    uint32_t const cps[2] = { 0x1E8D0, 0x0061 };

    // 1E8D0 0061;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D0 0061;	
    // (𞣐) MENDE KIKAKUI COMBINING NUMBER TEENS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_466)
{
    uint32_t const cps[2] = { 0x1E8D1, 0x0061 };

    // 1E8D1 0061;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D1 0061;	
    // (𞣑) MENDE KIKAKUI COMBINING NUMBER TENS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_467)
{
    uint32_t const cps[2] = { 0x1E8D2, 0x0061 };

    // 1E8D2 0061;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D2 0061;	
    // (𞣒) MENDE KIKAKUI COMBINING NUMBER HUNDREDS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_468)
{
    uint32_t const cps[2] = { 0x1E8D3, 0x0061 };

    // 1E8D3 0061;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D3 0061;	
    // (𞣓) MENDE KIKAKUI COMBINING NUMBER THOUSANDS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_469)
{
    uint32_t const cps[2] = { 0x1E8D4, 0x0061 };

    // 1E8D4 0061;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D4 0061;	
    // (𞣔) MENDE KIKAKUI COMBINING NUMBER TEN THOUSANDS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_470)
{
    uint32_t const cps[2] = { 0x1E8D5, 0x0061 };

    // 1E8D5 0061;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D5 0061;	
    // (𞣕) MENDE KIKAKUI COMBINING NUMBER HUNDRED THOUSANDS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_471)
{
    uint32_t const cps[2] = { 0x1E8D6, 0x0061 };

    // 1E8D6 0061;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E8D6 0061;	
    // (𞣖) MENDE KIKAKUI COMBINING NUMBER MILLIONS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_472)
{
    uint32_t const cps[2] = { 0xE0001, 0x0061 };

    // E0001 0061;	
    // ('\U000E0001') LANGUAGE TAG	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0001 0061;	
    // ('\U000E0001') LANGUAGE TAG	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_473)
{
    uint32_t const cps[2] = { 0xE0020, 0x0061 };

    // E0020 0061;	
    // ('\U000E0020') TAG SPACE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0020 0061;	
    // ('\U000E0020') TAG SPACE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_474)
{
    uint32_t const cps[2] = { 0xE0021, 0x0061 };

    // E0021 0061;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0021 0061;	
    // ('\U000E0021') TAG EXCLAMATION MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_475)
{
    uint32_t const cps[2] = { 0xE0022, 0x0061 };

    // E0022 0061;	
    // ('\U000E0022') TAG QUOTATION MARK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0022 0061;	
    // ('\U000E0022') TAG QUOTATION MARK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_476)
{
    uint32_t const cps[2] = { 0xE0023, 0x0061 };

    // E0023 0061;	
    // ('\U000E0023') TAG NUMBER SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0023 0061;	
    // ('\U000E0023') TAG NUMBER SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_477)
{
    uint32_t const cps[2] = { 0xE0024, 0x0061 };

    // E0024 0061;	
    // ('\U000E0024') TAG DOLLAR SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0024 0061;	
    // ('\U000E0024') TAG DOLLAR SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_478)
{
    uint32_t const cps[2] = { 0xE0025, 0x0061 };

    // E0025 0061;	
    // ('\U000E0025') TAG PERCENT SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0025 0061;	
    // ('\U000E0025') TAG PERCENT SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_479)
{
    uint32_t const cps[2] = { 0xE0026, 0x0061 };

    // E0026 0061;	
    // ('\U000E0026') TAG AMPERSAND	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0026 0061;	
    // ('\U000E0026') TAG AMPERSAND	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_480)
{
    uint32_t const cps[2] = { 0xE0027, 0x0061 };

    // E0027 0061;	
    // ('\U000E0027') TAG APOSTROPHE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0027 0061;	
    // ('\U000E0027') TAG APOSTROPHE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_481)
{
    uint32_t const cps[2] = { 0xE0028, 0x0061 };

    // E0028 0061;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0028 0061;	
    // ('\U000E0028') TAG LEFT PARENTHESIS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_482)
{
    uint32_t const cps[2] = { 0xE0029, 0x0061 };

    // E0029 0061;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0029 0061;	
    // ('\U000E0029') TAG RIGHT PARENTHESIS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_483)
{
    uint32_t const cps[2] = { 0xE002A, 0x0061 };

    // E002A 0061;	
    // ('\U000E002A') TAG ASTERISK	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002A 0061;	
    // ('\U000E002A') TAG ASTERISK	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_484)
{
    uint32_t const cps[2] = { 0xE002B, 0x0061 };

    // E002B 0061;	
    // ('\U000E002B') TAG PLUS SIGN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002B 0061;	
    // ('\U000E002B') TAG PLUS SIGN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_485)
{
    uint32_t const cps[2] = { 0xE002C, 0x0061 };

    // E002C 0061;	
    // ('\U000E002C') TAG COMMA	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002C 0061;	
    // ('\U000E002C') TAG COMMA	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_486)
{
    uint32_t const cps[2] = { 0xE002D, 0x0061 };

    // E002D 0061;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002D 0061;	
    // ('\U000E002D') TAG HYPHEN-MINUS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_487)
{
    uint32_t const cps[2] = { 0xE002E, 0x0061 };

    // E002E 0061;	
    // ('\U000E002E') TAG FULL STOP	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002E 0061;	
    // ('\U000E002E') TAG FULL STOP	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_488)
{
    uint32_t const cps[2] = { 0xE002F, 0x0061 };

    // E002F 0061;	
    // ('\U000E002F') TAG SOLIDUS	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E002F 0061;	
    // ('\U000E002F') TAG SOLIDUS	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_489)
{
    uint32_t const cps[2] = { 0xE0030, 0x0061 };

    // E0030 0061;	
    // ('\U000E0030') TAG DIGIT ZERO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0030 0061;	
    // ('\U000E0030') TAG DIGIT ZERO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_490)
{
    uint32_t const cps[2] = { 0xE0031, 0x0061 };

    // E0031 0061;	
    // ('\U000E0031') TAG DIGIT ONE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0031 0061;	
    // ('\U000E0031') TAG DIGIT ONE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_491)
{
    uint32_t const cps[2] = { 0xE0032, 0x0061 };

    // E0032 0061;	
    // ('\U000E0032') TAG DIGIT TWO	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0032 0061;	
    // ('\U000E0032') TAG DIGIT TWO	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_492)
{
    uint32_t const cps[2] = { 0xE0033, 0x0061 };

    // E0033 0061;	
    // ('\U000E0033') TAG DIGIT THREE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0033 0061;	
    // ('\U000E0033') TAG DIGIT THREE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_493)
{
    uint32_t const cps[2] = { 0xE0034, 0x0061 };

    // E0034 0061;	
    // ('\U000E0034') TAG DIGIT FOUR	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0034 0061;	
    // ('\U000E0034') TAG DIGIT FOUR	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_494)
{
    uint32_t const cps[2] = { 0xE0035, 0x0061 };

    // E0035 0061;	
    // ('\U000E0035') TAG DIGIT FIVE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0035 0061;	
    // ('\U000E0035') TAG DIGIT FIVE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_495)
{
    uint32_t const cps[2] = { 0xE0036, 0x0061 };

    // E0036 0061;	
    // ('\U000E0036') TAG DIGIT SIX	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0036 0061;	
    // ('\U000E0036') TAG DIGIT SIX	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_496)
{
    uint32_t const cps[2] = { 0xE0037, 0x0061 };

    // E0037 0061;	
    // ('\U000E0037') TAG DIGIT SEVEN	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0037 0061;	
    // ('\U000E0037') TAG DIGIT SEVEN	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_497)
{
    uint32_t const cps[2] = { 0xE0038, 0x0061 };

    // E0038 0061;	
    // ('\U000E0038') TAG DIGIT EIGHT	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0038 0061;	
    // ('\U000E0038') TAG DIGIT EIGHT	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_498)
{
    uint32_t const cps[2] = { 0xE0039, 0x0061 };

    // E0039 0061;	
    // ('\U000E0039') TAG DIGIT NINE	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E0039 0061;	
    // ('\U000E0039') TAG DIGIT NINE	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_092_499)
{
    uint32_t const cps[2] = { 0xE003A, 0x0061 };

    // E003A 0061;	
    // ('\U000E003A') TAG COLON	[1CAD | 0020 | 0002 |]
    uint32_t const ces_non_ignorable[5] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 5);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 5))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // E003A 0061;	
    // ('\U000E003A') TAG COLON	[1CAD | 0020 | 0002 | FFFF |]
    uint32_t const ces_shifted[7] = { 0x1CAD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 7);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 7))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

