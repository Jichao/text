// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_082_000)
{
    // 32CD  ; [.1D10.0020.001C][.1E99.0020.001C][.1D5A.0020.001C] 
    // SQUARE ERG

    uint32_t const cps[1] = { 0x32cd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_001)
{
    // 32CE  ; [.1D10.0020.001C][.1F49.0020.001D] 
    // SQUARE EV

    uint32_t const cps[1] = { 0x32ce };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1f49), uint8_t(0x1), uint8_t(0x1d)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_002)
{
    // 32CF  ; [.1DDD.0020.001D][.1EFB.0020.001D][.1CF5.0020.001D] 
    // LIMITED LIABILITY SIGN

    uint32_t const cps[1] = { 0x32cf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ddd), uint8_t(0x1), uint8_t(0x1d)}, {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x1d)}, {uint16_t(0x1cf5), uint8_t(0x1), uint8_t(0x1d)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_003)
{
    // 32D0  ; [.3E71.0020.0013] 
    // CIRCLED KATAKANA A

    uint32_t const cps[1] = { 0x32d0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_004)
{
    // 32D1  ; [.3E72.0020.0013] 
    // CIRCLED KATAKANA I

    uint32_t const cps[1] = { 0x32d1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_005)
{
    // 32D2  ; [.3E73.0020.0013] 
    // CIRCLED KATAKANA U

    uint32_t const cps[1] = { 0x32d2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e73), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_006)
{
    // 32D3  ; [.3E75.0020.0013] 
    // CIRCLED KATAKANA E

    uint32_t const cps[1] = { 0x32d3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_007)
{
    // 32D4  ; [.3E76.0020.0013] 
    // CIRCLED KATAKANA O

    uint32_t const cps[1] = { 0x32d4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_008)
{
    // 32D5  ; [.3E77.0020.0013] 
    // CIRCLED KATAKANA KA

    uint32_t const cps[1] = { 0x32d5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_009)
{
    // 32D6  ; [.3E78.0020.0013] 
    // CIRCLED KATAKANA KI

    uint32_t const cps[1] = { 0x32d6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_010)
{
    // 32D7  ; [.3E79.0020.0013] 
    // CIRCLED KATAKANA KU

    uint32_t const cps[1] = { 0x32d7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_011)
{
    // 32D8  ; [.3E7A.0020.0013] 
    // CIRCLED KATAKANA KE

    uint32_t const cps[1] = { 0x32d8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7a), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_012)
{
    // 32D9  ; [.3E7B.0020.0013] 
    // CIRCLED KATAKANA KO

    uint32_t const cps[1] = { 0x32d9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_013)
{
    // 32DA  ; [.3E7C.0020.0013] 
    // CIRCLED KATAKANA SA

    uint32_t const cps[1] = { 0x32da };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7c), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_014)
{
    // 32DB  ; [.3E7D.0020.0013] 
    // CIRCLED KATAKANA SI

    uint32_t const cps[1] = { 0x32db };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_015)
{
    // 32DC  ; [.3E7E.0020.0013] 
    // CIRCLED KATAKANA SU

    uint32_t const cps[1] = { 0x32dc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_016)
{
    // 32DD  ; [.3E7F.0020.0013] 
    // CIRCLED KATAKANA SE

    uint32_t const cps[1] = { 0x32dd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_017)
{
    // 32DE  ; [.3E80.0020.0013] 
    // CIRCLED KATAKANA SO

    uint32_t const cps[1] = { 0x32de };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e80), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_018)
{
    // 32DF  ; [.3E81.0020.0013] 
    // CIRCLED KATAKANA TA

    uint32_t const cps[1] = { 0x32df };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_019)
{
    // 32E0  ; [.3E82.0020.0013] 
    // CIRCLED KATAKANA TI

    uint32_t const cps[1] = { 0x32e0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e82), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_020)
{
    // 32E1  ; [.3E83.0020.0013] 
    // CIRCLED KATAKANA TU

    uint32_t const cps[1] = { 0x32e1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_021)
{
    // 32E2  ; [.3E84.0020.0013] 
    // CIRCLED KATAKANA TE

    uint32_t const cps[1] = { 0x32e2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e84), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_022)
{
    // 32E3  ; [.3E85.0020.0013] 
    // CIRCLED KATAKANA TO

    uint32_t const cps[1] = { 0x32e3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_023)
{
    // 32E4  ; [.3E86.0020.0013] 
    // CIRCLED KATAKANA NA

    uint32_t const cps[1] = { 0x32e4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e86), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_024)
{
    // 32E5  ; [.3E87.0020.0013] 
    // CIRCLED KATAKANA NI

    uint32_t const cps[1] = { 0x32e5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e87), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_025)
{
    // 32E6  ; [.3E88.0020.0013] 
    // CIRCLED KATAKANA NU

    uint32_t const cps[1] = { 0x32e6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e88), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_026)
{
    // 32E7  ; [.3E89.0020.0013] 
    // CIRCLED KATAKANA NE

    uint32_t const cps[1] = { 0x32e7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e89), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_027)
{
    // 32E8  ; [.3E8A.0020.0013] 
    // CIRCLED KATAKANA NO

    uint32_t const cps[1] = { 0x32e8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8a), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_028)
{
    // 32E9  ; [.3E8B.0020.0013] 
    // CIRCLED KATAKANA HA

    uint32_t const cps[1] = { 0x32e9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_029)
{
    // 32EA  ; [.3E8C.0020.0013] 
    // CIRCLED KATAKANA HI

    uint32_t const cps[1] = { 0x32ea };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_030)
{
    // 32EB  ; [.3E8D.0020.0013] 
    // CIRCLED KATAKANA HU

    uint32_t const cps[1] = { 0x32eb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_031)
{
    // 32EC  ; [.3E8E.0020.0013] 
    // CIRCLED KATAKANA HE

    uint32_t const cps[1] = { 0x32ec };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_032)
{
    // 32ED  ; [.3E8F.0020.0013] 
    // CIRCLED KATAKANA HO

    uint32_t const cps[1] = { 0x32ed };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_033)
{
    // 32EE  ; [.3E90.0020.0013] 
    // CIRCLED KATAKANA MA

    uint32_t const cps[1] = { 0x32ee };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_034)
{
    // 32EF  ; [.3E91.0020.0013] 
    // CIRCLED KATAKANA MI

    uint32_t const cps[1] = { 0x32ef };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e91), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_035)
{
    // 32F0  ; [.3E92.0020.0013] 
    // CIRCLED KATAKANA MU

    uint32_t const cps[1] = { 0x32f0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_036)
{
    // 32F1  ; [.3E93.0020.0013] 
    // CIRCLED KATAKANA ME

    uint32_t const cps[1] = { 0x32f1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_037)
{
    // 32F2  ; [.3E94.0020.0013] 
    // CIRCLED KATAKANA MO

    uint32_t const cps[1] = { 0x32f2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e94), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_038)
{
    // 32F3  ; [.3E95.0020.0013] 
    // CIRCLED KATAKANA YA

    uint32_t const cps[1] = { 0x32f3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e95), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_039)
{
    // 32F4  ; [.3E96.0020.0013] 
    // CIRCLED KATAKANA YU

    uint32_t const cps[1] = { 0x32f4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e96), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_040)
{
    // 32F5  ; [.3E97.0020.0013] 
    // CIRCLED KATAKANA YO

    uint32_t const cps[1] = { 0x32f5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e97), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_041)
{
    // 32F6  ; [.3E98.0020.0013] 
    // CIRCLED KATAKANA RA

    uint32_t const cps[1] = { 0x32f6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_042)
{
    // 32F7  ; [.3E99.0020.0013] 
    // CIRCLED KATAKANA RI

    uint32_t const cps[1] = { 0x32f7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_043)
{
    // 32F8  ; [.3E9A.0020.0013] 
    // CIRCLED KATAKANA RU

    uint32_t const cps[1] = { 0x32f8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_044)
{
    // 32F9  ; [.3E9B.0020.0013] 
    // CIRCLED KATAKANA RE

    uint32_t const cps[1] = { 0x32f9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9b), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_045)
{
    // 32FA  ; [.3E9C.0020.0013] 
    // CIRCLED KATAKANA RO

    uint32_t const cps[1] = { 0x32fa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_046)
{
    // 32FB  ; [.3E9D.0020.0013] 
    // CIRCLED KATAKANA WA

    uint32_t const cps[1] = { 0x32fb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9d), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_047)
{
    // 32FC  ; [.3E9E.0020.0013] 
    // CIRCLED KATAKANA WI

    uint32_t const cps[1] = { 0x32fc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9e), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_048)
{
    // 32FD  ; [.3E9F.0020.0013] 
    // CIRCLED KATAKANA WE

    uint32_t const cps[1] = { 0x32fd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3e9f), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_049)
{
    // 32FE  ; [.3EA0.0020.0013] 
    // CIRCLED KATAKANA WO

    uint32_t const cps[1] = { 0x32fe };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3ea0), uint8_t(0x1), uint8_t(0x13)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_082_050)
{
    // 3300  ; [.3E71.0020.001C][.3E8B.0020.001C][.0000.0038.001C][.1C73.0020.001C][.3E85.0020.001C] 
    // SQUARE APAATO

    uint32_t const cps[1] = { 0x3300 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_051)
{
    // 3301  ; [.3E71.0020.001C][.3E9A.0020.001C][.3E8D.0020.001C][.3E71.0020.001C] 
    // SQUARE ARUHUA

    uint32_t const cps[1] = { 0x3301 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_052)
{
    // 3302  ; [.3E71.0020.001C][.3EA1.0020.001C][.3E8E.0020.001C][.0000.0038.001C][.3E71.0020.001C] 
    // SQUARE ANPEA

    uint32_t const cps[1] = { 0x3302 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_053)
{
    // 3303  ; [.3E71.0020.001C][.1C73.0020.001C][.3E9A.0020.001C] 
    // SQUARE AARU

    uint32_t const cps[1] = { 0x3303 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_054)
{
    // 3304  ; [.3E72.0020.001C][.3E87.0020.001C][.3EA1.0020.001C][.3E79.0020.001C][.0000.0037.001C] 
    // SQUARE ININGU

    uint32_t const cps[1] = { 0x3304 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e87), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_055)
{
    // 3305  ; [.3E72.0020.001C][.3EA1.0020.001C][.3E82.0020.001C] 
    // SQUARE INTI

    uint32_t const cps[1] = { 0x3305 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e82), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_056)
{
    // 3306  ; [.3E73.0020.001C][.3E76.0020.001C][.3EA1.0020.001C] 
    // SQUARE UON

    uint32_t const cps[1] = { 0x3306 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_057)
{
    // 3307  ; [.3E75.0020.001C][.3E7E.0020.001C][.3E79.0020.001C][.1C73.0020.001C][.3E85.0020.001C][.0000.0037.001C] 
    // SQUARE ESUKUUDO

    uint32_t const cps[1] = { 0x3307 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_058)
{
    // 3308  ; [.3E75.0020.001C][.1C73.0020.001C][.3E77.0020.001C][.1C73.0020.001C] 
    // SQUARE EEKAA

    uint32_t const cps[1] = { 0x3308 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_059)
{
    // 3309  ; [.3E76.0020.001C][.3EA1.0020.001C][.3E7E.0020.001C] 
    // SQUARE ONSU

    uint32_t const cps[1] = { 0x3309 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_060)
{
    // 330A  ; [.3E76.0020.001C][.1C73.0020.001C][.3E92.0020.001C] 
    // SQUARE OOMU

    uint32_t const cps[1] = { 0x330a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e76), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_061)
{
    // 330B  ; [.3E77.0020.001C][.3E72.0020.001C][.3E99.0020.001C] 
    // SQUARE KAIRI

    uint32_t const cps[1] = { 0x330b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_062)
{
    // 330C  ; [.3E77.0020.001C][.3E98.0020.001C][.3E83.0020.001C][.3E85.0020.001C] 
    // SQUARE KARATTO

    uint32_t const cps[1] = { 0x330c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_063)
{
    // 330D  ; [.3E77.0020.001C][.3E9C.0020.001C][.3E99.0020.001C][.1C73.0020.001C] 
    // SQUARE KARORII

    uint32_t const cps[1] = { 0x330d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_064)
{
    // 330E  ; [.3E77.0020.001C][.0000.0037.001C][.3E9C.0020.001C][.3EA1.0020.001C] 
    // SQUARE GARON

    uint32_t const cps[1] = { 0x330e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_065)
{
    // 330F  ; [.3E77.0020.001C][.0000.0037.001C][.3EA1.0020.001C][.3E90.0020.001C] 
    // SQUARE GANMA

    uint32_t const cps[1] = { 0x330f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_066)
{
    // 3310  ; [.3E78.0020.001C][.0000.0037.001C][.3E77.0020.001C][.0000.0037.001C] 
    // SQUARE GIGA

    uint32_t const cps[1] = { 0x3310 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_067)
{
    // 3311  ; [.3E78.0020.001C][.0000.0037.001C][.3E87.0020.001C][.1C73.0020.001C] 
    // SQUARE GINII

    uint32_t const cps[1] = { 0x3311 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e87), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_068)
{
    // 3312  ; [.3E78.0020.001C][.3E96.0020.001C][.3E99.0020.001C][.1C73.0020.001C] 
    // SQUARE KYURII

    uint32_t const cps[1] = { 0x3312 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e96), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_069)
{
    // 3313  ; [.3E78.0020.001C][.0000.0037.001C][.3E9A.0020.001C][.3E81.0020.001C][.0000.0037.001C][.1C73.0020.001C] 
    // SQUARE GIRUDAA

    uint32_t const cps[1] = { 0x3313 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_070)
{
    // 3314  ; [.3E78.0020.001C][.3E9C.0020.001C] 
    // SQUARE KIRO

    uint32_t const cps[1] = { 0x3314 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_071)
{
    // 3315  ; [.3E78.0020.001C][.3E9C.0020.001C][.3E79.0020.001C][.0000.0037.001C][.3E98.0020.001C][.3E92.0020.001C] 
    // SQUARE KIROGURAMU

    uint32_t const cps[1] = { 0x3315 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_072)
{
    // 3316  ; [.3E78.0020.001C][.3E9C.0020.001C][.3E93.0020.001C][.1C73.0020.001C][.3E85.0020.001C][.3E9A.0020.001C] 
    // SQUARE KIROMEETORU

    uint32_t const cps[1] = { 0x3316 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_073)
{
    // 3317  ; [.3E78.0020.001C][.3E9C.0020.001C][.3E9D.0020.001C][.3E83.0020.001C][.3E85.0020.001C] 
    // SQUARE KIROWATTO

    uint32_t const cps[1] = { 0x3317 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e78), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_074)
{
    // 3318  ; [.3E79.0020.001C][.0000.0037.001C][.3E98.0020.001C][.3E92.0020.001C] 
    // SQUARE GURAMU

    uint32_t const cps[1] = { 0x3318 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_075)
{
    // 3319  ; [.3E79.0020.001C][.0000.0037.001C][.3E98.0020.001C][.3E92.0020.001C][.3E85.0020.001C][.3EA1.0020.001C] 
    // SQUARE GURAMUTON

    uint32_t const cps[1] = { 0x3319 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_076)
{
    // 331A  ; [.3E79.0020.001C][.3E9A.0020.001C][.3E7F.0020.001C][.0000.0037.001C][.3E72.0020.001C][.3E9C.0020.001C] 
    // SQUARE KURUZEIRO

    uint32_t const cps[1] = { 0x331a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_077)
{
    // 331B  ; [.3E79.0020.001C][.3E9C.0020.001C][.1C73.0020.001C][.3E89.0020.001C] 
    // SQUARE KUROONE

    uint32_t const cps[1] = { 0x331b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e89), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_078)
{
    // 331C  ; [.3E7A.0020.001C][.1C73.0020.001C][.3E7E.0020.001C] 
    // SQUARE KEESU

    uint32_t const cps[1] = { 0x331c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e7a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_079)
{
    // 331D  ; [.3E7B.0020.001C][.3E9A.0020.001C][.3E86.0020.001C] 
    // SQUARE KORUNA

    uint32_t const cps[1] = { 0x331d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e86), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_080)
{
    // 331E  ; [.3E7B.0020.001C][.1C73.0020.001C][.3E8F.0020.001C][.0000.0038.001C] 
    // SQUARE KOOPO

    uint32_t const cps[1] = { 0x331e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_081)
{
    // 331F  ; [.3E7C.0020.001C][.3E72.0020.001C][.3E79.0020.001C][.3E9A.0020.001C] 
    // SQUARE SAIKURU

    uint32_t const cps[1] = { 0x331f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e7c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_082)
{
    // 3320  ; [.3E7C.0020.001C][.3EA1.0020.001C][.3E82.0020.001C][.1C73.0020.001C][.3E92.0020.001C] 
    // SQUARE SANTIIMU

    uint32_t const cps[1] = { 0x3320 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e7c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e82), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_083)
{
    // 3321  ; [.3E7D.0020.001C][.3E99.0020.001C][.3EA1.0020.001C][.3E79.0020.001C][.0000.0037.001C] 
    // SQUARE SIRINGU

    uint32_t const cps[1] = { 0x3321 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_084)
{
    // 3322  ; [.3E7F.0020.001C][.3EA1.0020.001C][.3E82.0020.001C] 
    // SQUARE SENTI

    uint32_t const cps[1] = { 0x3322 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e82), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_085)
{
    // 3323  ; [.3E7F.0020.001C][.3EA1.0020.001C][.3E85.0020.001C] 
    // SQUARE SENTO

    uint32_t const cps[1] = { 0x3323 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_086)
{
    // 3324  ; [.3E81.0020.001C][.0000.0037.001C][.1C73.0020.001C][.3E7E.0020.001C] 
    // SQUARE DAASU

    uint32_t const cps[1] = { 0x3324 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_087)
{
    // 3325  ; [.3E84.0020.001C][.0000.0037.001C][.3E7D.0020.001C] 
    // SQUARE DESI

    uint32_t const cps[1] = { 0x3325 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e84), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_088)
{
    // 3326  ; [.3E85.0020.001C][.0000.0037.001C][.3E9A.0020.001C] 
    // SQUARE DORU

    uint32_t const cps[1] = { 0x3326 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_089)
{
    // 3327  ; [.3E85.0020.001C][.3EA1.0020.001C] 
    // SQUARE TON

    uint32_t const cps[1] = { 0x3327 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_090)
{
    // 3328  ; [.3E86.0020.001C][.3E8A.0020.001C] 
    // SQUARE NANO

    uint32_t const cps[1] = { 0x3328 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e86), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_091)
{
    // 3329  ; [.3E8A.0020.001C][.3E83.0020.001C][.3E85.0020.001C] 
    // SQUARE NOTTO

    uint32_t const cps[1] = { 0x3329 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_092)
{
    // 332A  ; [.3E8B.0020.001C][.3E72.0020.001C][.3E83.0020.001C] 
    // SQUARE HAITU

    uint32_t const cps[1] = { 0x332a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_093)
{
    // 332B  ; [.3E8B.0020.001C][.0000.0038.001C][.1C73.0020.001C][.3E7F.0020.001C][.3EA1.0020.001C][.3E85.0020.001C] 
    // SQUARE PAASENTO

    uint32_t const cps[1] = { 0x332b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_094)
{
    // 332C  ; [.3E8B.0020.001C][.0000.0038.001C][.1C73.0020.001C][.3E83.0020.001C] 
    // SQUARE PAATU

    uint32_t const cps[1] = { 0x332c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_095)
{
    // 332D  ; [.3E8B.0020.001C][.0000.0037.001C][.1C73.0020.001C][.3E9B.0020.001C][.3E9A.0020.001C] 
    // SQUARE BAARERU

    uint32_t const cps[1] = { 0x332d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_096)
{
    // 332E  ; [.3E8C.0020.001C][.0000.0038.001C][.3E71.0020.001C][.3E7E.0020.001C][.3E85.0020.001C][.3E9A.0020.001C] 
    // SQUARE PIASUTORU

    uint32_t const cps[1] = { 0x332e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_097)
{
    // 332F  ; [.3E8C.0020.001C][.0000.0038.001C][.3E79.0020.001C][.3E9A.0020.001C] 
    // SQUARE PIKURU

    uint32_t const cps[1] = { 0x332f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_098)
{
    // 3330  ; [.3E8C.0020.001C][.0000.0038.001C][.3E7B.0020.001C] 
    // SQUARE PIKO

    uint32_t const cps[1] = { 0x3330 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e7b), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_099)
{
    // 3331  ; [.3E8C.0020.001C][.0000.0037.001C][.3E9A.0020.001C] 
    // SQUARE BIRU

    uint32_t const cps[1] = { 0x3331 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_100)
{
    // 3332  ; [.3E8D.0020.001C][.3E71.0020.001C][.3E98.0020.001C][.3E83.0020.001C][.3E85.0020.001C][.0000.0037.001C] 
    // SQUARE HUARADDO

    uint32_t const cps[1] = { 0x3332 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_101)
{
    // 3333  ; [.3E8D.0020.001C][.3E72.0020.001C][.1C73.0020.001C][.3E85.0020.001C] 
    // SQUARE HUIITO

    uint32_t const cps[1] = { 0x3333 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_102)
{
    // 3334  ; [.3E8D.0020.001C][.0000.0037.001C][.3E83.0020.001C][.3E7D.0020.001C][.3E75.0020.001C][.3E9A.0020.001C] 
    // SQUARE BUSSYERU

    uint32_t const cps[1] = { 0x3334 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e75), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_103)
{
    // 3335  ; [.3E8D.0020.001C][.3E98.0020.001C][.3EA1.0020.001C] 
    // SQUARE HURAN

    uint32_t const cps[1] = { 0x3335 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_104)
{
    // 3336  ; [.3E8E.0020.001C][.3E79.0020.001C][.3E81.0020.001C][.1C73.0020.001C][.3E9A.0020.001C] 
    // SQUARE HEKUTAARU

    uint32_t const cps[1] = { 0x3336 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_105)
{
    // 3337  ; [.3E8E.0020.001C][.0000.0038.001C][.3E80.0020.001C] 
    // SQUARE PESO

    uint32_t const cps[1] = { 0x3337 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e80), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_106)
{
    // 3338  ; [.3E8E.0020.001C][.0000.0038.001C][.3E87.0020.001C][.3E8C.0020.001C] 
    // SQUARE PENIHI

    uint32_t const cps[1] = { 0x3338 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e87), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_107)
{
    // 3339  ; [.3E8E.0020.001C][.3E9A.0020.001C][.3E83.0020.001C] 
    // SQUARE HERUTU

    uint32_t const cps[1] = { 0x3339 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_108)
{
    // 333A  ; [.3E8E.0020.001C][.0000.0038.001C][.3EA1.0020.001C][.3E7E.0020.001C] 
    // SQUARE PENSU

    uint32_t const cps[1] = { 0x333a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7e), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_109)
{
    // 333B  ; [.3E8E.0020.001C][.0000.0038.001C][.1C73.0020.001C][.3E7D.0020.001C][.0000.0037.001C] 
    // SQUARE PEEZI

    uint32_t const cps[1] = { 0x333b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_110)
{
    // 333C  ; [.3E8E.0020.001C][.0000.0037.001C][.1C73.0020.001C][.3E81.0020.001C] 
    // SQUARE BEETA

    uint32_t const cps[1] = { 0x333c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8e), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e81), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_111)
{
    // 333D  ; [.3E8F.0020.001C][.0000.0038.001C][.3E72.0020.001C][.3EA1.0020.001C][.3E85.0020.001C] 
    // SQUARE POINTO

    uint32_t const cps[1] = { 0x333d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_112)
{
    // 333E  ; [.3E8F.0020.001C][.0000.0037.001C][.3E9A.0020.001C][.3E85.0020.001C] 
    // SQUARE BORUTO

    uint32_t const cps[1] = { 0x333e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_113)
{
    // 333F  ; [.3E8F.0020.001C][.3EA1.0020.001C] 
    // SQUARE HON

    uint32_t const cps[1] = { 0x333f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_114)
{
    // 3340  ; [.3E8F.0020.001C][.0000.0038.001C][.3EA1.0020.001C][.3E85.0020.001C][.0000.0037.001C] 
    // SQUARE PONDO

    uint32_t const cps[1] = { 0x3340 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_115)
{
    // 3341  ; [.3E8F.0020.001C][.1C73.0020.001C][.3E9A.0020.001C] 
    // SQUARE HOORU

    uint32_t const cps[1] = { 0x3341 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_116)
{
    // 3342  ; [.3E8F.0020.001C][.1C73.0020.001C][.3EA1.0020.001C] 
    // SQUARE HOON

    uint32_t const cps[1] = { 0x3342 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e8f), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_117)
{
    // 3343  ; [.3E90.0020.001C][.3E72.0020.001C][.3E79.0020.001C][.3E9C.0020.001C] 
    // SQUARE MAIKURO

    uint32_t const cps[1] = { 0x3343 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_118)
{
    // 3344  ; [.3E90.0020.001C][.3E72.0020.001C][.3E9A.0020.001C] 
    // SQUARE MAIRU

    uint32_t const cps[1] = { 0x3344 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e72), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_119)
{
    // 3345  ; [.3E90.0020.001C][.3E83.0020.001C][.3E8B.0020.001C] 
    // SQUARE MAHHA

    uint32_t const cps[1] = { 0x3345 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_120)
{
    // 3346  ; [.3E90.0020.001C][.3E9A.0020.001C][.3E79.0020.001C] 
    // SQUARE MARUKU

    uint32_t const cps[1] = { 0x3346 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_121)
{
    // 3347  ; [.3E90.0020.001C][.3EA1.0020.001C][.3E7D.0020.001C][.3E97.0020.001C][.3EA1.0020.001C] 
    // SQUARE MANSYON

    uint32_t const cps[1] = { 0x3347 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e90), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e97), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_122)
{
    // 3348  ; [.3E91.0020.001C][.3E79.0020.001C][.3E9C.0020.001C][.3EA1.0020.001C] 
    // SQUARE MIKURON

    uint32_t const cps[1] = { 0x3348 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e91), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e79), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_123)
{
    // 3349  ; [.3E91.0020.001C][.3E99.0020.001C] 
    // SQUARE MIRI

    uint32_t const cps[1] = { 0x3349 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e91), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_124)
{
    // 334A  ; [.3E91.0020.001C][.3E99.0020.001C][.3E8B.0020.001C][.0000.0037.001C][.1C73.0020.001C][.3E9A.0020.001C] 
    // SQUARE MIRIBAARU

    uint32_t const cps[1] = { 0x334a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e91), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_125)
{
    // 334B  ; [.3E93.0020.001C][.3E77.0020.001C][.0000.0037.001C] 
    // SQUARE MEGA

    uint32_t const cps[1] = { 0x334b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_126)
{
    // 334C  ; [.3E93.0020.001C][.3E77.0020.001C][.0000.0037.001C][.3E85.0020.001C][.3EA1.0020.001C] 
    // SQUARE MEGATON

    uint32_t const cps[1] = { 0x334c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e77), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_127)
{
    // 334D  ; [.3E93.0020.001C][.1C73.0020.001C][.3E85.0020.001C][.3E9A.0020.001C] 
    // SQUARE MEETORU

    uint32_t const cps[1] = { 0x334d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e93), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_128)
{
    // 334E  ; [.3E95.0020.001C][.1C73.0020.001C][.3E85.0020.001C][.0000.0037.001C] 
    // SQUARE YAADO

    uint32_t const cps[1] = { 0x334e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e95), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_129)
{
    // 334F  ; [.3E95.0020.001C][.1C73.0020.001C][.3E9A.0020.001C] 
    // SQUARE YAARU

    uint32_t const cps[1] = { 0x334f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e95), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_130)
{
    // 3350  ; [.3E96.0020.001C][.3E71.0020.001C][.3EA1.0020.001C] 
    // SQUARE YUAN

    uint32_t const cps[1] = { 0x3350 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e96), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e71), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_131)
{
    // 3351  ; [.3E99.0020.001C][.3E83.0020.001C][.3E85.0020.001C][.3E9A.0020.001C] 
    // SQUARE RITTORU

    uint32_t const cps[1] = { 0x3351 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_132)
{
    // 3352  ; [.3E99.0020.001C][.3E98.0020.001C] 
    // SQUARE RIRA

    uint32_t const cps[1] = { 0x3352 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e99), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e98), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_133)
{
    // 3353  ; [.3E9A.0020.001C][.3E8C.0020.001C][.0000.0038.001C][.1C73.0020.001C] 
    // SQUARE RUPII

    uint32_t const cps[1] = { 0x3353 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8c), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_134)
{
    // 3354  ; [.3E9A.0020.001C][.1C73.0020.001C][.3E8D.0020.001C][.0000.0037.001C][.3E9A.0020.001C] 
    // SQUARE RUUBURU

    uint32_t const cps[1] = { 0x3354 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x1c73), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e8d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3e9a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_082_135)
{
    // 3355  ; [.3E9B.0020.001C][.3E92.0020.001C] 
    // SQUARE REMU

    uint32_t const cps[1] = { 0x3355 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3e9b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e92), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_082_136)
{
    // 3356  ; [.3E9B.0020.001C][.3EA1.0020.001C][.3E85.0020.001C][.3E7A.0020.001C][.0000.0037.001C][.3EA1.0020.001C] 
    // SQUARE RENTOGEN

    uint32_t const cps[1] = { 0x3356 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[6] = { {uint16_t(0x3e9b), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e7a), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x0), uint8_t(0x18), uint8_t(0x1c)}, {uint16_t(0x3ea1), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 6));
}

TEST(collation, table_lookup_082_137)
{
    // 3357  ; [.3E9D.0020.001C][.3E83.0020.001C][.3E85.0020.001C] 
    // SQUARE WATTO

    uint32_t const cps[1] = { 0x3357 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x3e9d), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e83), uint8_t(0x1), uint8_t(0x1c)}, {uint16_t(0x3e85), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_138)
{
    // 3358  ; [.1CA3.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ZERO

    uint32_t const cps[1] = { 0x3358 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_139)
{
    // 3359  ; [.1CA4.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ONE

    uint32_t const cps[1] = { 0x3359 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_140)
{
    // 335A  ; [.1CA5.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TWO

    uint32_t const cps[1] = { 0x335a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_141)
{
    // 335B  ; [.1CA6.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR THREE

    uint32_t const cps[1] = { 0x335b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_142)
{
    // 335C  ; [.1CA7.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FOUR

    uint32_t const cps[1] = { 0x335c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_143)
{
    // 335D  ; [.1CA8.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR FIVE

    uint32_t const cps[1] = { 0x335d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_144)
{
    // 335E  ; [.1CA9.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SIX

    uint32_t const cps[1] = { 0x335e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_145)
{
    // 335F  ; [.1CAA.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR SEVEN

    uint32_t const cps[1] = { 0x335f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_146)
{
    // 3360  ; [.1CAB.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR EIGHT

    uint32_t const cps[1] = { 0x3360 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_147)
{
    // 3361  ; [.1CAC.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR NINE

    uint32_t const cps[1] = { 0x3361 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_082_148)
{
    // 3362  ; [.1CA4.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR TEN

    uint32_t const cps[1] = { 0x3362 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_082_149)
{
    // 3363  ; [.1CA4.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.F0B9.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR HOUR ELEVEN

    uint32_t const cps[1] = { 0x3363 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf0b9), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

