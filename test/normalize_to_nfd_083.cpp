// Warning! This file is autogenerated.
#include <boost/text/normalize.hpp>
#include <boost/text/utility.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(normalization, nfd_083_000)
{
    // 2F8B0;61F2;61F2;61F2;61F2; 
    // (懲; 懲; 懲; 懲; 懲; ) CJK COMPATIBILITY IDEOGRAPH-2F8B0
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x61F2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_001)
{
    // 2F8B1;61F6;61F6;61F6;61F6; 
    // (懶; 懶; 懶; 懶; 懶; ) CJK COMPATIBILITY IDEOGRAPH-2F8B1
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x61F6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_002)
{
    // 2F8B2;6210;6210;6210;6210; 
    // (成; 成; 成; 成; 成; ) CJK COMPATIBILITY IDEOGRAPH-2F8B2
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6210 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_003)
{
    // 2F8B3;621B;621B;621B;621B; 
    // (戛; 戛; 戛; 戛; 戛; ) CJK COMPATIBILITY IDEOGRAPH-2F8B3
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x621B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_004)
{
    // 2F8B4;625D;625D;625D;625D; 
    // (扝; 扝; 扝; 扝; 扝; ) CJK COMPATIBILITY IDEOGRAPH-2F8B4
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x625D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_005)
{
    // 2F8B5;62B1;62B1;62B1;62B1; 
    // (抱; 抱; 抱; 抱; 抱; ) CJK COMPATIBILITY IDEOGRAPH-2F8B5
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x62B1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_006)
{
    // 2F8B6;62D4;62D4;62D4;62D4; 
    // (拔; 拔; 拔; 拔; 拔; ) CJK COMPATIBILITY IDEOGRAPH-2F8B6
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x62D4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_007)
{
    // 2F8B7;6350;6350;6350;6350; 
    // (捐; 捐; 捐; 捐; 捐; ) CJK COMPATIBILITY IDEOGRAPH-2F8B7
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6350 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_008)
{
    // 2F8B8;22B0C;22B0C;22B0C;22B0C; 
    // (𢬌; 𢬌; 𢬌; 𢬌; 𢬌; ) CJK COMPATIBILITY IDEOGRAPH-2F8B8
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22B0C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_009)
{
    // 2F8B9;633D;633D;633D;633D; 
    // (挽; 挽; 挽; 挽; 挽; ) CJK COMPATIBILITY IDEOGRAPH-2F8B9
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8B9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x633D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_010)
{
    // 2F8BA;62FC;62FC;62FC;62FC; 
    // (拼; 拼; 拼; 拼; 拼; ) CJK COMPATIBILITY IDEOGRAPH-2F8BA
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x62FC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_011)
{
    // 2F8BB;6368;6368;6368;6368; 
    // (捨; 捨; 捨; 捨; 捨; ) CJK COMPATIBILITY IDEOGRAPH-2F8BB
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6368 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_012)
{
    // 2F8BC;6383;6383;6383;6383; 
    // (掃; 掃; 掃; 掃; 掃; ) CJK COMPATIBILITY IDEOGRAPH-2F8BC
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6383 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_013)
{
    // 2F8BD;63E4;63E4;63E4;63E4; 
    // (揤; 揤; 揤; 揤; 揤; ) CJK COMPATIBILITY IDEOGRAPH-2F8BD
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x63E4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_014)
{
    // 2F8BE;22BF1;22BF1;22BF1;22BF1; 
    // (𢯱; 𢯱; 𢯱; 𢯱; 𢯱; ) CJK COMPATIBILITY IDEOGRAPH-2F8BE
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x22BF1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_015)
{
    // 2F8BF;6422;6422;6422;6422; 
    // (搢; 搢; 搢; 搢; 搢; ) CJK COMPATIBILITY IDEOGRAPH-2F8BF
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8BF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6422 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_016)
{
    // 2F8C0;63C5;63C5;63C5;63C5; 
    // (揅; 揅; 揅; 揅; 揅; ) CJK COMPATIBILITY IDEOGRAPH-2F8C0
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x63C5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_017)
{
    // 2F8C1;63A9;63A9;63A9;63A9; 
    // (掩; 掩; 掩; 掩; 掩; ) CJK COMPATIBILITY IDEOGRAPH-2F8C1
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x63A9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_018)
{
    // 2F8C2;3A2E;3A2E;3A2E;3A2E; 
    // (㨮; 㨮; 㨮; 㨮; 㨮; ) CJK COMPATIBILITY IDEOGRAPH-2F8C2
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3A2E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_019)
{
    // 2F8C3;6469;6469;6469;6469; 
    // (摩; 摩; 摩; 摩; 摩; ) CJK COMPATIBILITY IDEOGRAPH-2F8C3
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6469 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_020)
{
    // 2F8C4;647E;647E;647E;647E; 
    // (摾; 摾; 摾; 摾; 摾; ) CJK COMPATIBILITY IDEOGRAPH-2F8C4
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x647E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_021)
{
    // 2F8C5;649D;649D;649D;649D; 
    // (撝; 撝; 撝; 撝; 撝; ) CJK COMPATIBILITY IDEOGRAPH-2F8C5
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x649D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_022)
{
    // 2F8C6;6477;6477;6477;6477; 
    // (摷; 摷; 摷; 摷; 摷; ) CJK COMPATIBILITY IDEOGRAPH-2F8C6
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6477 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_023)
{
    // 2F8C7;3A6C;3A6C;3A6C;3A6C; 
    // (㩬; 㩬; 㩬; 㩬; 㩬; ) CJK COMPATIBILITY IDEOGRAPH-2F8C7
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3A6C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_024)
{
    // 2F8C8;654F;654F;654F;654F; 
    // (敏; 敏; 敏; 敏; 敏; ) CJK COMPATIBILITY IDEOGRAPH-2F8C8
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x654F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_025)
{
    // 2F8C9;656C;656C;656C;656C; 
    // (敬; 敬; 敬; 敬; 敬; ) CJK COMPATIBILITY IDEOGRAPH-2F8C9
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8C9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x656C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_026)
{
    // 2F8CA;2300A;2300A;2300A;2300A; 
    // (𣀊; 𣀊; 𣀊; 𣀊; 𣀊; ) CJK COMPATIBILITY IDEOGRAPH-2F8CA
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2300A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_027)
{
    // 2F8CB;65E3;65E3;65E3;65E3; 
    // (旣; 旣; 旣; 旣; 旣; ) CJK COMPATIBILITY IDEOGRAPH-2F8CB
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x65E3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_028)
{
    // 2F8CC;66F8;66F8;66F8;66F8; 
    // (書; 書; 書; 書; 書; ) CJK COMPATIBILITY IDEOGRAPH-2F8CC
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x66F8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_029)
{
    // 2F8CD;6649;6649;6649;6649; 
    // (晉; 晉; 晉; 晉; 晉; ) CJK COMPATIBILITY IDEOGRAPH-2F8CD
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6649 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_030)
{
    // 2F8CE;3B19;3B19;3B19;3B19; 
    // (㬙; 㬙; 㬙; 㬙; 㬙; ) CJK COMPATIBILITY IDEOGRAPH-2F8CE
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3B19 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_031)
{
    // 2F8CF;6691;6691;6691;6691; 
    // (暑; 暑; 暑; 暑; 暑; ) CJK COMPATIBILITY IDEOGRAPH-2F8CF
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8CF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6691 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_032)
{
    // 2F8D0;3B08;3B08;3B08;3B08; 
    // (㬈; 㬈; 㬈; 㬈; 㬈; ) CJK COMPATIBILITY IDEOGRAPH-2F8D0
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3B08 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_033)
{
    // 2F8D1;3AE4;3AE4;3AE4;3AE4; 
    // (㫤; 㫤; 㫤; 㫤; 㫤; ) CJK COMPATIBILITY IDEOGRAPH-2F8D1
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3AE4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_034)
{
    // 2F8D2;5192;5192;5192;5192; 
    // (冒; 冒; 冒; 冒; 冒; ) CJK COMPATIBILITY IDEOGRAPH-2F8D2
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5192 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_035)
{
    // 2F8D3;5195;5195;5195;5195; 
    // (冕; 冕; 冕; 冕; 冕; ) CJK COMPATIBILITY IDEOGRAPH-2F8D3
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x5195 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_036)
{
    // 2F8D4;6700;6700;6700;6700; 
    // (最; 最; 最; 最; 最; ) CJK COMPATIBILITY IDEOGRAPH-2F8D4
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6700 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_037)
{
    // 2F8D5;669C;669C;669C;669C; 
    // (暜; 暜; 暜; 暜; 暜; ) CJK COMPATIBILITY IDEOGRAPH-2F8D5
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x669C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_038)
{
    // 2F8D6;80AD;80AD;80AD;80AD; 
    // (肭; 肭; 肭; 肭; 肭; ) CJK COMPATIBILITY IDEOGRAPH-2F8D6
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x80AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_039)
{
    // 2F8D7;43D9;43D9;43D9;43D9; 
    // (䏙; 䏙; 䏙; 䏙; 䏙; ) CJK COMPATIBILITY IDEOGRAPH-2F8D7
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x43D9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_040)
{
    // 2F8D8;6717;6717;6717;6717; 
    // (朗; 朗; 朗; 朗; 朗; ) CJK COMPATIBILITY IDEOGRAPH-2F8D8
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6717 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_041)
{
    // 2F8D9;671B;671B;671B;671B; 
    // (望; 望; 望; 望; 望; ) CJK COMPATIBILITY IDEOGRAPH-2F8D9
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8D9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x671B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_042)
{
    // 2F8DA;6721;6721;6721;6721; 
    // (朡; 朡; 朡; 朡; 朡; ) CJK COMPATIBILITY IDEOGRAPH-2F8DA
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6721 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_043)
{
    // 2F8DB;675E;675E;675E;675E; 
    // (杞; 杞; 杞; 杞; 杞; ) CJK COMPATIBILITY IDEOGRAPH-2F8DB
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x675E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_044)
{
    // 2F8DC;6753;6753;6753;6753; 
    // (杓; 杓; 杓; 杓; 杓; ) CJK COMPATIBILITY IDEOGRAPH-2F8DC
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6753 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_045)
{
    // 2F8DD;233C3;233C3;233C3;233C3; 
    // (𣏃; 𣏃; 𣏃; 𣏃; 𣏃; ) CJK COMPATIBILITY IDEOGRAPH-2F8DD
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x233C3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_046)
{
    // 2F8DE;3B49;3B49;3B49;3B49; 
    // (㭉; 㭉; 㭉; 㭉; 㭉; ) CJK COMPATIBILITY IDEOGRAPH-2F8DE
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3B49 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_047)
{
    // 2F8DF;67FA;67FA;67FA;67FA; 
    // (柺; 柺; 柺; 柺; 柺; ) CJK COMPATIBILITY IDEOGRAPH-2F8DF
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8DF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x67FA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_048)
{
    // 2F8E0;6785;6785;6785;6785; 
    // (枅; 枅; 枅; 枅; 枅; ) CJK COMPATIBILITY IDEOGRAPH-2F8E0
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6785 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_049)
{
    // 2F8E1;6852;6852;6852;6852; 
    // (桒; 桒; 桒; 桒; 桒; ) CJK COMPATIBILITY IDEOGRAPH-2F8E1
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6852 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_050)
{
    // 2F8E2;6885;6885;6885;6885; 
    // (梅; 梅; 梅; 梅; 梅; ) CJK COMPATIBILITY IDEOGRAPH-2F8E2
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6885 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_051)
{
    // 2F8E3;2346D;2346D;2346D;2346D; 
    // (𣑭; 𣑭; 𣑭; 𣑭; 𣑭; ) CJK COMPATIBILITY IDEOGRAPH-2F8E3
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2346D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_052)
{
    // 2F8E4;688E;688E;688E;688E; 
    // (梎; 梎; 梎; 梎; 梎; ) CJK COMPATIBILITY IDEOGRAPH-2F8E4
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x688E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_053)
{
    // 2F8E5;681F;681F;681F;681F; 
    // (栟; 栟; 栟; 栟; 栟; ) CJK COMPATIBILITY IDEOGRAPH-2F8E5
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x681F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_054)
{
    // 2F8E6;6914;6914;6914;6914; 
    // (椔; 椔; 椔; 椔; 椔; ) CJK COMPATIBILITY IDEOGRAPH-2F8E6
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6914 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_055)
{
    // 2F8E7;3B9D;3B9D;3B9D;3B9D; 
    // (㮝; 㮝; 㮝; 㮝; 㮝; ) CJK COMPATIBILITY IDEOGRAPH-2F8E7
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3B9D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_056)
{
    // 2F8E8;6942;6942;6942;6942; 
    // (楂; 楂; 楂; 楂; 楂; ) CJK COMPATIBILITY IDEOGRAPH-2F8E8
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6942 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_057)
{
    // 2F8E9;69A3;69A3;69A3;69A3; 
    // (榣; 榣; 榣; 榣; 榣; ) CJK COMPATIBILITY IDEOGRAPH-2F8E9
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8E9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x69A3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_058)
{
    // 2F8EA;69EA;69EA;69EA;69EA; 
    // (槪; 槪; 槪; 槪; 槪; ) CJK COMPATIBILITY IDEOGRAPH-2F8EA
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8EA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x69EA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_059)
{
    // 2F8EB;6AA8;6AA8;6AA8;6AA8; 
    // (檨; 檨; 檨; 檨; 檨; ) CJK COMPATIBILITY IDEOGRAPH-2F8EB
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8EB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6AA8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_060)
{
    // 2F8EC;236A3;236A3;236A3;236A3; 
    // (𣚣; 𣚣; 𣚣; 𣚣; 𣚣; ) CJK COMPATIBILITY IDEOGRAPH-2F8EC
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8EC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x236A3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_061)
{
    // 2F8ED;6ADB;6ADB;6ADB;6ADB; 
    // (櫛; 櫛; 櫛; 櫛; 櫛; ) CJK COMPATIBILITY IDEOGRAPH-2F8ED
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8ED }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6ADB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_062)
{
    // 2F8EE;3C18;3C18;3C18;3C18; 
    // (㰘; 㰘; 㰘; 㰘; 㰘; ) CJK COMPATIBILITY IDEOGRAPH-2F8EE
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8EE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3C18 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_063)
{
    // 2F8EF;6B21;6B21;6B21;6B21; 
    // (次; 次; 次; 次; 次; ) CJK COMPATIBILITY IDEOGRAPH-2F8EF
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8EF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6B21 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_064)
{
    // 2F8F0;238A7;238A7;238A7;238A7; 
    // (𣢧; 𣢧; 𣢧; 𣢧; 𣢧; ) CJK COMPATIBILITY IDEOGRAPH-2F8F0
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F0 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x238A7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_065)
{
    // 2F8F1;6B54;6B54;6B54;6B54; 
    // (歔; 歔; 歔; 歔; 歔; ) CJK COMPATIBILITY IDEOGRAPH-2F8F1
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F1 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6B54 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_066)
{
    // 2F8F2;3C4E;3C4E;3C4E;3C4E; 
    // (㱎; 㱎; 㱎; 㱎; 㱎; ) CJK COMPATIBILITY IDEOGRAPH-2F8F2
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F2 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3C4E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_067)
{
    // 2F8F3;6B72;6B72;6B72;6B72; 
    // (歲; 歲; 歲; 歲; 歲; ) CJK COMPATIBILITY IDEOGRAPH-2F8F3
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F3 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6B72 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_068)
{
    // 2F8F4;6B9F;6B9F;6B9F;6B9F; 
    // (殟; 殟; 殟; 殟; 殟; ) CJK COMPATIBILITY IDEOGRAPH-2F8F4
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F4 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6B9F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_069)
{
    // 2F8F5;6BBA;6BBA;6BBA;6BBA; 
    // (殺; 殺; 殺; 殺; 殺; ) CJK COMPATIBILITY IDEOGRAPH-2F8F5
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F5 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6BBA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_070)
{
    // 2F8F6;6BBB;6BBB;6BBB;6BBB; 
    // (殻; 殻; 殻; 殻; 殻; ) CJK COMPATIBILITY IDEOGRAPH-2F8F6
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F6 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6BBB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_071)
{
    // 2F8F7;23A8D;23A8D;23A8D;23A8D; 
    // (𣪍; 𣪍; 𣪍; 𣪍; 𣪍; ) CJK COMPATIBILITY IDEOGRAPH-2F8F7
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F7 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23A8D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_072)
{
    // 2F8F8;21D0B;21D0B;21D0B;21D0B; 
    // (𡴋; 𡴋; 𡴋; 𡴋; 𡴋; ) CJK COMPATIBILITY IDEOGRAPH-2F8F8
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F8 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x21D0B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_073)
{
    // 2F8F9;23AFA;23AFA;23AFA;23AFA; 
    // (𣫺; 𣫺; 𣫺; 𣫺; 𣫺; ) CJK COMPATIBILITY IDEOGRAPH-2F8F9
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8F9 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23AFA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_074)
{
    // 2F8FA;6C4E;6C4E;6C4E;6C4E; 
    // (汎; 汎; 汎; 汎; 汎; ) CJK COMPATIBILITY IDEOGRAPH-2F8FA
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FA }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6C4E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_075)
{
    // 2F8FB;23CBC;23CBC;23CBC;23CBC; 
    // (𣲼; 𣲼; 𣲼; 𣲼; 𣲼; ) CJK COMPATIBILITY IDEOGRAPH-2F8FB
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FB }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23CBC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_076)
{
    // 2F8FC;6CBF;6CBF;6CBF;6CBF; 
    // (沿; 沿; 沿; 沿; 沿; ) CJK COMPATIBILITY IDEOGRAPH-2F8FC
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FC }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6CBF }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_077)
{
    // 2F8FD;6CCD;6CCD;6CCD;6CCD; 
    // (泍; 泍; 泍; 泍; 泍; ) CJK COMPATIBILITY IDEOGRAPH-2F8FD
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FD }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6CCD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_078)
{
    // 2F8FE;6C67;6C67;6C67;6C67; 
    // (汧; 汧; 汧; 汧; 汧; ) CJK COMPATIBILITY IDEOGRAPH-2F8FE
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FE }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6C67 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_079)
{
    // 2F8FF;6D16;6D16;6D16;6D16; 
    // (洖; 洖; 洖; 洖; 洖; ) CJK COMPATIBILITY IDEOGRAPH-2F8FF
    {
        std::array<uint32_t, 1> const source = {{ 0x2F8FF }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D16 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_080)
{
    // 2F900;6D3E;6D3E;6D3E;6D3E; 
    // (派; 派; 派; 派; 派; ) CJK COMPATIBILITY IDEOGRAPH-2F900
    {
        std::array<uint32_t, 1> const source = {{ 0x2F900 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D3E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_081)
{
    // 2F901;6D77;6D77;6D77;6D77; 
    // (海; 海; 海; 海; 海; ) CJK COMPATIBILITY IDEOGRAPH-2F901
    {
        std::array<uint32_t, 1> const source = {{ 0x2F901 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D77 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_082)
{
    // 2F902;6D41;6D41;6D41;6D41; 
    // (流; 流; 流; 流; 流; ) CJK COMPATIBILITY IDEOGRAPH-2F902
    {
        std::array<uint32_t, 1> const source = {{ 0x2F902 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D41 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_083)
{
    // 2F903;6D69;6D69;6D69;6D69; 
    // (浩; 浩; 浩; 浩; 浩; ) CJK COMPATIBILITY IDEOGRAPH-2F903
    {
        std::array<uint32_t, 1> const source = {{ 0x2F903 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D69 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_084)
{
    // 2F904;6D78;6D78;6D78;6D78; 
    // (浸; 浸; 浸; 浸; 浸; ) CJK COMPATIBILITY IDEOGRAPH-2F904
    {
        std::array<uint32_t, 1> const source = {{ 0x2F904 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D78 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_085)
{
    // 2F905;6D85;6D85;6D85;6D85; 
    // (涅; 涅; 涅; 涅; 涅; ) CJK COMPATIBILITY IDEOGRAPH-2F905
    {
        std::array<uint32_t, 1> const source = {{ 0x2F905 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D85 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_086)
{
    // 2F906;23D1E;23D1E;23D1E;23D1E; 
    // (𣴞; 𣴞; 𣴞; 𣴞; 𣴞; ) CJK COMPATIBILITY IDEOGRAPH-2F906
    {
        std::array<uint32_t, 1> const source = {{ 0x2F906 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23D1E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_087)
{
    // 2F907;6D34;6D34;6D34;6D34; 
    // (洴; 洴; 洴; 洴; 洴; ) CJK COMPATIBILITY IDEOGRAPH-2F907
    {
        std::array<uint32_t, 1> const source = {{ 0x2F907 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6D34 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_088)
{
    // 2F908;6E2F;6E2F;6E2F;6E2F; 
    // (港; 港; 港; 港; 港; ) CJK COMPATIBILITY IDEOGRAPH-2F908
    {
        std::array<uint32_t, 1> const source = {{ 0x2F908 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6E2F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_089)
{
    // 2F909;6E6E;6E6E;6E6E;6E6E; 
    // (湮; 湮; 湮; 湮; 湮; ) CJK COMPATIBILITY IDEOGRAPH-2F909
    {
        std::array<uint32_t, 1> const source = {{ 0x2F909 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6E6E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_090)
{
    // 2F90A;3D33;3D33;3D33;3D33; 
    // (㴳; 㴳; 㴳; 㴳; 㴳; ) CJK COMPATIBILITY IDEOGRAPH-2F90A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3D33 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_091)
{
    // 2F90B;6ECB;6ECB;6ECB;6ECB; 
    // (滋; 滋; 滋; 滋; 滋; ) CJK COMPATIBILITY IDEOGRAPH-2F90B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6ECB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_092)
{
    // 2F90C;6EC7;6EC7;6EC7;6EC7; 
    // (滇; 滇; 滇; 滇; 滇; ) CJK COMPATIBILITY IDEOGRAPH-2F90C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6EC7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_093)
{
    // 2F90D;23ED1;23ED1;23ED1;23ED1; 
    // (𣻑; 𣻑; 𣻑; 𣻑; 𣻑; ) CJK COMPATIBILITY IDEOGRAPH-2F90D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23ED1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_094)
{
    // 2F90E;6DF9;6DF9;6DF9;6DF9; 
    // (淹; 淹; 淹; 淹; 淹; ) CJK COMPATIBILITY IDEOGRAPH-2F90E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6DF9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_095)
{
    // 2F90F;6F6E;6F6E;6F6E;6F6E; 
    // (潮; 潮; 潮; 潮; 潮; ) CJK COMPATIBILITY IDEOGRAPH-2F90F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F90F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6F6E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_096)
{
    // 2F910;23F5E;23F5E;23F5E;23F5E; 
    // (𣽞; 𣽞; 𣽞; 𣽞; 𣽞; ) CJK COMPATIBILITY IDEOGRAPH-2F910
    {
        std::array<uint32_t, 1> const source = {{ 0x2F910 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23F5E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_097)
{
    // 2F911;23F8E;23F8E;23F8E;23F8E; 
    // (𣾎; 𣾎; 𣾎; 𣾎; 𣾎; ) CJK COMPATIBILITY IDEOGRAPH-2F911
    {
        std::array<uint32_t, 1> const source = {{ 0x2F911 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x23F8E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_098)
{
    // 2F912;6FC6;6FC6;6FC6;6FC6; 
    // (濆; 濆; 濆; 濆; 濆; ) CJK COMPATIBILITY IDEOGRAPH-2F912
    {
        std::array<uint32_t, 1> const source = {{ 0x2F912 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x6FC6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_099)
{
    // 2F913;7039;7039;7039;7039; 
    // (瀹; 瀹; 瀹; 瀹; 瀹; ) CJK COMPATIBILITY IDEOGRAPH-2F913
    {
        std::array<uint32_t, 1> const source = {{ 0x2F913 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7039 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_100)
{
    // 2F914;701E;701E;701E;701E; 
    // (瀞; 瀞; 瀞; 瀞; 瀞; ) CJK COMPATIBILITY IDEOGRAPH-2F914
    {
        std::array<uint32_t, 1> const source = {{ 0x2F914 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x701E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_101)
{
    // 2F915;701B;701B;701B;701B; 
    // (瀛; 瀛; 瀛; 瀛; 瀛; ) CJK COMPATIBILITY IDEOGRAPH-2F915
    {
        std::array<uint32_t, 1> const source = {{ 0x2F915 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x701B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_102)
{
    // 2F916;3D96;3D96;3D96;3D96; 
    // (㶖; 㶖; 㶖; 㶖; 㶖; ) CJK COMPATIBILITY IDEOGRAPH-2F916
    {
        std::array<uint32_t, 1> const source = {{ 0x2F916 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3D96 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_103)
{
    // 2F917;704A;704A;704A;704A; 
    // (灊; 灊; 灊; 灊; 灊; ) CJK COMPATIBILITY IDEOGRAPH-2F917
    {
        std::array<uint32_t, 1> const source = {{ 0x2F917 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x704A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_104)
{
    // 2F918;707D;707D;707D;707D; 
    // (災; 災; 災; 災; 災; ) CJK COMPATIBILITY IDEOGRAPH-2F918
    {
        std::array<uint32_t, 1> const source = {{ 0x2F918 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x707D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_105)
{
    // 2F919;7077;7077;7077;7077; 
    // (灷; 灷; 灷; 灷; 灷; ) CJK COMPATIBILITY IDEOGRAPH-2F919
    {
        std::array<uint32_t, 1> const source = {{ 0x2F919 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7077 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_106)
{
    // 2F91A;70AD;70AD;70AD;70AD; 
    // (炭; 炭; 炭; 炭; 炭; ) CJK COMPATIBILITY IDEOGRAPH-2F91A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x70AD }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_107)
{
    // 2F91B;20525;20525;20525;20525; 
    // (𠔥; 𠔥; 𠔥; 𠔥; 𠔥; ) CJK COMPATIBILITY IDEOGRAPH-2F91B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x20525 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_108)
{
    // 2F91C;7145;7145;7145;7145; 
    // (煅; 煅; 煅; 煅; 煅; ) CJK COMPATIBILITY IDEOGRAPH-2F91C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7145 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_109)
{
    // 2F91D;24263;24263;24263;24263; 
    // (𤉣; 𤉣; 𤉣; 𤉣; 𤉣; ) CJK COMPATIBILITY IDEOGRAPH-2F91D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24263 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_110)
{
    // 2F91E;719C;719C;719C;719C; 
    // (熜; 熜; 熜; 熜; 熜; ) CJK COMPATIBILITY IDEOGRAPH-2F91E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x719C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_111)
{
    // 2F91F;243AB;243AB;243AB;243AB; 
    // (𤎫; 𤎫; 𤎫; 𤎫; 𤎫; ) CJK COMPATIBILITY IDEOGRAPH-2F91F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F91F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x243AB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_112)
{
    // 2F920;7228;7228;7228;7228; 
    // (爨; 爨; 爨; 爨; 爨; ) CJK COMPATIBILITY IDEOGRAPH-2F920
    {
        std::array<uint32_t, 1> const source = {{ 0x2F920 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7228 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_113)
{
    // 2F921;7235;7235;7235;7235; 
    // (爵; 爵; 爵; 爵; 爵; ) CJK COMPATIBILITY IDEOGRAPH-2F921
    {
        std::array<uint32_t, 1> const source = {{ 0x2F921 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7235 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_114)
{
    // 2F922;7250;7250;7250;7250; 
    // (牐; 牐; 牐; 牐; 牐; ) CJK COMPATIBILITY IDEOGRAPH-2F922
    {
        std::array<uint32_t, 1> const source = {{ 0x2F922 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7250 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_115)
{
    // 2F923;24608;24608;24608;24608; 
    // (𤘈; 𤘈; 𤘈; 𤘈; 𤘈; ) CJK COMPATIBILITY IDEOGRAPH-2F923
    {
        std::array<uint32_t, 1> const source = {{ 0x2F923 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24608 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_116)
{
    // 2F924;7280;7280;7280;7280; 
    // (犀; 犀; 犀; 犀; 犀; ) CJK COMPATIBILITY IDEOGRAPH-2F924
    {
        std::array<uint32_t, 1> const source = {{ 0x2F924 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7280 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_117)
{
    // 2F925;7295;7295;7295;7295; 
    // (犕; 犕; 犕; 犕; 犕; ) CJK COMPATIBILITY IDEOGRAPH-2F925
    {
        std::array<uint32_t, 1> const source = {{ 0x2F925 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7295 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_118)
{
    // 2F926;24735;24735;24735;24735; 
    // (𤜵; 𤜵; 𤜵; 𤜵; 𤜵; ) CJK COMPATIBILITY IDEOGRAPH-2F926
    {
        std::array<uint32_t, 1> const source = {{ 0x2F926 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24735 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_119)
{
    // 2F927;24814;24814;24814;24814; 
    // (𤠔; 𤠔; 𤠔; 𤠔; 𤠔; ) CJK COMPATIBILITY IDEOGRAPH-2F927
    {
        std::array<uint32_t, 1> const source = {{ 0x2F927 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24814 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_120)
{
    // 2F928;737A;737A;737A;737A; 
    // (獺; 獺; 獺; 獺; 獺; ) CJK COMPATIBILITY IDEOGRAPH-2F928
    {
        std::array<uint32_t, 1> const source = {{ 0x2F928 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x737A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_121)
{
    // 2F929;738B;738B;738B;738B; 
    // (王; 王; 王; 王; 王; ) CJK COMPATIBILITY IDEOGRAPH-2F929
    {
        std::array<uint32_t, 1> const source = {{ 0x2F929 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x738B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_122)
{
    // 2F92A;3EAC;3EAC;3EAC;3EAC; 
    // (㺬; 㺬; 㺬; 㺬; 㺬; ) CJK COMPATIBILITY IDEOGRAPH-2F92A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3EAC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_123)
{
    // 2F92B;73A5;73A5;73A5;73A5; 
    // (玥; 玥; 玥; 玥; 玥; ) CJK COMPATIBILITY IDEOGRAPH-2F92B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x73A5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_124)
{
    // 2F92C;3EB8;3EB8;3EB8;3EB8; 
    // (㺸; 㺸; 㺸; 㺸; 㺸; ) CJK COMPATIBILITY IDEOGRAPH-2F92C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3EB8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_125)
{
    // 2F92D;3EB8;3EB8;3EB8;3EB8; 
    // (㺸; 㺸; 㺸; 㺸; 㺸; ) CJK COMPATIBILITY IDEOGRAPH-2F92D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3EB8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_126)
{
    // 2F92E;7447;7447;7447;7447; 
    // (瑇; 瑇; 瑇; 瑇; 瑇; ) CJK COMPATIBILITY IDEOGRAPH-2F92E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7447 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_127)
{
    // 2F92F;745C;745C;745C;745C; 
    // (瑜; 瑜; 瑜; 瑜; 瑜; ) CJK COMPATIBILITY IDEOGRAPH-2F92F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F92F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x745C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_128)
{
    // 2F930;7471;7471;7471;7471; 
    // (瑱; 瑱; 瑱; 瑱; 瑱; ) CJK COMPATIBILITY IDEOGRAPH-2F930
    {
        std::array<uint32_t, 1> const source = {{ 0x2F930 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7471 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_129)
{
    // 2F931;7485;7485;7485;7485; 
    // (璅; 璅; 璅; 璅; 璅; ) CJK COMPATIBILITY IDEOGRAPH-2F931
    {
        std::array<uint32_t, 1> const source = {{ 0x2F931 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7485 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_130)
{
    // 2F932;74CA;74CA;74CA;74CA; 
    // (瓊; 瓊; 瓊; 瓊; 瓊; ) CJK COMPATIBILITY IDEOGRAPH-2F932
    {
        std::array<uint32_t, 1> const source = {{ 0x2F932 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x74CA }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_131)
{
    // 2F933;3F1B;3F1B;3F1B;3F1B; 
    // (㼛; 㼛; 㼛; 㼛; 㼛; ) CJK COMPATIBILITY IDEOGRAPH-2F933
    {
        std::array<uint32_t, 1> const source = {{ 0x2F933 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3F1B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_132)
{
    // 2F934;7524;7524;7524;7524; 
    // (甤; 甤; 甤; 甤; 甤; ) CJK COMPATIBILITY IDEOGRAPH-2F934
    {
        std::array<uint32_t, 1> const source = {{ 0x2F934 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7524 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_133)
{
    // 2F935;24C36;24C36;24C36;24C36; 
    // (𤰶; 𤰶; 𤰶; 𤰶; 𤰶; ) CJK COMPATIBILITY IDEOGRAPH-2F935
    {
        std::array<uint32_t, 1> const source = {{ 0x2F935 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24C36 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_134)
{
    // 2F936;753E;753E;753E;753E; 
    // (甾; 甾; 甾; 甾; 甾; ) CJK COMPATIBILITY IDEOGRAPH-2F936
    {
        std::array<uint32_t, 1> const source = {{ 0x2F936 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x753E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_135)
{
    // 2F937;24C92;24C92;24C92;24C92; 
    // (𤲒; 𤲒; 𤲒; 𤲒; 𤲒; ) CJK COMPATIBILITY IDEOGRAPH-2F937
    {
        std::array<uint32_t, 1> const source = {{ 0x2F937 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24C92 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_136)
{
    // 2F938;7570;7570;7570;7570; 
    // (異; 異; 異; 異; 異; ) CJK COMPATIBILITY IDEOGRAPH-2F938
    {
        std::array<uint32_t, 1> const source = {{ 0x2F938 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7570 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_137)
{
    // 2F939;2219F;2219F;2219F;2219F; 
    // (𢆟; 𢆟; 𢆟; 𢆟; 𢆟; ) CJK COMPATIBILITY IDEOGRAPH-2F939
    {
        std::array<uint32_t, 1> const source = {{ 0x2F939 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2219F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_138)
{
    // 2F93A;7610;7610;7610;7610; 
    // (瘐; 瘐; 瘐; 瘐; 瘐; ) CJK COMPATIBILITY IDEOGRAPH-2F93A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7610 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_139)
{
    // 2F93B;24FA1;24FA1;24FA1;24FA1; 
    // (𤾡; 𤾡; 𤾡; 𤾡; 𤾡; ) CJK COMPATIBILITY IDEOGRAPH-2F93B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24FA1 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_140)
{
    // 2F93C;24FB8;24FB8;24FB8;24FB8; 
    // (𤾸; 𤾸; 𤾸; 𤾸; 𤾸; ) CJK COMPATIBILITY IDEOGRAPH-2F93C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x24FB8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_141)
{
    // 2F93D;25044;25044;25044;25044; 
    // (𥁄; 𥁄; 𥁄; 𥁄; 𥁄; ) CJK COMPATIBILITY IDEOGRAPH-2F93D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25044 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_142)
{
    // 2F93E;3FFC;3FFC;3FFC;3FFC; 
    // (㿼; 㿼; 㿼; 㿼; 㿼; ) CJK COMPATIBILITY IDEOGRAPH-2F93E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x3FFC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_143)
{
    // 2F93F;4008;4008;4008;4008; 
    // (䀈; 䀈; 䀈; 䀈; 䀈; ) CJK COMPATIBILITY IDEOGRAPH-2F93F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F93F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4008 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_144)
{
    // 2F940;76F4;76F4;76F4;76F4; 
    // (直; 直; 直; 直; 直; ) CJK COMPATIBILITY IDEOGRAPH-2F940
    {
        std::array<uint32_t, 1> const source = {{ 0x2F940 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x76F4 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_145)
{
    // 2F941;250F3;250F3;250F3;250F3; 
    // (𥃳; 𥃳; 𥃳; 𥃳; 𥃳; ) CJK COMPATIBILITY IDEOGRAPH-2F941
    {
        std::array<uint32_t, 1> const source = {{ 0x2F941 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x250F3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_146)
{
    // 2F942;250F2;250F2;250F2;250F2; 
    // (𥃲; 𥃲; 𥃲; 𥃲; 𥃲; ) CJK COMPATIBILITY IDEOGRAPH-2F942
    {
        std::array<uint32_t, 1> const source = {{ 0x2F942 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x250F2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_147)
{
    // 2F943;25119;25119;25119;25119; 
    // (𥄙; 𥄙; 𥄙; 𥄙; 𥄙; ) CJK COMPATIBILITY IDEOGRAPH-2F943
    {
        std::array<uint32_t, 1> const source = {{ 0x2F943 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25119 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_148)
{
    // 2F944;25133;25133;25133;25133; 
    // (𥄳; 𥄳; 𥄳; 𥄳; 𥄳; ) CJK COMPATIBILITY IDEOGRAPH-2F944
    {
        std::array<uint32_t, 1> const source = {{ 0x2F944 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25133 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_149)
{
    // 2F945;771E;771E;771E;771E; 
    // (眞; 眞; 眞; 眞; 眞; ) CJK COMPATIBILITY IDEOGRAPH-2F945
    {
        std::array<uint32_t, 1> const source = {{ 0x2F945 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x771E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_150)
{
    // 2F946;771F;771F;771F;771F; 
    // (真; 真; 真; 真; 真; ) CJK COMPATIBILITY IDEOGRAPH-2F946
    {
        std::array<uint32_t, 1> const source = {{ 0x2F946 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x771F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_151)
{
    // 2F947;771F;771F;771F;771F; 
    // (真; 真; 真; 真; 真; ) CJK COMPATIBILITY IDEOGRAPH-2F947
    {
        std::array<uint32_t, 1> const source = {{ 0x2F947 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x771F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_152)
{
    // 2F948;774A;774A;774A;774A; 
    // (睊; 睊; 睊; 睊; 睊; ) CJK COMPATIBILITY IDEOGRAPH-2F948
    {
        std::array<uint32_t, 1> const source = {{ 0x2F948 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x774A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_153)
{
    // 2F949;4039;4039;4039;4039; 
    // (䀹; 䀹; 䀹; 䀹; 䀹; ) CJK COMPATIBILITY IDEOGRAPH-2F949
    {
        std::array<uint32_t, 1> const source = {{ 0x2F949 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4039 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_154)
{
    // 2F94A;778B;778B;778B;778B; 
    // (瞋; 瞋; 瞋; 瞋; 瞋; ) CJK COMPATIBILITY IDEOGRAPH-2F94A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x778B }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_155)
{
    // 2F94B;4046;4046;4046;4046; 
    // (䁆; 䁆; 䁆; 䁆; 䁆; ) CJK COMPATIBILITY IDEOGRAPH-2F94B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4046 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_156)
{
    // 2F94C;4096;4096;4096;4096; 
    // (䂖; 䂖; 䂖; 䂖; 䂖; ) CJK COMPATIBILITY IDEOGRAPH-2F94C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4096 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_157)
{
    // 2F94D;2541D;2541D;2541D;2541D; 
    // (𥐝; 𥐝; 𥐝; 𥐝; 𥐝; ) CJK COMPATIBILITY IDEOGRAPH-2F94D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2541D }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_158)
{
    // 2F94E;784E;784E;784E;784E; 
    // (硎; 硎; 硎; 硎; 硎; ) CJK COMPATIBILITY IDEOGRAPH-2F94E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x784E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_159)
{
    // 2F94F;788C;788C;788C;788C; 
    // (碌; 碌; 碌; 碌; 碌; ) CJK COMPATIBILITY IDEOGRAPH-2F94F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F94F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x788C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_160)
{
    // 2F950;78CC;78CC;78CC;78CC; 
    // (磌; 磌; 磌; 磌; 磌; ) CJK COMPATIBILITY IDEOGRAPH-2F950
    {
        std::array<uint32_t, 1> const source = {{ 0x2F950 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x78CC }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_161)
{
    // 2F951;40E3;40E3;40E3;40E3; 
    // (䃣; 䃣; 䃣; 䃣; 䃣; ) CJK COMPATIBILITY IDEOGRAPH-2F951
    {
        std::array<uint32_t, 1> const source = {{ 0x2F951 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x40E3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_162)
{
    // 2F952;25626;25626;25626;25626; 
    // (𥘦; 𥘦; 𥘦; 𥘦; 𥘦; ) CJK COMPATIBILITY IDEOGRAPH-2F952
    {
        std::array<uint32_t, 1> const source = {{ 0x2F952 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25626 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_163)
{
    // 2F953;7956;7956;7956;7956; 
    // (祖; 祖; 祖; 祖; 祖; ) CJK COMPATIBILITY IDEOGRAPH-2F953
    {
        std::array<uint32_t, 1> const source = {{ 0x2F953 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7956 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_164)
{
    // 2F954;2569A;2569A;2569A;2569A; 
    // (𥚚; 𥚚; 𥚚; 𥚚; 𥚚; ) CJK COMPATIBILITY IDEOGRAPH-2F954
    {
        std::array<uint32_t, 1> const source = {{ 0x2F954 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2569A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_165)
{
    // 2F955;256C5;256C5;256C5;256C5; 
    // (𥛅; 𥛅; 𥛅; 𥛅; 𥛅; ) CJK COMPATIBILITY IDEOGRAPH-2F955
    {
        std::array<uint32_t, 1> const source = {{ 0x2F955 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x256C5 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_166)
{
    // 2F956;798F;798F;798F;798F; 
    // (福; 福; 福; 福; 福; ) CJK COMPATIBILITY IDEOGRAPH-2F956
    {
        std::array<uint32_t, 1> const source = {{ 0x2F956 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x798F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_167)
{
    // 2F957;79EB;79EB;79EB;79EB; 
    // (秫; 秫; 秫; 秫; 秫; ) CJK COMPATIBILITY IDEOGRAPH-2F957
    {
        std::array<uint32_t, 1> const source = {{ 0x2F957 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x79EB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_168)
{
    // 2F958;412F;412F;412F;412F; 
    // (䄯; 䄯; 䄯; 䄯; 䄯; ) CJK COMPATIBILITY IDEOGRAPH-2F958
    {
        std::array<uint32_t, 1> const source = {{ 0x2F958 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x412F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_169)
{
    // 2F959;7A40;7A40;7A40;7A40; 
    // (穀; 穀; 穀; 穀; 穀; ) CJK COMPATIBILITY IDEOGRAPH-2F959
    {
        std::array<uint32_t, 1> const source = {{ 0x2F959 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7A40 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_170)
{
    // 2F95A;7A4A;7A4A;7A4A;7A4A; 
    // (穊; 穊; 穊; 穊; 穊; ) CJK COMPATIBILITY IDEOGRAPH-2F95A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7A4A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_171)
{
    // 2F95B;7A4F;7A4F;7A4F;7A4F; 
    // (穏; 穏; 穏; 穏; 穏; ) CJK COMPATIBILITY IDEOGRAPH-2F95B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7A4F }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_172)
{
    // 2F95C;2597C;2597C;2597C;2597C; 
    // (𥥼; 𥥼; 𥥼; 𥥼; 𥥼; ) CJK COMPATIBILITY IDEOGRAPH-2F95C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2597C }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_173)
{
    // 2F95D;25AA7;25AA7;25AA7;25AA7; 
    // (𥪧; 𥪧; 𥪧; 𥪧; 𥪧; ) CJK COMPATIBILITY IDEOGRAPH-2F95D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25AA7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_174)
{
    // 2F95E;25AA7;25AA7;25AA7;25AA7; 
    // (𥪧; 𥪧; 𥪧; 𥪧; 𥪧; ) CJK COMPATIBILITY IDEOGRAPH-2F95E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25AA7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_175)
{
    // 2F95F;7AEE;7AEE;7AEE;7AEE; 
    // (竮; 竮; 竮; 竮; 竮; ) CJK COMPATIBILITY IDEOGRAPH-2F95F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F95F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7AEE }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_176)
{
    // 2F960;4202;4202;4202;4202; 
    // (䈂; 䈂; 䈂; 䈂; 䈂; ) CJK COMPATIBILITY IDEOGRAPH-2F960
    {
        std::array<uint32_t, 1> const source = {{ 0x2F960 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4202 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_177)
{
    // 2F961;25BAB;25BAB;25BAB;25BAB; 
    // (𥮫; 𥮫; 𥮫; 𥮫; 𥮫; ) CJK COMPATIBILITY IDEOGRAPH-2F961
    {
        std::array<uint32_t, 1> const source = {{ 0x2F961 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25BAB }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_178)
{
    // 2F962;7BC6;7BC6;7BC6;7BC6; 
    // (篆; 篆; 篆; 篆; 篆; ) CJK COMPATIBILITY IDEOGRAPH-2F962
    {
        std::array<uint32_t, 1> const source = {{ 0x2F962 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7BC6 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_179)
{
    // 2F963;7BC9;7BC9;7BC9;7BC9; 
    // (築; 築; 築; 築; 築; ) CJK COMPATIBILITY IDEOGRAPH-2F963
    {
        std::array<uint32_t, 1> const source = {{ 0x2F963 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7BC9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_180)
{
    // 2F964;4227;4227;4227;4227; 
    // (䈧; 䈧; 䈧; 䈧; 䈧; ) CJK COMPATIBILITY IDEOGRAPH-2F964
    {
        std::array<uint32_t, 1> const source = {{ 0x2F964 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4227 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_181)
{
    // 2F965;25C80;25C80;25C80;25C80; 
    // (𥲀; 𥲀; 𥲀; 𥲀; 𥲀; ) CJK COMPATIBILITY IDEOGRAPH-2F965
    {
        std::array<uint32_t, 1> const source = {{ 0x2F965 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25C80 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_182)
{
    // 2F966;7CD2;7CD2;7CD2;7CD2; 
    // (糒; 糒; 糒; 糒; 糒; ) CJK COMPATIBILITY IDEOGRAPH-2F966
    {
        std::array<uint32_t, 1> const source = {{ 0x2F966 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7CD2 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_183)
{
    // 2F967;42A0;42A0;42A0;42A0; 
    // (䊠; 䊠; 䊠; 䊠; 䊠; ) CJK COMPATIBILITY IDEOGRAPH-2F967
    {
        std::array<uint32_t, 1> const source = {{ 0x2F967 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x42A0 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_184)
{
    // 2F968;7CE8;7CE8;7CE8;7CE8; 
    // (糨; 糨; 糨; 糨; 糨; ) CJK COMPATIBILITY IDEOGRAPH-2F968
    {
        std::array<uint32_t, 1> const source = {{ 0x2F968 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7CE8 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_185)
{
    // 2F969;7CE3;7CE3;7CE3;7CE3; 
    // (糣; 糣; 糣; 糣; 糣; ) CJK COMPATIBILITY IDEOGRAPH-2F969
    {
        std::array<uint32_t, 1> const source = {{ 0x2F969 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7CE3 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_186)
{
    // 2F96A;7D00;7D00;7D00;7D00; 
    // (紀; 紀; 紀; 紀; 紀; ) CJK COMPATIBILITY IDEOGRAPH-2F96A
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96A }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7D00 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_187)
{
    // 2F96B;25F86;25F86;25F86;25F86; 
    // (𥾆; 𥾆; 𥾆; 𥾆; 𥾆; ) CJK COMPATIBILITY IDEOGRAPH-2F96B
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96B }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x25F86 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_188)
{
    // 2F96C;7D63;7D63;7D63;7D63; 
    // (絣; 絣; 絣; 絣; 絣; ) CJK COMPATIBILITY IDEOGRAPH-2F96C
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96C }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7D63 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_189)
{
    // 2F96D;4301;4301;4301;4301; 
    // (䌁; 䌁; 䌁; 䌁; 䌁; ) CJK COMPATIBILITY IDEOGRAPH-2F96D
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96D }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4301 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_190)
{
    // 2F96E;7DC7;7DC7;7DC7;7DC7; 
    // (緇; 緇; 緇; 緇; 緇; ) CJK COMPATIBILITY IDEOGRAPH-2F96E
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96E }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7DC7 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_191)
{
    // 2F96F;7E02;7E02;7E02;7E02; 
    // (縂; 縂; 縂; 縂; 縂; ) CJK COMPATIBILITY IDEOGRAPH-2F96F
    {
        std::array<uint32_t, 1> const source = {{ 0x2F96F }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7E02 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_192)
{
    // 2F970;7E45;7E45;7E45;7E45; 
    // (繅; 繅; 繅; 繅; 繅; ) CJK COMPATIBILITY IDEOGRAPH-2F970
    {
        std::array<uint32_t, 1> const source = {{ 0x2F970 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7E45 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_193)
{
    // 2F971;4334;4334;4334;4334; 
    // (䌴; 䌴; 䌴; 䌴; 䌴; ) CJK COMPATIBILITY IDEOGRAPH-2F971
    {
        std::array<uint32_t, 1> const source = {{ 0x2F971 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4334 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_194)
{
    // 2F972;26228;26228;26228;26228; 
    // (𦈨; 𦈨; 𦈨; 𦈨; 𦈨; ) CJK COMPATIBILITY IDEOGRAPH-2F972
    {
        std::array<uint32_t, 1> const source = {{ 0x2F972 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x26228 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_195)
{
    // 2F973;26247;26247;26247;26247; 
    // (𦉇; 𦉇; 𦉇; 𦉇; 𦉇; ) CJK COMPATIBILITY IDEOGRAPH-2F973
    {
        std::array<uint32_t, 1> const source = {{ 0x2F973 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x26247 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_196)
{
    // 2F974;4359;4359;4359;4359; 
    // (䍙; 䍙; 䍙; 䍙; 䍙; ) CJK COMPATIBILITY IDEOGRAPH-2F974
    {
        std::array<uint32_t, 1> const source = {{ 0x2F974 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x4359 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_197)
{
    // 2F975;262D9;262D9;262D9;262D9; 
    // (𦋙; 𦋙; 𦋙; 𦋙; 𦋙; ) CJK COMPATIBILITY IDEOGRAPH-2F975
    {
        std::array<uint32_t, 1> const source = {{ 0x2F975 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x262D9 }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_198)
{
    // 2F976;7F7A;7F7A;7F7A;7F7A; 
    // (罺; 罺; 罺; 罺; 罺; ) CJK COMPATIBILITY IDEOGRAPH-2F976
    {
        std::array<uint32_t, 1> const source = {{ 0x2F976 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x7F7A }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


TEST(normalization, nfd_083_199)
{
    // 2F977;2633E;2633E;2633E;2633E; 
    // (𦌾; 𦌾; 𦌾; 𦌾; 𦌾; ) CJK COMPATIBILITY IDEOGRAPH-2F977
    {
        std::array<uint32_t, 1> const source = {{ 0x2F977 }};
        boost::text::string str = boost::text::to_string(source.begin(), source.end());
        std::array<uint32_t, 1> const dest = {{ 0x2633E }};

        boost::text::normalize_to_nfd(str);

        boost::text::utf32_range utf32_range(str);

        EXPECT_EQ(std::distance(utf32_range.begin(), utf32_range.end()), dest.size());

        auto dest_it = dest.begin();
        int i = 0;
        for (auto x : utf32_range) {
            EXPECT_EQ(x, *dest_it) << "iteration " << i;
            ++dest_it;
            ++i;
        }

    }
}


