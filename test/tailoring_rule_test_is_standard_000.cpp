
// Warning! This file is autogenerated.
#include <boost/text/collation_tailoring.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/data/all.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

tailored_collation_element_table const & table()
{
    static tailored_collation_element_table retval =
        make_tailored_collation_element_table(
            data::is::standard_collation_tailoring(),
            "is::standard_collation_tailoring()", error, warning);
    return retval;
}
TEST(tailoring, is_standard_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0062),
        std::vector<uint32_t>(1, 0x00e1),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0062),
        std::vector<uint32_t>(1, 0x00e1),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e1),
        std::vector<uint32_t>(1, 0x00c1),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e1),
        std::vector<uint32_t>(1, 0x00c1),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0062),
        std::vector<uint32_t>(1, 0x00c1),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0064),
        std::vector<uint32_t>(1, 0x0111),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0064),
        std::vector<uint32_t>(1, 0x0111),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0111),
        std::vector<uint32_t>(1, 0x0110),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0111),
        std::vector<uint32_t>(1, 0x0110),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0110),
        std::vector<uint32_t>(1, 0x00f0),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f0),
        std::vector<uint32_t>(1, 0x00d0),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f0),
        std::vector<uint32_t>(1, 0x00d0),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0066),
        std::vector<uint32_t>(1, 0x00e9),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0066),
        std::vector<uint32_t>(1, 0x00e9),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e9),
        std::vector<uint32_t>(1, 0x00c9),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e9),
        std::vector<uint32_t>(1, 0x00c9),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0066),
        std::vector<uint32_t>(1, 0x00c9),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x006a),
        std::vector<uint32_t>(1, 0x00ed),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x006a),
        std::vector<uint32_t>(1, 0x00ed),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00ed),
        std::vector<uint32_t>(1, 0x00cd),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00ed),
        std::vector<uint32_t>(1, 0x00cd),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x006a),
        std::vector<uint32_t>(1, 0x00cd),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0070),
        std::vector<uint32_t>(1, 0x00f3),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0070),
        std::vector<uint32_t>(1, 0x00f3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f3),
        std::vector<uint32_t>(1, 0x00d3),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f3),
        std::vector<uint32_t>(1, 0x00d3),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0070),
        std::vector<uint32_t>(1, 0x00d3),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0076),
        std::vector<uint32_t>(1, 0x00fa),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0076),
        std::vector<uint32_t>(1, 0x00fa),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fa),
        std::vector<uint32_t>(1, 0x00da),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fa),
        std::vector<uint32_t>(1, 0x00da),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0076),
        std::vector<uint32_t>(1, 0x00da),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x007a),
        std::vector<uint32_t>(1, 0x00fd),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x007a),
        std::vector<uint32_t>(1, 0x00fd),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fd),
        std::vector<uint32_t>(1, 0x00dd),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00fd),
        std::vector<uint32_t>(1, 0x00dd),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x007a),
        std::vector<uint32_t>(1, 0x00dd),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00e6),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00e6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e6),
        std::vector<uint32_t>(1, 0x00c6),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e6),
        std::vector<uint32_t>(1, 0x00c6),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00c6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00c6),
        std::vector<uint32_t>(1, 0x00e4),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00c6),
        std::vector<uint32_t>(1, 0x00e4),
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00e4),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e4),
        std::vector<uint32_t>(1, 0x00c4),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e4),
        std::vector<uint32_t>(1, 0x00c4),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00c4),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00c4),
        std::vector<uint32_t>(1, 0x00f6),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00f6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f6),
        std::vector<uint32_t>(1, 0x00d6),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f6),
        std::vector<uint32_t>(1, 0x00d6),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00d6),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00d6),
        std::vector<uint32_t>(1, 0x00f8),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00d6),
        std::vector<uint32_t>(1, 0x00f8),
        table(), collation_strength::primary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00f8),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f8),
        std::vector<uint32_t>(1, 0x00d8),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00f8),
        std::vector<uint32_t>(1, 0x00d8),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00d8),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00d8),
        std::vector<uint32_t>(1, 0x00e5),
        table(), collation_strength::primary),
        -1);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00e5),
        table(), collation_strength::quaternary),
        1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e5),
        std::vector<uint32_t>(1, 0x00c5),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x00e5),
        std::vector<uint32_t>(1, 0x00c5),
        table(), collation_strength::secondary),
        0);
    // before initial reset cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x01c0),
        std::vector<uint32_t>(1, 0x00c5),
        table(), collation_strength::quaternary),
        1);
}
