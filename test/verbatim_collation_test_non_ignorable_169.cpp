// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_169_000)
{
    // 0B57 0061;	
    // (ୗ) ORIYA AU LENGTH MARK	[2832 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B57, 0x0061 };
    uint32_t const ces[9] = { 0x2832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_001)
{
    // 0B57 0041;	
    // (ୗ) ORIYA AU LENGTH MARK	[2832 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B57, 0x0041 };
    uint32_t const ces[9] = { 0x2832, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_002)
{
    // 0B57 0062;	
    // (ୗ) ORIYA AU LENGTH MARK	[2832 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B57, 0x0062 };
    uint32_t const ces[9] = { 0x2832, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_003)
{
    // 0BD0 0021;	
    // (ௐ) TAMIL OM	[2833 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD0, 0x0021 };
    uint32_t const ces[9] = { 0x2833, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_004)
{
    // 0BD0 003F;	
    // (ௐ) TAMIL OM	[2833 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD0, 0x003F };
    uint32_t const ces[9] = { 0x2833, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_005)
{
    // 0BD0 0061;	
    // (ௐ) TAMIL OM	[2833 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD0, 0x0061 };
    uint32_t const ces[9] = { 0x2833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_006)
{
    // 0BD0 0041;	
    // (ௐ) TAMIL OM	[2833 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BD0, 0x0041 };
    uint32_t const ces[9] = { 0x2833, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_007)
{
    // 0BD0 0062;	
    // (ௐ) TAMIL OM	[2833 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD0, 0x0062 };
    uint32_t const ces[9] = { 0x2833, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_008)
{
    // 0B85 0021;	
    // (அ) TAMIL LETTER A	[2834 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B85, 0x0021 };
    uint32_t const ces[9] = { 0x2834, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_009)
{
    // 0B85 003F;	
    // (அ) TAMIL LETTER A	[2834 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B85, 0x003F };
    uint32_t const ces[9] = { 0x2834, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_010)
{
    // 0B85 0061;	
    // (அ) TAMIL LETTER A	[2834 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B85, 0x0061 };
    uint32_t const ces[9] = { 0x2834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_011)
{
    // 0B85 0041;	
    // (அ) TAMIL LETTER A	[2834 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B85, 0x0041 };
    uint32_t const ces[9] = { 0x2834, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_012)
{
    // 0B85 0062;	
    // (அ) TAMIL LETTER A	[2834 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B85, 0x0062 };
    uint32_t const ces[9] = { 0x2834, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_013)
{
    // 0B86 0021;	
    // (ஆ) TAMIL LETTER AA	[2835 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B86, 0x0021 };
    uint32_t const ces[9] = { 0x2835, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_014)
{
    // 0B86 003F;	
    // (ஆ) TAMIL LETTER AA	[2835 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B86, 0x003F };
    uint32_t const ces[9] = { 0x2835, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_015)
{
    // 0B86 0061;	
    // (ஆ) TAMIL LETTER AA	[2835 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B86, 0x0061 };
    uint32_t const ces[9] = { 0x2835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_016)
{
    // 0B86 0041;	
    // (ஆ) TAMIL LETTER AA	[2835 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B86, 0x0041 };
    uint32_t const ces[9] = { 0x2835, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_017)
{
    // 0B86 0062;	
    // (ஆ) TAMIL LETTER AA	[2835 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B86, 0x0062 };
    uint32_t const ces[9] = { 0x2835, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_018)
{
    // 0B87 0021;	
    // (இ) TAMIL LETTER I	[2836 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B87, 0x0021 };
    uint32_t const ces[9] = { 0x2836, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_019)
{
    // 0B87 003F;	
    // (இ) TAMIL LETTER I	[2836 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B87, 0x003F };
    uint32_t const ces[9] = { 0x2836, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_020)
{
    // 0B87 0061;	
    // (இ) TAMIL LETTER I	[2836 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B87, 0x0061 };
    uint32_t const ces[9] = { 0x2836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_021)
{
    // 0B87 0041;	
    // (இ) TAMIL LETTER I	[2836 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B87, 0x0041 };
    uint32_t const ces[9] = { 0x2836, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_022)
{
    // 0B87 0062;	
    // (இ) TAMIL LETTER I	[2836 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B87, 0x0062 };
    uint32_t const ces[9] = { 0x2836, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_023)
{
    // 0B88 0021;	
    // (ஈ) TAMIL LETTER II	[2837 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B88, 0x0021 };
    uint32_t const ces[9] = { 0x2837, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_024)
{
    // 0B88 003F;	
    // (ஈ) TAMIL LETTER II	[2837 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B88, 0x003F };
    uint32_t const ces[9] = { 0x2837, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_025)
{
    // 0B88 0061;	
    // (ஈ) TAMIL LETTER II	[2837 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B88, 0x0061 };
    uint32_t const ces[9] = { 0x2837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_026)
{
    // 0B88 0041;	
    // (ஈ) TAMIL LETTER II	[2837 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B88, 0x0041 };
    uint32_t const ces[9] = { 0x2837, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_027)
{
    // 0B88 0062;	
    // (ஈ) TAMIL LETTER II	[2837 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B88, 0x0062 };
    uint32_t const ces[9] = { 0x2837, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_028)
{
    // 0B89 0021;	
    // (உ) TAMIL LETTER U	[2838 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B89, 0x0021 };
    uint32_t const ces[9] = { 0x2838, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_029)
{
    // 0B89 003F;	
    // (உ) TAMIL LETTER U	[2838 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B89, 0x003F };
    uint32_t const ces[9] = { 0x2838, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_030)
{
    // 0B89 0061;	
    // (உ) TAMIL LETTER U	[2838 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B89, 0x0061 };
    uint32_t const ces[9] = { 0x2838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_031)
{
    // 0B89 0041;	
    // (உ) TAMIL LETTER U	[2838 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B89, 0x0041 };
    uint32_t const ces[9] = { 0x2838, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_032)
{
    // 0B89 0062;	
    // (உ) TAMIL LETTER U	[2838 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B89, 0x0062 };
    uint32_t const ces[9] = { 0x2838, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_033)
{
    // 0B8A 0021;	
    // (ஊ) TAMIL LETTER UU	[2839 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8A, 0x0021 };
    uint32_t const ces[9] = { 0x2839, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_034)
{
    // 0B8A 003F;	
    // (ஊ) TAMIL LETTER UU	[2839 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8A, 0x003F };
    uint32_t const ces[9] = { 0x2839, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_035)
{
    // 0B8A 0061;	
    // (ஊ) TAMIL LETTER UU	[2839 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8A, 0x0061 };
    uint32_t const ces[9] = { 0x2839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_036)
{
    // 0B8A 0041;	
    // (ஊ) TAMIL LETTER UU	[2839 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B8A, 0x0041 };
    uint32_t const ces[9] = { 0x2839, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_037)
{
    // 0B8A 0062;	
    // (ஊ) TAMIL LETTER UU	[2839 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8A, 0x0062 };
    uint32_t const ces[9] = { 0x2839, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_038)
{
    // 0B8E 0021;	
    // (எ) TAMIL LETTER E	[283A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8E, 0x0021 };
    uint32_t const ces[9] = { 0x283A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_039)
{
    // 0B8E 003F;	
    // (எ) TAMIL LETTER E	[283A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8E, 0x003F };
    uint32_t const ces[9] = { 0x283A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_040)
{
    // 0B8E 0061;	
    // (எ) TAMIL LETTER E	[283A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8E, 0x0061 };
    uint32_t const ces[9] = { 0x283A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_041)
{
    // 0B8E 0041;	
    // (எ) TAMIL LETTER E	[283A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B8E, 0x0041 };
    uint32_t const ces[9] = { 0x283A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_042)
{
    // 0B8E 0062;	
    // (எ) TAMIL LETTER E	[283A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8E, 0x0062 };
    uint32_t const ces[9] = { 0x283A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_043)
{
    // 0B8F 0021;	
    // (ஏ) TAMIL LETTER EE	[283B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8F, 0x0021 };
    uint32_t const ces[9] = { 0x283B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_044)
{
    // 0B8F 003F;	
    // (ஏ) TAMIL LETTER EE	[283B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8F, 0x003F };
    uint32_t const ces[9] = { 0x283B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_045)
{
    // 0B8F 0061;	
    // (ஏ) TAMIL LETTER EE	[283B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8F, 0x0061 };
    uint32_t const ces[9] = { 0x283B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_046)
{
    // 0B8F 0041;	
    // (ஏ) TAMIL LETTER EE	[283B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B8F, 0x0041 };
    uint32_t const ces[9] = { 0x283B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_047)
{
    // 0B8F 0062;	
    // (ஏ) TAMIL LETTER EE	[283B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B8F, 0x0062 };
    uint32_t const ces[9] = { 0x283B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_048)
{
    // 0B90 0021;	
    // (ஐ) TAMIL LETTER AI	[283C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B90, 0x0021 };
    uint32_t const ces[9] = { 0x283C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_049)
{
    // 0B90 003F;	
    // (ஐ) TAMIL LETTER AI	[283C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B90, 0x003F };
    uint32_t const ces[9] = { 0x283C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_050)
{
    // 0B90 0061;	
    // (ஐ) TAMIL LETTER AI	[283C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B90, 0x0061 };
    uint32_t const ces[9] = { 0x283C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_051)
{
    // 0B90 0041;	
    // (ஐ) TAMIL LETTER AI	[283C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B90, 0x0041 };
    uint32_t const ces[9] = { 0x283C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_052)
{
    // 0B90 0062;	
    // (ஐ) TAMIL LETTER AI	[283C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B90, 0x0062 };
    uint32_t const ces[9] = { 0x283C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_053)
{
    // 0B92 0021;	
    // (ஒ) TAMIL LETTER O	[283D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B92, 0x0021 };
    uint32_t const ces[9] = { 0x283D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_054)
{
    // 0B92 003F;	
    // (ஒ) TAMIL LETTER O	[283D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B92, 0x003F };
    uint32_t const ces[9] = { 0x283D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_055)
{
    // 0B92 0061;	
    // (ஒ) TAMIL LETTER O	[283D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B92, 0x0061 };
    uint32_t const ces[9] = { 0x283D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_056)
{
    // 0B92 0041;	
    // (ஒ) TAMIL LETTER O	[283D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B92, 0x0041 };
    uint32_t const ces[9] = { 0x283D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_057)
{
    // 0B92 0062;	
    // (ஒ) TAMIL LETTER O	[283D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B92, 0x0062 };
    uint32_t const ces[9] = { 0x283D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_058)
{
    // 0B92 0001 0BD7 0061;	
    // (ஒ'\u0001'ௗ) TAMIL LETTER O, <START OF HEADING>, TAMIL AU LENGTH MARK	[283D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B92, 0x0001, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x283D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_059)
{
    // 0B92 0591 0BD7 0061;	
    // (ஒ֑ௗ) TAMIL LETTER O, HEBREW ACCENT ETNAHTA, TAMIL AU LENGTH MARK	[283D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B92, 0x0591, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x283D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_060)
{
    // 0B92 1D165 0BD7 0061;	
    // (ஒ𝅥ௗ) TAMIL LETTER O, MUSICAL SYMBOL COMBINING STEM, TAMIL AU LENGTH MARK	[283D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0B92, 0x1D165, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x283D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_061)
{
    // 0B93 0021;	
    // (ஓ) TAMIL LETTER OO	[283E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B93, 0x0021 };
    uint32_t const ces[9] = { 0x283E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_062)
{
    // 0B93 003F;	
    // (ஓ) TAMIL LETTER OO	[283E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B93, 0x003F };
    uint32_t const ces[9] = { 0x283E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_063)
{
    // 0B93 0061;	
    // (ஓ) TAMIL LETTER OO	[283E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B93, 0x0061 };
    uint32_t const ces[9] = { 0x283E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_064)
{
    // 0B93 0041;	
    // (ஓ) TAMIL LETTER OO	[283E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B93, 0x0041 };
    uint32_t const ces[9] = { 0x283E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_065)
{
    // 0B93 0062;	
    // (ஓ) TAMIL LETTER OO	[283E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B93, 0x0062 };
    uint32_t const ces[9] = { 0x283E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_066)
{
    // 0B92 0BD7 0021;	
    // (ஔ) TAMIL LETTER O, TAMIL AU LENGTH MARK	[283F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B92, 0x0BD7, 0x0021 };
    uint32_t const ces[9] = { 0x283F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_067)
{
    // 0B94 0021;	
    // (ஔ) TAMIL LETTER AU	[283F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B94, 0x0021 };
    uint32_t const ces[9] = { 0x283F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_068)
{
    // 0B92 0BD7 003F;	
    // (ஔ) TAMIL LETTER O, TAMIL AU LENGTH MARK	[283F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B92, 0x0BD7, 0x003F };
    uint32_t const ces[9] = { 0x283F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_069)
{
    // 0B94 003F;	
    // (ஔ) TAMIL LETTER AU	[283F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B94, 0x003F };
    uint32_t const ces[9] = { 0x283F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_070)
{
    // 0B92 0BD7 0061;	
    // (ஔ) TAMIL LETTER O, TAMIL AU LENGTH MARK	[283F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B92, 0x0BD7, 0x0061 };
    uint32_t const ces[9] = { 0x283F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_071)
{
    // 0B94 0061;	
    // (ஔ) TAMIL LETTER AU	[283F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B94, 0x0061 };
    uint32_t const ces[9] = { 0x283F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_072)
{
    // 0B92 0BD7 0041;	
    // (ஔ) TAMIL LETTER O, TAMIL AU LENGTH MARK	[283F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0B92, 0x0BD7, 0x0041 };
    uint32_t const ces[9] = { 0x283F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_073)
{
    // 0B94 0041;	
    // (ஔ) TAMIL LETTER AU	[283F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B94, 0x0041 };
    uint32_t const ces[9] = { 0x283F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_074)
{
    // 0B92 0BD7 0062;	
    // (ஔ) TAMIL LETTER O, TAMIL AU LENGTH MARK	[283F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0B92, 0x0BD7, 0x0062 };
    uint32_t const ces[9] = { 0x283F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_075)
{
    // 0B94 0062;	
    // (ஔ) TAMIL LETTER AU	[283F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B94, 0x0062 };
    uint32_t const ces[9] = { 0x283F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_076)
{
    // 0B83 0021;	
    // (ஃ) TAMIL SIGN VISARGA	[2840 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B83, 0x0021 };
    uint32_t const ces[9] = { 0x2840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_077)
{
    // 0B83 003F;	
    // (ஃ) TAMIL SIGN VISARGA	[2840 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B83, 0x003F };
    uint32_t const ces[9] = { 0x2840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_078)
{
    // 0B83 0061;	
    // (ஃ) TAMIL SIGN VISARGA	[2840 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B83, 0x0061 };
    uint32_t const ces[9] = { 0x2840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_079)
{
    // 0B83 0041;	
    // (ஃ) TAMIL SIGN VISARGA	[2840 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B83, 0x0041 };
    uint32_t const ces[9] = { 0x2840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_080)
{
    // 0B83 0062;	
    // (ஃ) TAMIL SIGN VISARGA	[2840 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B83, 0x0062 };
    uint32_t const ces[9] = { 0x2840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_081)
{
    // 0B95 0021;	
    // (க) TAMIL LETTER KA	[2841 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B95, 0x0021 };
    uint32_t const ces[9] = { 0x2841, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_082)
{
    // 0B95 003F;	
    // (க) TAMIL LETTER KA	[2841 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B95, 0x003F };
    uint32_t const ces[9] = { 0x2841, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_083)
{
    // 0B95 0061;	
    // (க) TAMIL LETTER KA	[2841 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B95, 0x0061 };
    uint32_t const ces[9] = { 0x2841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_084)
{
    // 0B95 0041;	
    // (க) TAMIL LETTER KA	[2841 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B95, 0x0041 };
    uint32_t const ces[9] = { 0x2841, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_085)
{
    // 0B95 0062;	
    // (க) TAMIL LETTER KA	[2841 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B95, 0x0062 };
    uint32_t const ces[9] = { 0x2841, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_086)
{
    // 0B99 0021;	
    // (ங) TAMIL LETTER NGA	[2842 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B99, 0x0021 };
    uint32_t const ces[9] = { 0x2842, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_087)
{
    // 0B99 003F;	
    // (ங) TAMIL LETTER NGA	[2842 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B99, 0x003F };
    uint32_t const ces[9] = { 0x2842, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_088)
{
    // 0B99 0061;	
    // (ங) TAMIL LETTER NGA	[2842 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B99, 0x0061 };
    uint32_t const ces[9] = { 0x2842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_089)
{
    // 0B99 0041;	
    // (ங) TAMIL LETTER NGA	[2842 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B99, 0x0041 };
    uint32_t const ces[9] = { 0x2842, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_090)
{
    // 0B99 0062;	
    // (ங) TAMIL LETTER NGA	[2842 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B99, 0x0062 };
    uint32_t const ces[9] = { 0x2842, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_091)
{
    // 0B9A 0021;	
    // (ச) TAMIL LETTER CA	[2843 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9A, 0x0021 };
    uint32_t const ces[9] = { 0x2843, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_092)
{
    // 0B9A 003F;	
    // (ச) TAMIL LETTER CA	[2843 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9A, 0x003F };
    uint32_t const ces[9] = { 0x2843, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_093)
{
    // 0B9A 0061;	
    // (ச) TAMIL LETTER CA	[2843 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9A, 0x0061 };
    uint32_t const ces[9] = { 0x2843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_094)
{
    // 0B9A 0041;	
    // (ச) TAMIL LETTER CA	[2843 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B9A, 0x0041 };
    uint32_t const ces[9] = { 0x2843, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_095)
{
    // 0B9A 0062;	
    // (ச) TAMIL LETTER CA	[2843 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9A, 0x0062 };
    uint32_t const ces[9] = { 0x2843, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_096)
{
    // 0B9E 0021;	
    // (ஞ) TAMIL LETTER NYA	[2844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9E, 0x0021 };
    uint32_t const ces[9] = { 0x2844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_097)
{
    // 0B9E 003F;	
    // (ஞ) TAMIL LETTER NYA	[2844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9E, 0x003F };
    uint32_t const ces[9] = { 0x2844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_098)
{
    // 0B9E 0061;	
    // (ஞ) TAMIL LETTER NYA	[2844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9E, 0x0061 };
    uint32_t const ces[9] = { 0x2844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_099)
{
    // 0B9E 0041;	
    // (ஞ) TAMIL LETTER NYA	[2844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B9E, 0x0041 };
    uint32_t const ces[9] = { 0x2844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_100)
{
    // 0B9E 0062;	
    // (ஞ) TAMIL LETTER NYA	[2844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9E, 0x0062 };
    uint32_t const ces[9] = { 0x2844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_101)
{
    // 0B9F 0021;	
    // (ட) TAMIL LETTER TTA	[2845 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9F, 0x0021 };
    uint32_t const ces[9] = { 0x2845, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_102)
{
    // 0B9F 003F;	
    // (ட) TAMIL LETTER TTA	[2845 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9F, 0x003F };
    uint32_t const ces[9] = { 0x2845, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_103)
{
    // 0B9F 0061;	
    // (ட) TAMIL LETTER TTA	[2845 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9F, 0x0061 };
    uint32_t const ces[9] = { 0x2845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_104)
{
    // 0B9F 0041;	
    // (ட) TAMIL LETTER TTA	[2845 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B9F, 0x0041 };
    uint32_t const ces[9] = { 0x2845, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_105)
{
    // 0B9F 0062;	
    // (ட) TAMIL LETTER TTA	[2845 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9F, 0x0062 };
    uint32_t const ces[9] = { 0x2845, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_106)
{
    // 0BA3 0021;	
    // (ண) TAMIL LETTER NNA	[2846 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA3, 0x0021 };
    uint32_t const ces[9] = { 0x2846, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_107)
{
    // 0BA3 003F;	
    // (ண) TAMIL LETTER NNA	[2846 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA3, 0x003F };
    uint32_t const ces[9] = { 0x2846, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_108)
{
    // 0BA3 0061;	
    // (ண) TAMIL LETTER NNA	[2846 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA3, 0x0061 };
    uint32_t const ces[9] = { 0x2846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_109)
{
    // 0BA3 0041;	
    // (ண) TAMIL LETTER NNA	[2846 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BA3, 0x0041 };
    uint32_t const ces[9] = { 0x2846, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_110)
{
    // 0BA3 0062;	
    // (ண) TAMIL LETTER NNA	[2846 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA3, 0x0062 };
    uint32_t const ces[9] = { 0x2846, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_111)
{
    // 0BA4 0021;	
    // (த) TAMIL LETTER TA	[2847 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA4, 0x0021 };
    uint32_t const ces[9] = { 0x2847, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_112)
{
    // 0BA4 003F;	
    // (த) TAMIL LETTER TA	[2847 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA4, 0x003F };
    uint32_t const ces[9] = { 0x2847, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_113)
{
    // 0BA4 0061;	
    // (த) TAMIL LETTER TA	[2847 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA4, 0x0061 };
    uint32_t const ces[9] = { 0x2847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_114)
{
    // 0BA4 0041;	
    // (த) TAMIL LETTER TA	[2847 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BA4, 0x0041 };
    uint32_t const ces[9] = { 0x2847, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_115)
{
    // 0BA4 0062;	
    // (த) TAMIL LETTER TA	[2847 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA4, 0x0062 };
    uint32_t const ces[9] = { 0x2847, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_116)
{
    // 0BA8 0021;	
    // (ந) TAMIL LETTER NA	[2848 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA8, 0x0021 };
    uint32_t const ces[9] = { 0x2848, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_117)
{
    // 0BA8 003F;	
    // (ந) TAMIL LETTER NA	[2848 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA8, 0x003F };
    uint32_t const ces[9] = { 0x2848, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_118)
{
    // 0BA8 0061;	
    // (ந) TAMIL LETTER NA	[2848 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA8, 0x0061 };
    uint32_t const ces[9] = { 0x2848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_119)
{
    // 0BA8 0041;	
    // (ந) TAMIL LETTER NA	[2848 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BA8, 0x0041 };
    uint32_t const ces[9] = { 0x2848, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_120)
{
    // 0BA8 0062;	
    // (ந) TAMIL LETTER NA	[2848 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA8, 0x0062 };
    uint32_t const ces[9] = { 0x2848, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_121)
{
    // 0BAA 0021;	
    // (ப) TAMIL LETTER PA	[2849 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAA, 0x0021 };
    uint32_t const ces[9] = { 0x2849, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_122)
{
    // 0BAA 003F;	
    // (ப) TAMIL LETTER PA	[2849 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAA, 0x003F };
    uint32_t const ces[9] = { 0x2849, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_123)
{
    // 0BAA 0061;	
    // (ப) TAMIL LETTER PA	[2849 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAA, 0x0061 };
    uint32_t const ces[9] = { 0x2849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_124)
{
    // 0BAA 0041;	
    // (ப) TAMIL LETTER PA	[2849 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BAA, 0x0041 };
    uint32_t const ces[9] = { 0x2849, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_125)
{
    // 0BAA 0062;	
    // (ப) TAMIL LETTER PA	[2849 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAA, 0x0062 };
    uint32_t const ces[9] = { 0x2849, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_126)
{
    // 0BAE 0021;	
    // (ம) TAMIL LETTER MA	[284A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAE, 0x0021 };
    uint32_t const ces[9] = { 0x284A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_127)
{
    // 0BAE 003F;	
    // (ம) TAMIL LETTER MA	[284A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAE, 0x003F };
    uint32_t const ces[9] = { 0x284A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_128)
{
    // 0BAE 0061;	
    // (ம) TAMIL LETTER MA	[284A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAE, 0x0061 };
    uint32_t const ces[9] = { 0x284A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_129)
{
    // 0BAE 0041;	
    // (ம) TAMIL LETTER MA	[284A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BAE, 0x0041 };
    uint32_t const ces[9] = { 0x284A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_130)
{
    // 0BAE 0062;	
    // (ம) TAMIL LETTER MA	[284A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAE, 0x0062 };
    uint32_t const ces[9] = { 0x284A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_131)
{
    // 0BAF 0021;	
    // (ய) TAMIL LETTER YA	[284B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAF, 0x0021 };
    uint32_t const ces[9] = { 0x284B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_132)
{
    // 0BAF 003F;	
    // (ய) TAMIL LETTER YA	[284B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAF, 0x003F };
    uint32_t const ces[9] = { 0x284B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_133)
{
    // 0BAF 0061;	
    // (ய) TAMIL LETTER YA	[284B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAF, 0x0061 };
    uint32_t const ces[9] = { 0x284B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_134)
{
    // 0BAF 0041;	
    // (ய) TAMIL LETTER YA	[284B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BAF, 0x0041 };
    uint32_t const ces[9] = { 0x284B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_135)
{
    // 0BAF 0062;	
    // (ய) TAMIL LETTER YA	[284B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BAF, 0x0062 };
    uint32_t const ces[9] = { 0x284B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_136)
{
    // 0BB0 0021;	
    // (ர) TAMIL LETTER RA	[284C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB0, 0x0021 };
    uint32_t const ces[9] = { 0x284C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_137)
{
    // 0BB0 003F;	
    // (ர) TAMIL LETTER RA	[284C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB0, 0x003F };
    uint32_t const ces[9] = { 0x284C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_138)
{
    // 0BB0 0061;	
    // (ர) TAMIL LETTER RA	[284C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB0, 0x0061 };
    uint32_t const ces[9] = { 0x284C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_139)
{
    // 0BB0 0041;	
    // (ர) TAMIL LETTER RA	[284C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB0, 0x0041 };
    uint32_t const ces[9] = { 0x284C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_140)
{
    // 0BB0 0062;	
    // (ர) TAMIL LETTER RA	[284C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB0, 0x0062 };
    uint32_t const ces[9] = { 0x284C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_141)
{
    // 0BB2 0021;	
    // (ல) TAMIL LETTER LA	[284D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB2, 0x0021 };
    uint32_t const ces[9] = { 0x284D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_142)
{
    // 0BB2 003F;	
    // (ல) TAMIL LETTER LA	[284D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB2, 0x003F };
    uint32_t const ces[9] = { 0x284D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_143)
{
    // 0BB2 0061;	
    // (ல) TAMIL LETTER LA	[284D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB2, 0x0061 };
    uint32_t const ces[9] = { 0x284D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_144)
{
    // 0BB2 0041;	
    // (ல) TAMIL LETTER LA	[284D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB2, 0x0041 };
    uint32_t const ces[9] = { 0x284D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_145)
{
    // 0BB2 0062;	
    // (ல) TAMIL LETTER LA	[284D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB2, 0x0062 };
    uint32_t const ces[9] = { 0x284D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_146)
{
    // 0BB5 0021;	
    // (வ) TAMIL LETTER VA	[284E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB5, 0x0021 };
    uint32_t const ces[9] = { 0x284E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_147)
{
    // 0BB5 003F;	
    // (வ) TAMIL LETTER VA	[284E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB5, 0x003F };
    uint32_t const ces[9] = { 0x284E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_148)
{
    // 0BB5 0061;	
    // (வ) TAMIL LETTER VA	[284E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB5, 0x0061 };
    uint32_t const ces[9] = { 0x284E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_149)
{
    // 0BB5 0041;	
    // (வ) TAMIL LETTER VA	[284E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB5, 0x0041 };
    uint32_t const ces[9] = { 0x284E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_150)
{
    // 0BB5 0062;	
    // (வ) TAMIL LETTER VA	[284E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB5, 0x0062 };
    uint32_t const ces[9] = { 0x284E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_151)
{
    // 0BB4 0021;	
    // (ழ) TAMIL LETTER LLLA	[284F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB4, 0x0021 };
    uint32_t const ces[9] = { 0x284F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_152)
{
    // 0BB4 003F;	
    // (ழ) TAMIL LETTER LLLA	[284F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB4, 0x003F };
    uint32_t const ces[9] = { 0x284F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_153)
{
    // 0BB4 0061;	
    // (ழ) TAMIL LETTER LLLA	[284F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB4, 0x0061 };
    uint32_t const ces[9] = { 0x284F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_154)
{
    // 0BB4 0041;	
    // (ழ) TAMIL LETTER LLLA	[284F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB4, 0x0041 };
    uint32_t const ces[9] = { 0x284F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_155)
{
    // 0BB4 0062;	
    // (ழ) TAMIL LETTER LLLA	[284F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB4, 0x0062 };
    uint32_t const ces[9] = { 0x284F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_156)
{
    // 0BB3 0021;	
    // (ள) TAMIL LETTER LLA	[2850 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB3, 0x0021 };
    uint32_t const ces[9] = { 0x2850, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_157)
{
    // 0BB3 003F;	
    // (ள) TAMIL LETTER LLA	[2850 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB3, 0x003F };
    uint32_t const ces[9] = { 0x2850, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_158)
{
    // 0BB3 0061;	
    // (ள) TAMIL LETTER LLA	[2850 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB3, 0x0061 };
    uint32_t const ces[9] = { 0x2850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_159)
{
    // 0BB3 0041;	
    // (ள) TAMIL LETTER LLA	[2850 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB3, 0x0041 };
    uint32_t const ces[9] = { 0x2850, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_160)
{
    // 0BB3 0062;	
    // (ள) TAMIL LETTER LLA	[2850 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB3, 0x0062 };
    uint32_t const ces[9] = { 0x2850, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_161)
{
    // 0BB1 0021;	
    // (ற) TAMIL LETTER RRA	[2851 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB1, 0x0021 };
    uint32_t const ces[9] = { 0x2851, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_162)
{
    // 0BB1 003F;	
    // (ற) TAMIL LETTER RRA	[2851 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB1, 0x003F };
    uint32_t const ces[9] = { 0x2851, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_163)
{
    // 0BB1 0061;	
    // (ற) TAMIL LETTER RRA	[2851 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB1, 0x0061 };
    uint32_t const ces[9] = { 0x2851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_164)
{
    // 0BB1 0041;	
    // (ற) TAMIL LETTER RRA	[2851 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB1, 0x0041 };
    uint32_t const ces[9] = { 0x2851, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_165)
{
    // 0BB1 0062;	
    // (ற) TAMIL LETTER RRA	[2851 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB1, 0x0062 };
    uint32_t const ces[9] = { 0x2851, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_166)
{
    // 0BA9 0021;	
    // (ன) TAMIL LETTER NNNA	[2852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA9, 0x0021 };
    uint32_t const ces[9] = { 0x2852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_167)
{
    // 0BA9 003F;	
    // (ன) TAMIL LETTER NNNA	[2852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA9, 0x003F };
    uint32_t const ces[9] = { 0x2852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_168)
{
    // 0BA9 0061;	
    // (ன) TAMIL LETTER NNNA	[2852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA9, 0x0061 };
    uint32_t const ces[9] = { 0x2852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_169)
{
    // 0BA9 0041;	
    // (ன) TAMIL LETTER NNNA	[2852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BA9, 0x0041 };
    uint32_t const ces[9] = { 0x2852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_170)
{
    // 0BA9 0062;	
    // (ன) TAMIL LETTER NNNA	[2852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BA9, 0x0062 };
    uint32_t const ces[9] = { 0x2852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_171)
{
    // 0B9C 0021;	
    // (ஜ) TAMIL LETTER JA	[2853 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9C, 0x0021 };
    uint32_t const ces[9] = { 0x2853, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_172)
{
    // 0B9C 003F;	
    // (ஜ) TAMIL LETTER JA	[2853 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9C, 0x003F };
    uint32_t const ces[9] = { 0x2853, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_173)
{
    // 0B9C 0061;	
    // (ஜ) TAMIL LETTER JA	[2853 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9C, 0x0061 };
    uint32_t const ces[9] = { 0x2853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_174)
{
    // 0B9C 0041;	
    // (ஜ) TAMIL LETTER JA	[2853 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0B9C, 0x0041 };
    uint32_t const ces[9] = { 0x2853, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_175)
{
    // 0B9C 0062;	
    // (ஜ) TAMIL LETTER JA	[2853 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0B9C, 0x0062 };
    uint32_t const ces[9] = { 0x2853, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_176)
{
    // 0BB6 0021;	
    // (ஶ) TAMIL LETTER SHA	[2854 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB6, 0x0021 };
    uint32_t const ces[9] = { 0x2854, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_177)
{
    // 0BB6 003F;	
    // (ஶ) TAMIL LETTER SHA	[2854 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB6, 0x003F };
    uint32_t const ces[9] = { 0x2854, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_178)
{
    // 0BB6 0061;	
    // (ஶ) TAMIL LETTER SHA	[2854 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB6, 0x0061 };
    uint32_t const ces[9] = { 0x2854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_179)
{
    // 0BB6 0041;	
    // (ஶ) TAMIL LETTER SHA	[2854 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB6, 0x0041 };
    uint32_t const ces[9] = { 0x2854, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_180)
{
    // 0BB6 0062;	
    // (ஶ) TAMIL LETTER SHA	[2854 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB6, 0x0062 };
    uint32_t const ces[9] = { 0x2854, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_181)
{
    // 0BB7 0021;	
    // (ஷ) TAMIL LETTER SSA	[2855 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB7, 0x0021 };
    uint32_t const ces[9] = { 0x2855, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_182)
{
    // 0BB7 003F;	
    // (ஷ) TAMIL LETTER SSA	[2855 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB7, 0x003F };
    uint32_t const ces[9] = { 0x2855, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_183)
{
    // 0BB7 0061;	
    // (ஷ) TAMIL LETTER SSA	[2855 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB7, 0x0061 };
    uint32_t const ces[9] = { 0x2855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_184)
{
    // 0BB7 0041;	
    // (ஷ) TAMIL LETTER SSA	[2855 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB7, 0x0041 };
    uint32_t const ces[9] = { 0x2855, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_185)
{
    // 0BB7 0062;	
    // (ஷ) TAMIL LETTER SSA	[2855 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB7, 0x0062 };
    uint32_t const ces[9] = { 0x2855, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_186)
{
    // 0BB8 0021;	
    // (ஸ) TAMIL LETTER SA	[2856 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB8, 0x0021 };
    uint32_t const ces[9] = { 0x2856, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_187)
{
    // 0BB8 003F;	
    // (ஸ) TAMIL LETTER SA	[2856 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB8, 0x003F };
    uint32_t const ces[9] = { 0x2856, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_188)
{
    // 0BB8 0061;	
    // (ஸ) TAMIL LETTER SA	[2856 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB8, 0x0061 };
    uint32_t const ces[9] = { 0x2856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_189)
{
    // 0BB8 0041;	
    // (ஸ) TAMIL LETTER SA	[2856 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB8, 0x0041 };
    uint32_t const ces[9] = { 0x2856, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_190)
{
    // 0BB8 0062;	
    // (ஸ) TAMIL LETTER SA	[2856 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB8, 0x0062 };
    uint32_t const ces[9] = { 0x2856, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_191)
{
    // 0BB9 0021;	
    // (ஹ) TAMIL LETTER HA	[2857 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB9, 0x0021 };
    uint32_t const ces[9] = { 0x2857, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_192)
{
    // 0BB9 003F;	
    // (ஹ) TAMIL LETTER HA	[2857 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB9, 0x003F };
    uint32_t const ces[9] = { 0x2857, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_193)
{
    // 0BB9 0061;	
    // (ஹ) TAMIL LETTER HA	[2857 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB9, 0x0061 };
    uint32_t const ces[9] = { 0x2857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_194)
{
    // 0BB9 0041;	
    // (ஹ) TAMIL LETTER HA	[2857 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BB9, 0x0041 };
    uint32_t const ces[9] = { 0x2857, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_195)
{
    // 0BB9 0062;	
    // (ஹ) TAMIL LETTER HA	[2857 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BB9, 0x0062 };
    uint32_t const ces[9] = { 0x2857, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_196)
{
    // 0BBE 0021;	
    // (ா) TAMIL VOWEL SIGN AA	[2858 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBE, 0x0021 };
    uint32_t const ces[9] = { 0x2858, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_197)
{
    // 0BBE 003F;	
    // (ா) TAMIL VOWEL SIGN AA	[2858 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBE, 0x003F };
    uint32_t const ces[9] = { 0x2858, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_198)
{
    // 0BBE 0061;	
    // (ா) TAMIL VOWEL SIGN AA	[2858 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBE, 0x0061 };
    uint32_t const ces[9] = { 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_199)
{
    // 0BBE 0041;	
    // (ா) TAMIL VOWEL SIGN AA	[2858 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BBE, 0x0041 };
    uint32_t const ces[9] = { 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_200)
{
    // 0BBE 0062;	
    // (ா) TAMIL VOWEL SIGN AA	[2858 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBE, 0x0062 };
    uint32_t const ces[9] = { 0x2858, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_201)
{
    // 0BBF 0021;	
    // (ி) TAMIL VOWEL SIGN I	[2859 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBF, 0x0021 };
    uint32_t const ces[9] = { 0x2859, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_202)
{
    // 0BBF 003F;	
    // (ி) TAMIL VOWEL SIGN I	[2859 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBF, 0x003F };
    uint32_t const ces[9] = { 0x2859, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_203)
{
    // 0BBF 0061;	
    // (ி) TAMIL VOWEL SIGN I	[2859 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBF, 0x0061 };
    uint32_t const ces[9] = { 0x2859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_204)
{
    // 0BBF 0041;	
    // (ி) TAMIL VOWEL SIGN I	[2859 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BBF, 0x0041 };
    uint32_t const ces[9] = { 0x2859, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_205)
{
    // 0BBF 0062;	
    // (ி) TAMIL VOWEL SIGN I	[2859 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BBF, 0x0062 };
    uint32_t const ces[9] = { 0x2859, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_206)
{
    // 0BC0 0021;	
    // (ீ) TAMIL VOWEL SIGN II	[285A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC0, 0x0021 };
    uint32_t const ces[9] = { 0x285A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_207)
{
    // 0BC0 003F;	
    // (ீ) TAMIL VOWEL SIGN II	[285A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC0, 0x003F };
    uint32_t const ces[9] = { 0x285A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_208)
{
    // 0BC0 0061;	
    // (ீ) TAMIL VOWEL SIGN II	[285A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC0, 0x0061 };
    uint32_t const ces[9] = { 0x285A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_209)
{
    // 0BC0 0041;	
    // (ீ) TAMIL VOWEL SIGN II	[285A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC0, 0x0041 };
    uint32_t const ces[9] = { 0x285A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_210)
{
    // 0BC0 0062;	
    // (ீ) TAMIL VOWEL SIGN II	[285A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC0, 0x0062 };
    uint32_t const ces[9] = { 0x285A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_211)
{
    // 0BC1 0021;	
    // (ு) TAMIL VOWEL SIGN U	[285B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC1, 0x0021 };
    uint32_t const ces[9] = { 0x285B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_212)
{
    // 0BC1 003F;	
    // (ு) TAMIL VOWEL SIGN U	[285B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC1, 0x003F };
    uint32_t const ces[9] = { 0x285B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_213)
{
    // 0BC1 0061;	
    // (ு) TAMIL VOWEL SIGN U	[285B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC1, 0x0061 };
    uint32_t const ces[9] = { 0x285B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_214)
{
    // 0BC1 0041;	
    // (ு) TAMIL VOWEL SIGN U	[285B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC1, 0x0041 };
    uint32_t const ces[9] = { 0x285B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_215)
{
    // 0BC1 0062;	
    // (ு) TAMIL VOWEL SIGN U	[285B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC1, 0x0062 };
    uint32_t const ces[9] = { 0x285B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_216)
{
    // 0BC2 0021;	
    // (ூ) TAMIL VOWEL SIGN UU	[285C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC2, 0x0021 };
    uint32_t const ces[9] = { 0x285C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_217)
{
    // 0BC2 003F;	
    // (ூ) TAMIL VOWEL SIGN UU	[285C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC2, 0x003F };
    uint32_t const ces[9] = { 0x285C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_218)
{
    // 0BC2 0061;	
    // (ூ) TAMIL VOWEL SIGN UU	[285C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC2, 0x0061 };
    uint32_t const ces[9] = { 0x285C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_219)
{
    // 0BC2 0041;	
    // (ூ) TAMIL VOWEL SIGN UU	[285C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC2, 0x0041 };
    uint32_t const ces[9] = { 0x285C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_220)
{
    // 0BC2 0062;	
    // (ூ) TAMIL VOWEL SIGN UU	[285C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC2, 0x0062 };
    uint32_t const ces[9] = { 0x285C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_221)
{
    // 0BC6 0021;	
    // (ெ) TAMIL VOWEL SIGN E	[285D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC6, 0x0021 };
    uint32_t const ces[9] = { 0x285D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_222)
{
    // 0BC6 003F;	
    // (ெ) TAMIL VOWEL SIGN E	[285D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC6, 0x003F };
    uint32_t const ces[9] = { 0x285D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_223)
{
    // 0BC6 0061;	
    // (ெ) TAMIL VOWEL SIGN E	[285D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC6, 0x0061 };
    uint32_t const ces[9] = { 0x285D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_224)
{
    // 0BC6 0041;	
    // (ெ) TAMIL VOWEL SIGN E	[285D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC6, 0x0041 };
    uint32_t const ces[9] = { 0x285D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_225)
{
    // 0BC6 0062;	
    // (ெ) TAMIL VOWEL SIGN E	[285D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC6, 0x0062 };
    uint32_t const ces[9] = { 0x285D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_226)
{
    // 0BC6 0001 0BBE 0061;	
    // (ெ'\u0001'ா) TAMIL VOWEL SIGN E, <START OF HEADING>, TAMIL VOWEL SIGN AA	[285D 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x0001, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_227)
{
    // 0BC6 0591 0BBE 0061;	
    // (ெ֑ா) TAMIL VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TAMIL VOWEL SIGN AA	[285D 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x0591, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_228)
{
    // 0BC6 1D165 0BBE 0061;	
    // (ெ𝅥ா) TAMIL VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TAMIL VOWEL SIGN AA	[285D 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x1D165, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_229)
{
    // 0BC6 0001 0BD7 0061;	
    // (ெ'\u0001'ௗ) TAMIL VOWEL SIGN E, <START OF HEADING>, TAMIL AU LENGTH MARK	[285D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x0001, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_230)
{
    // 0BC6 0591 0BD7 0061;	
    // (ெ֑ௗ) TAMIL VOWEL SIGN E, HEBREW ACCENT ETNAHTA, TAMIL AU LENGTH MARK	[285D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x0591, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_231)
{
    // 0BC6 1D165 0BD7 0061;	
    // (ெ𝅥ௗ) TAMIL VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, TAMIL AU LENGTH MARK	[285D 2864 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC6, 0x1D165, 0x0BD7, 0x0061 };
    uint32_t const ces[12] = { 0x285D, 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_232)
{
    // 0BC7 0021;	
    // (ே) TAMIL VOWEL SIGN EE	[285E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC7, 0x0021 };
    uint32_t const ces[9] = { 0x285E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_233)
{
    // 0BC7 003F;	
    // (ே) TAMIL VOWEL SIGN EE	[285E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC7, 0x003F };
    uint32_t const ces[9] = { 0x285E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_234)
{
    // 0BC7 0061;	
    // (ே) TAMIL VOWEL SIGN EE	[285E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC7, 0x0061 };
    uint32_t const ces[9] = { 0x285E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_235)
{
    // 0BC7 0041;	
    // (ே) TAMIL VOWEL SIGN EE	[285E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC7, 0x0041 };
    uint32_t const ces[9] = { 0x285E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_236)
{
    // 0BC7 0062;	
    // (ே) TAMIL VOWEL SIGN EE	[285E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC7, 0x0062 };
    uint32_t const ces[9] = { 0x285E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_237)
{
    // 0BC7 0001 0BBE 0061;	
    // (ே'\u0001'ா) TAMIL VOWEL SIGN EE, <START OF HEADING>, TAMIL VOWEL SIGN AA	[285E 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC7, 0x0001, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285E, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_238)
{
    // 0BC7 0591 0BBE 0061;	
    // (ே֑ா) TAMIL VOWEL SIGN EE, HEBREW ACCENT ETNAHTA, TAMIL VOWEL SIGN AA	[285E 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC7, 0x0591, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285E, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_239)
{
    // 0BC7 1D165 0BBE 0061;	
    // (ே𝅥ா) TAMIL VOWEL SIGN EE, MUSICAL SYMBOL COMBINING STEM, TAMIL VOWEL SIGN AA	[285E 2858 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0BC7, 0x1D165, 0x0BBE, 0x0061 };
    uint32_t const ces[12] = { 0x285E, 0x2858, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_240)
{
    // 0BC8 0021;	
    // (ை) TAMIL VOWEL SIGN AI	[285F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC8, 0x0021 };
    uint32_t const ces[9] = { 0x285F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_241)
{
    // 0BC8 003F;	
    // (ை) TAMIL VOWEL SIGN AI	[285F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC8, 0x003F };
    uint32_t const ces[9] = { 0x285F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_242)
{
    // 0BC8 0061;	
    // (ை) TAMIL VOWEL SIGN AI	[285F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC8, 0x0061 };
    uint32_t const ces[9] = { 0x285F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_243)
{
    // 0BC8 0041;	
    // (ை) TAMIL VOWEL SIGN AI	[285F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BC8, 0x0041 };
    uint32_t const ces[9] = { 0x285F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_244)
{
    // 0BC8 0062;	
    // (ை) TAMIL VOWEL SIGN AI	[285F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BC8, 0x0062 };
    uint32_t const ces[9] = { 0x285F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_245)
{
    // 0BC6 0BBE 0021;	
    // (ொ) TAMIL VOWEL SIGN E, TAMIL VOWEL SIGN AA	[2860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BBE, 0x0021 };
    uint32_t const ces[9] = { 0x2860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_246)
{
    // 0BCA 0021;	
    // (ொ) TAMIL VOWEL SIGN O	[2860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCA, 0x0021 };
    uint32_t const ces[9] = { 0x2860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_247)
{
    // 0BC6 0BBE 003F;	
    // (ொ) TAMIL VOWEL SIGN E, TAMIL VOWEL SIGN AA	[2860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BBE, 0x003F };
    uint32_t const ces[9] = { 0x2860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_248)
{
    // 0BCA 003F;	
    // (ொ) TAMIL VOWEL SIGN O	[2860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCA, 0x003F };
    uint32_t const ces[9] = { 0x2860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_249)
{
    // 0BC6 0BBE 0061;	
    // (ொ) TAMIL VOWEL SIGN E, TAMIL VOWEL SIGN AA	[2860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BBE, 0x0061 };
    uint32_t const ces[9] = { 0x2860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_250)
{
    // 0BCA 0061;	
    // (ொ) TAMIL VOWEL SIGN O	[2860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCA, 0x0061 };
    uint32_t const ces[9] = { 0x2860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_251)
{
    // 0BC6 0BBE 0041;	
    // (ொ) TAMIL VOWEL SIGN E, TAMIL VOWEL SIGN AA	[2860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BBE, 0x0041 };
    uint32_t const ces[9] = { 0x2860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_252)
{
    // 0BCA 0041;	
    // (ொ) TAMIL VOWEL SIGN O	[2860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BCA, 0x0041 };
    uint32_t const ces[9] = { 0x2860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_253)
{
    // 0BC6 0BBE 0062;	
    // (ொ) TAMIL VOWEL SIGN E, TAMIL VOWEL SIGN AA	[2860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BBE, 0x0062 };
    uint32_t const ces[9] = { 0x2860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_254)
{
    // 0BCA 0062;	
    // (ொ) TAMIL VOWEL SIGN O	[2860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCA, 0x0062 };
    uint32_t const ces[9] = { 0x2860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_255)
{
    // 0BC7 0BBE 0021;	
    // (ோ) TAMIL VOWEL SIGN EE, TAMIL VOWEL SIGN AA	[2861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC7, 0x0BBE, 0x0021 };
    uint32_t const ces[9] = { 0x2861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_256)
{
    // 0BCB 0021;	
    // (ோ) TAMIL VOWEL SIGN OO	[2861 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCB, 0x0021 };
    uint32_t const ces[9] = { 0x2861, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_257)
{
    // 0BC7 0BBE 003F;	
    // (ோ) TAMIL VOWEL SIGN EE, TAMIL VOWEL SIGN AA	[2861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC7, 0x0BBE, 0x003F };
    uint32_t const ces[9] = { 0x2861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_258)
{
    // 0BCB 003F;	
    // (ோ) TAMIL VOWEL SIGN OO	[2861 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCB, 0x003F };
    uint32_t const ces[9] = { 0x2861, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_259)
{
    // 0BC7 0BBE 0061;	
    // (ோ) TAMIL VOWEL SIGN EE, TAMIL VOWEL SIGN AA	[2861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC7, 0x0BBE, 0x0061 };
    uint32_t const ces[9] = { 0x2861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_260)
{
    // 0BCB 0061;	
    // (ோ) TAMIL VOWEL SIGN OO	[2861 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCB, 0x0061 };
    uint32_t const ces[9] = { 0x2861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_261)
{
    // 0BC7 0BBE 0041;	
    // (ோ) TAMIL VOWEL SIGN EE, TAMIL VOWEL SIGN AA	[2861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0BC7, 0x0BBE, 0x0041 };
    uint32_t const ces[9] = { 0x2861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_262)
{
    // 0BCB 0041;	
    // (ோ) TAMIL VOWEL SIGN OO	[2861 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BCB, 0x0041 };
    uint32_t const ces[9] = { 0x2861, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_263)
{
    // 0BC7 0BBE 0062;	
    // (ோ) TAMIL VOWEL SIGN EE, TAMIL VOWEL SIGN AA	[2861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC7, 0x0BBE, 0x0062 };
    uint32_t const ces[9] = { 0x2861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_264)
{
    // 0BCB 0062;	
    // (ோ) TAMIL VOWEL SIGN OO	[2861 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCB, 0x0062 };
    uint32_t const ces[9] = { 0x2861, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_265)
{
    // 0BC6 0BD7 0021;	
    // (ௌ) TAMIL VOWEL SIGN E, TAMIL AU LENGTH MARK	[2862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BD7, 0x0021 };
    uint32_t const ces[9] = { 0x2862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_266)
{
    // 0BCC 0021;	
    // (ௌ) TAMIL VOWEL SIGN AU	[2862 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCC, 0x0021 };
    uint32_t const ces[9] = { 0x2862, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_267)
{
    // 0BC6 0BD7 003F;	
    // (ௌ) TAMIL VOWEL SIGN E, TAMIL AU LENGTH MARK	[2862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BD7, 0x003F };
    uint32_t const ces[9] = { 0x2862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_268)
{
    // 0BCC 003F;	
    // (ௌ) TAMIL VOWEL SIGN AU	[2862 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCC, 0x003F };
    uint32_t const ces[9] = { 0x2862, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_269)
{
    // 0BC6 0BD7 0061;	
    // (ௌ) TAMIL VOWEL SIGN E, TAMIL AU LENGTH MARK	[2862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BD7, 0x0061 };
    uint32_t const ces[9] = { 0x2862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_270)
{
    // 0BCC 0061;	
    // (ௌ) TAMIL VOWEL SIGN AU	[2862 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCC, 0x0061 };
    uint32_t const ces[9] = { 0x2862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_271)
{
    // 0BC6 0BD7 0041;	
    // (ௌ) TAMIL VOWEL SIGN E, TAMIL AU LENGTH MARK	[2862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BD7, 0x0041 };
    uint32_t const ces[9] = { 0x2862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_272)
{
    // 0BCC 0041;	
    // (ௌ) TAMIL VOWEL SIGN AU	[2862 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BCC, 0x0041 };
    uint32_t const ces[9] = { 0x2862, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_273)
{
    // 0BC6 0BD7 0062;	
    // (ௌ) TAMIL VOWEL SIGN E, TAMIL AU LENGTH MARK	[2862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0BC6, 0x0BD7, 0x0062 };
    uint32_t const ces[9] = { 0x2862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_274)
{
    // 0BCC 0062;	
    // (ௌ) TAMIL VOWEL SIGN AU	[2862 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCC, 0x0062 };
    uint32_t const ces[9] = { 0x2862, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_275)
{
    // 0334 0BCD;	
    // (்) TAMIL SIGN VIRAMA	[2863 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0BCD };
    uint32_t const ces[8] = { 0x2863, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_276)
{
    // 0BCD 0334;	
    // (்) TAMIL SIGN VIRAMA	[2863 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCD, 0x0334 };
    uint32_t const ces[8] = { 0x2863, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_277)
{
    // 0BCD 0021;	
    // (்) TAMIL SIGN VIRAMA	[2863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCD, 0x0021 };
    uint32_t const ces[9] = { 0x2863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_278)
{
    // 0BCD 003F;	
    // (்) TAMIL SIGN VIRAMA	[2863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCD, 0x003F };
    uint32_t const ces[9] = { 0x2863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_279)
{
    // 0BCD 0061;	
    // (்) TAMIL SIGN VIRAMA	[2863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCD, 0x0061 };
    uint32_t const ces[9] = { 0x2863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_280)
{
    // 0BCD 0041;	
    // (்) TAMIL SIGN VIRAMA	[2863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BCD, 0x0041 };
    uint32_t const ces[9] = { 0x2863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_281)
{
    // 0BCD 0062;	
    // (்) TAMIL SIGN VIRAMA	[2863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BCD, 0x0062 };
    uint32_t const ces[9] = { 0x2863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_282)
{
    // 0BD7 0021;	
    // (ௗ) TAMIL AU LENGTH MARK	[2864 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD7, 0x0021 };
    uint32_t const ces[9] = { 0x2864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_283)
{
    // 0BD7 003F;	
    // (ௗ) TAMIL AU LENGTH MARK	[2864 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD7, 0x003F };
    uint32_t const ces[9] = { 0x2864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_284)
{
    // 0BD7 0061;	
    // (ௗ) TAMIL AU LENGTH MARK	[2864 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD7, 0x0061 };
    uint32_t const ces[9] = { 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_285)
{
    // 0BD7 0041;	
    // (ௗ) TAMIL AU LENGTH MARK	[2864 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0BD7, 0x0041 };
    uint32_t const ces[9] = { 0x2864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_286)
{
    // 0BD7 0062;	
    // (ௗ) TAMIL AU LENGTH MARK	[2864 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0BD7, 0x0062 };
    uint32_t const ces[9] = { 0x2864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_287)
{
    // 0C05 0021;	
    // (అ) TELUGU LETTER A	[2865 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C05, 0x0021 };
    uint32_t const ces[9] = { 0x2865, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_288)
{
    // 0C05 003F;	
    // (అ) TELUGU LETTER A	[2865 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C05, 0x003F };
    uint32_t const ces[9] = { 0x2865, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_289)
{
    // 0C05 0061;	
    // (అ) TELUGU LETTER A	[2865 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C05, 0x0061 };
    uint32_t const ces[9] = { 0x2865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_290)
{
    // 0C05 0041;	
    // (అ) TELUGU LETTER A	[2865 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C05, 0x0041 };
    uint32_t const ces[9] = { 0x2865, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_291)
{
    // 0C05 0062;	
    // (అ) TELUGU LETTER A	[2865 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C05, 0x0062 };
    uint32_t const ces[9] = { 0x2865, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_292)
{
    // 0C06 0021;	
    // (ఆ) TELUGU LETTER AA	[2866 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C06, 0x0021 };
    uint32_t const ces[9] = { 0x2866, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_293)
{
    // 0C06 003F;	
    // (ఆ) TELUGU LETTER AA	[2866 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C06, 0x003F };
    uint32_t const ces[9] = { 0x2866, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_294)
{
    // 0C06 0061;	
    // (ఆ) TELUGU LETTER AA	[2866 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C06, 0x0061 };
    uint32_t const ces[9] = { 0x2866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_295)
{
    // 0C06 0041;	
    // (ఆ) TELUGU LETTER AA	[2866 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C06, 0x0041 };
    uint32_t const ces[9] = { 0x2866, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_296)
{
    // 0C06 0062;	
    // (ఆ) TELUGU LETTER AA	[2866 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C06, 0x0062 };
    uint32_t const ces[9] = { 0x2866, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_297)
{
    // 0C07 0021;	
    // (ఇ) TELUGU LETTER I	[2867 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C07, 0x0021 };
    uint32_t const ces[9] = { 0x2867, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_298)
{
    // 0C07 003F;	
    // (ఇ) TELUGU LETTER I	[2867 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C07, 0x003F };
    uint32_t const ces[9] = { 0x2867, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_299)
{
    // 0C07 0061;	
    // (ఇ) TELUGU LETTER I	[2867 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C07, 0x0061 };
    uint32_t const ces[9] = { 0x2867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_300)
{
    // 0C07 0041;	
    // (ఇ) TELUGU LETTER I	[2867 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C07, 0x0041 };
    uint32_t const ces[9] = { 0x2867, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_301)
{
    // 0C07 0062;	
    // (ఇ) TELUGU LETTER I	[2867 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C07, 0x0062 };
    uint32_t const ces[9] = { 0x2867, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_302)
{
    // 0C08 0021;	
    // (ఈ) TELUGU LETTER II	[2868 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C08, 0x0021 };
    uint32_t const ces[9] = { 0x2868, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_303)
{
    // 0C08 003F;	
    // (ఈ) TELUGU LETTER II	[2868 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C08, 0x003F };
    uint32_t const ces[9] = { 0x2868, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_304)
{
    // 0C08 0061;	
    // (ఈ) TELUGU LETTER II	[2868 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C08, 0x0061 };
    uint32_t const ces[9] = { 0x2868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_305)
{
    // 0C08 0041;	
    // (ఈ) TELUGU LETTER II	[2868 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C08, 0x0041 };
    uint32_t const ces[9] = { 0x2868, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_306)
{
    // 0C08 0062;	
    // (ఈ) TELUGU LETTER II	[2868 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C08, 0x0062 };
    uint32_t const ces[9] = { 0x2868, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_307)
{
    // 0C09 0021;	
    // (ఉ) TELUGU LETTER U	[2869 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C09, 0x0021 };
    uint32_t const ces[9] = { 0x2869, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_308)
{
    // 0C09 003F;	
    // (ఉ) TELUGU LETTER U	[2869 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C09, 0x003F };
    uint32_t const ces[9] = { 0x2869, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_309)
{
    // 0C09 0061;	
    // (ఉ) TELUGU LETTER U	[2869 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C09, 0x0061 };
    uint32_t const ces[9] = { 0x2869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_310)
{
    // 0C09 0041;	
    // (ఉ) TELUGU LETTER U	[2869 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C09, 0x0041 };
    uint32_t const ces[9] = { 0x2869, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_311)
{
    // 0C09 0062;	
    // (ఉ) TELUGU LETTER U	[2869 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C09, 0x0062 };
    uint32_t const ces[9] = { 0x2869, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_312)
{
    // 0C0A 0021;	
    // (ఊ) TELUGU LETTER UU	[286A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0A, 0x0021 };
    uint32_t const ces[9] = { 0x286A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_313)
{
    // 0C0A 003F;	
    // (ఊ) TELUGU LETTER UU	[286A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0A, 0x003F };
    uint32_t const ces[9] = { 0x286A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_314)
{
    // 0C0A 0061;	
    // (ఊ) TELUGU LETTER UU	[286A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0A, 0x0061 };
    uint32_t const ces[9] = { 0x286A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_315)
{
    // 0C0A 0041;	
    // (ఊ) TELUGU LETTER UU	[286A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C0A, 0x0041 };
    uint32_t const ces[9] = { 0x286A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_316)
{
    // 0C0A 0062;	
    // (ఊ) TELUGU LETTER UU	[286A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0A, 0x0062 };
    uint32_t const ces[9] = { 0x286A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_317)
{
    // 0C0B 0021;	
    // (ఋ) TELUGU LETTER VOCALIC R	[286B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0B, 0x0021 };
    uint32_t const ces[9] = { 0x286B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_318)
{
    // 0C0B 003F;	
    // (ఋ) TELUGU LETTER VOCALIC R	[286B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0B, 0x003F };
    uint32_t const ces[9] = { 0x286B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_319)
{
    // 0C0B 0061;	
    // (ఋ) TELUGU LETTER VOCALIC R	[286B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0B, 0x0061 };
    uint32_t const ces[9] = { 0x286B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_320)
{
    // 0C0B 0041;	
    // (ఋ) TELUGU LETTER VOCALIC R	[286B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C0B, 0x0041 };
    uint32_t const ces[9] = { 0x286B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_321)
{
    // 0C0B 0062;	
    // (ఋ) TELUGU LETTER VOCALIC R	[286B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0B, 0x0062 };
    uint32_t const ces[9] = { 0x286B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_322)
{
    // 0C60 0021;	
    // (ౠ) TELUGU LETTER VOCALIC RR	[286C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C60, 0x0021 };
    uint32_t const ces[9] = { 0x286C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_323)
{
    // 0C60 003F;	
    // (ౠ) TELUGU LETTER VOCALIC RR	[286C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C60, 0x003F };
    uint32_t const ces[9] = { 0x286C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_324)
{
    // 0C60 0061;	
    // (ౠ) TELUGU LETTER VOCALIC RR	[286C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C60, 0x0061 };
    uint32_t const ces[9] = { 0x286C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_325)
{
    // 0C60 0041;	
    // (ౠ) TELUGU LETTER VOCALIC RR	[286C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C60, 0x0041 };
    uint32_t const ces[9] = { 0x286C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_326)
{
    // 0C60 0062;	
    // (ౠ) TELUGU LETTER VOCALIC RR	[286C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C60, 0x0062 };
    uint32_t const ces[9] = { 0x286C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_327)
{
    // 0C0C 0021;	
    // (ఌ) TELUGU LETTER VOCALIC L	[286D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0C, 0x0021 };
    uint32_t const ces[9] = { 0x286D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_328)
{
    // 0C0C 003F;	
    // (ఌ) TELUGU LETTER VOCALIC L	[286D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0C, 0x003F };
    uint32_t const ces[9] = { 0x286D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_329)
{
    // 0C0C 0061;	
    // (ఌ) TELUGU LETTER VOCALIC L	[286D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0C, 0x0061 };
    uint32_t const ces[9] = { 0x286D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_330)
{
    // 0C0C 0041;	
    // (ఌ) TELUGU LETTER VOCALIC L	[286D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C0C, 0x0041 };
    uint32_t const ces[9] = { 0x286D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_331)
{
    // 0C0C 0062;	
    // (ఌ) TELUGU LETTER VOCALIC L	[286D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0C, 0x0062 };
    uint32_t const ces[9] = { 0x286D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_332)
{
    // 0C61 0021;	
    // (ౡ) TELUGU LETTER VOCALIC LL	[286E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C61, 0x0021 };
    uint32_t const ces[9] = { 0x286E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_333)
{
    // 0C61 003F;	
    // (ౡ) TELUGU LETTER VOCALIC LL	[286E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C61, 0x003F };
    uint32_t const ces[9] = { 0x286E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_334)
{
    // 0C61 0061;	
    // (ౡ) TELUGU LETTER VOCALIC LL	[286E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C61, 0x0061 };
    uint32_t const ces[9] = { 0x286E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_335)
{
    // 0C61 0041;	
    // (ౡ) TELUGU LETTER VOCALIC LL	[286E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C61, 0x0041 };
    uint32_t const ces[9] = { 0x286E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_336)
{
    // 0C61 0062;	
    // (ౡ) TELUGU LETTER VOCALIC LL	[286E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C61, 0x0062 };
    uint32_t const ces[9] = { 0x286E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_337)
{
    // 0C0E 0021;	
    // (ఎ) TELUGU LETTER E	[286F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0E, 0x0021 };
    uint32_t const ces[9] = { 0x286F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_338)
{
    // 0C0E 003F;	
    // (ఎ) TELUGU LETTER E	[286F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0E, 0x003F };
    uint32_t const ces[9] = { 0x286F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_339)
{
    // 0C0E 0061;	
    // (ఎ) TELUGU LETTER E	[286F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0E, 0x0061 };
    uint32_t const ces[9] = { 0x286F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_340)
{
    // 0C0E 0041;	
    // (ఎ) TELUGU LETTER E	[286F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C0E, 0x0041 };
    uint32_t const ces[9] = { 0x286F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_341)
{
    // 0C0E 0062;	
    // (ఎ) TELUGU LETTER E	[286F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0E, 0x0062 };
    uint32_t const ces[9] = { 0x286F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_342)
{
    // 0C0F 0021;	
    // (ఏ) TELUGU LETTER EE	[2870 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0F, 0x0021 };
    uint32_t const ces[9] = { 0x2870, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_343)
{
    // 0C0F 003F;	
    // (ఏ) TELUGU LETTER EE	[2870 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0F, 0x003F };
    uint32_t const ces[9] = { 0x2870, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_344)
{
    // 0C0F 0061;	
    // (ఏ) TELUGU LETTER EE	[2870 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0F, 0x0061 };
    uint32_t const ces[9] = { 0x2870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_345)
{
    // 0C0F 0041;	
    // (ఏ) TELUGU LETTER EE	[2870 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C0F, 0x0041 };
    uint32_t const ces[9] = { 0x2870, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_346)
{
    // 0C0F 0062;	
    // (ఏ) TELUGU LETTER EE	[2870 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C0F, 0x0062 };
    uint32_t const ces[9] = { 0x2870, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_347)
{
    // 0C10 0021;	
    // (ఐ) TELUGU LETTER AI	[2871 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C10, 0x0021 };
    uint32_t const ces[9] = { 0x2871, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_348)
{
    // 0C10 003F;	
    // (ఐ) TELUGU LETTER AI	[2871 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C10, 0x003F };
    uint32_t const ces[9] = { 0x2871, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_349)
{
    // 0C10 0061;	
    // (ఐ) TELUGU LETTER AI	[2871 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C10, 0x0061 };
    uint32_t const ces[9] = { 0x2871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_350)
{
    // 0C10 0041;	
    // (ఐ) TELUGU LETTER AI	[2871 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C10, 0x0041 };
    uint32_t const ces[9] = { 0x2871, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_351)
{
    // 0C10 0062;	
    // (ఐ) TELUGU LETTER AI	[2871 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C10, 0x0062 };
    uint32_t const ces[9] = { 0x2871, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_352)
{
    // 0C12 0021;	
    // (ఒ) TELUGU LETTER O	[2872 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C12, 0x0021 };
    uint32_t const ces[9] = { 0x2872, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_353)
{
    // 0C12 003F;	
    // (ఒ) TELUGU LETTER O	[2872 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C12, 0x003F };
    uint32_t const ces[9] = { 0x2872, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_354)
{
    // 0C12 0061;	
    // (ఒ) TELUGU LETTER O	[2872 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C12, 0x0061 };
    uint32_t const ces[9] = { 0x2872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_355)
{
    // 0C12 0041;	
    // (ఒ) TELUGU LETTER O	[2872 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C12, 0x0041 };
    uint32_t const ces[9] = { 0x2872, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_356)
{
    // 0C12 0062;	
    // (ఒ) TELUGU LETTER O	[2872 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C12, 0x0062 };
    uint32_t const ces[9] = { 0x2872, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_357)
{
    // 0C13 0021;	
    // (ఓ) TELUGU LETTER OO	[2873 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C13, 0x0021 };
    uint32_t const ces[9] = { 0x2873, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_358)
{
    // 0C13 003F;	
    // (ఓ) TELUGU LETTER OO	[2873 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C13, 0x003F };
    uint32_t const ces[9] = { 0x2873, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_359)
{
    // 0C13 0061;	
    // (ఓ) TELUGU LETTER OO	[2873 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C13, 0x0061 };
    uint32_t const ces[9] = { 0x2873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_360)
{
    // 0C13 0041;	
    // (ఓ) TELUGU LETTER OO	[2873 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C13, 0x0041 };
    uint32_t const ces[9] = { 0x2873, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_361)
{
    // 0C13 0062;	
    // (ఓ) TELUGU LETTER OO	[2873 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C13, 0x0062 };
    uint32_t const ces[9] = { 0x2873, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_362)
{
    // 0C14 0021;	
    // (ఔ) TELUGU LETTER AU	[2874 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C14, 0x0021 };
    uint32_t const ces[9] = { 0x2874, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_363)
{
    // 0C14 003F;	
    // (ఔ) TELUGU LETTER AU	[2874 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C14, 0x003F };
    uint32_t const ces[9] = { 0x2874, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_364)
{
    // 0C14 0061;	
    // (ఔ) TELUGU LETTER AU	[2874 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C14, 0x0061 };
    uint32_t const ces[9] = { 0x2874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_365)
{
    // 0C14 0041;	
    // (ఔ) TELUGU LETTER AU	[2874 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C14, 0x0041 };
    uint32_t const ces[9] = { 0x2874, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_366)
{
    // 0C14 0062;	
    // (ఔ) TELUGU LETTER AU	[2874 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C14, 0x0062 };
    uint32_t const ces[9] = { 0x2874, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_367)
{
    // 0C15 0021;	
    // (క) TELUGU LETTER KA	[2875 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C15, 0x0021 };
    uint32_t const ces[9] = { 0x2875, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_368)
{
    // 0C15 003F;	
    // (క) TELUGU LETTER KA	[2875 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C15, 0x003F };
    uint32_t const ces[9] = { 0x2875, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_369)
{
    // 0C15 0061;	
    // (క) TELUGU LETTER KA	[2875 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C15, 0x0061 };
    uint32_t const ces[9] = { 0x2875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_370)
{
    // 0C15 0041;	
    // (క) TELUGU LETTER KA	[2875 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C15, 0x0041 };
    uint32_t const ces[9] = { 0x2875, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_371)
{
    // 0C15 0062;	
    // (క) TELUGU LETTER KA	[2875 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C15, 0x0062 };
    uint32_t const ces[9] = { 0x2875, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_372)
{
    // 0C16 0021;	
    // (ఖ) TELUGU LETTER KHA	[2876 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C16, 0x0021 };
    uint32_t const ces[9] = { 0x2876, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_373)
{
    // 0C16 003F;	
    // (ఖ) TELUGU LETTER KHA	[2876 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C16, 0x003F };
    uint32_t const ces[9] = { 0x2876, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_374)
{
    // 0C16 0061;	
    // (ఖ) TELUGU LETTER KHA	[2876 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C16, 0x0061 };
    uint32_t const ces[9] = { 0x2876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_375)
{
    // 0C16 0041;	
    // (ఖ) TELUGU LETTER KHA	[2876 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C16, 0x0041 };
    uint32_t const ces[9] = { 0x2876, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_376)
{
    // 0C16 0062;	
    // (ఖ) TELUGU LETTER KHA	[2876 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C16, 0x0062 };
    uint32_t const ces[9] = { 0x2876, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_377)
{
    // 0C17 0021;	
    // (గ) TELUGU LETTER GA	[2877 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C17, 0x0021 };
    uint32_t const ces[9] = { 0x2877, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_378)
{
    // 0C17 003F;	
    // (గ) TELUGU LETTER GA	[2877 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C17, 0x003F };
    uint32_t const ces[9] = { 0x2877, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_379)
{
    // 0C17 0061;	
    // (గ) TELUGU LETTER GA	[2877 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C17, 0x0061 };
    uint32_t const ces[9] = { 0x2877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_380)
{
    // 0C17 0041;	
    // (గ) TELUGU LETTER GA	[2877 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C17, 0x0041 };
    uint32_t const ces[9] = { 0x2877, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_381)
{
    // 0C17 0062;	
    // (గ) TELUGU LETTER GA	[2877 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C17, 0x0062 };
    uint32_t const ces[9] = { 0x2877, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_382)
{
    // 0C18 0021;	
    // (ఘ) TELUGU LETTER GHA	[2878 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C18, 0x0021 };
    uint32_t const ces[9] = { 0x2878, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_383)
{
    // 0C18 003F;	
    // (ఘ) TELUGU LETTER GHA	[2878 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C18, 0x003F };
    uint32_t const ces[9] = { 0x2878, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_384)
{
    // 0C18 0061;	
    // (ఘ) TELUGU LETTER GHA	[2878 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C18, 0x0061 };
    uint32_t const ces[9] = { 0x2878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_385)
{
    // 0C18 0041;	
    // (ఘ) TELUGU LETTER GHA	[2878 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C18, 0x0041 };
    uint32_t const ces[9] = { 0x2878, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_386)
{
    // 0C18 0062;	
    // (ఘ) TELUGU LETTER GHA	[2878 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C18, 0x0062 };
    uint32_t const ces[9] = { 0x2878, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_387)
{
    // 0C19 0021;	
    // (ఙ) TELUGU LETTER NGA	[2879 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C19, 0x0021 };
    uint32_t const ces[9] = { 0x2879, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_388)
{
    // 0C19 003F;	
    // (ఙ) TELUGU LETTER NGA	[2879 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C19, 0x003F };
    uint32_t const ces[9] = { 0x2879, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_389)
{
    // 0C19 0061;	
    // (ఙ) TELUGU LETTER NGA	[2879 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C19, 0x0061 };
    uint32_t const ces[9] = { 0x2879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_390)
{
    // 0C19 0041;	
    // (ఙ) TELUGU LETTER NGA	[2879 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C19, 0x0041 };
    uint32_t const ces[9] = { 0x2879, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_391)
{
    // 0C19 0062;	
    // (ఙ) TELUGU LETTER NGA	[2879 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C19, 0x0062 };
    uint32_t const ces[9] = { 0x2879, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_392)
{
    // 0C1A 0021;	
    // (చ) TELUGU LETTER CA	[287A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1A, 0x0021 };
    uint32_t const ces[9] = { 0x287A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_393)
{
    // 0C1A 003F;	
    // (చ) TELUGU LETTER CA	[287A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1A, 0x003F };
    uint32_t const ces[9] = { 0x287A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_394)
{
    // 0C1A 0061;	
    // (చ) TELUGU LETTER CA	[287A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1A, 0x0061 };
    uint32_t const ces[9] = { 0x287A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_395)
{
    // 0C1A 0041;	
    // (చ) TELUGU LETTER CA	[287A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1A, 0x0041 };
    uint32_t const ces[9] = { 0x287A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_396)
{
    // 0C1A 0062;	
    // (చ) TELUGU LETTER CA	[287A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1A, 0x0062 };
    uint32_t const ces[9] = { 0x287A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_397)
{
    // 0C58 0021;	
    // (ౘ) TELUGU LETTER TSA	[287B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C58, 0x0021 };
    uint32_t const ces[9] = { 0x287B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_398)
{
    // 0C58 003F;	
    // (ౘ) TELUGU LETTER TSA	[287B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C58, 0x003F };
    uint32_t const ces[9] = { 0x287B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_399)
{
    // 0C58 0061;	
    // (ౘ) TELUGU LETTER TSA	[287B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C58, 0x0061 };
    uint32_t const ces[9] = { 0x287B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_400)
{
    // 0C58 0041;	
    // (ౘ) TELUGU LETTER TSA	[287B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C58, 0x0041 };
    uint32_t const ces[9] = { 0x287B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_401)
{
    // 0C58 0062;	
    // (ౘ) TELUGU LETTER TSA	[287B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C58, 0x0062 };
    uint32_t const ces[9] = { 0x287B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_402)
{
    // 0C1B 0021;	
    // (ఛ) TELUGU LETTER CHA	[287C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1B, 0x0021 };
    uint32_t const ces[9] = { 0x287C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_403)
{
    // 0C1B 003F;	
    // (ఛ) TELUGU LETTER CHA	[287C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1B, 0x003F };
    uint32_t const ces[9] = { 0x287C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_404)
{
    // 0C1B 0061;	
    // (ఛ) TELUGU LETTER CHA	[287C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1B, 0x0061 };
    uint32_t const ces[9] = { 0x287C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_405)
{
    // 0C1B 0041;	
    // (ఛ) TELUGU LETTER CHA	[287C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1B, 0x0041 };
    uint32_t const ces[9] = { 0x287C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_406)
{
    // 0C1B 0062;	
    // (ఛ) TELUGU LETTER CHA	[287C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1B, 0x0062 };
    uint32_t const ces[9] = { 0x287C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_407)
{
    // 0C1C 0021;	
    // (జ) TELUGU LETTER JA	[287D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1C, 0x0021 };
    uint32_t const ces[9] = { 0x287D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_408)
{
    // 0C1C 003F;	
    // (జ) TELUGU LETTER JA	[287D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1C, 0x003F };
    uint32_t const ces[9] = { 0x287D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_409)
{
    // 0C1C 0061;	
    // (జ) TELUGU LETTER JA	[287D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1C, 0x0061 };
    uint32_t const ces[9] = { 0x287D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_410)
{
    // 0C1C 0041;	
    // (జ) TELUGU LETTER JA	[287D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1C, 0x0041 };
    uint32_t const ces[9] = { 0x287D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_411)
{
    // 0C1C 0062;	
    // (జ) TELUGU LETTER JA	[287D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1C, 0x0062 };
    uint32_t const ces[9] = { 0x287D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_412)
{
    // 0C59 0021;	
    // (ౙ) TELUGU LETTER DZA	[287E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C59, 0x0021 };
    uint32_t const ces[9] = { 0x287E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_413)
{
    // 0C59 003F;	
    // (ౙ) TELUGU LETTER DZA	[287E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C59, 0x003F };
    uint32_t const ces[9] = { 0x287E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_414)
{
    // 0C59 0061;	
    // (ౙ) TELUGU LETTER DZA	[287E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C59, 0x0061 };
    uint32_t const ces[9] = { 0x287E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_415)
{
    // 0C59 0041;	
    // (ౙ) TELUGU LETTER DZA	[287E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C59, 0x0041 };
    uint32_t const ces[9] = { 0x287E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_416)
{
    // 0C59 0062;	
    // (ౙ) TELUGU LETTER DZA	[287E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C59, 0x0062 };
    uint32_t const ces[9] = { 0x287E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_417)
{
    // 0C1D 0021;	
    // (ఝ) TELUGU LETTER JHA	[287F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1D, 0x0021 };
    uint32_t const ces[9] = { 0x287F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_418)
{
    // 0C1D 003F;	
    // (ఝ) TELUGU LETTER JHA	[287F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1D, 0x003F };
    uint32_t const ces[9] = { 0x287F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_419)
{
    // 0C1D 0061;	
    // (ఝ) TELUGU LETTER JHA	[287F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1D, 0x0061 };
    uint32_t const ces[9] = { 0x287F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_420)
{
    // 0C1D 0041;	
    // (ఝ) TELUGU LETTER JHA	[287F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1D, 0x0041 };
    uint32_t const ces[9] = { 0x287F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_421)
{
    // 0C1D 0062;	
    // (ఝ) TELUGU LETTER JHA	[287F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1D, 0x0062 };
    uint32_t const ces[9] = { 0x287F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_422)
{
    // 0C1E 0021;	
    // (ఞ) TELUGU LETTER NYA	[2880 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1E, 0x0021 };
    uint32_t const ces[9] = { 0x2880, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_423)
{
    // 0C1E 003F;	
    // (ఞ) TELUGU LETTER NYA	[2880 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1E, 0x003F };
    uint32_t const ces[9] = { 0x2880, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_424)
{
    // 0C1E 0061;	
    // (ఞ) TELUGU LETTER NYA	[2880 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1E, 0x0061 };
    uint32_t const ces[9] = { 0x2880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_425)
{
    // 0C1E 0041;	
    // (ఞ) TELUGU LETTER NYA	[2880 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1E, 0x0041 };
    uint32_t const ces[9] = { 0x2880, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_426)
{
    // 0C1E 0062;	
    // (ఞ) TELUGU LETTER NYA	[2880 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1E, 0x0062 };
    uint32_t const ces[9] = { 0x2880, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_427)
{
    // 0C1F 0021;	
    // (ట) TELUGU LETTER TTA	[2881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1F, 0x0021 };
    uint32_t const ces[9] = { 0x2881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_428)
{
    // 0C1F 003F;	
    // (ట) TELUGU LETTER TTA	[2881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1F, 0x003F };
    uint32_t const ces[9] = { 0x2881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_429)
{
    // 0C1F 0061;	
    // (ట) TELUGU LETTER TTA	[2881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1F, 0x0061 };
    uint32_t const ces[9] = { 0x2881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_430)
{
    // 0C1F 0041;	
    // (ట) TELUGU LETTER TTA	[2881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C1F, 0x0041 };
    uint32_t const ces[9] = { 0x2881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_431)
{
    // 0C1F 0062;	
    // (ట) TELUGU LETTER TTA	[2881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C1F, 0x0062 };
    uint32_t const ces[9] = { 0x2881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_432)
{
    // 0C20 0021;	
    // (ఠ) TELUGU LETTER TTHA	[2882 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C20, 0x0021 };
    uint32_t const ces[9] = { 0x2882, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_433)
{
    // 0C20 003F;	
    // (ఠ) TELUGU LETTER TTHA	[2882 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C20, 0x003F };
    uint32_t const ces[9] = { 0x2882, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_434)
{
    // 0C20 0061;	
    // (ఠ) TELUGU LETTER TTHA	[2882 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C20, 0x0061 };
    uint32_t const ces[9] = { 0x2882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_435)
{
    // 0C20 0041;	
    // (ఠ) TELUGU LETTER TTHA	[2882 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C20, 0x0041 };
    uint32_t const ces[9] = { 0x2882, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_436)
{
    // 0C20 0062;	
    // (ఠ) TELUGU LETTER TTHA	[2882 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C20, 0x0062 };
    uint32_t const ces[9] = { 0x2882, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_437)
{
    // 0C21 0021;	
    // (డ) TELUGU LETTER DDA	[2883 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C21, 0x0021 };
    uint32_t const ces[9] = { 0x2883, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_438)
{
    // 0C21 003F;	
    // (డ) TELUGU LETTER DDA	[2883 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C21, 0x003F };
    uint32_t const ces[9] = { 0x2883, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_439)
{
    // 0C21 0061;	
    // (డ) TELUGU LETTER DDA	[2883 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C21, 0x0061 };
    uint32_t const ces[9] = { 0x2883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_440)
{
    // 0C21 0041;	
    // (డ) TELUGU LETTER DDA	[2883 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C21, 0x0041 };
    uint32_t const ces[9] = { 0x2883, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_441)
{
    // 0C21 0062;	
    // (డ) TELUGU LETTER DDA	[2883 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C21, 0x0062 };
    uint32_t const ces[9] = { 0x2883, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_442)
{
    // 0C22 0021;	
    // (ఢ) TELUGU LETTER DDHA	[2884 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C22, 0x0021 };
    uint32_t const ces[9] = { 0x2884, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_443)
{
    // 0C22 003F;	
    // (ఢ) TELUGU LETTER DDHA	[2884 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C22, 0x003F };
    uint32_t const ces[9] = { 0x2884, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_444)
{
    // 0C22 0061;	
    // (ఢ) TELUGU LETTER DDHA	[2884 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C22, 0x0061 };
    uint32_t const ces[9] = { 0x2884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_445)
{
    // 0C22 0041;	
    // (ఢ) TELUGU LETTER DDHA	[2884 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C22, 0x0041 };
    uint32_t const ces[9] = { 0x2884, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_446)
{
    // 0C22 0062;	
    // (ఢ) TELUGU LETTER DDHA	[2884 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C22, 0x0062 };
    uint32_t const ces[9] = { 0x2884, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_447)
{
    // 0C23 0021;	
    // (ణ) TELUGU LETTER NNA	[2885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C23, 0x0021 };
    uint32_t const ces[9] = { 0x2885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_448)
{
    // 0C23 003F;	
    // (ణ) TELUGU LETTER NNA	[2885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C23, 0x003F };
    uint32_t const ces[9] = { 0x2885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_449)
{
    // 0C23 0061;	
    // (ణ) TELUGU LETTER NNA	[2885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C23, 0x0061 };
    uint32_t const ces[9] = { 0x2885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_450)
{
    // 0C23 0041;	
    // (ణ) TELUGU LETTER NNA	[2885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C23, 0x0041 };
    uint32_t const ces[9] = { 0x2885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_451)
{
    // 0C23 0062;	
    // (ణ) TELUGU LETTER NNA	[2885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C23, 0x0062 };
    uint32_t const ces[9] = { 0x2885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_452)
{
    // 0C24 0021;	
    // (త) TELUGU LETTER TA	[2886 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C24, 0x0021 };
    uint32_t const ces[9] = { 0x2886, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_453)
{
    // 0C24 003F;	
    // (త) TELUGU LETTER TA	[2886 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C24, 0x003F };
    uint32_t const ces[9] = { 0x2886, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_454)
{
    // 0C24 0061;	
    // (త) TELUGU LETTER TA	[2886 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C24, 0x0061 };
    uint32_t const ces[9] = { 0x2886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_455)
{
    // 0C24 0041;	
    // (త) TELUGU LETTER TA	[2886 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C24, 0x0041 };
    uint32_t const ces[9] = { 0x2886, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_456)
{
    // 0C24 0062;	
    // (త) TELUGU LETTER TA	[2886 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C24, 0x0062 };
    uint32_t const ces[9] = { 0x2886, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_457)
{
    // 0C25 0021;	
    // (థ) TELUGU LETTER THA	[2887 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C25, 0x0021 };
    uint32_t const ces[9] = { 0x2887, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_458)
{
    // 0C25 003F;	
    // (థ) TELUGU LETTER THA	[2887 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C25, 0x003F };
    uint32_t const ces[9] = { 0x2887, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_459)
{
    // 0C25 0061;	
    // (థ) TELUGU LETTER THA	[2887 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C25, 0x0061 };
    uint32_t const ces[9] = { 0x2887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_460)
{
    // 0C25 0041;	
    // (థ) TELUGU LETTER THA	[2887 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C25, 0x0041 };
    uint32_t const ces[9] = { 0x2887, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_461)
{
    // 0C25 0062;	
    // (థ) TELUGU LETTER THA	[2887 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C25, 0x0062 };
    uint32_t const ces[9] = { 0x2887, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_462)
{
    // 0C26 0021;	
    // (ద) TELUGU LETTER DA	[2888 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C26, 0x0021 };
    uint32_t const ces[9] = { 0x2888, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_463)
{
    // 0C26 003F;	
    // (ద) TELUGU LETTER DA	[2888 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C26, 0x003F };
    uint32_t const ces[9] = { 0x2888, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_464)
{
    // 0C26 0061;	
    // (ద) TELUGU LETTER DA	[2888 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C26, 0x0061 };
    uint32_t const ces[9] = { 0x2888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_465)
{
    // 0C26 0041;	
    // (ద) TELUGU LETTER DA	[2888 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C26, 0x0041 };
    uint32_t const ces[9] = { 0x2888, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_466)
{
    // 0C26 0062;	
    // (ద) TELUGU LETTER DA	[2888 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C26, 0x0062 };
    uint32_t const ces[9] = { 0x2888, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_467)
{
    // 0C27 0021;	
    // (ధ) TELUGU LETTER DHA	[2889 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C27, 0x0021 };
    uint32_t const ces[9] = { 0x2889, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_468)
{
    // 0C27 003F;	
    // (ధ) TELUGU LETTER DHA	[2889 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C27, 0x003F };
    uint32_t const ces[9] = { 0x2889, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_469)
{
    // 0C27 0061;	
    // (ధ) TELUGU LETTER DHA	[2889 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C27, 0x0061 };
    uint32_t const ces[9] = { 0x2889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_470)
{
    // 0C27 0041;	
    // (ధ) TELUGU LETTER DHA	[2889 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C27, 0x0041 };
    uint32_t const ces[9] = { 0x2889, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_471)
{
    // 0C27 0062;	
    // (ధ) TELUGU LETTER DHA	[2889 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C27, 0x0062 };
    uint32_t const ces[9] = { 0x2889, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_472)
{
    // 0C28 0021;	
    // (న) TELUGU LETTER NA	[288A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C28, 0x0021 };
    uint32_t const ces[9] = { 0x288A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_473)
{
    // 0C28 003F;	
    // (న) TELUGU LETTER NA	[288A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C28, 0x003F };
    uint32_t const ces[9] = { 0x288A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_474)
{
    // 0C28 0061;	
    // (న) TELUGU LETTER NA	[288A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C28, 0x0061 };
    uint32_t const ces[9] = { 0x288A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_475)
{
    // 0C28 0041;	
    // (న) TELUGU LETTER NA	[288A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C28, 0x0041 };
    uint32_t const ces[9] = { 0x288A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_476)
{
    // 0C28 0062;	
    // (న) TELUGU LETTER NA	[288A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C28, 0x0062 };
    uint32_t const ces[9] = { 0x288A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_477)
{
    // 0C2A 0021;	
    // (ప) TELUGU LETTER PA	[288B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2A, 0x0021 };
    uint32_t const ces[9] = { 0x288B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_478)
{
    // 0C2A 003F;	
    // (ప) TELUGU LETTER PA	[288B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2A, 0x003F };
    uint32_t const ces[9] = { 0x288B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_479)
{
    // 0C2A 0061;	
    // (ప) TELUGU LETTER PA	[288B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2A, 0x0061 };
    uint32_t const ces[9] = { 0x288B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_480)
{
    // 0C2A 0041;	
    // (ప) TELUGU LETTER PA	[288B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2A, 0x0041 };
    uint32_t const ces[9] = { 0x288B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_481)
{
    // 0C2A 0062;	
    // (ప) TELUGU LETTER PA	[288B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2A, 0x0062 };
    uint32_t const ces[9] = { 0x288B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_482)
{
    // 0C2B 0021;	
    // (ఫ) TELUGU LETTER PHA	[288C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2B, 0x0021 };
    uint32_t const ces[9] = { 0x288C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_483)
{
    // 0C2B 003F;	
    // (ఫ) TELUGU LETTER PHA	[288C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2B, 0x003F };
    uint32_t const ces[9] = { 0x288C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_484)
{
    // 0C2B 0061;	
    // (ఫ) TELUGU LETTER PHA	[288C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2B, 0x0061 };
    uint32_t const ces[9] = { 0x288C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_485)
{
    // 0C2B 0041;	
    // (ఫ) TELUGU LETTER PHA	[288C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2B, 0x0041 };
    uint32_t const ces[9] = { 0x288C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_486)
{
    // 0C2B 0062;	
    // (ఫ) TELUGU LETTER PHA	[288C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2B, 0x0062 };
    uint32_t const ces[9] = { 0x288C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_487)
{
    // 0C2C 0021;	
    // (బ) TELUGU LETTER BA	[288D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2C, 0x0021 };
    uint32_t const ces[9] = { 0x288D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_488)
{
    // 0C2C 003F;	
    // (బ) TELUGU LETTER BA	[288D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2C, 0x003F };
    uint32_t const ces[9] = { 0x288D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_489)
{
    // 0C2C 0061;	
    // (బ) TELUGU LETTER BA	[288D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2C, 0x0061 };
    uint32_t const ces[9] = { 0x288D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_490)
{
    // 0C2C 0041;	
    // (బ) TELUGU LETTER BA	[288D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2C, 0x0041 };
    uint32_t const ces[9] = { 0x288D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_491)
{
    // 0C2C 0062;	
    // (బ) TELUGU LETTER BA	[288D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2C, 0x0062 };
    uint32_t const ces[9] = { 0x288D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_492)
{
    // 0C2D 0021;	
    // (భ) TELUGU LETTER BHA	[288E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2D, 0x0021 };
    uint32_t const ces[9] = { 0x288E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_493)
{
    // 0C2D 003F;	
    // (భ) TELUGU LETTER BHA	[288E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2D, 0x003F };
    uint32_t const ces[9] = { 0x288E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_494)
{
    // 0C2D 0061;	
    // (భ) TELUGU LETTER BHA	[288E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2D, 0x0061 };
    uint32_t const ces[9] = { 0x288E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_495)
{
    // 0C2D 0041;	
    // (భ) TELUGU LETTER BHA	[288E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0C2D, 0x0041 };
    uint32_t const ces[9] = { 0x288E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_496)
{
    // 0C2D 0062;	
    // (భ) TELUGU LETTER BHA	[288E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2D, 0x0062 };
    uint32_t const ces[9] = { 0x288E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_497)
{
    // 0C2E 0021;	
    // (మ) TELUGU LETTER MA	[288F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2E, 0x0021 };
    uint32_t const ces[9] = { 0x288F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_498)
{
    // 0C2E 003F;	
    // (మ) TELUGU LETTER MA	[288F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2E, 0x003F };
    uint32_t const ces[9] = { 0x288F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_169_499)
{
    // 0C2E 0061;	
    // (మ) TELUGU LETTER MA	[288F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0C2E, 0x0061 };
    uint32_t const ces[9] = { 0x288F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

