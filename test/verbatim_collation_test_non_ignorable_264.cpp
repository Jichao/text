// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_264_000)
{
    // A3F8 003F;	
    // (ꏸ) YI SYLLABLE JY	[43EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F8, 0x003F };
    uint32_t const ces[9] = { 0x43EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_001)
{
    // A3F8 0061;	
    // (ꏸ) YI SYLLABLE JY	[43EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F8, 0x0061 };
    uint32_t const ces[9] = { 0x43EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_002)
{
    // A3F8 0041;	
    // (ꏸ) YI SYLLABLE JY	[43EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F8, 0x0041 };
    uint32_t const ces[9] = { 0x43EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_003)
{
    // A3F8 0062;	
    // (ꏸ) YI SYLLABLE JY	[43EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F8, 0x0062 };
    uint32_t const ces[9] = { 0x43EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_004)
{
    // A3F9 0021;	
    // (ꏹ) YI SYLLABLE JYP	[43EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F9, 0x0021 };
    uint32_t const ces[9] = { 0x43EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_005)
{
    // A3F9 003F;	
    // (ꏹ) YI SYLLABLE JYP	[43EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F9, 0x003F };
    uint32_t const ces[9] = { 0x43EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_006)
{
    // A3F9 0061;	
    // (ꏹ) YI SYLLABLE JYP	[43EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F9, 0x0061 };
    uint32_t const ces[9] = { 0x43EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_007)
{
    // A3F9 0041;	
    // (ꏹ) YI SYLLABLE JYP	[43EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3F9, 0x0041 };
    uint32_t const ces[9] = { 0x43EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_008)
{
    // A3F9 0062;	
    // (ꏹ) YI SYLLABLE JYP	[43EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3F9, 0x0062 };
    uint32_t const ces[9] = { 0x43EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_009)
{
    // A3FA 0021;	
    // (ꏺ) YI SYLLABLE JYRX	[43ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FA, 0x0021 };
    uint32_t const ces[9] = { 0x43ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_010)
{
    // A3FA 003F;	
    // (ꏺ) YI SYLLABLE JYRX	[43ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FA, 0x003F };
    uint32_t const ces[9] = { 0x43ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_011)
{
    // A3FA 0061;	
    // (ꏺ) YI SYLLABLE JYRX	[43ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FA, 0x0061 };
    uint32_t const ces[9] = { 0x43ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_012)
{
    // A3FA 0041;	
    // (ꏺ) YI SYLLABLE JYRX	[43ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FA, 0x0041 };
    uint32_t const ces[9] = { 0x43ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_013)
{
    // A3FA 0062;	
    // (ꏺ) YI SYLLABLE JYRX	[43ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FA, 0x0062 };
    uint32_t const ces[9] = { 0x43ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_014)
{
    // A3FB 0021;	
    // (ꏻ) YI SYLLABLE JYR	[43EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FB, 0x0021 };
    uint32_t const ces[9] = { 0x43EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_015)
{
    // A3FB 003F;	
    // (ꏻ) YI SYLLABLE JYR	[43EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FB, 0x003F };
    uint32_t const ces[9] = { 0x43EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_016)
{
    // A3FB 0061;	
    // (ꏻ) YI SYLLABLE JYR	[43EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FB, 0x0061 };
    uint32_t const ces[9] = { 0x43EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_017)
{
    // A3FB 0041;	
    // (ꏻ) YI SYLLABLE JYR	[43EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FB, 0x0041 };
    uint32_t const ces[9] = { 0x43EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_018)
{
    // A3FB 0062;	
    // (ꏻ) YI SYLLABLE JYR	[43EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FB, 0x0062 };
    uint32_t const ces[9] = { 0x43EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_019)
{
    // A3FC 0021;	
    // (ꏼ) YI SYLLABLE QIT	[43EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FC, 0x0021 };
    uint32_t const ces[9] = { 0x43EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_020)
{
    // A3FC 003F;	
    // (ꏼ) YI SYLLABLE QIT	[43EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FC, 0x003F };
    uint32_t const ces[9] = { 0x43EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_021)
{
    // A3FC 0061;	
    // (ꏼ) YI SYLLABLE QIT	[43EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FC, 0x0061 };
    uint32_t const ces[9] = { 0x43EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_022)
{
    // A3FC 0041;	
    // (ꏼ) YI SYLLABLE QIT	[43EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FC, 0x0041 };
    uint32_t const ces[9] = { 0x43EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_023)
{
    // A3FC 0062;	
    // (ꏼ) YI SYLLABLE QIT	[43EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FC, 0x0062 };
    uint32_t const ces[9] = { 0x43EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_024)
{
    // A3FD 0021;	
    // (ꏽ) YI SYLLABLE QIX	[43F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FD, 0x0021 };
    uint32_t const ces[9] = { 0x43F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_025)
{
    // A3FD 003F;	
    // (ꏽ) YI SYLLABLE QIX	[43F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FD, 0x003F };
    uint32_t const ces[9] = { 0x43F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_026)
{
    // A3FD 0061;	
    // (ꏽ) YI SYLLABLE QIX	[43F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FD, 0x0061 };
    uint32_t const ces[9] = { 0x43F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_027)
{
    // A3FD 0041;	
    // (ꏽ) YI SYLLABLE QIX	[43F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FD, 0x0041 };
    uint32_t const ces[9] = { 0x43F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_028)
{
    // A3FD 0062;	
    // (ꏽ) YI SYLLABLE QIX	[43F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FD, 0x0062 };
    uint32_t const ces[9] = { 0x43F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_029)
{
    // A3FE 0021;	
    // (ꏾ) YI SYLLABLE QI	[43F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FE, 0x0021 };
    uint32_t const ces[9] = { 0x43F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_030)
{
    // A3FE 003F;	
    // (ꏾ) YI SYLLABLE QI	[43F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FE, 0x003F };
    uint32_t const ces[9] = { 0x43F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_031)
{
    // A3FE 0061;	
    // (ꏾ) YI SYLLABLE QI	[43F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FE, 0x0061 };
    uint32_t const ces[9] = { 0x43F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_032)
{
    // A3FE 0041;	
    // (ꏾ) YI SYLLABLE QI	[43F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FE, 0x0041 };
    uint32_t const ces[9] = { 0x43F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_033)
{
    // A3FE 0062;	
    // (ꏾ) YI SYLLABLE QI	[43F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FE, 0x0062 };
    uint32_t const ces[9] = { 0x43F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_034)
{
    // A3FF 0021;	
    // (ꏿ) YI SYLLABLE QIP	[43F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FF, 0x0021 };
    uint32_t const ces[9] = { 0x43F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_035)
{
    // A3FF 003F;	
    // (ꏿ) YI SYLLABLE QIP	[43F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FF, 0x003F };
    uint32_t const ces[9] = { 0x43F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_036)
{
    // A3FF 0061;	
    // (ꏿ) YI SYLLABLE QIP	[43F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FF, 0x0061 };
    uint32_t const ces[9] = { 0x43F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_037)
{
    // A3FF 0041;	
    // (ꏿ) YI SYLLABLE QIP	[43F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA3FF, 0x0041 };
    uint32_t const ces[9] = { 0x43F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_038)
{
    // A3FF 0062;	
    // (ꏿ) YI SYLLABLE QIP	[43F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA3FF, 0x0062 };
    uint32_t const ces[9] = { 0x43F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_039)
{
    // A400 0021;	
    // (ꐀ) YI SYLLABLE QIET	[43F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA400, 0x0021 };
    uint32_t const ces[9] = { 0x43F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_040)
{
    // A400 003F;	
    // (ꐀ) YI SYLLABLE QIET	[43F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA400, 0x003F };
    uint32_t const ces[9] = { 0x43F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_041)
{
    // A400 0061;	
    // (ꐀ) YI SYLLABLE QIET	[43F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA400, 0x0061 };
    uint32_t const ces[9] = { 0x43F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_042)
{
    // A400 0041;	
    // (ꐀ) YI SYLLABLE QIET	[43F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA400, 0x0041 };
    uint32_t const ces[9] = { 0x43F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_043)
{
    // A400 0062;	
    // (ꐀ) YI SYLLABLE QIET	[43F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA400, 0x0062 };
    uint32_t const ces[9] = { 0x43F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_044)
{
    // A401 0021;	
    // (ꐁ) YI SYLLABLE QIEX	[43F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA401, 0x0021 };
    uint32_t const ces[9] = { 0x43F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_045)
{
    // A401 003F;	
    // (ꐁ) YI SYLLABLE QIEX	[43F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA401, 0x003F };
    uint32_t const ces[9] = { 0x43F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_046)
{
    // A401 0061;	
    // (ꐁ) YI SYLLABLE QIEX	[43F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA401, 0x0061 };
    uint32_t const ces[9] = { 0x43F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_047)
{
    // A401 0041;	
    // (ꐁ) YI SYLLABLE QIEX	[43F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA401, 0x0041 };
    uint32_t const ces[9] = { 0x43F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_048)
{
    // A401 0062;	
    // (ꐁ) YI SYLLABLE QIEX	[43F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA401, 0x0062 };
    uint32_t const ces[9] = { 0x43F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_049)
{
    // A402 0021;	
    // (ꐂ) YI SYLLABLE QIE	[43F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA402, 0x0021 };
    uint32_t const ces[9] = { 0x43F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_050)
{
    // A402 003F;	
    // (ꐂ) YI SYLLABLE QIE	[43F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA402, 0x003F };
    uint32_t const ces[9] = { 0x43F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_051)
{
    // A402 0061;	
    // (ꐂ) YI SYLLABLE QIE	[43F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA402, 0x0061 };
    uint32_t const ces[9] = { 0x43F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_052)
{
    // A402 0041;	
    // (ꐂ) YI SYLLABLE QIE	[43F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA402, 0x0041 };
    uint32_t const ces[9] = { 0x43F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_053)
{
    // A402 0062;	
    // (ꐂ) YI SYLLABLE QIE	[43F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA402, 0x0062 };
    uint32_t const ces[9] = { 0x43F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_054)
{
    // A403 0021;	
    // (ꐃ) YI SYLLABLE QIEP	[43F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA403, 0x0021 };
    uint32_t const ces[9] = { 0x43F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_055)
{
    // A403 003F;	
    // (ꐃ) YI SYLLABLE QIEP	[43F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA403, 0x003F };
    uint32_t const ces[9] = { 0x43F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_056)
{
    // A403 0061;	
    // (ꐃ) YI SYLLABLE QIEP	[43F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA403, 0x0061 };
    uint32_t const ces[9] = { 0x43F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_057)
{
    // A403 0041;	
    // (ꐃ) YI SYLLABLE QIEP	[43F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA403, 0x0041 };
    uint32_t const ces[9] = { 0x43F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_058)
{
    // A403 0062;	
    // (ꐃ) YI SYLLABLE QIEP	[43F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA403, 0x0062 };
    uint32_t const ces[9] = { 0x43F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_059)
{
    // A404 0021;	
    // (ꐄ) YI SYLLABLE QUOT	[43F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA404, 0x0021 };
    uint32_t const ces[9] = { 0x43F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_060)
{
    // A404 003F;	
    // (ꐄ) YI SYLLABLE QUOT	[43F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA404, 0x003F };
    uint32_t const ces[9] = { 0x43F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_061)
{
    // A404 0061;	
    // (ꐄ) YI SYLLABLE QUOT	[43F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA404, 0x0061 };
    uint32_t const ces[9] = { 0x43F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_062)
{
    // A404 0041;	
    // (ꐄ) YI SYLLABLE QUOT	[43F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA404, 0x0041 };
    uint32_t const ces[9] = { 0x43F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_063)
{
    // A404 0062;	
    // (ꐄ) YI SYLLABLE QUOT	[43F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA404, 0x0062 };
    uint32_t const ces[9] = { 0x43F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_064)
{
    // A405 0021;	
    // (ꐅ) YI SYLLABLE QUOX	[43F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA405, 0x0021 };
    uint32_t const ces[9] = { 0x43F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_065)
{
    // A405 003F;	
    // (ꐅ) YI SYLLABLE QUOX	[43F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA405, 0x003F };
    uint32_t const ces[9] = { 0x43F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_066)
{
    // A405 0061;	
    // (ꐅ) YI SYLLABLE QUOX	[43F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA405, 0x0061 };
    uint32_t const ces[9] = { 0x43F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_067)
{
    // A405 0041;	
    // (ꐅ) YI SYLLABLE QUOX	[43F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA405, 0x0041 };
    uint32_t const ces[9] = { 0x43F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_068)
{
    // A405 0062;	
    // (ꐅ) YI SYLLABLE QUOX	[43F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA405, 0x0062 };
    uint32_t const ces[9] = { 0x43F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_069)
{
    // A406 0021;	
    // (ꐆ) YI SYLLABLE QUO	[43F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA406, 0x0021 };
    uint32_t const ces[9] = { 0x43F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_070)
{
    // A406 003F;	
    // (ꐆ) YI SYLLABLE QUO	[43F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA406, 0x003F };
    uint32_t const ces[9] = { 0x43F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_071)
{
    // A406 0061;	
    // (ꐆ) YI SYLLABLE QUO	[43F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA406, 0x0061 };
    uint32_t const ces[9] = { 0x43F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_072)
{
    // A406 0041;	
    // (ꐆ) YI SYLLABLE QUO	[43F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA406, 0x0041 };
    uint32_t const ces[9] = { 0x43F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_073)
{
    // A406 0062;	
    // (ꐆ) YI SYLLABLE QUO	[43F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA406, 0x0062 };
    uint32_t const ces[9] = { 0x43F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_074)
{
    // A407 0021;	
    // (ꐇ) YI SYLLABLE QUOP	[43FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA407, 0x0021 };
    uint32_t const ces[9] = { 0x43FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_075)
{
    // A407 003F;	
    // (ꐇ) YI SYLLABLE QUOP	[43FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA407, 0x003F };
    uint32_t const ces[9] = { 0x43FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_076)
{
    // A407 0061;	
    // (ꐇ) YI SYLLABLE QUOP	[43FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA407, 0x0061 };
    uint32_t const ces[9] = { 0x43FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_077)
{
    // A407 0041;	
    // (ꐇ) YI SYLLABLE QUOP	[43FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA407, 0x0041 };
    uint32_t const ces[9] = { 0x43FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_078)
{
    // A407 0062;	
    // (ꐇ) YI SYLLABLE QUOP	[43FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA407, 0x0062 };
    uint32_t const ces[9] = { 0x43FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_079)
{
    // A408 0021;	
    // (ꐈ) YI SYLLABLE QOT	[43FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA408, 0x0021 };
    uint32_t const ces[9] = { 0x43FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_080)
{
    // A408 003F;	
    // (ꐈ) YI SYLLABLE QOT	[43FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA408, 0x003F };
    uint32_t const ces[9] = { 0x43FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_081)
{
    // A408 0061;	
    // (ꐈ) YI SYLLABLE QOT	[43FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA408, 0x0061 };
    uint32_t const ces[9] = { 0x43FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_082)
{
    // A408 0041;	
    // (ꐈ) YI SYLLABLE QOT	[43FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA408, 0x0041 };
    uint32_t const ces[9] = { 0x43FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_083)
{
    // A408 0062;	
    // (ꐈ) YI SYLLABLE QOT	[43FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA408, 0x0062 };
    uint32_t const ces[9] = { 0x43FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_084)
{
    // A409 0021;	
    // (ꐉ) YI SYLLABLE QOX	[43FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA409, 0x0021 };
    uint32_t const ces[9] = { 0x43FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_085)
{
    // A409 003F;	
    // (ꐉ) YI SYLLABLE QOX	[43FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA409, 0x003F };
    uint32_t const ces[9] = { 0x43FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_086)
{
    // A409 0061;	
    // (ꐉ) YI SYLLABLE QOX	[43FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA409, 0x0061 };
    uint32_t const ces[9] = { 0x43FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_087)
{
    // A409 0041;	
    // (ꐉ) YI SYLLABLE QOX	[43FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA409, 0x0041 };
    uint32_t const ces[9] = { 0x43FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_088)
{
    // A409 0062;	
    // (ꐉ) YI SYLLABLE QOX	[43FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA409, 0x0062 };
    uint32_t const ces[9] = { 0x43FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_089)
{
    // A40A 0021;	
    // (ꐊ) YI SYLLABLE QO	[43FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40A, 0x0021 };
    uint32_t const ces[9] = { 0x43FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_090)
{
    // A40A 003F;	
    // (ꐊ) YI SYLLABLE QO	[43FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40A, 0x003F };
    uint32_t const ces[9] = { 0x43FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_091)
{
    // A40A 0061;	
    // (ꐊ) YI SYLLABLE QO	[43FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40A, 0x0061 };
    uint32_t const ces[9] = { 0x43FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_092)
{
    // A40A 0041;	
    // (ꐊ) YI SYLLABLE QO	[43FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40A, 0x0041 };
    uint32_t const ces[9] = { 0x43FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_093)
{
    // A40A 0062;	
    // (ꐊ) YI SYLLABLE QO	[43FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40A, 0x0062 };
    uint32_t const ces[9] = { 0x43FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_094)
{
    // A40B 0021;	
    // (ꐋ) YI SYLLABLE QOP	[43FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40B, 0x0021 };
    uint32_t const ces[9] = { 0x43FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_095)
{
    // A40B 003F;	
    // (ꐋ) YI SYLLABLE QOP	[43FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40B, 0x003F };
    uint32_t const ces[9] = { 0x43FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_096)
{
    // A40B 0061;	
    // (ꐋ) YI SYLLABLE QOP	[43FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40B, 0x0061 };
    uint32_t const ces[9] = { 0x43FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_097)
{
    // A40B 0041;	
    // (ꐋ) YI SYLLABLE QOP	[43FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40B, 0x0041 };
    uint32_t const ces[9] = { 0x43FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_098)
{
    // A40B 0062;	
    // (ꐋ) YI SYLLABLE QOP	[43FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40B, 0x0062 };
    uint32_t const ces[9] = { 0x43FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_099)
{
    // A40C 0021;	
    // (ꐌ) YI SYLLABLE QUT	[43FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40C, 0x0021 };
    uint32_t const ces[9] = { 0x43FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_100)
{
    // A40C 003F;	
    // (ꐌ) YI SYLLABLE QUT	[43FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40C, 0x003F };
    uint32_t const ces[9] = { 0x43FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_101)
{
    // A40C 0061;	
    // (ꐌ) YI SYLLABLE QUT	[43FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40C, 0x0061 };
    uint32_t const ces[9] = { 0x43FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_102)
{
    // A40C 0041;	
    // (ꐌ) YI SYLLABLE QUT	[43FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40C, 0x0041 };
    uint32_t const ces[9] = { 0x43FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_103)
{
    // A40C 0062;	
    // (ꐌ) YI SYLLABLE QUT	[43FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40C, 0x0062 };
    uint32_t const ces[9] = { 0x43FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_104)
{
    // A40D 0021;	
    // (ꐍ) YI SYLLABLE QUX	[4400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40D, 0x0021 };
    uint32_t const ces[9] = { 0x4400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_105)
{
    // A40D 003F;	
    // (ꐍ) YI SYLLABLE QUX	[4400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40D, 0x003F };
    uint32_t const ces[9] = { 0x4400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_106)
{
    // A40D 0061;	
    // (ꐍ) YI SYLLABLE QUX	[4400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40D, 0x0061 };
    uint32_t const ces[9] = { 0x4400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_107)
{
    // A40D 0041;	
    // (ꐍ) YI SYLLABLE QUX	[4400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40D, 0x0041 };
    uint32_t const ces[9] = { 0x4400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_108)
{
    // A40D 0062;	
    // (ꐍ) YI SYLLABLE QUX	[4400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40D, 0x0062 };
    uint32_t const ces[9] = { 0x4400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_109)
{
    // A40E 0021;	
    // (ꐎ) YI SYLLABLE QU	[4401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40E, 0x0021 };
    uint32_t const ces[9] = { 0x4401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_110)
{
    // A40E 003F;	
    // (ꐎ) YI SYLLABLE QU	[4401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40E, 0x003F };
    uint32_t const ces[9] = { 0x4401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_111)
{
    // A40E 0061;	
    // (ꐎ) YI SYLLABLE QU	[4401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40E, 0x0061 };
    uint32_t const ces[9] = { 0x4401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_112)
{
    // A40E 0041;	
    // (ꐎ) YI SYLLABLE QU	[4401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40E, 0x0041 };
    uint32_t const ces[9] = { 0x4401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_113)
{
    // A40E 0062;	
    // (ꐎ) YI SYLLABLE QU	[4401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40E, 0x0062 };
    uint32_t const ces[9] = { 0x4401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_114)
{
    // A40F 0021;	
    // (ꐏ) YI SYLLABLE QUP	[4402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40F, 0x0021 };
    uint32_t const ces[9] = { 0x4402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_115)
{
    // A40F 003F;	
    // (ꐏ) YI SYLLABLE QUP	[4402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40F, 0x003F };
    uint32_t const ces[9] = { 0x4402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_116)
{
    // A40F 0061;	
    // (ꐏ) YI SYLLABLE QUP	[4402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40F, 0x0061 };
    uint32_t const ces[9] = { 0x4402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_117)
{
    // A40F 0041;	
    // (ꐏ) YI SYLLABLE QUP	[4402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA40F, 0x0041 };
    uint32_t const ces[9] = { 0x4402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_118)
{
    // A40F 0062;	
    // (ꐏ) YI SYLLABLE QUP	[4402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA40F, 0x0062 };
    uint32_t const ces[9] = { 0x4402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_119)
{
    // A410 0021;	
    // (ꐐ) YI SYLLABLE QURX	[4403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA410, 0x0021 };
    uint32_t const ces[9] = { 0x4403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_120)
{
    // A410 003F;	
    // (ꐐ) YI SYLLABLE QURX	[4403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA410, 0x003F };
    uint32_t const ces[9] = { 0x4403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_121)
{
    // A410 0061;	
    // (ꐐ) YI SYLLABLE QURX	[4403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA410, 0x0061 };
    uint32_t const ces[9] = { 0x4403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_122)
{
    // A410 0041;	
    // (ꐐ) YI SYLLABLE QURX	[4403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA410, 0x0041 };
    uint32_t const ces[9] = { 0x4403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_123)
{
    // A410 0062;	
    // (ꐐ) YI SYLLABLE QURX	[4403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA410, 0x0062 };
    uint32_t const ces[9] = { 0x4403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_124)
{
    // A411 0021;	
    // (ꐑ) YI SYLLABLE QUR	[4404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA411, 0x0021 };
    uint32_t const ces[9] = { 0x4404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_125)
{
    // A411 003F;	
    // (ꐑ) YI SYLLABLE QUR	[4404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA411, 0x003F };
    uint32_t const ces[9] = { 0x4404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_126)
{
    // A411 0061;	
    // (ꐑ) YI SYLLABLE QUR	[4404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA411, 0x0061 };
    uint32_t const ces[9] = { 0x4404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_127)
{
    // A411 0041;	
    // (ꐑ) YI SYLLABLE QUR	[4404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA411, 0x0041 };
    uint32_t const ces[9] = { 0x4404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_128)
{
    // A411 0062;	
    // (ꐑ) YI SYLLABLE QUR	[4404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA411, 0x0062 };
    uint32_t const ces[9] = { 0x4404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_129)
{
    // A412 0021;	
    // (ꐒ) YI SYLLABLE QYT	[4405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA412, 0x0021 };
    uint32_t const ces[9] = { 0x4405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_130)
{
    // A412 003F;	
    // (ꐒ) YI SYLLABLE QYT	[4405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA412, 0x003F };
    uint32_t const ces[9] = { 0x4405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_131)
{
    // A412 0061;	
    // (ꐒ) YI SYLLABLE QYT	[4405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA412, 0x0061 };
    uint32_t const ces[9] = { 0x4405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_132)
{
    // A412 0041;	
    // (ꐒ) YI SYLLABLE QYT	[4405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA412, 0x0041 };
    uint32_t const ces[9] = { 0x4405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_133)
{
    // A412 0062;	
    // (ꐒ) YI SYLLABLE QYT	[4405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA412, 0x0062 };
    uint32_t const ces[9] = { 0x4405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_134)
{
    // A413 0021;	
    // (ꐓ) YI SYLLABLE QYX	[4406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA413, 0x0021 };
    uint32_t const ces[9] = { 0x4406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_135)
{
    // A413 003F;	
    // (ꐓ) YI SYLLABLE QYX	[4406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA413, 0x003F };
    uint32_t const ces[9] = { 0x4406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_136)
{
    // A413 0061;	
    // (ꐓ) YI SYLLABLE QYX	[4406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA413, 0x0061 };
    uint32_t const ces[9] = { 0x4406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_137)
{
    // A413 0041;	
    // (ꐓ) YI SYLLABLE QYX	[4406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA413, 0x0041 };
    uint32_t const ces[9] = { 0x4406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_138)
{
    // A413 0062;	
    // (ꐓ) YI SYLLABLE QYX	[4406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA413, 0x0062 };
    uint32_t const ces[9] = { 0x4406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_139)
{
    // A414 0021;	
    // (ꐔ) YI SYLLABLE QY	[4407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA414, 0x0021 };
    uint32_t const ces[9] = { 0x4407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_140)
{
    // A414 003F;	
    // (ꐔ) YI SYLLABLE QY	[4407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA414, 0x003F };
    uint32_t const ces[9] = { 0x4407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_141)
{
    // A414 0061;	
    // (ꐔ) YI SYLLABLE QY	[4407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA414, 0x0061 };
    uint32_t const ces[9] = { 0x4407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_142)
{
    // A414 0041;	
    // (ꐔ) YI SYLLABLE QY	[4407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA414, 0x0041 };
    uint32_t const ces[9] = { 0x4407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_143)
{
    // A414 0062;	
    // (ꐔ) YI SYLLABLE QY	[4407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA414, 0x0062 };
    uint32_t const ces[9] = { 0x4407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_144)
{
    // A415 0021;	
    // (ꐕ) YI SYLLABLE QYP	[4408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA415, 0x0021 };
    uint32_t const ces[9] = { 0x4408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_145)
{
    // A415 003F;	
    // (ꐕ) YI SYLLABLE QYP	[4408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA415, 0x003F };
    uint32_t const ces[9] = { 0x4408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_146)
{
    // A415 0061;	
    // (ꐕ) YI SYLLABLE QYP	[4408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA415, 0x0061 };
    uint32_t const ces[9] = { 0x4408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_147)
{
    // A415 0041;	
    // (ꐕ) YI SYLLABLE QYP	[4408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA415, 0x0041 };
    uint32_t const ces[9] = { 0x4408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_148)
{
    // A415 0062;	
    // (ꐕ) YI SYLLABLE QYP	[4408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA415, 0x0062 };
    uint32_t const ces[9] = { 0x4408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_149)
{
    // A416 0021;	
    // (ꐖ) YI SYLLABLE QYRX	[4409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA416, 0x0021 };
    uint32_t const ces[9] = { 0x4409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_150)
{
    // A416 003F;	
    // (ꐖ) YI SYLLABLE QYRX	[4409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA416, 0x003F };
    uint32_t const ces[9] = { 0x4409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_151)
{
    // A416 0061;	
    // (ꐖ) YI SYLLABLE QYRX	[4409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA416, 0x0061 };
    uint32_t const ces[9] = { 0x4409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_152)
{
    // A416 0041;	
    // (ꐖ) YI SYLLABLE QYRX	[4409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA416, 0x0041 };
    uint32_t const ces[9] = { 0x4409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_153)
{
    // A416 0062;	
    // (ꐖ) YI SYLLABLE QYRX	[4409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA416, 0x0062 };
    uint32_t const ces[9] = { 0x4409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_154)
{
    // A417 0021;	
    // (ꐗ) YI SYLLABLE QYR	[440A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA417, 0x0021 };
    uint32_t const ces[9] = { 0x440A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_155)
{
    // A417 003F;	
    // (ꐗ) YI SYLLABLE QYR	[440A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA417, 0x003F };
    uint32_t const ces[9] = { 0x440A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_156)
{
    // A417 0061;	
    // (ꐗ) YI SYLLABLE QYR	[440A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA417, 0x0061 };
    uint32_t const ces[9] = { 0x440A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_157)
{
    // A417 0041;	
    // (ꐗ) YI SYLLABLE QYR	[440A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA417, 0x0041 };
    uint32_t const ces[9] = { 0x440A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_158)
{
    // A417 0062;	
    // (ꐗ) YI SYLLABLE QYR	[440A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA417, 0x0062 };
    uint32_t const ces[9] = { 0x440A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_159)
{
    // A418 0021;	
    // (ꐘ) YI SYLLABLE JJIT	[440B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA418, 0x0021 };
    uint32_t const ces[9] = { 0x440B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_160)
{
    // A418 003F;	
    // (ꐘ) YI SYLLABLE JJIT	[440B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA418, 0x003F };
    uint32_t const ces[9] = { 0x440B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_161)
{
    // A418 0061;	
    // (ꐘ) YI SYLLABLE JJIT	[440B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA418, 0x0061 };
    uint32_t const ces[9] = { 0x440B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_162)
{
    // A418 0041;	
    // (ꐘ) YI SYLLABLE JJIT	[440B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA418, 0x0041 };
    uint32_t const ces[9] = { 0x440B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_163)
{
    // A418 0062;	
    // (ꐘ) YI SYLLABLE JJIT	[440B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA418, 0x0062 };
    uint32_t const ces[9] = { 0x440B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_164)
{
    // A419 0021;	
    // (ꐙ) YI SYLLABLE JJIX	[440C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA419, 0x0021 };
    uint32_t const ces[9] = { 0x440C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_165)
{
    // A419 003F;	
    // (ꐙ) YI SYLLABLE JJIX	[440C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA419, 0x003F };
    uint32_t const ces[9] = { 0x440C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_166)
{
    // A419 0061;	
    // (ꐙ) YI SYLLABLE JJIX	[440C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA419, 0x0061 };
    uint32_t const ces[9] = { 0x440C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_167)
{
    // A419 0041;	
    // (ꐙ) YI SYLLABLE JJIX	[440C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA419, 0x0041 };
    uint32_t const ces[9] = { 0x440C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_168)
{
    // A419 0062;	
    // (ꐙ) YI SYLLABLE JJIX	[440C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA419, 0x0062 };
    uint32_t const ces[9] = { 0x440C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_169)
{
    // A41A 0021;	
    // (ꐚ) YI SYLLABLE JJI	[440D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41A, 0x0021 };
    uint32_t const ces[9] = { 0x440D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_170)
{
    // A41A 003F;	
    // (ꐚ) YI SYLLABLE JJI	[440D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41A, 0x003F };
    uint32_t const ces[9] = { 0x440D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_171)
{
    // A41A 0061;	
    // (ꐚ) YI SYLLABLE JJI	[440D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41A, 0x0061 };
    uint32_t const ces[9] = { 0x440D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_172)
{
    // A41A 0041;	
    // (ꐚ) YI SYLLABLE JJI	[440D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41A, 0x0041 };
    uint32_t const ces[9] = { 0x440D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_173)
{
    // A41A 0062;	
    // (ꐚ) YI SYLLABLE JJI	[440D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41A, 0x0062 };
    uint32_t const ces[9] = { 0x440D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_174)
{
    // A41B 0021;	
    // (ꐛ) YI SYLLABLE JJIP	[440E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41B, 0x0021 };
    uint32_t const ces[9] = { 0x440E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_175)
{
    // A41B 003F;	
    // (ꐛ) YI SYLLABLE JJIP	[440E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41B, 0x003F };
    uint32_t const ces[9] = { 0x440E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_176)
{
    // A41B 0061;	
    // (ꐛ) YI SYLLABLE JJIP	[440E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41B, 0x0061 };
    uint32_t const ces[9] = { 0x440E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_177)
{
    // A41B 0041;	
    // (ꐛ) YI SYLLABLE JJIP	[440E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41B, 0x0041 };
    uint32_t const ces[9] = { 0x440E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_178)
{
    // A41B 0062;	
    // (ꐛ) YI SYLLABLE JJIP	[440E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41B, 0x0062 };
    uint32_t const ces[9] = { 0x440E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_179)
{
    // A41C 0021;	
    // (ꐜ) YI SYLLABLE JJIET	[440F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41C, 0x0021 };
    uint32_t const ces[9] = { 0x440F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_180)
{
    // A41C 003F;	
    // (ꐜ) YI SYLLABLE JJIET	[440F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41C, 0x003F };
    uint32_t const ces[9] = { 0x440F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_181)
{
    // A41C 0061;	
    // (ꐜ) YI SYLLABLE JJIET	[440F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41C, 0x0061 };
    uint32_t const ces[9] = { 0x440F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_182)
{
    // A41C 0041;	
    // (ꐜ) YI SYLLABLE JJIET	[440F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41C, 0x0041 };
    uint32_t const ces[9] = { 0x440F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_183)
{
    // A41C 0062;	
    // (ꐜ) YI SYLLABLE JJIET	[440F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41C, 0x0062 };
    uint32_t const ces[9] = { 0x440F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_184)
{
    // A41D 0021;	
    // (ꐝ) YI SYLLABLE JJIEX	[4410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41D, 0x0021 };
    uint32_t const ces[9] = { 0x4410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_185)
{
    // A41D 003F;	
    // (ꐝ) YI SYLLABLE JJIEX	[4410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41D, 0x003F };
    uint32_t const ces[9] = { 0x4410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_186)
{
    // A41D 0061;	
    // (ꐝ) YI SYLLABLE JJIEX	[4410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41D, 0x0061 };
    uint32_t const ces[9] = { 0x4410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_187)
{
    // A41D 0041;	
    // (ꐝ) YI SYLLABLE JJIEX	[4410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41D, 0x0041 };
    uint32_t const ces[9] = { 0x4410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_188)
{
    // A41D 0062;	
    // (ꐝ) YI SYLLABLE JJIEX	[4410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41D, 0x0062 };
    uint32_t const ces[9] = { 0x4410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_189)
{
    // A41E 0021;	
    // (ꐞ) YI SYLLABLE JJIE	[4411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41E, 0x0021 };
    uint32_t const ces[9] = { 0x4411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_190)
{
    // A41E 003F;	
    // (ꐞ) YI SYLLABLE JJIE	[4411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41E, 0x003F };
    uint32_t const ces[9] = { 0x4411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_191)
{
    // A41E 0061;	
    // (ꐞ) YI SYLLABLE JJIE	[4411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41E, 0x0061 };
    uint32_t const ces[9] = { 0x4411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_192)
{
    // A41E 0041;	
    // (ꐞ) YI SYLLABLE JJIE	[4411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41E, 0x0041 };
    uint32_t const ces[9] = { 0x4411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_193)
{
    // A41E 0062;	
    // (ꐞ) YI SYLLABLE JJIE	[4411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41E, 0x0062 };
    uint32_t const ces[9] = { 0x4411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_194)
{
    // A41F 0021;	
    // (ꐟ) YI SYLLABLE JJIEP	[4412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41F, 0x0021 };
    uint32_t const ces[9] = { 0x4412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_195)
{
    // A41F 003F;	
    // (ꐟ) YI SYLLABLE JJIEP	[4412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41F, 0x003F };
    uint32_t const ces[9] = { 0x4412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_196)
{
    // A41F 0061;	
    // (ꐟ) YI SYLLABLE JJIEP	[4412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41F, 0x0061 };
    uint32_t const ces[9] = { 0x4412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_197)
{
    // A41F 0041;	
    // (ꐟ) YI SYLLABLE JJIEP	[4412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA41F, 0x0041 };
    uint32_t const ces[9] = { 0x4412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_198)
{
    // A41F 0062;	
    // (ꐟ) YI SYLLABLE JJIEP	[4412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA41F, 0x0062 };
    uint32_t const ces[9] = { 0x4412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_199)
{
    // A420 0021;	
    // (ꐠ) YI SYLLABLE JJUOX	[4413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA420, 0x0021 };
    uint32_t const ces[9] = { 0x4413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_200)
{
    // A420 003F;	
    // (ꐠ) YI SYLLABLE JJUOX	[4413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA420, 0x003F };
    uint32_t const ces[9] = { 0x4413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_201)
{
    // A420 0061;	
    // (ꐠ) YI SYLLABLE JJUOX	[4413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA420, 0x0061 };
    uint32_t const ces[9] = { 0x4413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_202)
{
    // A420 0041;	
    // (ꐠ) YI SYLLABLE JJUOX	[4413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA420, 0x0041 };
    uint32_t const ces[9] = { 0x4413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_203)
{
    // A420 0062;	
    // (ꐠ) YI SYLLABLE JJUOX	[4413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA420, 0x0062 };
    uint32_t const ces[9] = { 0x4413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_204)
{
    // A421 0021;	
    // (ꐡ) YI SYLLABLE JJUO	[4414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA421, 0x0021 };
    uint32_t const ces[9] = { 0x4414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_205)
{
    // A421 003F;	
    // (ꐡ) YI SYLLABLE JJUO	[4414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA421, 0x003F };
    uint32_t const ces[9] = { 0x4414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_206)
{
    // A421 0061;	
    // (ꐡ) YI SYLLABLE JJUO	[4414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA421, 0x0061 };
    uint32_t const ces[9] = { 0x4414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_207)
{
    // A421 0041;	
    // (ꐡ) YI SYLLABLE JJUO	[4414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA421, 0x0041 };
    uint32_t const ces[9] = { 0x4414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_208)
{
    // A421 0062;	
    // (ꐡ) YI SYLLABLE JJUO	[4414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA421, 0x0062 };
    uint32_t const ces[9] = { 0x4414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_209)
{
    // A422 0021;	
    // (ꐢ) YI SYLLABLE JJUOP	[4415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA422, 0x0021 };
    uint32_t const ces[9] = { 0x4415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_210)
{
    // A422 003F;	
    // (ꐢ) YI SYLLABLE JJUOP	[4415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA422, 0x003F };
    uint32_t const ces[9] = { 0x4415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_211)
{
    // A422 0061;	
    // (ꐢ) YI SYLLABLE JJUOP	[4415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA422, 0x0061 };
    uint32_t const ces[9] = { 0x4415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_212)
{
    // A422 0041;	
    // (ꐢ) YI SYLLABLE JJUOP	[4415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA422, 0x0041 };
    uint32_t const ces[9] = { 0x4415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_213)
{
    // A422 0062;	
    // (ꐢ) YI SYLLABLE JJUOP	[4415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA422, 0x0062 };
    uint32_t const ces[9] = { 0x4415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_214)
{
    // A423 0021;	
    // (ꐣ) YI SYLLABLE JJOT	[4416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA423, 0x0021 };
    uint32_t const ces[9] = { 0x4416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_215)
{
    // A423 003F;	
    // (ꐣ) YI SYLLABLE JJOT	[4416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA423, 0x003F };
    uint32_t const ces[9] = { 0x4416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_216)
{
    // A423 0061;	
    // (ꐣ) YI SYLLABLE JJOT	[4416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA423, 0x0061 };
    uint32_t const ces[9] = { 0x4416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_217)
{
    // A423 0041;	
    // (ꐣ) YI SYLLABLE JJOT	[4416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA423, 0x0041 };
    uint32_t const ces[9] = { 0x4416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_218)
{
    // A423 0062;	
    // (ꐣ) YI SYLLABLE JJOT	[4416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA423, 0x0062 };
    uint32_t const ces[9] = { 0x4416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_219)
{
    // A424 0021;	
    // (ꐤ) YI SYLLABLE JJOX	[4417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA424, 0x0021 };
    uint32_t const ces[9] = { 0x4417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_220)
{
    // A424 003F;	
    // (ꐤ) YI SYLLABLE JJOX	[4417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA424, 0x003F };
    uint32_t const ces[9] = { 0x4417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_221)
{
    // A424 0061;	
    // (ꐤ) YI SYLLABLE JJOX	[4417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA424, 0x0061 };
    uint32_t const ces[9] = { 0x4417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_222)
{
    // A424 0041;	
    // (ꐤ) YI SYLLABLE JJOX	[4417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA424, 0x0041 };
    uint32_t const ces[9] = { 0x4417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_223)
{
    // A424 0062;	
    // (ꐤ) YI SYLLABLE JJOX	[4417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA424, 0x0062 };
    uint32_t const ces[9] = { 0x4417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_224)
{
    // A425 0021;	
    // (ꐥ) YI SYLLABLE JJO	[4418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA425, 0x0021 };
    uint32_t const ces[9] = { 0x4418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_225)
{
    // A425 003F;	
    // (ꐥ) YI SYLLABLE JJO	[4418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA425, 0x003F };
    uint32_t const ces[9] = { 0x4418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_226)
{
    // A425 0061;	
    // (ꐥ) YI SYLLABLE JJO	[4418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA425, 0x0061 };
    uint32_t const ces[9] = { 0x4418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_227)
{
    // A425 0041;	
    // (ꐥ) YI SYLLABLE JJO	[4418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA425, 0x0041 };
    uint32_t const ces[9] = { 0x4418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_228)
{
    // A425 0062;	
    // (ꐥ) YI SYLLABLE JJO	[4418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA425, 0x0062 };
    uint32_t const ces[9] = { 0x4418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_229)
{
    // A426 0021;	
    // (ꐦ) YI SYLLABLE JJOP	[4419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA426, 0x0021 };
    uint32_t const ces[9] = { 0x4419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_230)
{
    // A426 003F;	
    // (ꐦ) YI SYLLABLE JJOP	[4419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA426, 0x003F };
    uint32_t const ces[9] = { 0x4419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_231)
{
    // A426 0061;	
    // (ꐦ) YI SYLLABLE JJOP	[4419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA426, 0x0061 };
    uint32_t const ces[9] = { 0x4419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_232)
{
    // A426 0041;	
    // (ꐦ) YI SYLLABLE JJOP	[4419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA426, 0x0041 };
    uint32_t const ces[9] = { 0x4419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_233)
{
    // A426 0062;	
    // (ꐦ) YI SYLLABLE JJOP	[4419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA426, 0x0062 };
    uint32_t const ces[9] = { 0x4419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_234)
{
    // A427 0021;	
    // (ꐧ) YI SYLLABLE JJUT	[441A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA427, 0x0021 };
    uint32_t const ces[9] = { 0x441A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_235)
{
    // A427 003F;	
    // (ꐧ) YI SYLLABLE JJUT	[441A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA427, 0x003F };
    uint32_t const ces[9] = { 0x441A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_236)
{
    // A427 0061;	
    // (ꐧ) YI SYLLABLE JJUT	[441A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA427, 0x0061 };
    uint32_t const ces[9] = { 0x441A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_237)
{
    // A427 0041;	
    // (ꐧ) YI SYLLABLE JJUT	[441A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA427, 0x0041 };
    uint32_t const ces[9] = { 0x441A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_238)
{
    // A427 0062;	
    // (ꐧ) YI SYLLABLE JJUT	[441A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA427, 0x0062 };
    uint32_t const ces[9] = { 0x441A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_239)
{
    // A428 0021;	
    // (ꐨ) YI SYLLABLE JJUX	[441B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA428, 0x0021 };
    uint32_t const ces[9] = { 0x441B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_240)
{
    // A428 003F;	
    // (ꐨ) YI SYLLABLE JJUX	[441B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA428, 0x003F };
    uint32_t const ces[9] = { 0x441B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_241)
{
    // A428 0061;	
    // (ꐨ) YI SYLLABLE JJUX	[441B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA428, 0x0061 };
    uint32_t const ces[9] = { 0x441B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_242)
{
    // A428 0041;	
    // (ꐨ) YI SYLLABLE JJUX	[441B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA428, 0x0041 };
    uint32_t const ces[9] = { 0x441B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_243)
{
    // A428 0062;	
    // (ꐨ) YI SYLLABLE JJUX	[441B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA428, 0x0062 };
    uint32_t const ces[9] = { 0x441B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_244)
{
    // A429 0021;	
    // (ꐩ) YI SYLLABLE JJU	[441C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA429, 0x0021 };
    uint32_t const ces[9] = { 0x441C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_245)
{
    // A429 003F;	
    // (ꐩ) YI SYLLABLE JJU	[441C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA429, 0x003F };
    uint32_t const ces[9] = { 0x441C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_246)
{
    // A429 0061;	
    // (ꐩ) YI SYLLABLE JJU	[441C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA429, 0x0061 };
    uint32_t const ces[9] = { 0x441C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_247)
{
    // A429 0041;	
    // (ꐩ) YI SYLLABLE JJU	[441C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA429, 0x0041 };
    uint32_t const ces[9] = { 0x441C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_248)
{
    // A429 0062;	
    // (ꐩ) YI SYLLABLE JJU	[441C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA429, 0x0062 };
    uint32_t const ces[9] = { 0x441C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_249)
{
    // A42A 0021;	
    // (ꐪ) YI SYLLABLE JJUP	[441D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42A, 0x0021 };
    uint32_t const ces[9] = { 0x441D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_250)
{
    // A42A 003F;	
    // (ꐪ) YI SYLLABLE JJUP	[441D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42A, 0x003F };
    uint32_t const ces[9] = { 0x441D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_251)
{
    // A42A 0061;	
    // (ꐪ) YI SYLLABLE JJUP	[441D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42A, 0x0061 };
    uint32_t const ces[9] = { 0x441D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_252)
{
    // A42A 0041;	
    // (ꐪ) YI SYLLABLE JJUP	[441D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42A, 0x0041 };
    uint32_t const ces[9] = { 0x441D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_253)
{
    // A42A 0062;	
    // (ꐪ) YI SYLLABLE JJUP	[441D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42A, 0x0062 };
    uint32_t const ces[9] = { 0x441D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_254)
{
    // A42B 0021;	
    // (ꐫ) YI SYLLABLE JJURX	[441E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42B, 0x0021 };
    uint32_t const ces[9] = { 0x441E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_255)
{
    // A42B 003F;	
    // (ꐫ) YI SYLLABLE JJURX	[441E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42B, 0x003F };
    uint32_t const ces[9] = { 0x441E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_256)
{
    // A42B 0061;	
    // (ꐫ) YI SYLLABLE JJURX	[441E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42B, 0x0061 };
    uint32_t const ces[9] = { 0x441E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_257)
{
    // A42B 0041;	
    // (ꐫ) YI SYLLABLE JJURX	[441E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42B, 0x0041 };
    uint32_t const ces[9] = { 0x441E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_258)
{
    // A42B 0062;	
    // (ꐫ) YI SYLLABLE JJURX	[441E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42B, 0x0062 };
    uint32_t const ces[9] = { 0x441E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_259)
{
    // A42C 0021;	
    // (ꐬ) YI SYLLABLE JJUR	[441F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42C, 0x0021 };
    uint32_t const ces[9] = { 0x441F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_260)
{
    // A42C 003F;	
    // (ꐬ) YI SYLLABLE JJUR	[441F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42C, 0x003F };
    uint32_t const ces[9] = { 0x441F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_261)
{
    // A42C 0061;	
    // (ꐬ) YI SYLLABLE JJUR	[441F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42C, 0x0061 };
    uint32_t const ces[9] = { 0x441F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_262)
{
    // A42C 0041;	
    // (ꐬ) YI SYLLABLE JJUR	[441F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42C, 0x0041 };
    uint32_t const ces[9] = { 0x441F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_263)
{
    // A42C 0062;	
    // (ꐬ) YI SYLLABLE JJUR	[441F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42C, 0x0062 };
    uint32_t const ces[9] = { 0x441F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_264)
{
    // A42D 0021;	
    // (ꐭ) YI SYLLABLE JJYT	[4420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42D, 0x0021 };
    uint32_t const ces[9] = { 0x4420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_265)
{
    // A42D 003F;	
    // (ꐭ) YI SYLLABLE JJYT	[4420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42D, 0x003F };
    uint32_t const ces[9] = { 0x4420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_266)
{
    // A42D 0061;	
    // (ꐭ) YI SYLLABLE JJYT	[4420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42D, 0x0061 };
    uint32_t const ces[9] = { 0x4420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_267)
{
    // A42D 0041;	
    // (ꐭ) YI SYLLABLE JJYT	[4420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42D, 0x0041 };
    uint32_t const ces[9] = { 0x4420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_268)
{
    // A42D 0062;	
    // (ꐭ) YI SYLLABLE JJYT	[4420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42D, 0x0062 };
    uint32_t const ces[9] = { 0x4420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_269)
{
    // A42E 0021;	
    // (ꐮ) YI SYLLABLE JJYX	[4421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42E, 0x0021 };
    uint32_t const ces[9] = { 0x4421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_270)
{
    // A42E 003F;	
    // (ꐮ) YI SYLLABLE JJYX	[4421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42E, 0x003F };
    uint32_t const ces[9] = { 0x4421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_271)
{
    // A42E 0061;	
    // (ꐮ) YI SYLLABLE JJYX	[4421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42E, 0x0061 };
    uint32_t const ces[9] = { 0x4421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_272)
{
    // A42E 0041;	
    // (ꐮ) YI SYLLABLE JJYX	[4421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42E, 0x0041 };
    uint32_t const ces[9] = { 0x4421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_273)
{
    // A42E 0062;	
    // (ꐮ) YI SYLLABLE JJYX	[4421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42E, 0x0062 };
    uint32_t const ces[9] = { 0x4421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_274)
{
    // A42F 0021;	
    // (ꐯ) YI SYLLABLE JJY	[4422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42F, 0x0021 };
    uint32_t const ces[9] = { 0x4422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_275)
{
    // A42F 003F;	
    // (ꐯ) YI SYLLABLE JJY	[4422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42F, 0x003F };
    uint32_t const ces[9] = { 0x4422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_276)
{
    // A42F 0061;	
    // (ꐯ) YI SYLLABLE JJY	[4422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42F, 0x0061 };
    uint32_t const ces[9] = { 0x4422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_277)
{
    // A42F 0041;	
    // (ꐯ) YI SYLLABLE JJY	[4422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA42F, 0x0041 };
    uint32_t const ces[9] = { 0x4422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_278)
{
    // A42F 0062;	
    // (ꐯ) YI SYLLABLE JJY	[4422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA42F, 0x0062 };
    uint32_t const ces[9] = { 0x4422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_279)
{
    // A430 0021;	
    // (ꐰ) YI SYLLABLE JJYP	[4423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA430, 0x0021 };
    uint32_t const ces[9] = { 0x4423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_280)
{
    // A430 003F;	
    // (ꐰ) YI SYLLABLE JJYP	[4423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA430, 0x003F };
    uint32_t const ces[9] = { 0x4423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_281)
{
    // A430 0061;	
    // (ꐰ) YI SYLLABLE JJYP	[4423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA430, 0x0061 };
    uint32_t const ces[9] = { 0x4423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_282)
{
    // A430 0041;	
    // (ꐰ) YI SYLLABLE JJYP	[4423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA430, 0x0041 };
    uint32_t const ces[9] = { 0x4423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_283)
{
    // A430 0062;	
    // (ꐰ) YI SYLLABLE JJYP	[4423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA430, 0x0062 };
    uint32_t const ces[9] = { 0x4423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_284)
{
    // A431 0021;	
    // (ꐱ) YI SYLLABLE NJIT	[4424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA431, 0x0021 };
    uint32_t const ces[9] = { 0x4424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_285)
{
    // A431 003F;	
    // (ꐱ) YI SYLLABLE NJIT	[4424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA431, 0x003F };
    uint32_t const ces[9] = { 0x4424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_286)
{
    // A431 0061;	
    // (ꐱ) YI SYLLABLE NJIT	[4424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA431, 0x0061 };
    uint32_t const ces[9] = { 0x4424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_287)
{
    // A431 0041;	
    // (ꐱ) YI SYLLABLE NJIT	[4424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA431, 0x0041 };
    uint32_t const ces[9] = { 0x4424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_288)
{
    // A431 0062;	
    // (ꐱ) YI SYLLABLE NJIT	[4424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA431, 0x0062 };
    uint32_t const ces[9] = { 0x4424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_289)
{
    // A432 0021;	
    // (ꐲ) YI SYLLABLE NJIX	[4425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA432, 0x0021 };
    uint32_t const ces[9] = { 0x4425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_290)
{
    // A432 003F;	
    // (ꐲ) YI SYLLABLE NJIX	[4425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA432, 0x003F };
    uint32_t const ces[9] = { 0x4425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_291)
{
    // A432 0061;	
    // (ꐲ) YI SYLLABLE NJIX	[4425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA432, 0x0061 };
    uint32_t const ces[9] = { 0x4425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_292)
{
    // A432 0041;	
    // (ꐲ) YI SYLLABLE NJIX	[4425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA432, 0x0041 };
    uint32_t const ces[9] = { 0x4425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_293)
{
    // A432 0062;	
    // (ꐲ) YI SYLLABLE NJIX	[4425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA432, 0x0062 };
    uint32_t const ces[9] = { 0x4425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_294)
{
    // A433 0021;	
    // (ꐳ) YI SYLLABLE NJI	[4426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA433, 0x0021 };
    uint32_t const ces[9] = { 0x4426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_295)
{
    // A433 003F;	
    // (ꐳ) YI SYLLABLE NJI	[4426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA433, 0x003F };
    uint32_t const ces[9] = { 0x4426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_296)
{
    // A433 0061;	
    // (ꐳ) YI SYLLABLE NJI	[4426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA433, 0x0061 };
    uint32_t const ces[9] = { 0x4426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_297)
{
    // A433 0041;	
    // (ꐳ) YI SYLLABLE NJI	[4426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA433, 0x0041 };
    uint32_t const ces[9] = { 0x4426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_298)
{
    // A433 0062;	
    // (ꐳ) YI SYLLABLE NJI	[4426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA433, 0x0062 };
    uint32_t const ces[9] = { 0x4426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_299)
{
    // A434 0021;	
    // (ꐴ) YI SYLLABLE NJIP	[4427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA434, 0x0021 };
    uint32_t const ces[9] = { 0x4427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_300)
{
    // A434 003F;	
    // (ꐴ) YI SYLLABLE NJIP	[4427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA434, 0x003F };
    uint32_t const ces[9] = { 0x4427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_301)
{
    // A434 0061;	
    // (ꐴ) YI SYLLABLE NJIP	[4427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA434, 0x0061 };
    uint32_t const ces[9] = { 0x4427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_302)
{
    // A434 0041;	
    // (ꐴ) YI SYLLABLE NJIP	[4427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA434, 0x0041 };
    uint32_t const ces[9] = { 0x4427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_303)
{
    // A434 0062;	
    // (ꐴ) YI SYLLABLE NJIP	[4427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA434, 0x0062 };
    uint32_t const ces[9] = { 0x4427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_304)
{
    // A435 0021;	
    // (ꐵ) YI SYLLABLE NJIET	[4428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA435, 0x0021 };
    uint32_t const ces[9] = { 0x4428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_305)
{
    // A435 003F;	
    // (ꐵ) YI SYLLABLE NJIET	[4428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA435, 0x003F };
    uint32_t const ces[9] = { 0x4428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_306)
{
    // A435 0061;	
    // (ꐵ) YI SYLLABLE NJIET	[4428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA435, 0x0061 };
    uint32_t const ces[9] = { 0x4428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_307)
{
    // A435 0041;	
    // (ꐵ) YI SYLLABLE NJIET	[4428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA435, 0x0041 };
    uint32_t const ces[9] = { 0x4428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_308)
{
    // A435 0062;	
    // (ꐵ) YI SYLLABLE NJIET	[4428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA435, 0x0062 };
    uint32_t const ces[9] = { 0x4428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_309)
{
    // A436 0021;	
    // (ꐶ) YI SYLLABLE NJIEX	[4429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA436, 0x0021 };
    uint32_t const ces[9] = { 0x4429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_310)
{
    // A436 003F;	
    // (ꐶ) YI SYLLABLE NJIEX	[4429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA436, 0x003F };
    uint32_t const ces[9] = { 0x4429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_311)
{
    // A436 0061;	
    // (ꐶ) YI SYLLABLE NJIEX	[4429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA436, 0x0061 };
    uint32_t const ces[9] = { 0x4429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_312)
{
    // A436 0041;	
    // (ꐶ) YI SYLLABLE NJIEX	[4429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA436, 0x0041 };
    uint32_t const ces[9] = { 0x4429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_313)
{
    // A436 0062;	
    // (ꐶ) YI SYLLABLE NJIEX	[4429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA436, 0x0062 };
    uint32_t const ces[9] = { 0x4429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_314)
{
    // A437 0021;	
    // (ꐷ) YI SYLLABLE NJIE	[442A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA437, 0x0021 };
    uint32_t const ces[9] = { 0x442A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_315)
{
    // A437 003F;	
    // (ꐷ) YI SYLLABLE NJIE	[442A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA437, 0x003F };
    uint32_t const ces[9] = { 0x442A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_316)
{
    // A437 0061;	
    // (ꐷ) YI SYLLABLE NJIE	[442A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA437, 0x0061 };
    uint32_t const ces[9] = { 0x442A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_317)
{
    // A437 0041;	
    // (ꐷ) YI SYLLABLE NJIE	[442A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA437, 0x0041 };
    uint32_t const ces[9] = { 0x442A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_318)
{
    // A437 0062;	
    // (ꐷ) YI SYLLABLE NJIE	[442A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA437, 0x0062 };
    uint32_t const ces[9] = { 0x442A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_319)
{
    // A438 0021;	
    // (ꐸ) YI SYLLABLE NJIEP	[442B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA438, 0x0021 };
    uint32_t const ces[9] = { 0x442B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_320)
{
    // A438 003F;	
    // (ꐸ) YI SYLLABLE NJIEP	[442B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA438, 0x003F };
    uint32_t const ces[9] = { 0x442B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_321)
{
    // A438 0061;	
    // (ꐸ) YI SYLLABLE NJIEP	[442B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA438, 0x0061 };
    uint32_t const ces[9] = { 0x442B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_322)
{
    // A438 0041;	
    // (ꐸ) YI SYLLABLE NJIEP	[442B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA438, 0x0041 };
    uint32_t const ces[9] = { 0x442B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_323)
{
    // A438 0062;	
    // (ꐸ) YI SYLLABLE NJIEP	[442B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA438, 0x0062 };
    uint32_t const ces[9] = { 0x442B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_324)
{
    // A439 0021;	
    // (ꐹ) YI SYLLABLE NJUOX	[442C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA439, 0x0021 };
    uint32_t const ces[9] = { 0x442C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_325)
{
    // A439 003F;	
    // (ꐹ) YI SYLLABLE NJUOX	[442C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA439, 0x003F };
    uint32_t const ces[9] = { 0x442C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_326)
{
    // A439 0061;	
    // (ꐹ) YI SYLLABLE NJUOX	[442C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA439, 0x0061 };
    uint32_t const ces[9] = { 0x442C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_327)
{
    // A439 0041;	
    // (ꐹ) YI SYLLABLE NJUOX	[442C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA439, 0x0041 };
    uint32_t const ces[9] = { 0x442C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_328)
{
    // A439 0062;	
    // (ꐹ) YI SYLLABLE NJUOX	[442C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA439, 0x0062 };
    uint32_t const ces[9] = { 0x442C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_329)
{
    // A43A 0021;	
    // (ꐺ) YI SYLLABLE NJUO	[442D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43A, 0x0021 };
    uint32_t const ces[9] = { 0x442D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_330)
{
    // A43A 003F;	
    // (ꐺ) YI SYLLABLE NJUO	[442D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43A, 0x003F };
    uint32_t const ces[9] = { 0x442D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_331)
{
    // A43A 0061;	
    // (ꐺ) YI SYLLABLE NJUO	[442D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43A, 0x0061 };
    uint32_t const ces[9] = { 0x442D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_332)
{
    // A43A 0041;	
    // (ꐺ) YI SYLLABLE NJUO	[442D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43A, 0x0041 };
    uint32_t const ces[9] = { 0x442D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_333)
{
    // A43A 0062;	
    // (ꐺ) YI SYLLABLE NJUO	[442D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43A, 0x0062 };
    uint32_t const ces[9] = { 0x442D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_334)
{
    // A43B 0021;	
    // (ꐻ) YI SYLLABLE NJOT	[442E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43B, 0x0021 };
    uint32_t const ces[9] = { 0x442E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_335)
{
    // A43B 003F;	
    // (ꐻ) YI SYLLABLE NJOT	[442E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43B, 0x003F };
    uint32_t const ces[9] = { 0x442E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_336)
{
    // A43B 0061;	
    // (ꐻ) YI SYLLABLE NJOT	[442E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43B, 0x0061 };
    uint32_t const ces[9] = { 0x442E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_337)
{
    // A43B 0041;	
    // (ꐻ) YI SYLLABLE NJOT	[442E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43B, 0x0041 };
    uint32_t const ces[9] = { 0x442E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_338)
{
    // A43B 0062;	
    // (ꐻ) YI SYLLABLE NJOT	[442E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43B, 0x0062 };
    uint32_t const ces[9] = { 0x442E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_339)
{
    // A43C 0021;	
    // (ꐼ) YI SYLLABLE NJOX	[442F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43C, 0x0021 };
    uint32_t const ces[9] = { 0x442F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_340)
{
    // A43C 003F;	
    // (ꐼ) YI SYLLABLE NJOX	[442F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43C, 0x003F };
    uint32_t const ces[9] = { 0x442F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_341)
{
    // A43C 0061;	
    // (ꐼ) YI SYLLABLE NJOX	[442F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43C, 0x0061 };
    uint32_t const ces[9] = { 0x442F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_342)
{
    // A43C 0041;	
    // (ꐼ) YI SYLLABLE NJOX	[442F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43C, 0x0041 };
    uint32_t const ces[9] = { 0x442F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_343)
{
    // A43C 0062;	
    // (ꐼ) YI SYLLABLE NJOX	[442F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43C, 0x0062 };
    uint32_t const ces[9] = { 0x442F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_344)
{
    // A43D 0021;	
    // (ꐽ) YI SYLLABLE NJO	[4430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43D, 0x0021 };
    uint32_t const ces[9] = { 0x4430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_345)
{
    // A43D 003F;	
    // (ꐽ) YI SYLLABLE NJO	[4430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43D, 0x003F };
    uint32_t const ces[9] = { 0x4430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_346)
{
    // A43D 0061;	
    // (ꐽ) YI SYLLABLE NJO	[4430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43D, 0x0061 };
    uint32_t const ces[9] = { 0x4430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_347)
{
    // A43D 0041;	
    // (ꐽ) YI SYLLABLE NJO	[4430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43D, 0x0041 };
    uint32_t const ces[9] = { 0x4430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_348)
{
    // A43D 0062;	
    // (ꐽ) YI SYLLABLE NJO	[4430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43D, 0x0062 };
    uint32_t const ces[9] = { 0x4430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_349)
{
    // A43E 0021;	
    // (ꐾ) YI SYLLABLE NJOP	[4431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43E, 0x0021 };
    uint32_t const ces[9] = { 0x4431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_350)
{
    // A43E 003F;	
    // (ꐾ) YI SYLLABLE NJOP	[4431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43E, 0x003F };
    uint32_t const ces[9] = { 0x4431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_351)
{
    // A43E 0061;	
    // (ꐾ) YI SYLLABLE NJOP	[4431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43E, 0x0061 };
    uint32_t const ces[9] = { 0x4431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_352)
{
    // A43E 0041;	
    // (ꐾ) YI SYLLABLE NJOP	[4431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43E, 0x0041 };
    uint32_t const ces[9] = { 0x4431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_353)
{
    // A43E 0062;	
    // (ꐾ) YI SYLLABLE NJOP	[4431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43E, 0x0062 };
    uint32_t const ces[9] = { 0x4431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_354)
{
    // A43F 0021;	
    // (ꐿ) YI SYLLABLE NJUX	[4432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43F, 0x0021 };
    uint32_t const ces[9] = { 0x4432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_355)
{
    // A43F 003F;	
    // (ꐿ) YI SYLLABLE NJUX	[4432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43F, 0x003F };
    uint32_t const ces[9] = { 0x4432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_356)
{
    // A43F 0061;	
    // (ꐿ) YI SYLLABLE NJUX	[4432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43F, 0x0061 };
    uint32_t const ces[9] = { 0x4432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_357)
{
    // A43F 0041;	
    // (ꐿ) YI SYLLABLE NJUX	[4432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA43F, 0x0041 };
    uint32_t const ces[9] = { 0x4432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_358)
{
    // A43F 0062;	
    // (ꐿ) YI SYLLABLE NJUX	[4432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA43F, 0x0062 };
    uint32_t const ces[9] = { 0x4432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_359)
{
    // A440 0021;	
    // (ꑀ) YI SYLLABLE NJU	[4433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA440, 0x0021 };
    uint32_t const ces[9] = { 0x4433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_360)
{
    // A440 003F;	
    // (ꑀ) YI SYLLABLE NJU	[4433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA440, 0x003F };
    uint32_t const ces[9] = { 0x4433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_361)
{
    // A440 0061;	
    // (ꑀ) YI SYLLABLE NJU	[4433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA440, 0x0061 };
    uint32_t const ces[9] = { 0x4433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_362)
{
    // A440 0041;	
    // (ꑀ) YI SYLLABLE NJU	[4433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA440, 0x0041 };
    uint32_t const ces[9] = { 0x4433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_363)
{
    // A440 0062;	
    // (ꑀ) YI SYLLABLE NJU	[4433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA440, 0x0062 };
    uint32_t const ces[9] = { 0x4433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_364)
{
    // A441 0021;	
    // (ꑁ) YI SYLLABLE NJUP	[4434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA441, 0x0021 };
    uint32_t const ces[9] = { 0x4434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_365)
{
    // A441 003F;	
    // (ꑁ) YI SYLLABLE NJUP	[4434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA441, 0x003F };
    uint32_t const ces[9] = { 0x4434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_366)
{
    // A441 0061;	
    // (ꑁ) YI SYLLABLE NJUP	[4434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA441, 0x0061 };
    uint32_t const ces[9] = { 0x4434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_367)
{
    // A441 0041;	
    // (ꑁ) YI SYLLABLE NJUP	[4434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA441, 0x0041 };
    uint32_t const ces[9] = { 0x4434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_368)
{
    // A441 0062;	
    // (ꑁ) YI SYLLABLE NJUP	[4434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA441, 0x0062 };
    uint32_t const ces[9] = { 0x4434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_369)
{
    // A442 0021;	
    // (ꑂ) YI SYLLABLE NJURX	[4435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA442, 0x0021 };
    uint32_t const ces[9] = { 0x4435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_370)
{
    // A442 003F;	
    // (ꑂ) YI SYLLABLE NJURX	[4435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA442, 0x003F };
    uint32_t const ces[9] = { 0x4435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_371)
{
    // A442 0061;	
    // (ꑂ) YI SYLLABLE NJURX	[4435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA442, 0x0061 };
    uint32_t const ces[9] = { 0x4435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_372)
{
    // A442 0041;	
    // (ꑂ) YI SYLLABLE NJURX	[4435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA442, 0x0041 };
    uint32_t const ces[9] = { 0x4435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_373)
{
    // A442 0062;	
    // (ꑂ) YI SYLLABLE NJURX	[4435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA442, 0x0062 };
    uint32_t const ces[9] = { 0x4435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_374)
{
    // A443 0021;	
    // (ꑃ) YI SYLLABLE NJUR	[4436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA443, 0x0021 };
    uint32_t const ces[9] = { 0x4436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_375)
{
    // A443 003F;	
    // (ꑃ) YI SYLLABLE NJUR	[4436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA443, 0x003F };
    uint32_t const ces[9] = { 0x4436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_376)
{
    // A443 0061;	
    // (ꑃ) YI SYLLABLE NJUR	[4436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA443, 0x0061 };
    uint32_t const ces[9] = { 0x4436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_377)
{
    // A443 0041;	
    // (ꑃ) YI SYLLABLE NJUR	[4436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA443, 0x0041 };
    uint32_t const ces[9] = { 0x4436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_378)
{
    // A443 0062;	
    // (ꑃ) YI SYLLABLE NJUR	[4436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA443, 0x0062 };
    uint32_t const ces[9] = { 0x4436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_379)
{
    // A444 0021;	
    // (ꑄ) YI SYLLABLE NJYT	[4437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA444, 0x0021 };
    uint32_t const ces[9] = { 0x4437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_380)
{
    // A444 003F;	
    // (ꑄ) YI SYLLABLE NJYT	[4437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA444, 0x003F };
    uint32_t const ces[9] = { 0x4437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_381)
{
    // A444 0061;	
    // (ꑄ) YI SYLLABLE NJYT	[4437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA444, 0x0061 };
    uint32_t const ces[9] = { 0x4437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_382)
{
    // A444 0041;	
    // (ꑄ) YI SYLLABLE NJYT	[4437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA444, 0x0041 };
    uint32_t const ces[9] = { 0x4437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_383)
{
    // A444 0062;	
    // (ꑄ) YI SYLLABLE NJYT	[4437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA444, 0x0062 };
    uint32_t const ces[9] = { 0x4437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_384)
{
    // A445 0021;	
    // (ꑅ) YI SYLLABLE NJYX	[4438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA445, 0x0021 };
    uint32_t const ces[9] = { 0x4438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_385)
{
    // A445 003F;	
    // (ꑅ) YI SYLLABLE NJYX	[4438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA445, 0x003F };
    uint32_t const ces[9] = { 0x4438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_386)
{
    // A445 0061;	
    // (ꑅ) YI SYLLABLE NJYX	[4438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA445, 0x0061 };
    uint32_t const ces[9] = { 0x4438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_387)
{
    // A445 0041;	
    // (ꑅ) YI SYLLABLE NJYX	[4438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA445, 0x0041 };
    uint32_t const ces[9] = { 0x4438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_388)
{
    // A445 0062;	
    // (ꑅ) YI SYLLABLE NJYX	[4438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA445, 0x0062 };
    uint32_t const ces[9] = { 0x4438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_389)
{
    // A446 0021;	
    // (ꑆ) YI SYLLABLE NJY	[4439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA446, 0x0021 };
    uint32_t const ces[9] = { 0x4439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_390)
{
    // A446 003F;	
    // (ꑆ) YI SYLLABLE NJY	[4439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA446, 0x003F };
    uint32_t const ces[9] = { 0x4439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_391)
{
    // A446 0061;	
    // (ꑆ) YI SYLLABLE NJY	[4439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA446, 0x0061 };
    uint32_t const ces[9] = { 0x4439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_392)
{
    // A446 0041;	
    // (ꑆ) YI SYLLABLE NJY	[4439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA446, 0x0041 };
    uint32_t const ces[9] = { 0x4439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_393)
{
    // A446 0062;	
    // (ꑆ) YI SYLLABLE NJY	[4439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA446, 0x0062 };
    uint32_t const ces[9] = { 0x4439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_394)
{
    // A447 0021;	
    // (ꑇ) YI SYLLABLE NJYP	[443A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA447, 0x0021 };
    uint32_t const ces[9] = { 0x443A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_395)
{
    // A447 003F;	
    // (ꑇ) YI SYLLABLE NJYP	[443A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA447, 0x003F };
    uint32_t const ces[9] = { 0x443A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_396)
{
    // A447 0061;	
    // (ꑇ) YI SYLLABLE NJYP	[443A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA447, 0x0061 };
    uint32_t const ces[9] = { 0x443A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_397)
{
    // A447 0041;	
    // (ꑇ) YI SYLLABLE NJYP	[443A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA447, 0x0041 };
    uint32_t const ces[9] = { 0x443A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_398)
{
    // A447 0062;	
    // (ꑇ) YI SYLLABLE NJYP	[443A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA447, 0x0062 };
    uint32_t const ces[9] = { 0x443A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_399)
{
    // A448 0021;	
    // (ꑈ) YI SYLLABLE NJYRX	[443B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA448, 0x0021 };
    uint32_t const ces[9] = { 0x443B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_400)
{
    // A448 003F;	
    // (ꑈ) YI SYLLABLE NJYRX	[443B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA448, 0x003F };
    uint32_t const ces[9] = { 0x443B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_401)
{
    // A448 0061;	
    // (ꑈ) YI SYLLABLE NJYRX	[443B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA448, 0x0061 };
    uint32_t const ces[9] = { 0x443B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_402)
{
    // A448 0041;	
    // (ꑈ) YI SYLLABLE NJYRX	[443B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA448, 0x0041 };
    uint32_t const ces[9] = { 0x443B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_403)
{
    // A448 0062;	
    // (ꑈ) YI SYLLABLE NJYRX	[443B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA448, 0x0062 };
    uint32_t const ces[9] = { 0x443B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_404)
{
    // A449 0021;	
    // (ꑉ) YI SYLLABLE NJYR	[443C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA449, 0x0021 };
    uint32_t const ces[9] = { 0x443C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_405)
{
    // A449 003F;	
    // (ꑉ) YI SYLLABLE NJYR	[443C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA449, 0x003F };
    uint32_t const ces[9] = { 0x443C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_406)
{
    // A449 0061;	
    // (ꑉ) YI SYLLABLE NJYR	[443C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA449, 0x0061 };
    uint32_t const ces[9] = { 0x443C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_407)
{
    // A449 0041;	
    // (ꑉ) YI SYLLABLE NJYR	[443C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA449, 0x0041 };
    uint32_t const ces[9] = { 0x443C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_408)
{
    // A449 0062;	
    // (ꑉ) YI SYLLABLE NJYR	[443C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA449, 0x0062 };
    uint32_t const ces[9] = { 0x443C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_409)
{
    // A44A 0021;	
    // (ꑊ) YI SYLLABLE NYIT	[443D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44A, 0x0021 };
    uint32_t const ces[9] = { 0x443D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_410)
{
    // A44A 003F;	
    // (ꑊ) YI SYLLABLE NYIT	[443D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44A, 0x003F };
    uint32_t const ces[9] = { 0x443D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_411)
{
    // A44A 0061;	
    // (ꑊ) YI SYLLABLE NYIT	[443D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44A, 0x0061 };
    uint32_t const ces[9] = { 0x443D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_412)
{
    // A44A 0041;	
    // (ꑊ) YI SYLLABLE NYIT	[443D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44A, 0x0041 };
    uint32_t const ces[9] = { 0x443D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_413)
{
    // A44A 0062;	
    // (ꑊ) YI SYLLABLE NYIT	[443D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44A, 0x0062 };
    uint32_t const ces[9] = { 0x443D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_414)
{
    // A44B 0021;	
    // (ꑋ) YI SYLLABLE NYIX	[443E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44B, 0x0021 };
    uint32_t const ces[9] = { 0x443E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_415)
{
    // A44B 003F;	
    // (ꑋ) YI SYLLABLE NYIX	[443E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44B, 0x003F };
    uint32_t const ces[9] = { 0x443E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_416)
{
    // A44B 0061;	
    // (ꑋ) YI SYLLABLE NYIX	[443E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44B, 0x0061 };
    uint32_t const ces[9] = { 0x443E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_417)
{
    // A44B 0041;	
    // (ꑋ) YI SYLLABLE NYIX	[443E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44B, 0x0041 };
    uint32_t const ces[9] = { 0x443E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_418)
{
    // A44B 0062;	
    // (ꑋ) YI SYLLABLE NYIX	[443E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44B, 0x0062 };
    uint32_t const ces[9] = { 0x443E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_419)
{
    // A44C 0021;	
    // (ꑌ) YI SYLLABLE NYI	[443F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44C, 0x0021 };
    uint32_t const ces[9] = { 0x443F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_420)
{
    // A44C 003F;	
    // (ꑌ) YI SYLLABLE NYI	[443F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44C, 0x003F };
    uint32_t const ces[9] = { 0x443F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_421)
{
    // A44C 0061;	
    // (ꑌ) YI SYLLABLE NYI	[443F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44C, 0x0061 };
    uint32_t const ces[9] = { 0x443F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_422)
{
    // A44C 0041;	
    // (ꑌ) YI SYLLABLE NYI	[443F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44C, 0x0041 };
    uint32_t const ces[9] = { 0x443F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_423)
{
    // A44C 0062;	
    // (ꑌ) YI SYLLABLE NYI	[443F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44C, 0x0062 };
    uint32_t const ces[9] = { 0x443F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_424)
{
    // A44D 0021;	
    // (ꑍ) YI SYLLABLE NYIP	[4440 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44D, 0x0021 };
    uint32_t const ces[9] = { 0x4440, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_425)
{
    // A44D 003F;	
    // (ꑍ) YI SYLLABLE NYIP	[4440 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44D, 0x003F };
    uint32_t const ces[9] = { 0x4440, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_426)
{
    // A44D 0061;	
    // (ꑍ) YI SYLLABLE NYIP	[4440 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44D, 0x0061 };
    uint32_t const ces[9] = { 0x4440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_427)
{
    // A44D 0041;	
    // (ꑍ) YI SYLLABLE NYIP	[4440 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44D, 0x0041 };
    uint32_t const ces[9] = { 0x4440, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_428)
{
    // A44D 0062;	
    // (ꑍ) YI SYLLABLE NYIP	[4440 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44D, 0x0062 };
    uint32_t const ces[9] = { 0x4440, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_429)
{
    // A44E 0021;	
    // (ꑎ) YI SYLLABLE NYIET	[4441 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44E, 0x0021 };
    uint32_t const ces[9] = { 0x4441, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_430)
{
    // A44E 003F;	
    // (ꑎ) YI SYLLABLE NYIET	[4441 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44E, 0x003F };
    uint32_t const ces[9] = { 0x4441, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_431)
{
    // A44E 0061;	
    // (ꑎ) YI SYLLABLE NYIET	[4441 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44E, 0x0061 };
    uint32_t const ces[9] = { 0x4441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_432)
{
    // A44E 0041;	
    // (ꑎ) YI SYLLABLE NYIET	[4441 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44E, 0x0041 };
    uint32_t const ces[9] = { 0x4441, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_433)
{
    // A44E 0062;	
    // (ꑎ) YI SYLLABLE NYIET	[4441 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44E, 0x0062 };
    uint32_t const ces[9] = { 0x4441, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_434)
{
    // A44F 0021;	
    // (ꑏ) YI SYLLABLE NYIEX	[4442 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44F, 0x0021 };
    uint32_t const ces[9] = { 0x4442, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_435)
{
    // A44F 003F;	
    // (ꑏ) YI SYLLABLE NYIEX	[4442 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44F, 0x003F };
    uint32_t const ces[9] = { 0x4442, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_436)
{
    // A44F 0061;	
    // (ꑏ) YI SYLLABLE NYIEX	[4442 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44F, 0x0061 };
    uint32_t const ces[9] = { 0x4442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_437)
{
    // A44F 0041;	
    // (ꑏ) YI SYLLABLE NYIEX	[4442 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA44F, 0x0041 };
    uint32_t const ces[9] = { 0x4442, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_438)
{
    // A44F 0062;	
    // (ꑏ) YI SYLLABLE NYIEX	[4442 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA44F, 0x0062 };
    uint32_t const ces[9] = { 0x4442, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_439)
{
    // A450 0021;	
    // (ꑐ) YI SYLLABLE NYIE	[4443 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA450, 0x0021 };
    uint32_t const ces[9] = { 0x4443, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_440)
{
    // A450 003F;	
    // (ꑐ) YI SYLLABLE NYIE	[4443 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA450, 0x003F };
    uint32_t const ces[9] = { 0x4443, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_441)
{
    // A450 0061;	
    // (ꑐ) YI SYLLABLE NYIE	[4443 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA450, 0x0061 };
    uint32_t const ces[9] = { 0x4443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_442)
{
    // A450 0041;	
    // (ꑐ) YI SYLLABLE NYIE	[4443 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA450, 0x0041 };
    uint32_t const ces[9] = { 0x4443, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_443)
{
    // A450 0062;	
    // (ꑐ) YI SYLLABLE NYIE	[4443 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA450, 0x0062 };
    uint32_t const ces[9] = { 0x4443, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_444)
{
    // A451 0021;	
    // (ꑑ) YI SYLLABLE NYIEP	[4444 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA451, 0x0021 };
    uint32_t const ces[9] = { 0x4444, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_445)
{
    // A451 003F;	
    // (ꑑ) YI SYLLABLE NYIEP	[4444 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA451, 0x003F };
    uint32_t const ces[9] = { 0x4444, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_446)
{
    // A451 0061;	
    // (ꑑ) YI SYLLABLE NYIEP	[4444 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA451, 0x0061 };
    uint32_t const ces[9] = { 0x4444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_447)
{
    // A451 0041;	
    // (ꑑ) YI SYLLABLE NYIEP	[4444 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA451, 0x0041 };
    uint32_t const ces[9] = { 0x4444, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_448)
{
    // A451 0062;	
    // (ꑑ) YI SYLLABLE NYIEP	[4444 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA451, 0x0062 };
    uint32_t const ces[9] = { 0x4444, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_449)
{
    // A452 0021;	
    // (ꑒ) YI SYLLABLE NYUOX	[4445 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA452, 0x0021 };
    uint32_t const ces[9] = { 0x4445, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_450)
{
    // A452 003F;	
    // (ꑒ) YI SYLLABLE NYUOX	[4445 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA452, 0x003F };
    uint32_t const ces[9] = { 0x4445, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_451)
{
    // A452 0061;	
    // (ꑒ) YI SYLLABLE NYUOX	[4445 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA452, 0x0061 };
    uint32_t const ces[9] = { 0x4445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_452)
{
    // A452 0041;	
    // (ꑒ) YI SYLLABLE NYUOX	[4445 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA452, 0x0041 };
    uint32_t const ces[9] = { 0x4445, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_453)
{
    // A452 0062;	
    // (ꑒ) YI SYLLABLE NYUOX	[4445 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA452, 0x0062 };
    uint32_t const ces[9] = { 0x4445, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_454)
{
    // A453 0021;	
    // (ꑓ) YI SYLLABLE NYUO	[4446 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA453, 0x0021 };
    uint32_t const ces[9] = { 0x4446, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_455)
{
    // A453 003F;	
    // (ꑓ) YI SYLLABLE NYUO	[4446 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA453, 0x003F };
    uint32_t const ces[9] = { 0x4446, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_456)
{
    // A453 0061;	
    // (ꑓ) YI SYLLABLE NYUO	[4446 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA453, 0x0061 };
    uint32_t const ces[9] = { 0x4446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_457)
{
    // A453 0041;	
    // (ꑓ) YI SYLLABLE NYUO	[4446 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA453, 0x0041 };
    uint32_t const ces[9] = { 0x4446, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_458)
{
    // A453 0062;	
    // (ꑓ) YI SYLLABLE NYUO	[4446 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA453, 0x0062 };
    uint32_t const ces[9] = { 0x4446, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_459)
{
    // A454 0021;	
    // (ꑔ) YI SYLLABLE NYUOP	[4447 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA454, 0x0021 };
    uint32_t const ces[9] = { 0x4447, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_460)
{
    // A454 003F;	
    // (ꑔ) YI SYLLABLE NYUOP	[4447 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA454, 0x003F };
    uint32_t const ces[9] = { 0x4447, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_461)
{
    // A454 0061;	
    // (ꑔ) YI SYLLABLE NYUOP	[4447 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA454, 0x0061 };
    uint32_t const ces[9] = { 0x4447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_462)
{
    // A454 0041;	
    // (ꑔ) YI SYLLABLE NYUOP	[4447 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA454, 0x0041 };
    uint32_t const ces[9] = { 0x4447, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_463)
{
    // A454 0062;	
    // (ꑔ) YI SYLLABLE NYUOP	[4447 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA454, 0x0062 };
    uint32_t const ces[9] = { 0x4447, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_464)
{
    // A455 0021;	
    // (ꑕ) YI SYLLABLE NYOT	[4448 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA455, 0x0021 };
    uint32_t const ces[9] = { 0x4448, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_465)
{
    // A455 003F;	
    // (ꑕ) YI SYLLABLE NYOT	[4448 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA455, 0x003F };
    uint32_t const ces[9] = { 0x4448, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_466)
{
    // A455 0061;	
    // (ꑕ) YI SYLLABLE NYOT	[4448 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA455, 0x0061 };
    uint32_t const ces[9] = { 0x4448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_467)
{
    // A455 0041;	
    // (ꑕ) YI SYLLABLE NYOT	[4448 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA455, 0x0041 };
    uint32_t const ces[9] = { 0x4448, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_468)
{
    // A455 0062;	
    // (ꑕ) YI SYLLABLE NYOT	[4448 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA455, 0x0062 };
    uint32_t const ces[9] = { 0x4448, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_469)
{
    // A456 0021;	
    // (ꑖ) YI SYLLABLE NYOX	[4449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA456, 0x0021 };
    uint32_t const ces[9] = { 0x4449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_470)
{
    // A456 003F;	
    // (ꑖ) YI SYLLABLE NYOX	[4449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA456, 0x003F };
    uint32_t const ces[9] = { 0x4449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_471)
{
    // A456 0061;	
    // (ꑖ) YI SYLLABLE NYOX	[4449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA456, 0x0061 };
    uint32_t const ces[9] = { 0x4449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_472)
{
    // A456 0041;	
    // (ꑖ) YI SYLLABLE NYOX	[4449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA456, 0x0041 };
    uint32_t const ces[9] = { 0x4449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_473)
{
    // A456 0062;	
    // (ꑖ) YI SYLLABLE NYOX	[4449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA456, 0x0062 };
    uint32_t const ces[9] = { 0x4449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_474)
{
    // A457 0021;	
    // (ꑗ) YI SYLLABLE NYO	[444A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA457, 0x0021 };
    uint32_t const ces[9] = { 0x444A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_475)
{
    // A457 003F;	
    // (ꑗ) YI SYLLABLE NYO	[444A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA457, 0x003F };
    uint32_t const ces[9] = { 0x444A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_476)
{
    // A457 0061;	
    // (ꑗ) YI SYLLABLE NYO	[444A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA457, 0x0061 };
    uint32_t const ces[9] = { 0x444A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_477)
{
    // A457 0041;	
    // (ꑗ) YI SYLLABLE NYO	[444A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA457, 0x0041 };
    uint32_t const ces[9] = { 0x444A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_478)
{
    // A457 0062;	
    // (ꑗ) YI SYLLABLE NYO	[444A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA457, 0x0062 };
    uint32_t const ces[9] = { 0x444A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_479)
{
    // A458 0021;	
    // (ꑘ) YI SYLLABLE NYOP	[444B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA458, 0x0021 };
    uint32_t const ces[9] = { 0x444B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_480)
{
    // A458 003F;	
    // (ꑘ) YI SYLLABLE NYOP	[444B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA458, 0x003F };
    uint32_t const ces[9] = { 0x444B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_481)
{
    // A458 0061;	
    // (ꑘ) YI SYLLABLE NYOP	[444B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA458, 0x0061 };
    uint32_t const ces[9] = { 0x444B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_482)
{
    // A458 0041;	
    // (ꑘ) YI SYLLABLE NYOP	[444B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA458, 0x0041 };
    uint32_t const ces[9] = { 0x444B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_483)
{
    // A458 0062;	
    // (ꑘ) YI SYLLABLE NYOP	[444B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA458, 0x0062 };
    uint32_t const ces[9] = { 0x444B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_484)
{
    // A459 0021;	
    // (ꑙ) YI SYLLABLE NYUT	[444C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA459, 0x0021 };
    uint32_t const ces[9] = { 0x444C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_485)
{
    // A459 003F;	
    // (ꑙ) YI SYLLABLE NYUT	[444C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA459, 0x003F };
    uint32_t const ces[9] = { 0x444C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_486)
{
    // A459 0061;	
    // (ꑙ) YI SYLLABLE NYUT	[444C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA459, 0x0061 };
    uint32_t const ces[9] = { 0x444C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_487)
{
    // A459 0041;	
    // (ꑙ) YI SYLLABLE NYUT	[444C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA459, 0x0041 };
    uint32_t const ces[9] = { 0x444C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_488)
{
    // A459 0062;	
    // (ꑙ) YI SYLLABLE NYUT	[444C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA459, 0x0062 };
    uint32_t const ces[9] = { 0x444C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_489)
{
    // A45A 0021;	
    // (ꑚ) YI SYLLABLE NYUX	[444D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45A, 0x0021 };
    uint32_t const ces[9] = { 0x444D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_490)
{
    // A45A 003F;	
    // (ꑚ) YI SYLLABLE NYUX	[444D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45A, 0x003F };
    uint32_t const ces[9] = { 0x444D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_491)
{
    // A45A 0061;	
    // (ꑚ) YI SYLLABLE NYUX	[444D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45A, 0x0061 };
    uint32_t const ces[9] = { 0x444D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_492)
{
    // A45A 0041;	
    // (ꑚ) YI SYLLABLE NYUX	[444D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA45A, 0x0041 };
    uint32_t const ces[9] = { 0x444D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_493)
{
    // A45A 0062;	
    // (ꑚ) YI SYLLABLE NYUX	[444D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45A, 0x0062 };
    uint32_t const ces[9] = { 0x444D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_494)
{
    // A45B 0021;	
    // (ꑛ) YI SYLLABLE NYU	[444E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45B, 0x0021 };
    uint32_t const ces[9] = { 0x444E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_495)
{
    // A45B 003F;	
    // (ꑛ) YI SYLLABLE NYU	[444E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45B, 0x003F };
    uint32_t const ces[9] = { 0x444E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_496)
{
    // A45B 0061;	
    // (ꑛ) YI SYLLABLE NYU	[444E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45B, 0x0061 };
    uint32_t const ces[9] = { 0x444E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_497)
{
    // A45B 0041;	
    // (ꑛ) YI SYLLABLE NYU	[444E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA45B, 0x0041 };
    uint32_t const ces[9] = { 0x444E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_498)
{
    // A45B 0062;	
    // (ꑛ) YI SYLLABLE NYU	[444E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45B, 0x0062 };
    uint32_t const ces[9] = { 0x444E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_264_499)
{
    // A45C 0021;	
    // (ꑜ) YI SYLLABLE NYUP	[444F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA45C, 0x0021 };
    uint32_t const ces[9] = { 0x444F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

