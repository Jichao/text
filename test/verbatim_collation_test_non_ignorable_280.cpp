// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_280_000)
{
    // 106EE 003F;	
    // (êõÆ) LINEAR A SIGN A575	[49DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EE, 0x003F };
    uint32_t const ces[9] = { 0x49DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_001)
{
    // 106EE 0061;	
    // (êõÆ) LINEAR A SIGN A575	[49DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EE, 0x0061 };
    uint32_t const ces[9] = { 0x49DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_002)
{
    // 106EE 0041;	
    // (êõÆ) LINEAR A SIGN A575	[49DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106EE, 0x0041 };
    uint32_t const ces[9] = { 0x49DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_003)
{
    // 106EE 0062;	
    // (êõÆ) LINEAR A SIGN A575	[49DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EE, 0x0062 };
    uint32_t const ces[9] = { 0x49DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_004)
{
    // 106EF 0021;	
    // (êõØ) LINEAR A SIGN A576	[49E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EF, 0x0021 };
    uint32_t const ces[9] = { 0x49E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_005)
{
    // 106EF 003F;	
    // (êõØ) LINEAR A SIGN A576	[49E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EF, 0x003F };
    uint32_t const ces[9] = { 0x49E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_006)
{
    // 106EF 0061;	
    // (êõØ) LINEAR A SIGN A576	[49E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EF, 0x0061 };
    uint32_t const ces[9] = { 0x49E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_007)
{
    // 106EF 0041;	
    // (êõØ) LINEAR A SIGN A576	[49E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106EF, 0x0041 };
    uint32_t const ces[9] = { 0x49E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_008)
{
    // 106EF 0062;	
    // (êõØ) LINEAR A SIGN A576	[49E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106EF, 0x0062 };
    uint32_t const ces[9] = { 0x49E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_009)
{
    // 106F0 0021;	
    // (êõ∞) LINEAR A SIGN A577	[49E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F0, 0x0021 };
    uint32_t const ces[9] = { 0x49E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_010)
{
    // 106F0 003F;	
    // (êõ∞) LINEAR A SIGN A577	[49E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F0, 0x003F };
    uint32_t const ces[9] = { 0x49E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_011)
{
    // 106F0 0061;	
    // (êõ∞) LINEAR A SIGN A577	[49E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F0, 0x0061 };
    uint32_t const ces[9] = { 0x49E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_012)
{
    // 106F0 0041;	
    // (êõ∞) LINEAR A SIGN A577	[49E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F0, 0x0041 };
    uint32_t const ces[9] = { 0x49E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_013)
{
    // 106F0 0062;	
    // (êõ∞) LINEAR A SIGN A577	[49E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F0, 0x0062 };
    uint32_t const ces[9] = { 0x49E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_014)
{
    // 106F1 0021;	
    // (êõ±) LINEAR A SIGN A578	[49E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F1, 0x0021 };
    uint32_t const ces[9] = { 0x49E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_015)
{
    // 106F1 003F;	
    // (êõ±) LINEAR A SIGN A578	[49E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F1, 0x003F };
    uint32_t const ces[9] = { 0x49E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_016)
{
    // 106F1 0061;	
    // (êõ±) LINEAR A SIGN A578	[49E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F1, 0x0061 };
    uint32_t const ces[9] = { 0x49E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_017)
{
    // 106F1 0041;	
    // (êõ±) LINEAR A SIGN A578	[49E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F1, 0x0041 };
    uint32_t const ces[9] = { 0x49E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_018)
{
    // 106F1 0062;	
    // (êõ±) LINEAR A SIGN A578	[49E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F1, 0x0062 };
    uint32_t const ces[9] = { 0x49E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_019)
{
    // 106F2 0021;	
    // (êõ≤) LINEAR A SIGN A579	[49E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F2, 0x0021 };
    uint32_t const ces[9] = { 0x49E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_020)
{
    // 106F2 003F;	
    // (êõ≤) LINEAR A SIGN A579	[49E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F2, 0x003F };
    uint32_t const ces[9] = { 0x49E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_021)
{
    // 106F2 0061;	
    // (êõ≤) LINEAR A SIGN A579	[49E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F2, 0x0061 };
    uint32_t const ces[9] = { 0x49E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_022)
{
    // 106F2 0041;	
    // (êõ≤) LINEAR A SIGN A579	[49E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F2, 0x0041 };
    uint32_t const ces[9] = { 0x49E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_023)
{
    // 106F2 0062;	
    // (êõ≤) LINEAR A SIGN A579	[49E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F2, 0x0062 };
    uint32_t const ces[9] = { 0x49E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_024)
{
    // 106F3 0021;	
    // (êõ≥) LINEAR A SIGN A580	[49E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F3, 0x0021 };
    uint32_t const ces[9] = { 0x49E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_025)
{
    // 106F3 003F;	
    // (êõ≥) LINEAR A SIGN A580	[49E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F3, 0x003F };
    uint32_t const ces[9] = { 0x49E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_026)
{
    // 106F3 0061;	
    // (êõ≥) LINEAR A SIGN A580	[49E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F3, 0x0061 };
    uint32_t const ces[9] = { 0x49E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_027)
{
    // 106F3 0041;	
    // (êõ≥) LINEAR A SIGN A580	[49E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F3, 0x0041 };
    uint32_t const ces[9] = { 0x49E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_028)
{
    // 106F3 0062;	
    // (êõ≥) LINEAR A SIGN A580	[49E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F3, 0x0062 };
    uint32_t const ces[9] = { 0x49E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_029)
{
    // 106F4 0021;	
    // (êõ¥) LINEAR A SIGN A581	[49E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F4, 0x0021 };
    uint32_t const ces[9] = { 0x49E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_030)
{
    // 106F4 003F;	
    // (êõ¥) LINEAR A SIGN A581	[49E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F4, 0x003F };
    uint32_t const ces[9] = { 0x49E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_031)
{
    // 106F4 0061;	
    // (êõ¥) LINEAR A SIGN A581	[49E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F4, 0x0061 };
    uint32_t const ces[9] = { 0x49E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_032)
{
    // 106F4 0041;	
    // (êõ¥) LINEAR A SIGN A581	[49E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F4, 0x0041 };
    uint32_t const ces[9] = { 0x49E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_033)
{
    // 106F4 0062;	
    // (êõ¥) LINEAR A SIGN A581	[49E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F4, 0x0062 };
    uint32_t const ces[9] = { 0x49E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_034)
{
    // 106F5 0021;	
    // (êõµ) LINEAR A SIGN A582	[49E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F5, 0x0021 };
    uint32_t const ces[9] = { 0x49E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_035)
{
    // 106F5 003F;	
    // (êõµ) LINEAR A SIGN A582	[49E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F5, 0x003F };
    uint32_t const ces[9] = { 0x49E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_036)
{
    // 106F5 0061;	
    // (êõµ) LINEAR A SIGN A582	[49E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F5, 0x0061 };
    uint32_t const ces[9] = { 0x49E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_037)
{
    // 106F5 0041;	
    // (êõµ) LINEAR A SIGN A582	[49E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F5, 0x0041 };
    uint32_t const ces[9] = { 0x49E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_038)
{
    // 106F5 0062;	
    // (êõµ) LINEAR A SIGN A582	[49E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F5, 0x0062 };
    uint32_t const ces[9] = { 0x49E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_039)
{
    // 106F6 0021;	
    // (êõ∂) LINEAR A SIGN A583	[49E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F6, 0x0021 };
    uint32_t const ces[9] = { 0x49E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_040)
{
    // 106F6 003F;	
    // (êõ∂) LINEAR A SIGN A583	[49E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F6, 0x003F };
    uint32_t const ces[9] = { 0x49E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_041)
{
    // 106F6 0061;	
    // (êõ∂) LINEAR A SIGN A583	[49E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F6, 0x0061 };
    uint32_t const ces[9] = { 0x49E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_042)
{
    // 106F6 0041;	
    // (êõ∂) LINEAR A SIGN A583	[49E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F6, 0x0041 };
    uint32_t const ces[9] = { 0x49E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_043)
{
    // 106F6 0062;	
    // (êõ∂) LINEAR A SIGN A583	[49E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F6, 0x0062 };
    uint32_t const ces[9] = { 0x49E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_044)
{
    // 106F7 0021;	
    // (êõ∑) LINEAR A SIGN A584	[49E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F7, 0x0021 };
    uint32_t const ces[9] = { 0x49E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_045)
{
    // 106F7 003F;	
    // (êõ∑) LINEAR A SIGN A584	[49E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F7, 0x003F };
    uint32_t const ces[9] = { 0x49E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_046)
{
    // 106F7 0061;	
    // (êõ∑) LINEAR A SIGN A584	[49E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F7, 0x0061 };
    uint32_t const ces[9] = { 0x49E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_047)
{
    // 106F7 0041;	
    // (êõ∑) LINEAR A SIGN A584	[49E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F7, 0x0041 };
    uint32_t const ces[9] = { 0x49E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_048)
{
    // 106F7 0062;	
    // (êõ∑) LINEAR A SIGN A584	[49E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F7, 0x0062 };
    uint32_t const ces[9] = { 0x49E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_049)
{
    // 106F8 0021;	
    // (êõ∏) LINEAR A SIGN A585	[49E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F8, 0x0021 };
    uint32_t const ces[9] = { 0x49E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_050)
{
    // 106F8 003F;	
    // (êõ∏) LINEAR A SIGN A585	[49E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F8, 0x003F };
    uint32_t const ces[9] = { 0x49E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_051)
{
    // 106F8 0061;	
    // (êõ∏) LINEAR A SIGN A585	[49E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F8, 0x0061 };
    uint32_t const ces[9] = { 0x49E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_052)
{
    // 106F8 0041;	
    // (êõ∏) LINEAR A SIGN A585	[49E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F8, 0x0041 };
    uint32_t const ces[9] = { 0x49E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_053)
{
    // 106F8 0062;	
    // (êõ∏) LINEAR A SIGN A585	[49E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F8, 0x0062 };
    uint32_t const ces[9] = { 0x49E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_054)
{
    // 106F9 0021;	
    // (êõπ) LINEAR A SIGN A586	[49EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F9, 0x0021 };
    uint32_t const ces[9] = { 0x49EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_055)
{
    // 106F9 003F;	
    // (êõπ) LINEAR A SIGN A586	[49EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F9, 0x003F };
    uint32_t const ces[9] = { 0x49EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_056)
{
    // 106F9 0061;	
    // (êõπ) LINEAR A SIGN A586	[49EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F9, 0x0061 };
    uint32_t const ces[9] = { 0x49EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_057)
{
    // 106F9 0041;	
    // (êõπ) LINEAR A SIGN A586	[49EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106F9, 0x0041 };
    uint32_t const ces[9] = { 0x49EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_058)
{
    // 106F9 0062;	
    // (êõπ) LINEAR A SIGN A586	[49EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106F9, 0x0062 };
    uint32_t const ces[9] = { 0x49EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_059)
{
    // 106FA 0021;	
    // (êõ∫) LINEAR A SIGN A587	[49EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FA, 0x0021 };
    uint32_t const ces[9] = { 0x49EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_060)
{
    // 106FA 003F;	
    // (êõ∫) LINEAR A SIGN A587	[49EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FA, 0x003F };
    uint32_t const ces[9] = { 0x49EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_061)
{
    // 106FA 0061;	
    // (êõ∫) LINEAR A SIGN A587	[49EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FA, 0x0061 };
    uint32_t const ces[9] = { 0x49EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_062)
{
    // 106FA 0041;	
    // (êõ∫) LINEAR A SIGN A587	[49EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FA, 0x0041 };
    uint32_t const ces[9] = { 0x49EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_063)
{
    // 106FA 0062;	
    // (êõ∫) LINEAR A SIGN A587	[49EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FA, 0x0062 };
    uint32_t const ces[9] = { 0x49EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_064)
{
    // 106FB 0021;	
    // (êõª) LINEAR A SIGN A588	[49EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FB, 0x0021 };
    uint32_t const ces[9] = { 0x49EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_065)
{
    // 106FB 003F;	
    // (êõª) LINEAR A SIGN A588	[49EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FB, 0x003F };
    uint32_t const ces[9] = { 0x49EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_066)
{
    // 106FB 0061;	
    // (êõª) LINEAR A SIGN A588	[49EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FB, 0x0061 };
    uint32_t const ces[9] = { 0x49EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_067)
{
    // 106FB 0041;	
    // (êõª) LINEAR A SIGN A588	[49EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FB, 0x0041 };
    uint32_t const ces[9] = { 0x49EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_068)
{
    // 106FB 0062;	
    // (êõª) LINEAR A SIGN A588	[49EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FB, 0x0062 };
    uint32_t const ces[9] = { 0x49EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_069)
{
    // 106FC 0021;	
    // (êõº) LINEAR A SIGN A589	[49ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FC, 0x0021 };
    uint32_t const ces[9] = { 0x49ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_070)
{
    // 106FC 003F;	
    // (êõº) LINEAR A SIGN A589	[49ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FC, 0x003F };
    uint32_t const ces[9] = { 0x49ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_071)
{
    // 106FC 0061;	
    // (êõº) LINEAR A SIGN A589	[49ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FC, 0x0061 };
    uint32_t const ces[9] = { 0x49ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_072)
{
    // 106FC 0041;	
    // (êõº) LINEAR A SIGN A589	[49ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FC, 0x0041 };
    uint32_t const ces[9] = { 0x49ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_073)
{
    // 106FC 0062;	
    // (êõº) LINEAR A SIGN A589	[49ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FC, 0x0062 };
    uint32_t const ces[9] = { 0x49ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_074)
{
    // 106FD 0021;	
    // (êõΩ) LINEAR A SIGN A591	[49EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FD, 0x0021 };
    uint32_t const ces[9] = { 0x49EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_075)
{
    // 106FD 003F;	
    // (êõΩ) LINEAR A SIGN A591	[49EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FD, 0x003F };
    uint32_t const ces[9] = { 0x49EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_076)
{
    // 106FD 0061;	
    // (êõΩ) LINEAR A SIGN A591	[49EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FD, 0x0061 };
    uint32_t const ces[9] = { 0x49EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_077)
{
    // 106FD 0041;	
    // (êõΩ) LINEAR A SIGN A591	[49EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FD, 0x0041 };
    uint32_t const ces[9] = { 0x49EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_078)
{
    // 106FD 0062;	
    // (êõΩ) LINEAR A SIGN A591	[49EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FD, 0x0062 };
    uint32_t const ces[9] = { 0x49EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_079)
{
    // 106FE 0021;	
    // (êõæ) LINEAR A SIGN A592	[49EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FE, 0x0021 };
    uint32_t const ces[9] = { 0x49EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_080)
{
    // 106FE 003F;	
    // (êõæ) LINEAR A SIGN A592	[49EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FE, 0x003F };
    uint32_t const ces[9] = { 0x49EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_081)
{
    // 106FE 0061;	
    // (êõæ) LINEAR A SIGN A592	[49EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FE, 0x0061 };
    uint32_t const ces[9] = { 0x49EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_082)
{
    // 106FE 0041;	
    // (êõæ) LINEAR A SIGN A592	[49EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FE, 0x0041 };
    uint32_t const ces[9] = { 0x49EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_083)
{
    // 106FE 0062;	
    // (êõæ) LINEAR A SIGN A592	[49EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FE, 0x0062 };
    uint32_t const ces[9] = { 0x49EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_084)
{
    // 106FF 0021;	
    // (êõø) LINEAR A SIGN A594	[49F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FF, 0x0021 };
    uint32_t const ces[9] = { 0x49F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_085)
{
    // 106FF 003F;	
    // (êõø) LINEAR A SIGN A594	[49F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FF, 0x003F };
    uint32_t const ces[9] = { 0x49F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_086)
{
    // 106FF 0061;	
    // (êõø) LINEAR A SIGN A594	[49F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FF, 0x0061 };
    uint32_t const ces[9] = { 0x49F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_087)
{
    // 106FF 0041;	
    // (êõø) LINEAR A SIGN A594	[49F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x106FF, 0x0041 };
    uint32_t const ces[9] = { 0x49F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_088)
{
    // 106FF 0062;	
    // (êõø) LINEAR A SIGN A594	[49F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x106FF, 0x0062 };
    uint32_t const ces[9] = { 0x49F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_089)
{
    // 10700 0021;	
    // (êúÄ) LINEAR A SIGN A595	[49F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10700, 0x0021 };
    uint32_t const ces[9] = { 0x49F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_090)
{
    // 10700 003F;	
    // (êúÄ) LINEAR A SIGN A595	[49F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10700, 0x003F };
    uint32_t const ces[9] = { 0x49F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_091)
{
    // 10700 0061;	
    // (êúÄ) LINEAR A SIGN A595	[49F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10700, 0x0061 };
    uint32_t const ces[9] = { 0x49F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_092)
{
    // 10700 0041;	
    // (êúÄ) LINEAR A SIGN A595	[49F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10700, 0x0041 };
    uint32_t const ces[9] = { 0x49F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_093)
{
    // 10700 0062;	
    // (êúÄ) LINEAR A SIGN A595	[49F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10700, 0x0062 };
    uint32_t const ces[9] = { 0x49F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_094)
{
    // 10701 0021;	
    // (êúÅ) LINEAR A SIGN A596	[49F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10701, 0x0021 };
    uint32_t const ces[9] = { 0x49F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_095)
{
    // 10701 003F;	
    // (êúÅ) LINEAR A SIGN A596	[49F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10701, 0x003F };
    uint32_t const ces[9] = { 0x49F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_096)
{
    // 10701 0061;	
    // (êúÅ) LINEAR A SIGN A596	[49F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10701, 0x0061 };
    uint32_t const ces[9] = { 0x49F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_097)
{
    // 10701 0041;	
    // (êúÅ) LINEAR A SIGN A596	[49F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10701, 0x0041 };
    uint32_t const ces[9] = { 0x49F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_098)
{
    // 10701 0062;	
    // (êúÅ) LINEAR A SIGN A596	[49F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10701, 0x0062 };
    uint32_t const ces[9] = { 0x49F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_099)
{
    // 10702 0021;	
    // (êúÇ) LINEAR A SIGN A598	[49F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10702, 0x0021 };
    uint32_t const ces[9] = { 0x49F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_100)
{
    // 10702 003F;	
    // (êúÇ) LINEAR A SIGN A598	[49F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10702, 0x003F };
    uint32_t const ces[9] = { 0x49F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_101)
{
    // 10702 0061;	
    // (êúÇ) LINEAR A SIGN A598	[49F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10702, 0x0061 };
    uint32_t const ces[9] = { 0x49F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_102)
{
    // 10702 0041;	
    // (êúÇ) LINEAR A SIGN A598	[49F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10702, 0x0041 };
    uint32_t const ces[9] = { 0x49F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_103)
{
    // 10702 0062;	
    // (êúÇ) LINEAR A SIGN A598	[49F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10702, 0x0062 };
    uint32_t const ces[9] = { 0x49F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_104)
{
    // 10703 0021;	
    // (êúÉ) LINEAR A SIGN A600	[49F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10703, 0x0021 };
    uint32_t const ces[9] = { 0x49F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_105)
{
    // 10703 003F;	
    // (êúÉ) LINEAR A SIGN A600	[49F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10703, 0x003F };
    uint32_t const ces[9] = { 0x49F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_106)
{
    // 10703 0061;	
    // (êúÉ) LINEAR A SIGN A600	[49F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10703, 0x0061 };
    uint32_t const ces[9] = { 0x49F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_107)
{
    // 10703 0041;	
    // (êúÉ) LINEAR A SIGN A600	[49F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10703, 0x0041 };
    uint32_t const ces[9] = { 0x49F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_108)
{
    // 10703 0062;	
    // (êúÉ) LINEAR A SIGN A600	[49F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10703, 0x0062 };
    uint32_t const ces[9] = { 0x49F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_109)
{
    // 10704 0021;	
    // (êúÑ) LINEAR A SIGN A601	[49F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10704, 0x0021 };
    uint32_t const ces[9] = { 0x49F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_110)
{
    // 10704 003F;	
    // (êúÑ) LINEAR A SIGN A601	[49F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10704, 0x003F };
    uint32_t const ces[9] = { 0x49F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_111)
{
    // 10704 0061;	
    // (êúÑ) LINEAR A SIGN A601	[49F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10704, 0x0061 };
    uint32_t const ces[9] = { 0x49F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_112)
{
    // 10704 0041;	
    // (êúÑ) LINEAR A SIGN A601	[49F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10704, 0x0041 };
    uint32_t const ces[9] = { 0x49F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_113)
{
    // 10704 0062;	
    // (êúÑ) LINEAR A SIGN A601	[49F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10704, 0x0062 };
    uint32_t const ces[9] = { 0x49F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_114)
{
    // 10705 0021;	
    // (êúÖ) LINEAR A SIGN A602	[49F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10705, 0x0021 };
    uint32_t const ces[9] = { 0x49F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_115)
{
    // 10705 003F;	
    // (êúÖ) LINEAR A SIGN A602	[49F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10705, 0x003F };
    uint32_t const ces[9] = { 0x49F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_116)
{
    // 10705 0061;	
    // (êúÖ) LINEAR A SIGN A602	[49F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10705, 0x0061 };
    uint32_t const ces[9] = { 0x49F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_117)
{
    // 10705 0041;	
    // (êúÖ) LINEAR A SIGN A602	[49F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10705, 0x0041 };
    uint32_t const ces[9] = { 0x49F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_118)
{
    // 10705 0062;	
    // (êúÖ) LINEAR A SIGN A602	[49F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10705, 0x0062 };
    uint32_t const ces[9] = { 0x49F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_119)
{
    // 10706 0021;	
    // (êúÜ) LINEAR A SIGN A603	[49F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10706, 0x0021 };
    uint32_t const ces[9] = { 0x49F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_120)
{
    // 10706 003F;	
    // (êúÜ) LINEAR A SIGN A603	[49F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10706, 0x003F };
    uint32_t const ces[9] = { 0x49F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_121)
{
    // 10706 0061;	
    // (êúÜ) LINEAR A SIGN A603	[49F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10706, 0x0061 };
    uint32_t const ces[9] = { 0x49F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_122)
{
    // 10706 0041;	
    // (êúÜ) LINEAR A SIGN A603	[49F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10706, 0x0041 };
    uint32_t const ces[9] = { 0x49F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_123)
{
    // 10706 0062;	
    // (êúÜ) LINEAR A SIGN A603	[49F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10706, 0x0062 };
    uint32_t const ces[9] = { 0x49F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_124)
{
    // 10707 0021;	
    // (êúá) LINEAR A SIGN A604	[49F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10707, 0x0021 };
    uint32_t const ces[9] = { 0x49F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_125)
{
    // 10707 003F;	
    // (êúá) LINEAR A SIGN A604	[49F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10707, 0x003F };
    uint32_t const ces[9] = { 0x49F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_126)
{
    // 10707 0061;	
    // (êúá) LINEAR A SIGN A604	[49F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10707, 0x0061 };
    uint32_t const ces[9] = { 0x49F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_127)
{
    // 10707 0041;	
    // (êúá) LINEAR A SIGN A604	[49F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10707, 0x0041 };
    uint32_t const ces[9] = { 0x49F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_128)
{
    // 10707 0062;	
    // (êúá) LINEAR A SIGN A604	[49F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10707, 0x0062 };
    uint32_t const ces[9] = { 0x49F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_129)
{
    // 10708 0021;	
    // (êúà) LINEAR A SIGN A606	[49F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10708, 0x0021 };
    uint32_t const ces[9] = { 0x49F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_130)
{
    // 10708 003F;	
    // (êúà) LINEAR A SIGN A606	[49F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10708, 0x003F };
    uint32_t const ces[9] = { 0x49F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_131)
{
    // 10708 0061;	
    // (êúà) LINEAR A SIGN A606	[49F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10708, 0x0061 };
    uint32_t const ces[9] = { 0x49F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_132)
{
    // 10708 0041;	
    // (êúà) LINEAR A SIGN A606	[49F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10708, 0x0041 };
    uint32_t const ces[9] = { 0x49F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_133)
{
    // 10708 0062;	
    // (êúà) LINEAR A SIGN A606	[49F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10708, 0x0062 };
    uint32_t const ces[9] = { 0x49F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_134)
{
    // 10709 0021;	
    // (êúâ) LINEAR A SIGN A608	[49FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10709, 0x0021 };
    uint32_t const ces[9] = { 0x49FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_135)
{
    // 10709 003F;	
    // (êúâ) LINEAR A SIGN A608	[49FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10709, 0x003F };
    uint32_t const ces[9] = { 0x49FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_136)
{
    // 10709 0061;	
    // (êúâ) LINEAR A SIGN A608	[49FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10709, 0x0061 };
    uint32_t const ces[9] = { 0x49FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_137)
{
    // 10709 0041;	
    // (êúâ) LINEAR A SIGN A608	[49FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10709, 0x0041 };
    uint32_t const ces[9] = { 0x49FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_138)
{
    // 10709 0062;	
    // (êúâ) LINEAR A SIGN A608	[49FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10709, 0x0062 };
    uint32_t const ces[9] = { 0x49FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_139)
{
    // 1070A 0021;	
    // (êúä) LINEAR A SIGN A609	[49FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070A, 0x0021 };
    uint32_t const ces[9] = { 0x49FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_140)
{
    // 1070A 003F;	
    // (êúä) LINEAR A SIGN A609	[49FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070A, 0x003F };
    uint32_t const ces[9] = { 0x49FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_141)
{
    // 1070A 0061;	
    // (êúä) LINEAR A SIGN A609	[49FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070A, 0x0061 };
    uint32_t const ces[9] = { 0x49FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_142)
{
    // 1070A 0041;	
    // (êúä) LINEAR A SIGN A609	[49FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070A, 0x0041 };
    uint32_t const ces[9] = { 0x49FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_143)
{
    // 1070A 0062;	
    // (êúä) LINEAR A SIGN A609	[49FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070A, 0x0062 };
    uint32_t const ces[9] = { 0x49FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_144)
{
    // 1070B 0021;	
    // (êúã) LINEAR A SIGN A610	[49FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070B, 0x0021 };
    uint32_t const ces[9] = { 0x49FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_145)
{
    // 1070B 003F;	
    // (êúã) LINEAR A SIGN A610	[49FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070B, 0x003F };
    uint32_t const ces[9] = { 0x49FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_146)
{
    // 1070B 0061;	
    // (êúã) LINEAR A SIGN A610	[49FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070B, 0x0061 };
    uint32_t const ces[9] = { 0x49FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_147)
{
    // 1070B 0041;	
    // (êúã) LINEAR A SIGN A610	[49FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070B, 0x0041 };
    uint32_t const ces[9] = { 0x49FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_148)
{
    // 1070B 0062;	
    // (êúã) LINEAR A SIGN A610	[49FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070B, 0x0062 };
    uint32_t const ces[9] = { 0x49FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_149)
{
    // 1070C 0021;	
    // (êúå) LINEAR A SIGN A611	[49FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070C, 0x0021 };
    uint32_t const ces[9] = { 0x49FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_150)
{
    // 1070C 003F;	
    // (êúå) LINEAR A SIGN A611	[49FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070C, 0x003F };
    uint32_t const ces[9] = { 0x49FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_151)
{
    // 1070C 0061;	
    // (êúå) LINEAR A SIGN A611	[49FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070C, 0x0061 };
    uint32_t const ces[9] = { 0x49FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_152)
{
    // 1070C 0041;	
    // (êúå) LINEAR A SIGN A611	[49FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070C, 0x0041 };
    uint32_t const ces[9] = { 0x49FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_153)
{
    // 1070C 0062;	
    // (êúå) LINEAR A SIGN A611	[49FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070C, 0x0062 };
    uint32_t const ces[9] = { 0x49FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_154)
{
    // 1070D 0021;	
    // (êúç) LINEAR A SIGN A612	[49FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070D, 0x0021 };
    uint32_t const ces[9] = { 0x49FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_155)
{
    // 1070D 003F;	
    // (êúç) LINEAR A SIGN A612	[49FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070D, 0x003F };
    uint32_t const ces[9] = { 0x49FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_156)
{
    // 1070D 0061;	
    // (êúç) LINEAR A SIGN A612	[49FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070D, 0x0061 };
    uint32_t const ces[9] = { 0x49FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_157)
{
    // 1070D 0041;	
    // (êúç) LINEAR A SIGN A612	[49FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070D, 0x0041 };
    uint32_t const ces[9] = { 0x49FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_158)
{
    // 1070D 0062;	
    // (êúç) LINEAR A SIGN A612	[49FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070D, 0x0062 };
    uint32_t const ces[9] = { 0x49FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_159)
{
    // 1070E 0021;	
    // (êúé) LINEAR A SIGN A613	[49FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070E, 0x0021 };
    uint32_t const ces[9] = { 0x49FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_160)
{
    // 1070E 003F;	
    // (êúé) LINEAR A SIGN A613	[49FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070E, 0x003F };
    uint32_t const ces[9] = { 0x49FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_161)
{
    // 1070E 0061;	
    // (êúé) LINEAR A SIGN A613	[49FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070E, 0x0061 };
    uint32_t const ces[9] = { 0x49FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_162)
{
    // 1070E 0041;	
    // (êúé) LINEAR A SIGN A613	[49FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070E, 0x0041 };
    uint32_t const ces[9] = { 0x49FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_163)
{
    // 1070E 0062;	
    // (êúé) LINEAR A SIGN A613	[49FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070E, 0x0062 };
    uint32_t const ces[9] = { 0x49FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_164)
{
    // 1070F 0021;	
    // (êúè) LINEAR A SIGN A614	[4A00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070F, 0x0021 };
    uint32_t const ces[9] = { 0x4A00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_165)
{
    // 1070F 003F;	
    // (êúè) LINEAR A SIGN A614	[4A00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070F, 0x003F };
    uint32_t const ces[9] = { 0x4A00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_166)
{
    // 1070F 0061;	
    // (êúè) LINEAR A SIGN A614	[4A00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070F, 0x0061 };
    uint32_t const ces[9] = { 0x4A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_167)
{
    // 1070F 0041;	
    // (êúè) LINEAR A SIGN A614	[4A00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1070F, 0x0041 };
    uint32_t const ces[9] = { 0x4A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_168)
{
    // 1070F 0062;	
    // (êúè) LINEAR A SIGN A614	[4A00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1070F, 0x0062 };
    uint32_t const ces[9] = { 0x4A00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_169)
{
    // 10710 0021;	
    // (êúê) LINEAR A SIGN A615	[4A01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10710, 0x0021 };
    uint32_t const ces[9] = { 0x4A01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_170)
{
    // 10710 003F;	
    // (êúê) LINEAR A SIGN A615	[4A01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10710, 0x003F };
    uint32_t const ces[9] = { 0x4A01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_171)
{
    // 10710 0061;	
    // (êúê) LINEAR A SIGN A615	[4A01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10710, 0x0061 };
    uint32_t const ces[9] = { 0x4A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_172)
{
    // 10710 0041;	
    // (êúê) LINEAR A SIGN A615	[4A01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10710, 0x0041 };
    uint32_t const ces[9] = { 0x4A01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_173)
{
    // 10710 0062;	
    // (êúê) LINEAR A SIGN A615	[4A01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10710, 0x0062 };
    uint32_t const ces[9] = { 0x4A01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_174)
{
    // 10711 0021;	
    // (êúë) LINEAR A SIGN A616	[4A02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10711, 0x0021 };
    uint32_t const ces[9] = { 0x4A02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_175)
{
    // 10711 003F;	
    // (êúë) LINEAR A SIGN A616	[4A02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10711, 0x003F };
    uint32_t const ces[9] = { 0x4A02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_176)
{
    // 10711 0061;	
    // (êúë) LINEAR A SIGN A616	[4A02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10711, 0x0061 };
    uint32_t const ces[9] = { 0x4A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_177)
{
    // 10711 0041;	
    // (êúë) LINEAR A SIGN A616	[4A02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10711, 0x0041 };
    uint32_t const ces[9] = { 0x4A02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_178)
{
    // 10711 0062;	
    // (êúë) LINEAR A SIGN A616	[4A02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10711, 0x0062 };
    uint32_t const ces[9] = { 0x4A02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_179)
{
    // 10712 0021;	
    // (êúí) LINEAR A SIGN A617	[4A03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10712, 0x0021 };
    uint32_t const ces[9] = { 0x4A03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_180)
{
    // 10712 003F;	
    // (êúí) LINEAR A SIGN A617	[4A03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10712, 0x003F };
    uint32_t const ces[9] = { 0x4A03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_181)
{
    // 10712 0061;	
    // (êúí) LINEAR A SIGN A617	[4A03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10712, 0x0061 };
    uint32_t const ces[9] = { 0x4A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_182)
{
    // 10712 0041;	
    // (êúí) LINEAR A SIGN A617	[4A03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10712, 0x0041 };
    uint32_t const ces[9] = { 0x4A03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_183)
{
    // 10712 0062;	
    // (êúí) LINEAR A SIGN A617	[4A03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10712, 0x0062 };
    uint32_t const ces[9] = { 0x4A03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_184)
{
    // 10713 0021;	
    // (êúì) LINEAR A SIGN A618	[4A04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10713, 0x0021 };
    uint32_t const ces[9] = { 0x4A04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_185)
{
    // 10713 003F;	
    // (êúì) LINEAR A SIGN A618	[4A04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10713, 0x003F };
    uint32_t const ces[9] = { 0x4A04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_186)
{
    // 10713 0061;	
    // (êúì) LINEAR A SIGN A618	[4A04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10713, 0x0061 };
    uint32_t const ces[9] = { 0x4A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_187)
{
    // 10713 0041;	
    // (êúì) LINEAR A SIGN A618	[4A04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10713, 0x0041 };
    uint32_t const ces[9] = { 0x4A04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_188)
{
    // 10713 0062;	
    // (êúì) LINEAR A SIGN A618	[4A04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10713, 0x0062 };
    uint32_t const ces[9] = { 0x4A04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_189)
{
    // 10714 0021;	
    // (êúî) LINEAR A SIGN A619	[4A05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10714, 0x0021 };
    uint32_t const ces[9] = { 0x4A05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_190)
{
    // 10714 003F;	
    // (êúî) LINEAR A SIGN A619	[4A05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10714, 0x003F };
    uint32_t const ces[9] = { 0x4A05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_191)
{
    // 10714 0061;	
    // (êúî) LINEAR A SIGN A619	[4A05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10714, 0x0061 };
    uint32_t const ces[9] = { 0x4A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_192)
{
    // 10714 0041;	
    // (êúî) LINEAR A SIGN A619	[4A05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10714, 0x0041 };
    uint32_t const ces[9] = { 0x4A05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_193)
{
    // 10714 0062;	
    // (êúî) LINEAR A SIGN A619	[4A05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10714, 0x0062 };
    uint32_t const ces[9] = { 0x4A05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_194)
{
    // 10715 0021;	
    // (êúï) LINEAR A SIGN A620	[4A06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10715, 0x0021 };
    uint32_t const ces[9] = { 0x4A06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_195)
{
    // 10715 003F;	
    // (êúï) LINEAR A SIGN A620	[4A06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10715, 0x003F };
    uint32_t const ces[9] = { 0x4A06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_196)
{
    // 10715 0061;	
    // (êúï) LINEAR A SIGN A620	[4A06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10715, 0x0061 };
    uint32_t const ces[9] = { 0x4A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_197)
{
    // 10715 0041;	
    // (êúï) LINEAR A SIGN A620	[4A06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10715, 0x0041 };
    uint32_t const ces[9] = { 0x4A06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_198)
{
    // 10715 0062;	
    // (êúï) LINEAR A SIGN A620	[4A06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10715, 0x0062 };
    uint32_t const ces[9] = { 0x4A06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_199)
{
    // 10716 0021;	
    // (êúñ) LINEAR A SIGN A621	[4A07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10716, 0x0021 };
    uint32_t const ces[9] = { 0x4A07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_200)
{
    // 10716 003F;	
    // (êúñ) LINEAR A SIGN A621	[4A07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10716, 0x003F };
    uint32_t const ces[9] = { 0x4A07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_201)
{
    // 10716 0061;	
    // (êúñ) LINEAR A SIGN A621	[4A07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10716, 0x0061 };
    uint32_t const ces[9] = { 0x4A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_202)
{
    // 10716 0041;	
    // (êúñ) LINEAR A SIGN A621	[4A07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10716, 0x0041 };
    uint32_t const ces[9] = { 0x4A07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_203)
{
    // 10716 0062;	
    // (êúñ) LINEAR A SIGN A621	[4A07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10716, 0x0062 };
    uint32_t const ces[9] = { 0x4A07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_204)
{
    // 10717 0021;	
    // (êúó) LINEAR A SIGN A622	[4A08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10717, 0x0021 };
    uint32_t const ces[9] = { 0x4A08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_205)
{
    // 10717 003F;	
    // (êúó) LINEAR A SIGN A622	[4A08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10717, 0x003F };
    uint32_t const ces[9] = { 0x4A08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_206)
{
    // 10717 0061;	
    // (êúó) LINEAR A SIGN A622	[4A08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10717, 0x0061 };
    uint32_t const ces[9] = { 0x4A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_207)
{
    // 10717 0041;	
    // (êúó) LINEAR A SIGN A622	[4A08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10717, 0x0041 };
    uint32_t const ces[9] = { 0x4A08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_208)
{
    // 10717 0062;	
    // (êúó) LINEAR A SIGN A622	[4A08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10717, 0x0062 };
    uint32_t const ces[9] = { 0x4A08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_209)
{
    // 10718 0021;	
    // (êúò) LINEAR A SIGN A623	[4A09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10718, 0x0021 };
    uint32_t const ces[9] = { 0x4A09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_210)
{
    // 10718 003F;	
    // (êúò) LINEAR A SIGN A623	[4A09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10718, 0x003F };
    uint32_t const ces[9] = { 0x4A09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_211)
{
    // 10718 0061;	
    // (êúò) LINEAR A SIGN A623	[4A09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10718, 0x0061 };
    uint32_t const ces[9] = { 0x4A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_212)
{
    // 10718 0041;	
    // (êúò) LINEAR A SIGN A623	[4A09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10718, 0x0041 };
    uint32_t const ces[9] = { 0x4A09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_213)
{
    // 10718 0062;	
    // (êúò) LINEAR A SIGN A623	[4A09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10718, 0x0062 };
    uint32_t const ces[9] = { 0x4A09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_214)
{
    // 10719 0021;	
    // (êúô) LINEAR A SIGN A624	[4A0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10719, 0x0021 };
    uint32_t const ces[9] = { 0x4A0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_215)
{
    // 10719 003F;	
    // (êúô) LINEAR A SIGN A624	[4A0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10719, 0x003F };
    uint32_t const ces[9] = { 0x4A0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_216)
{
    // 10719 0061;	
    // (êúô) LINEAR A SIGN A624	[4A0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10719, 0x0061 };
    uint32_t const ces[9] = { 0x4A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_217)
{
    // 10719 0041;	
    // (êúô) LINEAR A SIGN A624	[4A0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10719, 0x0041 };
    uint32_t const ces[9] = { 0x4A0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_218)
{
    // 10719 0062;	
    // (êúô) LINEAR A SIGN A624	[4A0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10719, 0x0062 };
    uint32_t const ces[9] = { 0x4A0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_219)
{
    // 1071A 0021;	
    // (êúö) LINEAR A SIGN A626	[4A0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071A, 0x0021 };
    uint32_t const ces[9] = { 0x4A0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_220)
{
    // 1071A 003F;	
    // (êúö) LINEAR A SIGN A626	[4A0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071A, 0x003F };
    uint32_t const ces[9] = { 0x4A0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_221)
{
    // 1071A 0061;	
    // (êúö) LINEAR A SIGN A626	[4A0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071A, 0x0061 };
    uint32_t const ces[9] = { 0x4A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_222)
{
    // 1071A 0041;	
    // (êúö) LINEAR A SIGN A626	[4A0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071A, 0x0041 };
    uint32_t const ces[9] = { 0x4A0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_223)
{
    // 1071A 0062;	
    // (êúö) LINEAR A SIGN A626	[4A0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071A, 0x0062 };
    uint32_t const ces[9] = { 0x4A0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_224)
{
    // 1071B 0021;	
    // (êúõ) LINEAR A SIGN A627	[4A0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071B, 0x0021 };
    uint32_t const ces[9] = { 0x4A0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_225)
{
    // 1071B 003F;	
    // (êúõ) LINEAR A SIGN A627	[4A0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071B, 0x003F };
    uint32_t const ces[9] = { 0x4A0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_226)
{
    // 1071B 0061;	
    // (êúõ) LINEAR A SIGN A627	[4A0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071B, 0x0061 };
    uint32_t const ces[9] = { 0x4A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_227)
{
    // 1071B 0041;	
    // (êúõ) LINEAR A SIGN A627	[4A0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071B, 0x0041 };
    uint32_t const ces[9] = { 0x4A0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_228)
{
    // 1071B 0062;	
    // (êúõ) LINEAR A SIGN A627	[4A0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071B, 0x0062 };
    uint32_t const ces[9] = { 0x4A0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_229)
{
    // 1071C 0021;	
    // (êúú) LINEAR A SIGN A628	[4A0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071C, 0x0021 };
    uint32_t const ces[9] = { 0x4A0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_230)
{
    // 1071C 003F;	
    // (êúú) LINEAR A SIGN A628	[4A0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071C, 0x003F };
    uint32_t const ces[9] = { 0x4A0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_231)
{
    // 1071C 0061;	
    // (êúú) LINEAR A SIGN A628	[4A0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071C, 0x0061 };
    uint32_t const ces[9] = { 0x4A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_232)
{
    // 1071C 0041;	
    // (êúú) LINEAR A SIGN A628	[4A0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071C, 0x0041 };
    uint32_t const ces[9] = { 0x4A0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_233)
{
    // 1071C 0062;	
    // (êúú) LINEAR A SIGN A628	[4A0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071C, 0x0062 };
    uint32_t const ces[9] = { 0x4A0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_234)
{
    // 1071D 0021;	
    // (êúù) LINEAR A SIGN A629	[4A0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071D, 0x0021 };
    uint32_t const ces[9] = { 0x4A0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_235)
{
    // 1071D 003F;	
    // (êúù) LINEAR A SIGN A629	[4A0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071D, 0x003F };
    uint32_t const ces[9] = { 0x4A0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_236)
{
    // 1071D 0061;	
    // (êúù) LINEAR A SIGN A629	[4A0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071D, 0x0061 };
    uint32_t const ces[9] = { 0x4A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_237)
{
    // 1071D 0041;	
    // (êúù) LINEAR A SIGN A629	[4A0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071D, 0x0041 };
    uint32_t const ces[9] = { 0x4A0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_238)
{
    // 1071D 0062;	
    // (êúù) LINEAR A SIGN A629	[4A0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071D, 0x0062 };
    uint32_t const ces[9] = { 0x4A0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_239)
{
    // 1071E 0021;	
    // (êúû) LINEAR A SIGN A634	[4A0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071E, 0x0021 };
    uint32_t const ces[9] = { 0x4A0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_240)
{
    // 1071E 003F;	
    // (êúû) LINEAR A SIGN A634	[4A0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071E, 0x003F };
    uint32_t const ces[9] = { 0x4A0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_241)
{
    // 1071E 0061;	
    // (êúû) LINEAR A SIGN A634	[4A0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071E, 0x0061 };
    uint32_t const ces[9] = { 0x4A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_242)
{
    // 1071E 0041;	
    // (êúû) LINEAR A SIGN A634	[4A0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071E, 0x0041 };
    uint32_t const ces[9] = { 0x4A0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_243)
{
    // 1071E 0062;	
    // (êúû) LINEAR A SIGN A634	[4A0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071E, 0x0062 };
    uint32_t const ces[9] = { 0x4A0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_244)
{
    // 1071F 0021;	
    // (êúü) LINEAR A SIGN A637	[4A10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071F, 0x0021 };
    uint32_t const ces[9] = { 0x4A10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_245)
{
    // 1071F 003F;	
    // (êúü) LINEAR A SIGN A637	[4A10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071F, 0x003F };
    uint32_t const ces[9] = { 0x4A10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_246)
{
    // 1071F 0061;	
    // (êúü) LINEAR A SIGN A637	[4A10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071F, 0x0061 };
    uint32_t const ces[9] = { 0x4A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_247)
{
    // 1071F 0041;	
    // (êúü) LINEAR A SIGN A637	[4A10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1071F, 0x0041 };
    uint32_t const ces[9] = { 0x4A10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_248)
{
    // 1071F 0062;	
    // (êúü) LINEAR A SIGN A637	[4A10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1071F, 0x0062 };
    uint32_t const ces[9] = { 0x4A10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_249)
{
    // 10720 0021;	
    // (êú†) LINEAR A SIGN A638	[4A11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10720, 0x0021 };
    uint32_t const ces[9] = { 0x4A11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_250)
{
    // 10720 003F;	
    // (êú†) LINEAR A SIGN A638	[4A11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10720, 0x003F };
    uint32_t const ces[9] = { 0x4A11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_251)
{
    // 10720 0061;	
    // (êú†) LINEAR A SIGN A638	[4A11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10720, 0x0061 };
    uint32_t const ces[9] = { 0x4A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_252)
{
    // 10720 0041;	
    // (êú†) LINEAR A SIGN A638	[4A11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10720, 0x0041 };
    uint32_t const ces[9] = { 0x4A11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_253)
{
    // 10720 0062;	
    // (êú†) LINEAR A SIGN A638	[4A11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10720, 0x0062 };
    uint32_t const ces[9] = { 0x4A11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_254)
{
    // 10721 0021;	
    // (êú°) LINEAR A SIGN A640	[4A12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10721, 0x0021 };
    uint32_t const ces[9] = { 0x4A12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_255)
{
    // 10721 003F;	
    // (êú°) LINEAR A SIGN A640	[4A12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10721, 0x003F };
    uint32_t const ces[9] = { 0x4A12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_256)
{
    // 10721 0061;	
    // (êú°) LINEAR A SIGN A640	[4A12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10721, 0x0061 };
    uint32_t const ces[9] = { 0x4A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_257)
{
    // 10721 0041;	
    // (êú°) LINEAR A SIGN A640	[4A12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10721, 0x0041 };
    uint32_t const ces[9] = { 0x4A12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_258)
{
    // 10721 0062;	
    // (êú°) LINEAR A SIGN A640	[4A12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10721, 0x0062 };
    uint32_t const ces[9] = { 0x4A12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_259)
{
    // 10722 0021;	
    // (êú¢) LINEAR A SIGN A642	[4A13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10722, 0x0021 };
    uint32_t const ces[9] = { 0x4A13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_260)
{
    // 10722 003F;	
    // (êú¢) LINEAR A SIGN A642	[4A13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10722, 0x003F };
    uint32_t const ces[9] = { 0x4A13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_261)
{
    // 10722 0061;	
    // (êú¢) LINEAR A SIGN A642	[4A13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10722, 0x0061 };
    uint32_t const ces[9] = { 0x4A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_262)
{
    // 10722 0041;	
    // (êú¢) LINEAR A SIGN A642	[4A13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10722, 0x0041 };
    uint32_t const ces[9] = { 0x4A13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_263)
{
    // 10722 0062;	
    // (êú¢) LINEAR A SIGN A642	[4A13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10722, 0x0062 };
    uint32_t const ces[9] = { 0x4A13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_264)
{
    // 10723 0021;	
    // (êú£) LINEAR A SIGN A643	[4A14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10723, 0x0021 };
    uint32_t const ces[9] = { 0x4A14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_265)
{
    // 10723 003F;	
    // (êú£) LINEAR A SIGN A643	[4A14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10723, 0x003F };
    uint32_t const ces[9] = { 0x4A14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_266)
{
    // 10723 0061;	
    // (êú£) LINEAR A SIGN A643	[4A14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10723, 0x0061 };
    uint32_t const ces[9] = { 0x4A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_267)
{
    // 10723 0041;	
    // (êú£) LINEAR A SIGN A643	[4A14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10723, 0x0041 };
    uint32_t const ces[9] = { 0x4A14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_268)
{
    // 10723 0062;	
    // (êú£) LINEAR A SIGN A643	[4A14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10723, 0x0062 };
    uint32_t const ces[9] = { 0x4A14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_269)
{
    // 10724 0021;	
    // (êú§) LINEAR A SIGN A644	[4A15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10724, 0x0021 };
    uint32_t const ces[9] = { 0x4A15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_270)
{
    // 10724 003F;	
    // (êú§) LINEAR A SIGN A644	[4A15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10724, 0x003F };
    uint32_t const ces[9] = { 0x4A15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_271)
{
    // 10724 0061;	
    // (êú§) LINEAR A SIGN A644	[4A15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10724, 0x0061 };
    uint32_t const ces[9] = { 0x4A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_272)
{
    // 10724 0041;	
    // (êú§) LINEAR A SIGN A644	[4A15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10724, 0x0041 };
    uint32_t const ces[9] = { 0x4A15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_273)
{
    // 10724 0062;	
    // (êú§) LINEAR A SIGN A644	[4A15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10724, 0x0062 };
    uint32_t const ces[9] = { 0x4A15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_274)
{
    // 10725 0021;	
    // (êú•) LINEAR A SIGN A645	[4A16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10725, 0x0021 };
    uint32_t const ces[9] = { 0x4A16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_275)
{
    // 10725 003F;	
    // (êú•) LINEAR A SIGN A645	[4A16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10725, 0x003F };
    uint32_t const ces[9] = { 0x4A16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_276)
{
    // 10725 0061;	
    // (êú•) LINEAR A SIGN A645	[4A16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10725, 0x0061 };
    uint32_t const ces[9] = { 0x4A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_277)
{
    // 10725 0041;	
    // (êú•) LINEAR A SIGN A645	[4A16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10725, 0x0041 };
    uint32_t const ces[9] = { 0x4A16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_278)
{
    // 10725 0062;	
    // (êú•) LINEAR A SIGN A645	[4A16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10725, 0x0062 };
    uint32_t const ces[9] = { 0x4A16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_279)
{
    // 10726 0021;	
    // (êú¶) LINEAR A SIGN A646	[4A17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10726, 0x0021 };
    uint32_t const ces[9] = { 0x4A17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_280)
{
    // 10726 003F;	
    // (êú¶) LINEAR A SIGN A646	[4A17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10726, 0x003F };
    uint32_t const ces[9] = { 0x4A17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_281)
{
    // 10726 0061;	
    // (êú¶) LINEAR A SIGN A646	[4A17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10726, 0x0061 };
    uint32_t const ces[9] = { 0x4A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_282)
{
    // 10726 0041;	
    // (êú¶) LINEAR A SIGN A646	[4A17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10726, 0x0041 };
    uint32_t const ces[9] = { 0x4A17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_283)
{
    // 10726 0062;	
    // (êú¶) LINEAR A SIGN A646	[4A17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10726, 0x0062 };
    uint32_t const ces[9] = { 0x4A17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_284)
{
    // 10727 0021;	
    // (êúß) LINEAR A SIGN A648	[4A18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10727, 0x0021 };
    uint32_t const ces[9] = { 0x4A18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_285)
{
    // 10727 003F;	
    // (êúß) LINEAR A SIGN A648	[4A18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10727, 0x003F };
    uint32_t const ces[9] = { 0x4A18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_286)
{
    // 10727 0061;	
    // (êúß) LINEAR A SIGN A648	[4A18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10727, 0x0061 };
    uint32_t const ces[9] = { 0x4A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_287)
{
    // 10727 0041;	
    // (êúß) LINEAR A SIGN A648	[4A18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10727, 0x0041 };
    uint32_t const ces[9] = { 0x4A18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_288)
{
    // 10727 0062;	
    // (êúß) LINEAR A SIGN A648	[4A18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10727, 0x0062 };
    uint32_t const ces[9] = { 0x4A18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_289)
{
    // 10728 0021;	
    // (êú®) LINEAR A SIGN A649	[4A19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10728, 0x0021 };
    uint32_t const ces[9] = { 0x4A19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_290)
{
    // 10728 003F;	
    // (êú®) LINEAR A SIGN A649	[4A19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10728, 0x003F };
    uint32_t const ces[9] = { 0x4A19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_291)
{
    // 10728 0061;	
    // (êú®) LINEAR A SIGN A649	[4A19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10728, 0x0061 };
    uint32_t const ces[9] = { 0x4A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_292)
{
    // 10728 0041;	
    // (êú®) LINEAR A SIGN A649	[4A19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10728, 0x0041 };
    uint32_t const ces[9] = { 0x4A19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_293)
{
    // 10728 0062;	
    // (êú®) LINEAR A SIGN A649	[4A19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10728, 0x0062 };
    uint32_t const ces[9] = { 0x4A19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_294)
{
    // 10729 0021;	
    // (êú©) LINEAR A SIGN A651	[4A1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10729, 0x0021 };
    uint32_t const ces[9] = { 0x4A1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_295)
{
    // 10729 003F;	
    // (êú©) LINEAR A SIGN A651	[4A1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10729, 0x003F };
    uint32_t const ces[9] = { 0x4A1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_296)
{
    // 10729 0061;	
    // (êú©) LINEAR A SIGN A651	[4A1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10729, 0x0061 };
    uint32_t const ces[9] = { 0x4A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_297)
{
    // 10729 0041;	
    // (êú©) LINEAR A SIGN A651	[4A1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10729, 0x0041 };
    uint32_t const ces[9] = { 0x4A1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_298)
{
    // 10729 0062;	
    // (êú©) LINEAR A SIGN A651	[4A1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10729, 0x0062 };
    uint32_t const ces[9] = { 0x4A1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_299)
{
    // 1072A 0021;	
    // (êú™) LINEAR A SIGN A652	[4A1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072A, 0x0021 };
    uint32_t const ces[9] = { 0x4A1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_300)
{
    // 1072A 003F;	
    // (êú™) LINEAR A SIGN A652	[4A1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072A, 0x003F };
    uint32_t const ces[9] = { 0x4A1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_301)
{
    // 1072A 0061;	
    // (êú™) LINEAR A SIGN A652	[4A1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072A, 0x0061 };
    uint32_t const ces[9] = { 0x4A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_302)
{
    // 1072A 0041;	
    // (êú™) LINEAR A SIGN A652	[4A1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072A, 0x0041 };
    uint32_t const ces[9] = { 0x4A1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_303)
{
    // 1072A 0062;	
    // (êú™) LINEAR A SIGN A652	[4A1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072A, 0x0062 };
    uint32_t const ces[9] = { 0x4A1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_304)
{
    // 1072B 0021;	
    // (êú´) LINEAR A SIGN A653	[4A1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072B, 0x0021 };
    uint32_t const ces[9] = { 0x4A1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_305)
{
    // 1072B 003F;	
    // (êú´) LINEAR A SIGN A653	[4A1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072B, 0x003F };
    uint32_t const ces[9] = { 0x4A1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_306)
{
    // 1072B 0061;	
    // (êú´) LINEAR A SIGN A653	[4A1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072B, 0x0061 };
    uint32_t const ces[9] = { 0x4A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_307)
{
    // 1072B 0041;	
    // (êú´) LINEAR A SIGN A653	[4A1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072B, 0x0041 };
    uint32_t const ces[9] = { 0x4A1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_308)
{
    // 1072B 0062;	
    // (êú´) LINEAR A SIGN A653	[4A1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072B, 0x0062 };
    uint32_t const ces[9] = { 0x4A1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_309)
{
    // 1072C 0021;	
    // (êú¨) LINEAR A SIGN A654	[4A1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072C, 0x0021 };
    uint32_t const ces[9] = { 0x4A1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_310)
{
    // 1072C 003F;	
    // (êú¨) LINEAR A SIGN A654	[4A1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072C, 0x003F };
    uint32_t const ces[9] = { 0x4A1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_311)
{
    // 1072C 0061;	
    // (êú¨) LINEAR A SIGN A654	[4A1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072C, 0x0061 };
    uint32_t const ces[9] = { 0x4A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_312)
{
    // 1072C 0041;	
    // (êú¨) LINEAR A SIGN A654	[4A1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072C, 0x0041 };
    uint32_t const ces[9] = { 0x4A1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_313)
{
    // 1072C 0062;	
    // (êú¨) LINEAR A SIGN A654	[4A1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072C, 0x0062 };
    uint32_t const ces[9] = { 0x4A1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_314)
{
    // 1072D 0021;	
    // (êú≠) LINEAR A SIGN A655	[4A1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072D, 0x0021 };
    uint32_t const ces[9] = { 0x4A1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_315)
{
    // 1072D 003F;	
    // (êú≠) LINEAR A SIGN A655	[4A1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072D, 0x003F };
    uint32_t const ces[9] = { 0x4A1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_316)
{
    // 1072D 0061;	
    // (êú≠) LINEAR A SIGN A655	[4A1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072D, 0x0061 };
    uint32_t const ces[9] = { 0x4A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_317)
{
    // 1072D 0041;	
    // (êú≠) LINEAR A SIGN A655	[4A1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072D, 0x0041 };
    uint32_t const ces[9] = { 0x4A1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_318)
{
    // 1072D 0062;	
    // (êú≠) LINEAR A SIGN A655	[4A1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072D, 0x0062 };
    uint32_t const ces[9] = { 0x4A1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_319)
{
    // 1072E 0021;	
    // (êúÆ) LINEAR A SIGN A656	[4A1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072E, 0x0021 };
    uint32_t const ces[9] = { 0x4A1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_320)
{
    // 1072E 003F;	
    // (êúÆ) LINEAR A SIGN A656	[4A1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072E, 0x003F };
    uint32_t const ces[9] = { 0x4A1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_321)
{
    // 1072E 0061;	
    // (êúÆ) LINEAR A SIGN A656	[4A1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072E, 0x0061 };
    uint32_t const ces[9] = { 0x4A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_322)
{
    // 1072E 0041;	
    // (êúÆ) LINEAR A SIGN A656	[4A1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072E, 0x0041 };
    uint32_t const ces[9] = { 0x4A1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_323)
{
    // 1072E 0062;	
    // (êúÆ) LINEAR A SIGN A656	[4A1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072E, 0x0062 };
    uint32_t const ces[9] = { 0x4A1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_324)
{
    // 1072F 0021;	
    // (êúØ) LINEAR A SIGN A657	[4A20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072F, 0x0021 };
    uint32_t const ces[9] = { 0x4A20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_325)
{
    // 1072F 003F;	
    // (êúØ) LINEAR A SIGN A657	[4A20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072F, 0x003F };
    uint32_t const ces[9] = { 0x4A20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_326)
{
    // 1072F 0061;	
    // (êúØ) LINEAR A SIGN A657	[4A20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072F, 0x0061 };
    uint32_t const ces[9] = { 0x4A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_327)
{
    // 1072F 0041;	
    // (êúØ) LINEAR A SIGN A657	[4A20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1072F, 0x0041 };
    uint32_t const ces[9] = { 0x4A20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_328)
{
    // 1072F 0062;	
    // (êúØ) LINEAR A SIGN A657	[4A20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1072F, 0x0062 };
    uint32_t const ces[9] = { 0x4A20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_329)
{
    // 10730 0021;	
    // (êú∞) LINEAR A SIGN A658	[4A21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10730, 0x0021 };
    uint32_t const ces[9] = { 0x4A21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_330)
{
    // 10730 003F;	
    // (êú∞) LINEAR A SIGN A658	[4A21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10730, 0x003F };
    uint32_t const ces[9] = { 0x4A21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_331)
{
    // 10730 0061;	
    // (êú∞) LINEAR A SIGN A658	[4A21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10730, 0x0061 };
    uint32_t const ces[9] = { 0x4A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_332)
{
    // 10730 0041;	
    // (êú∞) LINEAR A SIGN A658	[4A21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10730, 0x0041 };
    uint32_t const ces[9] = { 0x4A21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_333)
{
    // 10730 0062;	
    // (êú∞) LINEAR A SIGN A658	[4A21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10730, 0x0062 };
    uint32_t const ces[9] = { 0x4A21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_334)
{
    // 10731 0021;	
    // (êú±) LINEAR A SIGN A659	[4A22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10731, 0x0021 };
    uint32_t const ces[9] = { 0x4A22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_335)
{
    // 10731 003F;	
    // (êú±) LINEAR A SIGN A659	[4A22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10731, 0x003F };
    uint32_t const ces[9] = { 0x4A22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_336)
{
    // 10731 0061;	
    // (êú±) LINEAR A SIGN A659	[4A22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10731, 0x0061 };
    uint32_t const ces[9] = { 0x4A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_337)
{
    // 10731 0041;	
    // (êú±) LINEAR A SIGN A659	[4A22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10731, 0x0041 };
    uint32_t const ces[9] = { 0x4A22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_338)
{
    // 10731 0062;	
    // (êú±) LINEAR A SIGN A659	[4A22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10731, 0x0062 };
    uint32_t const ces[9] = { 0x4A22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_339)
{
    // 10732 0021;	
    // (êú≤) LINEAR A SIGN A660	[4A23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10732, 0x0021 };
    uint32_t const ces[9] = { 0x4A23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_340)
{
    // 10732 003F;	
    // (êú≤) LINEAR A SIGN A660	[4A23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10732, 0x003F };
    uint32_t const ces[9] = { 0x4A23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_341)
{
    // 10732 0061;	
    // (êú≤) LINEAR A SIGN A660	[4A23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10732, 0x0061 };
    uint32_t const ces[9] = { 0x4A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_342)
{
    // 10732 0041;	
    // (êú≤) LINEAR A SIGN A660	[4A23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10732, 0x0041 };
    uint32_t const ces[9] = { 0x4A23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_343)
{
    // 10732 0062;	
    // (êú≤) LINEAR A SIGN A660	[4A23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10732, 0x0062 };
    uint32_t const ces[9] = { 0x4A23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_344)
{
    // 10733 0021;	
    // (êú≥) LINEAR A SIGN A661	[4A24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10733, 0x0021 };
    uint32_t const ces[9] = { 0x4A24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_345)
{
    // 10733 003F;	
    // (êú≥) LINEAR A SIGN A661	[4A24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10733, 0x003F };
    uint32_t const ces[9] = { 0x4A24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_346)
{
    // 10733 0061;	
    // (êú≥) LINEAR A SIGN A661	[4A24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10733, 0x0061 };
    uint32_t const ces[9] = { 0x4A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_347)
{
    // 10733 0041;	
    // (êú≥) LINEAR A SIGN A661	[4A24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10733, 0x0041 };
    uint32_t const ces[9] = { 0x4A24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_348)
{
    // 10733 0062;	
    // (êú≥) LINEAR A SIGN A661	[4A24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10733, 0x0062 };
    uint32_t const ces[9] = { 0x4A24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_349)
{
    // 10734 0021;	
    // (êú¥) LINEAR A SIGN A662	[4A25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10734, 0x0021 };
    uint32_t const ces[9] = { 0x4A25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_350)
{
    // 10734 003F;	
    // (êú¥) LINEAR A SIGN A662	[4A25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10734, 0x003F };
    uint32_t const ces[9] = { 0x4A25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_351)
{
    // 10734 0061;	
    // (êú¥) LINEAR A SIGN A662	[4A25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10734, 0x0061 };
    uint32_t const ces[9] = { 0x4A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_352)
{
    // 10734 0041;	
    // (êú¥) LINEAR A SIGN A662	[4A25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10734, 0x0041 };
    uint32_t const ces[9] = { 0x4A25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_353)
{
    // 10734 0062;	
    // (êú¥) LINEAR A SIGN A662	[4A25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10734, 0x0062 };
    uint32_t const ces[9] = { 0x4A25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_354)
{
    // 10735 0021;	
    // (êúµ) LINEAR A SIGN A663	[4A26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10735, 0x0021 };
    uint32_t const ces[9] = { 0x4A26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_355)
{
    // 10735 003F;	
    // (êúµ) LINEAR A SIGN A663	[4A26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10735, 0x003F };
    uint32_t const ces[9] = { 0x4A26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_356)
{
    // 10735 0061;	
    // (êúµ) LINEAR A SIGN A663	[4A26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10735, 0x0061 };
    uint32_t const ces[9] = { 0x4A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_357)
{
    // 10735 0041;	
    // (êúµ) LINEAR A SIGN A663	[4A26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10735, 0x0041 };
    uint32_t const ces[9] = { 0x4A26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_358)
{
    // 10735 0062;	
    // (êúµ) LINEAR A SIGN A663	[4A26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10735, 0x0062 };
    uint32_t const ces[9] = { 0x4A26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_359)
{
    // 10736 0021;	
    // (êú∂) LINEAR A SIGN A664	[4A27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10736, 0x0021 };
    uint32_t const ces[9] = { 0x4A27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_360)
{
    // 10736 003F;	
    // (êú∂) LINEAR A SIGN A664	[4A27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10736, 0x003F };
    uint32_t const ces[9] = { 0x4A27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_361)
{
    // 10736 0061;	
    // (êú∂) LINEAR A SIGN A664	[4A27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10736, 0x0061 };
    uint32_t const ces[9] = { 0x4A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_362)
{
    // 10736 0041;	
    // (êú∂) LINEAR A SIGN A664	[4A27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10736, 0x0041 };
    uint32_t const ces[9] = { 0x4A27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_363)
{
    // 10736 0062;	
    // (êú∂) LINEAR A SIGN A664	[4A27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10736, 0x0062 };
    uint32_t const ces[9] = { 0x4A27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_364)
{
    // 10740 0021;	
    // (êùÄ) LINEAR A SIGN A701 A	[4A28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10740, 0x0021 };
    uint32_t const ces[9] = { 0x4A28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_365)
{
    // 10740 003F;	
    // (êùÄ) LINEAR A SIGN A701 A	[4A28 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10740, 0x003F };
    uint32_t const ces[9] = { 0x4A28, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_366)
{
    // 10740 0061;	
    // (êùÄ) LINEAR A SIGN A701 A	[4A28 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10740, 0x0061 };
    uint32_t const ces[9] = { 0x4A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_367)
{
    // 10740 0041;	
    // (êùÄ) LINEAR A SIGN A701 A	[4A28 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10740, 0x0041 };
    uint32_t const ces[9] = { 0x4A28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_368)
{
    // 10740 0062;	
    // (êùÄ) LINEAR A SIGN A701 A	[4A28 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10740, 0x0062 };
    uint32_t const ces[9] = { 0x4A28, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_369)
{
    // 10741 0021;	
    // (êùÅ) LINEAR A SIGN A702 B	[4A29 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10741, 0x0021 };
    uint32_t const ces[9] = { 0x4A29, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_370)
{
    // 10741 003F;	
    // (êùÅ) LINEAR A SIGN A702 B	[4A29 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10741, 0x003F };
    uint32_t const ces[9] = { 0x4A29, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_371)
{
    // 10741 0061;	
    // (êùÅ) LINEAR A SIGN A702 B	[4A29 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10741, 0x0061 };
    uint32_t const ces[9] = { 0x4A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_372)
{
    // 10741 0041;	
    // (êùÅ) LINEAR A SIGN A702 B	[4A29 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10741, 0x0041 };
    uint32_t const ces[9] = { 0x4A29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_373)
{
    // 10741 0062;	
    // (êùÅ) LINEAR A SIGN A702 B	[4A29 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10741, 0x0062 };
    uint32_t const ces[9] = { 0x4A29, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_374)
{
    // 10742 0021;	
    // (êùÇ) LINEAR A SIGN A703 D	[4A2A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10742, 0x0021 };
    uint32_t const ces[9] = { 0x4A2A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_375)
{
    // 10742 003F;	
    // (êùÇ) LINEAR A SIGN A703 D	[4A2A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10742, 0x003F };
    uint32_t const ces[9] = { 0x4A2A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_376)
{
    // 10742 0061;	
    // (êùÇ) LINEAR A SIGN A703 D	[4A2A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10742, 0x0061 };
    uint32_t const ces[9] = { 0x4A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_377)
{
    // 10742 0041;	
    // (êùÇ) LINEAR A SIGN A703 D	[4A2A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10742, 0x0041 };
    uint32_t const ces[9] = { 0x4A2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_378)
{
    // 10742 0062;	
    // (êùÇ) LINEAR A SIGN A703 D	[4A2A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10742, 0x0062 };
    uint32_t const ces[9] = { 0x4A2A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_379)
{
    // 10743 0021;	
    // (êùÉ) LINEAR A SIGN A704 E	[4A2B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10743, 0x0021 };
    uint32_t const ces[9] = { 0x4A2B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_380)
{
    // 10743 003F;	
    // (êùÉ) LINEAR A SIGN A704 E	[4A2B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10743, 0x003F };
    uint32_t const ces[9] = { 0x4A2B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_381)
{
    // 10743 0061;	
    // (êùÉ) LINEAR A SIGN A704 E	[4A2B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10743, 0x0061 };
    uint32_t const ces[9] = { 0x4A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_382)
{
    // 10743 0041;	
    // (êùÉ) LINEAR A SIGN A704 E	[4A2B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10743, 0x0041 };
    uint32_t const ces[9] = { 0x4A2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_383)
{
    // 10743 0062;	
    // (êùÉ) LINEAR A SIGN A704 E	[4A2B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10743, 0x0062 };
    uint32_t const ces[9] = { 0x4A2B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_384)
{
    // 10744 0021;	
    // (êùÑ) LINEAR A SIGN A705 F	[4A2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10744, 0x0021 };
    uint32_t const ces[9] = { 0x4A2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_385)
{
    // 10744 003F;	
    // (êùÑ) LINEAR A SIGN A705 F	[4A2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10744, 0x003F };
    uint32_t const ces[9] = { 0x4A2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_386)
{
    // 10744 0061;	
    // (êùÑ) LINEAR A SIGN A705 F	[4A2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10744, 0x0061 };
    uint32_t const ces[9] = { 0x4A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_387)
{
    // 10744 0041;	
    // (êùÑ) LINEAR A SIGN A705 F	[4A2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10744, 0x0041 };
    uint32_t const ces[9] = { 0x4A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_388)
{
    // 10744 0062;	
    // (êùÑ) LINEAR A SIGN A705 F	[4A2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10744, 0x0062 };
    uint32_t const ces[9] = { 0x4A2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_389)
{
    // 10745 0021;	
    // (êùÖ) LINEAR A SIGN A706 H	[4A2D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10745, 0x0021 };
    uint32_t const ces[9] = { 0x4A2D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_390)
{
    // 10745 003F;	
    // (êùÖ) LINEAR A SIGN A706 H	[4A2D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10745, 0x003F };
    uint32_t const ces[9] = { 0x4A2D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_391)
{
    // 10745 0061;	
    // (êùÖ) LINEAR A SIGN A706 H	[4A2D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10745, 0x0061 };
    uint32_t const ces[9] = { 0x4A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_392)
{
    // 10745 0041;	
    // (êùÖ) LINEAR A SIGN A706 H	[4A2D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10745, 0x0041 };
    uint32_t const ces[9] = { 0x4A2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_393)
{
    // 10745 0062;	
    // (êùÖ) LINEAR A SIGN A706 H	[4A2D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10745, 0x0062 };
    uint32_t const ces[9] = { 0x4A2D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_394)
{
    // 10746 0021;	
    // (êùÜ) LINEAR A SIGN A707 J	[4A2E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10746, 0x0021 };
    uint32_t const ces[9] = { 0x4A2E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_395)
{
    // 10746 003F;	
    // (êùÜ) LINEAR A SIGN A707 J	[4A2E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10746, 0x003F };
    uint32_t const ces[9] = { 0x4A2E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_396)
{
    // 10746 0061;	
    // (êùÜ) LINEAR A SIGN A707 J	[4A2E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10746, 0x0061 };
    uint32_t const ces[9] = { 0x4A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_397)
{
    // 10746 0041;	
    // (êùÜ) LINEAR A SIGN A707 J	[4A2E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10746, 0x0041 };
    uint32_t const ces[9] = { 0x4A2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_398)
{
    // 10746 0062;	
    // (êùÜ) LINEAR A SIGN A707 J	[4A2E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10746, 0x0062 };
    uint32_t const ces[9] = { 0x4A2E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_399)
{
    // 10747 0021;	
    // (êùá) LINEAR A SIGN A708 K	[4A2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10747, 0x0021 };
    uint32_t const ces[9] = { 0x4A2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_400)
{
    // 10747 003F;	
    // (êùá) LINEAR A SIGN A708 K	[4A2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10747, 0x003F };
    uint32_t const ces[9] = { 0x4A2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_401)
{
    // 10747 0061;	
    // (êùá) LINEAR A SIGN A708 K	[4A2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10747, 0x0061 };
    uint32_t const ces[9] = { 0x4A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_402)
{
    // 10747 0041;	
    // (êùá) LINEAR A SIGN A708 K	[4A2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10747, 0x0041 };
    uint32_t const ces[9] = { 0x4A2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_403)
{
    // 10747 0062;	
    // (êùá) LINEAR A SIGN A708 K	[4A2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10747, 0x0062 };
    uint32_t const ces[9] = { 0x4A2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_404)
{
    // 10748 0021;	
    // (êùà) LINEAR A SIGN A709 L	[4A30 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10748, 0x0021 };
    uint32_t const ces[9] = { 0x4A30, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_405)
{
    // 10748 003F;	
    // (êùà) LINEAR A SIGN A709 L	[4A30 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10748, 0x003F };
    uint32_t const ces[9] = { 0x4A30, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_406)
{
    // 10748 0061;	
    // (êùà) LINEAR A SIGN A709 L	[4A30 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10748, 0x0061 };
    uint32_t const ces[9] = { 0x4A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_407)
{
    // 10748 0041;	
    // (êùà) LINEAR A SIGN A709 L	[4A30 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10748, 0x0041 };
    uint32_t const ces[9] = { 0x4A30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_408)
{
    // 10748 0062;	
    // (êùà) LINEAR A SIGN A709 L	[4A30 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10748, 0x0062 };
    uint32_t const ces[9] = { 0x4A30, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_409)
{
    // 10749 0021;	
    // (êùâ) LINEAR A SIGN A709-2 L2	[4A31 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10749, 0x0021 };
    uint32_t const ces[9] = { 0x4A31, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_410)
{
    // 10749 003F;	
    // (êùâ) LINEAR A SIGN A709-2 L2	[4A31 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10749, 0x003F };
    uint32_t const ces[9] = { 0x4A31, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_411)
{
    // 10749 0061;	
    // (êùâ) LINEAR A SIGN A709-2 L2	[4A31 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10749, 0x0061 };
    uint32_t const ces[9] = { 0x4A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_412)
{
    // 10749 0041;	
    // (êùâ) LINEAR A SIGN A709-2 L2	[4A31 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10749, 0x0041 };
    uint32_t const ces[9] = { 0x4A31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_413)
{
    // 10749 0062;	
    // (êùâ) LINEAR A SIGN A709-2 L2	[4A31 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10749, 0x0062 };
    uint32_t const ces[9] = { 0x4A31, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_414)
{
    // 1074A 0021;	
    // (êùä) LINEAR A SIGN A709-3 L3	[4A32 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074A, 0x0021 };
    uint32_t const ces[9] = { 0x4A32, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_415)
{
    // 1074A 003F;	
    // (êùä) LINEAR A SIGN A709-3 L3	[4A32 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074A, 0x003F };
    uint32_t const ces[9] = { 0x4A32, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_416)
{
    // 1074A 0061;	
    // (êùä) LINEAR A SIGN A709-3 L3	[4A32 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074A, 0x0061 };
    uint32_t const ces[9] = { 0x4A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_417)
{
    // 1074A 0041;	
    // (êùä) LINEAR A SIGN A709-3 L3	[4A32 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074A, 0x0041 };
    uint32_t const ces[9] = { 0x4A32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_418)
{
    // 1074A 0062;	
    // (êùä) LINEAR A SIGN A709-3 L3	[4A32 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074A, 0x0062 };
    uint32_t const ces[9] = { 0x4A32, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_419)
{
    // 1074B 0021;	
    // (êùã) LINEAR A SIGN A709-4 L4	[4A33 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074B, 0x0021 };
    uint32_t const ces[9] = { 0x4A33, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_420)
{
    // 1074B 003F;	
    // (êùã) LINEAR A SIGN A709-4 L4	[4A33 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074B, 0x003F };
    uint32_t const ces[9] = { 0x4A33, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_421)
{
    // 1074B 0061;	
    // (êùã) LINEAR A SIGN A709-4 L4	[4A33 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074B, 0x0061 };
    uint32_t const ces[9] = { 0x4A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_422)
{
    // 1074B 0041;	
    // (êùã) LINEAR A SIGN A709-4 L4	[4A33 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074B, 0x0041 };
    uint32_t const ces[9] = { 0x4A33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_423)
{
    // 1074B 0062;	
    // (êùã) LINEAR A SIGN A709-4 L4	[4A33 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074B, 0x0062 };
    uint32_t const ces[9] = { 0x4A33, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_424)
{
    // 1074C 0021;	
    // (êùå) LINEAR A SIGN A709-6 L6	[4A34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074C, 0x0021 };
    uint32_t const ces[9] = { 0x4A34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_425)
{
    // 1074C 003F;	
    // (êùå) LINEAR A SIGN A709-6 L6	[4A34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074C, 0x003F };
    uint32_t const ces[9] = { 0x4A34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_426)
{
    // 1074C 0061;	
    // (êùå) LINEAR A SIGN A709-6 L6	[4A34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074C, 0x0061 };
    uint32_t const ces[9] = { 0x4A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_427)
{
    // 1074C 0041;	
    // (êùå) LINEAR A SIGN A709-6 L6	[4A34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074C, 0x0041 };
    uint32_t const ces[9] = { 0x4A34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_428)
{
    // 1074C 0062;	
    // (êùå) LINEAR A SIGN A709-6 L6	[4A34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074C, 0x0062 };
    uint32_t const ces[9] = { 0x4A34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_429)
{
    // 1074D 0021;	
    // (êùç) LINEAR A SIGN A710 W	[4A35 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074D, 0x0021 };
    uint32_t const ces[9] = { 0x4A35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_430)
{
    // 1074D 003F;	
    // (êùç) LINEAR A SIGN A710 W	[4A35 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074D, 0x003F };
    uint32_t const ces[9] = { 0x4A35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_431)
{
    // 1074D 0061;	
    // (êùç) LINEAR A SIGN A710 W	[4A35 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074D, 0x0061 };
    uint32_t const ces[9] = { 0x4A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_432)
{
    // 1074D 0041;	
    // (êùç) LINEAR A SIGN A710 W	[4A35 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074D, 0x0041 };
    uint32_t const ces[9] = { 0x4A35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_433)
{
    // 1074D 0062;	
    // (êùç) LINEAR A SIGN A710 W	[4A35 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074D, 0x0062 };
    uint32_t const ces[9] = { 0x4A35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_434)
{
    // 1074E 0021;	
    // (êùé) LINEAR A SIGN A711 X	[4A36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074E, 0x0021 };
    uint32_t const ces[9] = { 0x4A36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_435)
{
    // 1074E 003F;	
    // (êùé) LINEAR A SIGN A711 X	[4A36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074E, 0x003F };
    uint32_t const ces[9] = { 0x4A36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_436)
{
    // 1074E 0061;	
    // (êùé) LINEAR A SIGN A711 X	[4A36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074E, 0x0061 };
    uint32_t const ces[9] = { 0x4A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_437)
{
    // 1074E 0041;	
    // (êùé) LINEAR A SIGN A711 X	[4A36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074E, 0x0041 };
    uint32_t const ces[9] = { 0x4A36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_438)
{
    // 1074E 0062;	
    // (êùé) LINEAR A SIGN A711 X	[4A36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074E, 0x0062 };
    uint32_t const ces[9] = { 0x4A36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_439)
{
    // 1074F 0021;	
    // (êùè) LINEAR A SIGN A712 Y	[4A37 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074F, 0x0021 };
    uint32_t const ces[9] = { 0x4A37, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_440)
{
    // 1074F 003F;	
    // (êùè) LINEAR A SIGN A712 Y	[4A37 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074F, 0x003F };
    uint32_t const ces[9] = { 0x4A37, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_441)
{
    // 1074F 0061;	
    // (êùè) LINEAR A SIGN A712 Y	[4A37 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074F, 0x0061 };
    uint32_t const ces[9] = { 0x4A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_442)
{
    // 1074F 0041;	
    // (êùè) LINEAR A SIGN A712 Y	[4A37 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1074F, 0x0041 };
    uint32_t const ces[9] = { 0x4A37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_443)
{
    // 1074F 0062;	
    // (êùè) LINEAR A SIGN A712 Y	[4A37 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1074F, 0x0062 };
    uint32_t const ces[9] = { 0x4A37, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_444)
{
    // 10750 0021;	
    // (êùê) LINEAR A SIGN A713 OMEGA	[4A38 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10750, 0x0021 };
    uint32_t const ces[9] = { 0x4A38, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_445)
{
    // 10750 003F;	
    // (êùê) LINEAR A SIGN A713 OMEGA	[4A38 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10750, 0x003F };
    uint32_t const ces[9] = { 0x4A38, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_446)
{
    // 10750 0061;	
    // (êùê) LINEAR A SIGN A713 OMEGA	[4A38 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10750, 0x0061 };
    uint32_t const ces[9] = { 0x4A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_447)
{
    // 10750 0041;	
    // (êùê) LINEAR A SIGN A713 OMEGA	[4A38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10750, 0x0041 };
    uint32_t const ces[9] = { 0x4A38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_448)
{
    // 10750 0062;	
    // (êùê) LINEAR A SIGN A713 OMEGA	[4A38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10750, 0x0062 };
    uint32_t const ces[9] = { 0x4A38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_449)
{
    // 10751 0021;	
    // (êùë) LINEAR A SIGN A714 ABB	[4A39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10751, 0x0021 };
    uint32_t const ces[9] = { 0x4A39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_450)
{
    // 10751 003F;	
    // (êùë) LINEAR A SIGN A714 ABB	[4A39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10751, 0x003F };
    uint32_t const ces[9] = { 0x4A39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_451)
{
    // 10751 0061;	
    // (êùë) LINEAR A SIGN A714 ABB	[4A39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10751, 0x0061 };
    uint32_t const ces[9] = { 0x4A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_452)
{
    // 10751 0041;	
    // (êùë) LINEAR A SIGN A714 ABB	[4A39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10751, 0x0041 };
    uint32_t const ces[9] = { 0x4A39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_453)
{
    // 10751 0062;	
    // (êùë) LINEAR A SIGN A714 ABB	[4A39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10751, 0x0062 };
    uint32_t const ces[9] = { 0x4A39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_454)
{
    // 10752 0021;	
    // (êùí) LINEAR A SIGN A715 BB	[4A3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10752, 0x0021 };
    uint32_t const ces[9] = { 0x4A3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_455)
{
    // 10752 003F;	
    // (êùí) LINEAR A SIGN A715 BB	[4A3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10752, 0x003F };
    uint32_t const ces[9] = { 0x4A3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_456)
{
    // 10752 0061;	
    // (êùí) LINEAR A SIGN A715 BB	[4A3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10752, 0x0061 };
    uint32_t const ces[9] = { 0x4A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_457)
{
    // 10752 0041;	
    // (êùí) LINEAR A SIGN A715 BB	[4A3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10752, 0x0041 };
    uint32_t const ces[9] = { 0x4A3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_458)
{
    // 10752 0062;	
    // (êùí) LINEAR A SIGN A715 BB	[4A3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10752, 0x0062 };
    uint32_t const ces[9] = { 0x4A3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_459)
{
    // 10753 0021;	
    // (êùì) LINEAR A SIGN A717 DD	[4A3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10753, 0x0021 };
    uint32_t const ces[9] = { 0x4A3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_460)
{
    // 10753 003F;	
    // (êùì) LINEAR A SIGN A717 DD	[4A3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10753, 0x003F };
    uint32_t const ces[9] = { 0x4A3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_461)
{
    // 10753 0061;	
    // (êùì) LINEAR A SIGN A717 DD	[4A3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10753, 0x0061 };
    uint32_t const ces[9] = { 0x4A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_462)
{
    // 10753 0041;	
    // (êùì) LINEAR A SIGN A717 DD	[4A3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10753, 0x0041 };
    uint32_t const ces[9] = { 0x4A3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_463)
{
    // 10753 0062;	
    // (êùì) LINEAR A SIGN A717 DD	[4A3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10753, 0x0062 };
    uint32_t const ces[9] = { 0x4A3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_464)
{
    // 10754 0021;	
    // (êùî) LINEAR A SIGN A726 EYYY	[4A3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10754, 0x0021 };
    uint32_t const ces[9] = { 0x4A3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_465)
{
    // 10754 003F;	
    // (êùî) LINEAR A SIGN A726 EYYY	[4A3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10754, 0x003F };
    uint32_t const ces[9] = { 0x4A3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_466)
{
    // 10754 0061;	
    // (êùî) LINEAR A SIGN A726 EYYY	[4A3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10754, 0x0061 };
    uint32_t const ces[9] = { 0x4A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_467)
{
    // 10754 0041;	
    // (êùî) LINEAR A SIGN A726 EYYY	[4A3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10754, 0x0041 };
    uint32_t const ces[9] = { 0x4A3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_468)
{
    // 10754 0062;	
    // (êùî) LINEAR A SIGN A726 EYYY	[4A3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10754, 0x0062 };
    uint32_t const ces[9] = { 0x4A3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_469)
{
    // 10755 0021;	
    // (êùï) LINEAR A SIGN A732 JE	[4A3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10755, 0x0021 };
    uint32_t const ces[9] = { 0x4A3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_470)
{
    // 10755 003F;	
    // (êùï) LINEAR A SIGN A732 JE	[4A3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10755, 0x003F };
    uint32_t const ces[9] = { 0x4A3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_471)
{
    // 10755 0061;	
    // (êùï) LINEAR A SIGN A732 JE	[4A3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10755, 0x0061 };
    uint32_t const ces[9] = { 0x4A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_472)
{
    // 10755 0041;	
    // (êùï) LINEAR A SIGN A732 JE	[4A3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10755, 0x0041 };
    uint32_t const ces[9] = { 0x4A3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_473)
{
    // 10755 0062;	
    // (êùï) LINEAR A SIGN A732 JE	[4A3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10755, 0x0062 };
    uint32_t const ces[9] = { 0x4A3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_474)
{
    // 10760 0021;	
    // (êù†) LINEAR A SIGN A800	[4A3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10760, 0x0021 };
    uint32_t const ces[9] = { 0x4A3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_475)
{
    // 10760 003F;	
    // (êù†) LINEAR A SIGN A800	[4A3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10760, 0x003F };
    uint32_t const ces[9] = { 0x4A3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_476)
{
    // 10760 0061;	
    // (êù†) LINEAR A SIGN A800	[4A3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10760, 0x0061 };
    uint32_t const ces[9] = { 0x4A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_477)
{
    // 10760 0041;	
    // (êù†) LINEAR A SIGN A800	[4A3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10760, 0x0041 };
    uint32_t const ces[9] = { 0x4A3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_478)
{
    // 10760 0062;	
    // (êù†) LINEAR A SIGN A800	[4A3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10760, 0x0062 };
    uint32_t const ces[9] = { 0x4A3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_479)
{
    // 10761 0021;	
    // (êù°) LINEAR A SIGN A801	[4A3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10761, 0x0021 };
    uint32_t const ces[9] = { 0x4A3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_480)
{
    // 10761 003F;	
    // (êù°) LINEAR A SIGN A801	[4A3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10761, 0x003F };
    uint32_t const ces[9] = { 0x4A3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_481)
{
    // 10761 0061;	
    // (êù°) LINEAR A SIGN A801	[4A3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10761, 0x0061 };
    uint32_t const ces[9] = { 0x4A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_482)
{
    // 10761 0041;	
    // (êù°) LINEAR A SIGN A801	[4A3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10761, 0x0041 };
    uint32_t const ces[9] = { 0x4A3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_483)
{
    // 10761 0062;	
    // (êù°) LINEAR A SIGN A801	[4A3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10761, 0x0062 };
    uint32_t const ces[9] = { 0x4A3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_484)
{
    // 10762 0021;	
    // (êù¢) LINEAR A SIGN A802	[4A40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10762, 0x0021 };
    uint32_t const ces[9] = { 0x4A40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_485)
{
    // 10762 003F;	
    // (êù¢) LINEAR A SIGN A802	[4A40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10762, 0x003F };
    uint32_t const ces[9] = { 0x4A40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_486)
{
    // 10762 0061;	
    // (êù¢) LINEAR A SIGN A802	[4A40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10762, 0x0061 };
    uint32_t const ces[9] = { 0x4A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_487)
{
    // 10762 0041;	
    // (êù¢) LINEAR A SIGN A802	[4A40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10762, 0x0041 };
    uint32_t const ces[9] = { 0x4A40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_488)
{
    // 10762 0062;	
    // (êù¢) LINEAR A SIGN A802	[4A40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10762, 0x0062 };
    uint32_t const ces[9] = { 0x4A40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_489)
{
    // 10763 0021;	
    // (êù£) LINEAR A SIGN A803	[4A41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10763, 0x0021 };
    uint32_t const ces[9] = { 0x4A41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_490)
{
    // 10763 003F;	
    // (êù£) LINEAR A SIGN A803	[4A41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10763, 0x003F };
    uint32_t const ces[9] = { 0x4A41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_491)
{
    // 10763 0061;	
    // (êù£) LINEAR A SIGN A803	[4A41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10763, 0x0061 };
    uint32_t const ces[9] = { 0x4A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_492)
{
    // 10763 0041;	
    // (êù£) LINEAR A SIGN A803	[4A41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10763, 0x0041 };
    uint32_t const ces[9] = { 0x4A41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_493)
{
    // 10763 0062;	
    // (êù£) LINEAR A SIGN A803	[4A41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10763, 0x0062 };
    uint32_t const ces[9] = { 0x4A41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_494)
{
    // 10764 0021;	
    // (êù§) LINEAR A SIGN A804	[4A42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10764, 0x0021 };
    uint32_t const ces[9] = { 0x4A42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_495)
{
    // 10764 003F;	
    // (êù§) LINEAR A SIGN A804	[4A42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10764, 0x003F };
    uint32_t const ces[9] = { 0x4A42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_496)
{
    // 10764 0061;	
    // (êù§) LINEAR A SIGN A804	[4A42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10764, 0x0061 };
    uint32_t const ces[9] = { 0x4A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_497)
{
    // 10764 0041;	
    // (êù§) LINEAR A SIGN A804	[4A42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10764, 0x0041 };
    uint32_t const ces[9] = { 0x4A42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_498)
{
    // 10764 0062;	
    // (êù§) LINEAR A SIGN A804	[4A42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10764, 0x0062 };
    uint32_t const ces[9] = { 0x4A42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_280_499)
{
    // 10765 0021;	
    // (êù•) LINEAR A SIGN A805	[4A43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10765, 0x0021 };
    uint32_t const ces[9] = { 0x4A43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

