// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_131_000)
{
    // 10CE1 ; [.3835.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EMP

    uint32_t const cps[1] = { 0x10ce1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3835), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_001)
{
    // 10CE2 ; [.3836.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ER

    uint32_t const cps[1] = { 0x10ce2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3836), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_002)
{
    // 10CE3 ; [.3836.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER SHORT ER

    uint32_t const cps[1] = { 0x10ce3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3836), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_131_003)
{
    // 10CE4 ; [.3837.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ES

    uint32_t const cps[1] = { 0x10ce4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3837), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_004)
{
    // 10CE5 ; [.3838.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ESZ

    uint32_t const cps[1] = { 0x10ce5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3838), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_005)
{
    // 10CE6 ; [.3839.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ET

    uint32_t const cps[1] = { 0x10ce6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3839), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_006)
{
    // 10CE7 ; [.383A.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ENT

    uint32_t const cps[1] = { 0x10ce7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_007)
{
    // 10CE8 ; [.383B.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ETY

    uint32_t const cps[1] = { 0x10ce8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_008)
{
    // 10CE9 ; [.383C.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ECH

    uint32_t const cps[1] = { 0x10ce9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_009)
{
    // 10CEA ; [.383D.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER U

    uint32_t const cps[1] = { 0x10cea };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_010)
{
    // 10CEB ; [.383D.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER UU

    uint32_t const cps[1] = { 0x10ceb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x383d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_131_011)
{
    // 10CEC ; [.383E.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER NIKOLSBURG UE

    uint32_t const cps[1] = { 0x10cec };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_012)
{
    // 10CED ; [.383E.0020.0004][.0000.0111.0004] 
    // OLD HUNGARIAN SMALL LETTER RUDIMENTA UE

    uint32_t const cps[1] = { 0x10ced };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x383e), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_131_013)
{
    // 10CEE ; [.383F.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EV

    uint32_t const cps[1] = { 0x10cee };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x383f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_014)
{
    // 10CEF ; [.3840.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EZ

    uint32_t const cps[1] = { 0x10cef };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3840), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_015)
{
    // 10CF0 ; [.3841.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER EZS

    uint32_t const cps[1] = { 0x10cf0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3841), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_016)
{
    // 10CF1 ; [.3842.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER ENT-SHAPED SIGN

    uint32_t const cps[1] = { 0x10cf1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3842), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_017)
{
    // 10CF2 ; [.3843.0020.0002] 
    // OLD HUNGARIAN SMALL LETTER US

    uint32_t const cps[1] = { 0x10cf2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3843), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_018)
{
    // 10CFA ; [.1CA4.0020.0002] 
    // OLD HUNGARIAN NUMBER ONE

    uint32_t const cps[1] = { 0x10cfa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_019)
{
    // 10CFB ; [.1CA8.0020.0002] 
    // OLD HUNGARIAN NUMBER FIVE

    uint32_t const cps[1] = { 0x10cfb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_020)
{
    // 10CFC ; [*1B49.0020.0002] 
    // OLD HUNGARIAN NUMBER TEN

    uint32_t const cps[1] = { 0x10cfc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_021)
{
    // 10CFD ; [*1B4A.0020.0002] 
    // OLD HUNGARIAN NUMBER FIFTY

    uint32_t const cps[1] = { 0x10cfd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_022)
{
    // 10CFE ; [*1B4B.0020.0002] 
    // OLD HUNGARIAN NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10cfe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_023)
{
    // 10CFF ; [*1B4C.0020.0002] 
    // OLD HUNGARIAN NUMBER ONE THOUSAND

    uint32_t const cps[1] = { 0x10cff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_024)
{
    // 10E60 ; [.1CA4.0020.0002] 
    // RUMI DIGIT ONE

    uint32_t const cps[1] = { 0x10e60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_025)
{
    // 10E61 ; [.1CA5.0020.0002] 
    // RUMI DIGIT TWO

    uint32_t const cps[1] = { 0x10e61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_026)
{
    // 10E62 ; [.1CA6.0020.0002] 
    // RUMI DIGIT THREE

    uint32_t const cps[1] = { 0x10e62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_027)
{
    // 10E63 ; [.1CA7.0020.0002] 
    // RUMI DIGIT FOUR

    uint32_t const cps[1] = { 0x10e63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_028)
{
    // 10E64 ; [.1CA8.0020.0002] 
    // RUMI DIGIT FIVE

    uint32_t const cps[1] = { 0x10e64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_029)
{
    // 10E65 ; [.1CA9.0020.0002] 
    // RUMI DIGIT SIX

    uint32_t const cps[1] = { 0x10e65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_030)
{
    // 10E66 ; [.1CAA.0020.0002] 
    // RUMI DIGIT SEVEN

    uint32_t const cps[1] = { 0x10e66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_031)
{
    // 10E67 ; [.1CAB.0020.0002] 
    // RUMI DIGIT EIGHT

    uint32_t const cps[1] = { 0x10e67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_032)
{
    // 10E68 ; [.1CAC.0020.0002] 
    // RUMI DIGIT NINE

    uint32_t const cps[1] = { 0x10e68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_033)
{
    // 10E69 ; [*1B30.0020.0002] 
    // RUMI NUMBER TEN

    uint32_t const cps[1] = { 0x10e69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_034)
{
    // 10E6A ; [*1B31.0020.0002] 
    // RUMI NUMBER TWENTY

    uint32_t const cps[1] = { 0x10e6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_035)
{
    // 10E6B ; [*1B32.0020.0002] 
    // RUMI NUMBER THIRTY

    uint32_t const cps[1] = { 0x10e6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_036)
{
    // 10E6C ; [*1B33.0020.0002] 
    // RUMI NUMBER FORTY

    uint32_t const cps[1] = { 0x10e6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b33), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_037)
{
    // 10E6D ; [*1B34.0020.0002] 
    // RUMI NUMBER FIFTY

    uint32_t const cps[1] = { 0x10e6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b34), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_038)
{
    // 10E6E ; [*1B35.0020.0002] 
    // RUMI NUMBER SIXTY

    uint32_t const cps[1] = { 0x10e6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b35), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_039)
{
    // 10E6F ; [*1B36.0020.0002] 
    // RUMI NUMBER SEVENTY

    uint32_t const cps[1] = { 0x10e6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b36), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_040)
{
    // 10E70 ; [*1B37.0020.0002] 
    // RUMI NUMBER EIGHTY

    uint32_t const cps[1] = { 0x10e70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b37), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_041)
{
    // 10E71 ; [*1B38.0020.0002] 
    // RUMI NUMBER NINETY

    uint32_t const cps[1] = { 0x10e71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b38), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_042)
{
    // 10E72 ; [*1B39.0020.0002] 
    // RUMI NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10e72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b39), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_043)
{
    // 10E73 ; [*1B3A.0020.0002] 
    // RUMI NUMBER TWO HUNDRED

    uint32_t const cps[1] = { 0x10e73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_044)
{
    // 10E74 ; [*1B3B.0020.0002] 
    // RUMI NUMBER THREE HUNDRED

    uint32_t const cps[1] = { 0x10e74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_045)
{
    // 10E75 ; [*1B3C.0020.0002] 
    // RUMI NUMBER FOUR HUNDRED

    uint32_t const cps[1] = { 0x10e75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_046)
{
    // 10E76 ; [*1B3D.0020.0002] 
    // RUMI NUMBER FIVE HUNDRED

    uint32_t const cps[1] = { 0x10e76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_047)
{
    // 10E77 ; [*1B3E.0020.0002] 
    // RUMI NUMBER SIX HUNDRED

    uint32_t const cps[1] = { 0x10e77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_048)
{
    // 10E78 ; [*1B3F.0020.0002] 
    // RUMI NUMBER SEVEN HUNDRED

    uint32_t const cps[1] = { 0x10e78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b3f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_049)
{
    // 10E79 ; [*1B40.0020.0002] 
    // RUMI NUMBER EIGHT HUNDRED

    uint32_t const cps[1] = { 0x10e79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b40), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_050)
{
    // 10E7A ; [*1B41.0020.0002] 
    // RUMI NUMBER NINE HUNDRED

    uint32_t const cps[1] = { 0x10e7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b41), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_051)
{
    // 10E7B ; [*1B42.0020.0002] 
    // RUMI FRACTION ONE HALF

    uint32_t const cps[1] = { 0x10e7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b42), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_052)
{
    // 10E7C ; [*1B43.0020.0002] 
    // RUMI FRACTION ONE QUARTER

    uint32_t const cps[1] = { 0x10e7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_053)
{
    // 10E7D ; [*1B44.0020.0002] 
    // RUMI FRACTION ONE THIRD

    uint32_t const cps[1] = { 0x10e7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_054)
{
    // 10E7E ; [*1B45.0020.0002] 
    // RUMI FRACTION TWO THIRDS

    uint32_t const cps[1] = { 0x10e7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_055)
{
    // 11000 ; [.0000.00C3.0002] 
    // BRAHMI SIGN CANDRABINDU

    uint32_t const cps[1] = { 0x11000 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa3), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_056)
{
    // 11001 ; [.0000.00C4.0002] 
    // BRAHMI SIGN ANUSVARA

    uint32_t const cps[1] = { 0x11001 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_057)
{
    // 11002 ; [.0000.00C5.0002] 
    // BRAHMI SIGN VISARGA

    uint32_t const cps[1] = { 0x11002 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_058)
{
    // 11003 ; [.2DA4.0020.0002] 
    // BRAHMI SIGN JIHVAMULIYA

    uint32_t const cps[1] = { 0x11003 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_059)
{
    // 11004 ; [.2DA5.0020.0002] 
    // BRAHMI SIGN UPADHMANIYA

    uint32_t const cps[1] = { 0x11004 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_060)
{
    // 11005 ; [.2D75.0020.0002] 
    // BRAHMI LETTER A

    uint32_t const cps[1] = { 0x11005 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_061)
{
    // 11006 ; [.2D76.0020.0002] 
    // BRAHMI LETTER AA

    uint32_t const cps[1] = { 0x11006 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_062)
{
    // 11007 ; [.2D77.0020.0002] 
    // BRAHMI LETTER I

    uint32_t const cps[1] = { 0x11007 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_063)
{
    // 11008 ; [.2D78.0020.0002] 
    // BRAHMI LETTER II

    uint32_t const cps[1] = { 0x11008 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_064)
{
    // 11009 ; [.2D79.0020.0002] 
    // BRAHMI LETTER U

    uint32_t const cps[1] = { 0x11009 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_065)
{
    // 1100A ; [.2D7A.0020.0002] 
    // BRAHMI LETTER UU

    uint32_t const cps[1] = { 0x1100a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_066)
{
    // 1100B ; [.2D7B.0020.0002] 
    // BRAHMI LETTER VOCALIC R

    uint32_t const cps[1] = { 0x1100b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_067)
{
    // 1100C ; [.2D7C.0020.0002] 
    // BRAHMI LETTER VOCALIC RR

    uint32_t const cps[1] = { 0x1100c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_068)
{
    // 1100D ; [.2D7D.0020.0002] 
    // BRAHMI LETTER VOCALIC L

    uint32_t const cps[1] = { 0x1100d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_069)
{
    // 1100E ; [.2D7E.0020.0002] 
    // BRAHMI LETTER VOCALIC LL

    uint32_t const cps[1] = { 0x1100e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_070)
{
    // 1100F ; [.2D7F.0020.0002] 
    // BRAHMI LETTER E

    uint32_t const cps[1] = { 0x1100f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_071)
{
    // 11010 ; [.2D80.0020.0002] 
    // BRAHMI LETTER AI

    uint32_t const cps[1] = { 0x11010 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_072)
{
    // 11011 ; [.2D81.0020.0002] 
    // BRAHMI LETTER O

    uint32_t const cps[1] = { 0x11011 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_073)
{
    // 11012 ; [.2D82.0020.0002] 
    // BRAHMI LETTER AU

    uint32_t const cps[1] = { 0x11012 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_074)
{
    // 11013 ; [.2D83.0020.0002] 
    // BRAHMI LETTER KA

    uint32_t const cps[1] = { 0x11013 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_075)
{
    // 11014 ; [.2D84.0020.0002] 
    // BRAHMI LETTER KHA

    uint32_t const cps[1] = { 0x11014 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_076)
{
    // 11015 ; [.2D85.0020.0002] 
    // BRAHMI LETTER GA

    uint32_t const cps[1] = { 0x11015 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_077)
{
    // 11016 ; [.2D86.0020.0002] 
    // BRAHMI LETTER GHA

    uint32_t const cps[1] = { 0x11016 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_078)
{
    // 11017 ; [.2D87.0020.0002] 
    // BRAHMI LETTER NGA

    uint32_t const cps[1] = { 0x11017 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_079)
{
    // 11018 ; [.2D88.0020.0002] 
    // BRAHMI LETTER CA

    uint32_t const cps[1] = { 0x11018 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_080)
{
    // 11019 ; [.2D89.0020.0002] 
    // BRAHMI LETTER CHA

    uint32_t const cps[1] = { 0x11019 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_081)
{
    // 1101A ; [.2D8A.0020.0002] 
    // BRAHMI LETTER JA

    uint32_t const cps[1] = { 0x1101a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_082)
{
    // 1101B ; [.2D8B.0020.0002] 
    // BRAHMI LETTER JHA

    uint32_t const cps[1] = { 0x1101b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_083)
{
    // 1101C ; [.2D8C.0020.0002] 
    // BRAHMI LETTER NYA

    uint32_t const cps[1] = { 0x1101c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_084)
{
    // 1101D ; [.2D8D.0020.0002] 
    // BRAHMI LETTER TTA

    uint32_t const cps[1] = { 0x1101d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_085)
{
    // 1101E ; [.2D8E.0020.0002] 
    // BRAHMI LETTER TTHA

    uint32_t const cps[1] = { 0x1101e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_086)
{
    // 1101F ; [.2D8F.0020.0002] 
    // BRAHMI LETTER DDA

    uint32_t const cps[1] = { 0x1101f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_087)
{
    // 11020 ; [.2D90.0020.0002] 
    // BRAHMI LETTER DDHA

    uint32_t const cps[1] = { 0x11020 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_088)
{
    // 11021 ; [.2D91.0020.0002] 
    // BRAHMI LETTER NNA

    uint32_t const cps[1] = { 0x11021 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_089)
{
    // 11022 ; [.2D92.0020.0002] 
    // BRAHMI LETTER TA

    uint32_t const cps[1] = { 0x11022 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_090)
{
    // 11023 ; [.2D93.0020.0002] 
    // BRAHMI LETTER THA

    uint32_t const cps[1] = { 0x11023 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_091)
{
    // 11024 ; [.2D94.0020.0002] 
    // BRAHMI LETTER DA

    uint32_t const cps[1] = { 0x11024 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_092)
{
    // 11025 ; [.2D95.0020.0002] 
    // BRAHMI LETTER DHA

    uint32_t const cps[1] = { 0x11025 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_093)
{
    // 11026 ; [.2D96.0020.0002] 
    // BRAHMI LETTER NA

    uint32_t const cps[1] = { 0x11026 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_094)
{
    // 11027 ; [.2D97.0020.0002] 
    // BRAHMI LETTER PA

    uint32_t const cps[1] = { 0x11027 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_095)
{
    // 11028 ; [.2D98.0020.0002] 
    // BRAHMI LETTER PHA

    uint32_t const cps[1] = { 0x11028 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_096)
{
    // 11029 ; [.2D99.0020.0002] 
    // BRAHMI LETTER BA

    uint32_t const cps[1] = { 0x11029 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_097)
{
    // 1102A ; [.2D9A.0020.0002] 
    // BRAHMI LETTER BHA

    uint32_t const cps[1] = { 0x1102a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_098)
{
    // 1102B ; [.2D9B.0020.0002] 
    // BRAHMI LETTER MA

    uint32_t const cps[1] = { 0x1102b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_099)
{
    // 1102C ; [.2D9C.0020.0002] 
    // BRAHMI LETTER YA

    uint32_t const cps[1] = { 0x1102c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_100)
{
    // 1102D ; [.2D9D.0020.0002] 
    // BRAHMI LETTER RA

    uint32_t const cps[1] = { 0x1102d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_101)
{
    // 1102E ; [.2D9E.0020.0002] 
    // BRAHMI LETTER LA

    uint32_t const cps[1] = { 0x1102e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_102)
{
    // 1102F ; [.2D9F.0020.0002] 
    // BRAHMI LETTER VA

    uint32_t const cps[1] = { 0x1102f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2d9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_103)
{
    // 11030 ; [.2DA0.0020.0002] 
    // BRAHMI LETTER SHA

    uint32_t const cps[1] = { 0x11030 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_104)
{
    // 11031 ; [.2DA1.0020.0002] 
    // BRAHMI LETTER SSA

    uint32_t const cps[1] = { 0x11031 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_105)
{
    // 11032 ; [.2DA2.0020.0002] 
    // BRAHMI LETTER SA

    uint32_t const cps[1] = { 0x11032 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_106)
{
    // 11033 ; [.2DA3.0020.0002] 
    // BRAHMI LETTER HA

    uint32_t const cps[1] = { 0x11033 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_107)
{
    // 11034 ; [.2DA6.0020.0002] 
    // BRAHMI LETTER LLA

    uint32_t const cps[1] = { 0x11034 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_108)
{
    // 11035 ; [.2DA7.0020.0002] 
    // BRAHMI LETTER OLD TAMIL LLLA

    uint32_t const cps[1] = { 0x11035 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_109)
{
    // 11036 ; [.2DA8.0020.0002] 
    // BRAHMI LETTER OLD TAMIL RRA

    uint32_t const cps[1] = { 0x11036 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_110)
{
    // 11037 ; [.2DA9.0020.0002] 
    // BRAHMI LETTER OLD TAMIL NNNA

    uint32_t const cps[1] = { 0x11037 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2da9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_111)
{
    // 11038 ; [.2DAA.0020.0002] 
    // BRAHMI VOWEL SIGN AA

    uint32_t const cps[1] = { 0x11038 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2daa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_112)
{
    // 11039 ; [.2DAB.0020.0002] 
    // BRAHMI VOWEL SIGN BHATTIPROLU AA

    uint32_t const cps[1] = { 0x11039 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_113)
{
    // 1103A ; [.2DAC.0020.0002] 
    // BRAHMI VOWEL SIGN I

    uint32_t const cps[1] = { 0x1103a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_114)
{
    // 1103B ; [.2DAD.0020.0002] 
    // BRAHMI VOWEL SIGN II

    uint32_t const cps[1] = { 0x1103b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_115)
{
    // 1103C ; [.2DAE.0020.0002] 
    // BRAHMI VOWEL SIGN U

    uint32_t const cps[1] = { 0x1103c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_116)
{
    // 1103D ; [.2DAF.0020.0002] 
    // BRAHMI VOWEL SIGN UU

    uint32_t const cps[1] = { 0x1103d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2daf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_117)
{
    // 1103E ; [.2DB0.0020.0002] 
    // BRAHMI VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0x1103e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_118)
{
    // 1103F ; [.2DB1.0020.0002] 
    // BRAHMI VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0x1103f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_119)
{
    // 11040 ; [.2DB2.0020.0002] 
    // BRAHMI VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0x11040 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_120)
{
    // 11041 ; [.2DB3.0020.0002] 
    // BRAHMI VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0x11041 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_121)
{
    // 11042 ; [.2DB4.0020.0002] 
    // BRAHMI VOWEL SIGN E

    uint32_t const cps[1] = { 0x11042 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_122)
{
    // 11043 ; [.2DB5.0020.0002] 
    // BRAHMI VOWEL SIGN AI

    uint32_t const cps[1] = { 0x11043 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_123)
{
    // 11044 ; [.2DB6.0020.0002] 
    // BRAHMI VOWEL SIGN O

    uint32_t const cps[1] = { 0x11044 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_124)
{
    // 11045 ; [.2DB7.0020.0002] 
    // BRAHMI VOWEL SIGN AU

    uint32_t const cps[1] = { 0x11045 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_125)
{
    // 11046 ; [.2DB8.0020.0002] 
    // BRAHMI VIRAMA

    uint32_t const cps[1] = { 0x11046 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_126)
{
    // 11047 ; [*02AD.0020.0002] 
    // BRAHMI DANDA

    uint32_t const cps[1] = { 0x11047 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_127)
{
    // 11048 ; [*02AE.0020.0002] 
    // BRAHMI DOUBLE DANDA

    uint32_t const cps[1] = { 0x11048 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_128)
{
    // 11049 ; [*0449.0020.0002] 
    // BRAHMI PUNCTUATION DOT

    uint32_t const cps[1] = { 0x11049 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x449), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_129)
{
    // 1104A ; [*044A.0020.0002] 
    // BRAHMI PUNCTUATION DOUBLE DOT

    uint32_t const cps[1] = { 0x1104a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_130)
{
    // 1104B ; [*044B.0020.0002] 
    // BRAHMI PUNCTUATION LINE

    uint32_t const cps[1] = { 0x1104b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_131)
{
    // 1104C ; [*044C.0020.0002] 
    // BRAHMI PUNCTUATION CRESCENT BAR

    uint32_t const cps[1] = { 0x1104c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_132)
{
    // 1104D ; [*044D.0020.0002] 
    // BRAHMI PUNCTUATION LOTUS

    uint32_t const cps[1] = { 0x1104d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x44d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_133)
{
    // 11052 ; [.1CA4.0020.0002] 
    // BRAHMI NUMBER ONE

    uint32_t const cps[1] = { 0x11052 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_134)
{
    // 11053 ; [.1CA5.0020.0002] 
    // BRAHMI NUMBER TWO

    uint32_t const cps[1] = { 0x11053 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_135)
{
    // 11054 ; [.1CA6.0020.0002] 
    // BRAHMI NUMBER THREE

    uint32_t const cps[1] = { 0x11054 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_136)
{
    // 11055 ; [.1CA7.0020.0002] 
    // BRAHMI NUMBER FOUR

    uint32_t const cps[1] = { 0x11055 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_137)
{
    // 11056 ; [.1CA8.0020.0002] 
    // BRAHMI NUMBER FIVE

    uint32_t const cps[1] = { 0x11056 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_138)
{
    // 11057 ; [.1CA9.0020.0002] 
    // BRAHMI NUMBER SIX

    uint32_t const cps[1] = { 0x11057 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_139)
{
    // 11058 ; [.1CAA.0020.0002] 
    // BRAHMI NUMBER SEVEN

    uint32_t const cps[1] = { 0x11058 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_140)
{
    // 11059 ; [.1CAB.0020.0002] 
    // BRAHMI NUMBER EIGHT

    uint32_t const cps[1] = { 0x11059 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_141)
{
    // 1105A ; [.1CAC.0020.0002] 
    // BRAHMI NUMBER NINE

    uint32_t const cps[1] = { 0x1105a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_142)
{
    // 1105B ; [*1BD7.0020.0002] 
    // BRAHMI NUMBER TEN

    uint32_t const cps[1] = { 0x1105b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_143)
{
    // 1105C ; [*1BD8.0020.0002] 
    // BRAHMI NUMBER TWENTY

    uint32_t const cps[1] = { 0x1105c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_144)
{
    // 1105D ; [*1BD9.0020.0002] 
    // BRAHMI NUMBER THIRTY

    uint32_t const cps[1] = { 0x1105d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_145)
{
    // 1105E ; [*1BDA.0020.0002] 
    // BRAHMI NUMBER FORTY

    uint32_t const cps[1] = { 0x1105e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_146)
{
    // 1105F ; [*1BDB.0020.0002] 
    // BRAHMI NUMBER FIFTY

    uint32_t const cps[1] = { 0x1105f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_147)
{
    // 11060 ; [*1BDC.0020.0002] 
    // BRAHMI NUMBER SIXTY

    uint32_t const cps[1] = { 0x11060 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_148)
{
    // 11061 ; [*1BDD.0020.0002] 
    // BRAHMI NUMBER SEVENTY

    uint32_t const cps[1] = { 0x11061 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_131_149)
{
    // 11062 ; [*1BDE.0020.0002] 
    // BRAHMI NUMBER EIGHTY

    uint32_t const cps[1] = { 0x11062 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

