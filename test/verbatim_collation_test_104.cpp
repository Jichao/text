// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, verbatim_104_000)
{
    uint32_t const cps[2] = { 0x1D56F, 0x0021 };

    // 1D56F 0021;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D56F 0021;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_001)
{
    uint32_t const cps[2] = { 0x1D5A3, 0x0021 };

    // 1D5A3 0021;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A3 0021;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_002)
{
    uint32_t const cps[2] = { 0x1D5D7, 0x0021 };

    // 1D5D7 0021;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5D7 0021;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_003)
{
    uint32_t const cps[2] = { 0x1D60B, 0x0021 };

    // 1D60B 0021;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D60B 0021;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_004)
{
    uint32_t const cps[2] = { 0x1D63F, 0x0021 };

    // 1D63F 0021;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D63F 0021;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_005)
{
    uint32_t const cps[2] = { 0x1D673, 0x0021 };

    // 1D673 0021;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 0261 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D673 0021;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_006)
{
    uint32_t const cps[2] = { 0x24B9, 0x0021 };

    // 24B9 0021;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 0261 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B9 0021;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000C | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_007)
{
    uint32_t const cps[2] = { 0x1F153, 0x0021 };

    // 1F153 0021;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 0261 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F153 0021;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000C | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_008)
{
    uint32_t const cps[2] = { 0x1D48, 0x0021 };

    // 1D48 0021;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 0261 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D48 0021;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 | 0020 | 0014 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_009)
{
    uint32_t const cps[2] = { 0x1F1A5, 0x0021 };

    // 1F1A5 0021;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 0261 | 0020 0020 | 001C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1A5 0021;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 | 0020 | 001C | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001C, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_010)
{
    uint32_t const cps[2] = { 0x1D30, 0x0021 };

    // 1D30 0021;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D30 0021;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_011)
{
    uint32_t const cps[2] = { 0x1F133, 0x0021 };

    // 1F133 0021;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F133 0021;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_012)
{
    uint32_t const cps[2] = { 0x1F173, 0x0021 };

    // 1F173 0021;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 0261 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F173 0021;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 001D | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_013)
{
    uint32_t const cps[2] = { 0x010F, 0x0021 };

    // 010F 0021;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 0261 | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010F 0021;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 | 0020 0028 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0028, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_014)
{
    uint32_t const cps[2] = { 0x010E, 0x0021 };

    // 010E 0021;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 0261 | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010E 0021;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 | 0020 0028 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0028, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_015)
{
    uint32_t const cps[2] = { 0x1E0B, 0x0021 };

    // 1E0B 0021;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 0261 | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0B 0021;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 | 0020 002E | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x002E, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_016)
{
    uint32_t const cps[2] = { 0x1E0A, 0x0021 };

    // 1E0A 0021;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 0261 | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0A 0021;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 | 0020 002E | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x002E, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_017)
{
    uint32_t const cps[2] = { 0x1E11, 0x0021 };

    // 1E11 0021;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 0261 | 0020 0030 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E11 0021;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 | 0020 0030 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0030, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_018)
{
    uint32_t const cps[2] = { 0x1E10, 0x0021 };

    // 1E10 0021;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 0261 | 0020 0030 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E10 0021;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 | 0020 0030 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0030, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_019)
{
    uint32_t const cps[2] = { 0x0111, 0x0021 };

    // 0111 0021;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 0261 | 0020 0039 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0111 0021;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 | 0020 0039 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0039, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_020)
{
    uint32_t const cps[2] = { 0x0110, 0x0021 };

    // 0110 0021;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 0261 | 0020 0039 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0110 0021;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 | 0020 0039 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0039, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_021)
{
    uint32_t const cps[2] = { 0x1E0D, 0x0021 };

    // 1E0D 0021;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 0261 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0D 0021;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 | 0020 0042 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_022)
{
    uint32_t const cps[2] = { 0x1E0C, 0x0021 };

    // 1E0C 0021;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 0261 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0C 0021;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 | 0020 0042 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0042, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_023)
{
    uint32_t const cps[2] = { 0x1E13, 0x0021 };

    // 1E13 0021;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 0261 | 0020 0046 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E13 0021;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 | 0020 0046 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0046, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_024)
{
    uint32_t const cps[2] = { 0x1E12, 0x0021 };

    // 1E12 0021;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 0261 | 0020 0046 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E12 0021;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 | 0020 0046 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0046, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_025)
{
    uint32_t const cps[2] = { 0x1E0F, 0x0021 };

    // 1E0F 0021;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 0261 | 0020 0049 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0F 0021;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 | 0020 0049 | 0002 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0049, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_026)
{
    uint32_t const cps[2] = { 0x1E0E, 0x0021 };

    // 1E0E 0021;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 0261 | 0020 0049 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0E 0021;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 | 0020 0049 | 0008 0002 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0049, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_027)
{
    uint32_t const cps[2] = { 0x00F0, 0x0021 };

    // 00F0 0021;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 0261 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F0 0021;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 | 0020 0111 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_028)
{
    uint32_t const cps[2] = { 0x1DD9, 0x0021 };

    // 1DD9 0021;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 0261 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD9 0021;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 | 0020 0111 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_029)
{
    uint32_t const cps[2] = { 0x00D0, 0x0021 };

    // 00D0 0021;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 0261 | 0020 0111 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D0 0021;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 | 0020 0111 | 000A 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_030)
{
    uint32_t const cps[2] = { 0x1D9E, 0x0021 };

    // 1D9E 0021;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 0261 | 0020 0111 0020 | 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D9E 0021;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 | 0020 0111 | 0014 0014 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0014, 0x0014, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_031)
{
    uint32_t const cps[2] = { 0x1DD8, 0x0021 };

    // 1DD8 0021;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 0261 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD8 0021;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 | 0020 0112 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_032)
{
    uint32_t const cps[2] = { 0xA77A, 0x0021 };

    // A77A 0021;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 0261 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A77A 0021;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 | 0020 0112 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_033)
{
    uint32_t const cps[2] = { 0xA779, 0x0021 };

    // A779 0021;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 0261 | 0020 0112 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0261, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A779 0021;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 | 0020 0112 | 000A 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_034)
{
    uint32_t const cps[2] = { 0x0064, 0x003F };

    // 0064 003F;	
    // (d) LATIN SMALL LETTER D	[1CF5 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0064 003F;	
    // (d) LATIN SMALL LETTER D	[1CF5 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_035)
{
    uint32_t const cps[2] = { 0xFF44, 0x003F };

    // FF44 003F;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 0267 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF44 003F;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 | 0020 | 0003 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0003, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_036)
{
    uint32_t const cps[2] = { 0x0369, 0x003F };

    // 0369 003F;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 0267 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0369 003F;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 | 0020 | 0004 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_037)
{
    uint32_t const cps[2] = { 0x217E, 0x003F };

    // 217E 003F;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 0267 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 217E 003F;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 | 0020 | 0004 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0004, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_038)
{
    uint32_t const cps[2] = { 0x2146, 0x003F };

    // 2146 003F;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2146 003F;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_039)
{
    uint32_t const cps[2] = { 0x1D41D, 0x003F };

    // 1D41D 003F;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D41D 003F;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_040)
{
    uint32_t const cps[2] = { 0x1D451, 0x003F };

    // 1D451 003F;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D451 003F;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_041)
{
    uint32_t const cps[2] = { 0x1D485, 0x003F };

    // 1D485 003F;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D485 003F;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_042)
{
    uint32_t const cps[2] = { 0x1D4B9, 0x003F };

    // 1D4B9 003F;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B9 003F;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_043)
{
    uint32_t const cps[2] = { 0x1D4ED, 0x003F };

    // 1D4ED 003F;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4ED 003F;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_044)
{
    uint32_t const cps[2] = { 0x1D521, 0x003F };

    // 1D521 003F;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D521 003F;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_045)
{
    uint32_t const cps[2] = { 0x1D555, 0x003F };

    // 1D555 003F;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D555 003F;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_046)
{
    uint32_t const cps[2] = { 0x1D589, 0x003F };

    // 1D589 003F;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D589 003F;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_047)
{
    uint32_t const cps[2] = { 0x1D5BD, 0x003F };

    // 1D5BD 003F;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5BD 003F;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_048)
{
    uint32_t const cps[2] = { 0x1D5F1, 0x003F };

    // 1D5F1 003F;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5F1 003F;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_049)
{
    uint32_t const cps[2] = { 0x1D625, 0x003F };

    // 1D625 003F;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D625 003F;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_050)
{
    uint32_t const cps[2] = { 0x1D659, 0x003F };

    // 1D659 003F;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D659 003F;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_051)
{
    uint32_t const cps[2] = { 0x1D68D, 0x003F };

    // 1D68D 003F;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 0267 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D68D 003F;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 | 0020 | 0005 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0005, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_052)
{
    uint32_t const cps[2] = { 0x24D3, 0x003F };

    // 24D3 003F;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 0267 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24D3 003F;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 | 0020 | 0006 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0006, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_053)
{
    uint32_t const cps[2] = { 0x0044, 0x003F };

    // 0044 003F;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0044 003F;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_054)
{
    uint32_t const cps[2] = { 0xFF24, 0x003F };

    // FF24 003F;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF24 003F;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 | 0020 | 0009 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0009, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_055)
{
    uint32_t const cps[2] = { 0x216E, 0x003F };

    // 216E 003F;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 0267 | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 216E 003F;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 | 0020 | 000A | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000A, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_056)
{
    uint32_t const cps[2] = { 0x2145, 0x003F };

    // 2145 003F;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2145 003F;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_057)
{
    uint32_t const cps[2] = { 0x1D403, 0x003F };

    // 1D403 003F;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D403 003F;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_058)
{
    uint32_t const cps[2] = { 0x1D437, 0x003F };

    // 1D437 003F;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D437 003F;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_059)
{
    uint32_t const cps[2] = { 0x1D46B, 0x003F };

    // 1D46B 003F;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D46B 003F;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_060)
{
    uint32_t const cps[2] = { 0x1D49F, 0x003F };

    // 1D49F 003F;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D49F 003F;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_061)
{
    uint32_t const cps[2] = { 0x1D4D3, 0x003F };

    // 1D4D3 003F;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4D3 003F;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_062)
{
    uint32_t const cps[2] = { 0x1D507, 0x003F };

    // 1D507 003F;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D507 003F;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_063)
{
    uint32_t const cps[2] = { 0x1D53B, 0x003F };

    // 1D53B 003F;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53B 003F;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_064)
{
    uint32_t const cps[2] = { 0x1D56F, 0x003F };

    // 1D56F 003F;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D56F 003F;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_065)
{
    uint32_t const cps[2] = { 0x1D5A3, 0x003F };

    // 1D5A3 003F;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A3 003F;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_066)
{
    uint32_t const cps[2] = { 0x1D5D7, 0x003F };

    // 1D5D7 003F;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5D7 003F;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_067)
{
    uint32_t const cps[2] = { 0x1D60B, 0x003F };

    // 1D60B 003F;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D60B 003F;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_068)
{
    uint32_t const cps[2] = { 0x1D63F, 0x003F };

    // 1D63F 003F;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D63F 003F;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_069)
{
    uint32_t const cps[2] = { 0x1D673, 0x003F };

    // 1D673 003F;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 0267 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D673 003F;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 | 0020 | 000B | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000B, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_070)
{
    uint32_t const cps[2] = { 0x24B9, 0x003F };

    // 24B9 003F;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B9 003F;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000C | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_071)
{
    uint32_t const cps[2] = { 0x1F153, 0x003F };

    // 1F153 003F;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F153 003F;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 000C | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x000C, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_072)
{
    uint32_t const cps[2] = { 0x1D48, 0x003F };

    // 1D48 003F;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 0267 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D48 003F;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 | 0020 | 0014 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x0014, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_073)
{
    uint32_t const cps[2] = { 0x1F1A5, 0x003F };

    // 1F1A5 003F;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 0267 | 0020 0020 | 001C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1A5 003F;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 | 0020 | 001C | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001C, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_074)
{
    uint32_t const cps[2] = { 0x1D30, 0x003F };

    // 1D30 003F;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D30 003F;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_075)
{
    uint32_t const cps[2] = { 0x1F133, 0x003F };

    // 1F133 003F;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F133 003F;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_076)
{
    uint32_t const cps[2] = { 0x1F173, 0x003F };

    // 1F173 003F;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 0267 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F173 003F;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 | 0020 | 001D | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF5, 0x0000, 0x0020, 0x0000, 0x001D, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_077)
{
    uint32_t const cps[2] = { 0x010F, 0x003F };

    // 010F 003F;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 0267 | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010F 003F;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 | 0020 0028 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0028, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_078)
{
    uint32_t const cps[2] = { 0x010E, 0x003F };

    // 010E 003F;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 0267 | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010E 003F;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 | 0020 0028 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0028, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_079)
{
    uint32_t const cps[2] = { 0x1E0B, 0x003F };

    // 1E0B 003F;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 0267 | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0B 003F;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 | 0020 002E | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x002E, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_080)
{
    uint32_t const cps[2] = { 0x1E0A, 0x003F };

    // 1E0A 003F;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 0267 | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0A 003F;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 | 0020 002E | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x002E, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_081)
{
    uint32_t const cps[2] = { 0x1E11, 0x003F };

    // 1E11 003F;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 0267 | 0020 0030 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E11 003F;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 | 0020 0030 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0030, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_082)
{
    uint32_t const cps[2] = { 0x1E10, 0x003F };

    // 1E10 003F;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 0267 | 0020 0030 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E10 003F;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 | 0020 0030 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0030, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_083)
{
    uint32_t const cps[2] = { 0x0111, 0x003F };

    // 0111 003F;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 0267 | 0020 0039 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0111 003F;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 | 0020 0039 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0039, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_084)
{
    uint32_t const cps[2] = { 0x0110, 0x003F };

    // 0110 003F;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 0267 | 0020 0039 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0110 003F;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 | 0020 0039 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0039, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_085)
{
    uint32_t const cps[2] = { 0x1E0D, 0x003F };

    // 1E0D 003F;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 0267 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0D 003F;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 | 0020 0042 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0042, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_086)
{
    uint32_t const cps[2] = { 0x1E0C, 0x003F };

    // 1E0C 003F;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 0267 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0C 003F;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 | 0020 0042 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0042, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_087)
{
    uint32_t const cps[2] = { 0x1E13, 0x003F };

    // 1E13 003F;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 0267 | 0020 0046 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E13 003F;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 | 0020 0046 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0046, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_088)
{
    uint32_t const cps[2] = { 0x1E12, 0x003F };

    // 1E12 003F;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 0267 | 0020 0046 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E12 003F;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 | 0020 0046 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0046, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_089)
{
    uint32_t const cps[2] = { 0x1E0F, 0x003F };

    // 1E0F 003F;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 0267 | 0020 0049 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0F 003F;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 | 0020 0049 | 0002 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0049, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_090)
{
    uint32_t const cps[2] = { 0x1E0E, 0x003F };

    // 1E0E 003F;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 0267 | 0020 0049 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0E 003F;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 | 0020 0049 | 0008 0002 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0049, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_091)
{
    uint32_t const cps[2] = { 0x00F0, 0x003F };

    // 00F0 003F;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 0267 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F0 003F;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 | 0020 0111 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_092)
{
    uint32_t const cps[2] = { 0x1DD9, 0x003F };

    // 1DD9 003F;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 0267 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD9 003F;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 | 0020 0111 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_093)
{
    uint32_t const cps[2] = { 0x00D0, 0x003F };

    // 00D0 003F;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 0267 | 0020 0111 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D0 003F;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 | 0020 0111 | 000A 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_094)
{
    uint32_t const cps[2] = { 0x1D9E, 0x003F };

    // 1D9E 003F;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 0267 | 0020 0111 0020 | 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D9E 003F;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 | 0020 0111 | 0014 0014 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0111, 0x0000, 0x0014, 0x0014, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_095)
{
    uint32_t const cps[2] = { 0x1DD8, 0x003F };

    // 1DD8 003F;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 0267 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD8 003F;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 | 0020 0112 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_096)
{
    uint32_t const cps[2] = { 0xA77A, 0x003F };

    // A77A 003F;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 0267 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A77A 003F;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 | 0020 0112 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_097)
{
    uint32_t const cps[2] = { 0xA779, 0x003F };

    // A779 003F;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 0267 | 0020 0112 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x0267, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A779 003F;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 | 0020 0112 | 000A 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x0000, 0x0020, 0x0112, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_098)
{
    uint32_t const cps[2] = { 0x0064, 0x0061 };

    // 0064 0061;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0064 0061;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_099)
{
    uint32_t const cps[2] = { 0x0064, 0x0041 };

    // 0064 0041;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0064 0041;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_100)
{
    uint32_t const cps[2] = { 0xFF44, 0x0061 };

    // FF44 0061;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF44 0061;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_101)
{
    uint32_t const cps[2] = { 0xFF44, 0x0041 };

    // FF44 0041;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0003 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF44 0041;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0003 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_102)
{
    uint32_t const cps[2] = { 0x0369, 0x0061 };

    // 0369 0061;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0369 0061;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_103)
{
    uint32_t const cps[2] = { 0x217E, 0x0061 };

    // 217E 0061;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 217E 0061;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_104)
{
    uint32_t const cps[2] = { 0x0369, 0x0041 };

    // 0369 0041;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0369 0041;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0004 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_105)
{
    uint32_t const cps[2] = { 0x217E, 0x0041 };

    // 217E 0041;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 0004 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 217E 0041;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 0004 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_106)
{
    uint32_t const cps[2] = { 0x2146, 0x0061 };

    // 2146 0061;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2146 0061;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_107)
{
    uint32_t const cps[2] = { 0x1D41D, 0x0061 };

    // 1D41D 0061;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D41D 0061;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_108)
{
    uint32_t const cps[2] = { 0x1D451, 0x0061 };

    // 1D451 0061;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D451 0061;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_109)
{
    uint32_t const cps[2] = { 0x1D485, 0x0061 };

    // 1D485 0061;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D485 0061;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_110)
{
    uint32_t const cps[2] = { 0x1D4B9, 0x0061 };

    // 1D4B9 0061;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B9 0061;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_111)
{
    uint32_t const cps[2] = { 0x1D4ED, 0x0061 };

    // 1D4ED 0061;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4ED 0061;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_112)
{
    uint32_t const cps[2] = { 0x1D521, 0x0061 };

    // 1D521 0061;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D521 0061;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_113)
{
    uint32_t const cps[2] = { 0x1D555, 0x0061 };

    // 1D555 0061;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D555 0061;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_114)
{
    uint32_t const cps[2] = { 0x1D589, 0x0061 };

    // 1D589 0061;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D589 0061;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_115)
{
    uint32_t const cps[2] = { 0x1D5BD, 0x0061 };

    // 1D5BD 0061;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5BD 0061;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_116)
{
    uint32_t const cps[2] = { 0x1D5F1, 0x0061 };

    // 1D5F1 0061;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5F1 0061;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_117)
{
    uint32_t const cps[2] = { 0x1D625, 0x0061 };

    // 1D625 0061;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D625 0061;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_118)
{
    uint32_t const cps[2] = { 0x1D659, 0x0061 };

    // 1D659 0061;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D659 0061;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_119)
{
    uint32_t const cps[2] = { 0x1D68D, 0x0061 };

    // 1D68D 0061;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D68D 0061;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_120)
{
    uint32_t const cps[2] = { 0x2146, 0x0041 };

    // 2146 0041;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2146 0041;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_121)
{
    uint32_t const cps[2] = { 0x1D41D, 0x0041 };

    // 1D41D 0041;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D41D 0041;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_122)
{
    uint32_t const cps[2] = { 0x1D451, 0x0041 };

    // 1D451 0041;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D451 0041;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_123)
{
    uint32_t const cps[2] = { 0x1D485, 0x0041 };

    // 1D485 0041;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D485 0041;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_124)
{
    uint32_t const cps[2] = { 0x1D4B9, 0x0041 };

    // 1D4B9 0041;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B9 0041;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_125)
{
    uint32_t const cps[2] = { 0x1D4ED, 0x0041 };

    // 1D4ED 0041;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4ED 0041;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_126)
{
    uint32_t const cps[2] = { 0x1D521, 0x0041 };

    // 1D521 0041;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D521 0041;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_127)
{
    uint32_t const cps[2] = { 0x1D555, 0x0041 };

    // 1D555 0041;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D555 0041;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_128)
{
    uint32_t const cps[2] = { 0x1D589, 0x0041 };

    // 1D589 0041;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D589 0041;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_129)
{
    uint32_t const cps[2] = { 0x1D5BD, 0x0041 };

    // 1D5BD 0041;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5BD 0041;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_130)
{
    uint32_t const cps[2] = { 0x1D5F1, 0x0041 };

    // 1D5F1 0041;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5F1 0041;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_131)
{
    uint32_t const cps[2] = { 0x1D625, 0x0041 };

    // 1D625 0041;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D625 0041;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_132)
{
    uint32_t const cps[2] = { 0x1D659, 0x0041 };

    // 1D659 0041;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D659 0041;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_133)
{
    uint32_t const cps[2] = { 0x1D68D, 0x0041 };

    // 1D68D 0041;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D68D 0041;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CAD | 0020 0020 | 0005 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_134)
{
    uint32_t const cps[2] = { 0x24D3, 0x0061 };

    // 24D3 0061;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24D3 0061;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_135)
{
    uint32_t const cps[2] = { 0x24D3, 0x0041 };

    // 24D3 0041;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0006 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24D3 0041;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 0006 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_136)
{
    uint32_t const cps[2] = { 0x0044, 0x0061 };

    // 0044 0061;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0044 0061;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_137)
{
    uint32_t const cps[2] = { 0x0044, 0x0041 };

    // 0044 0041;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0044 0041;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_138)
{
    uint32_t const cps[2] = { 0xFF24, 0x0061 };

    // FF24 0061;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF24 0061;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0009 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_139)
{
    uint32_t const cps[2] = { 0xFF24, 0x0041 };

    // FF24 0041;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0009 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF24 0041;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 0009 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_140)
{
    uint32_t const cps[2] = { 0x216E, 0x0061 };

    // 216E 0061;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 216E 0061;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 000A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_141)
{
    uint32_t const cps[2] = { 0x216E, 0x0041 };

    // 216E 0041;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 000A 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 216E 0041;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CAD | 0020 0020 | 000A 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_142)
{
    uint32_t const cps[2] = { 0x2145, 0x0061 };

    // 2145 0061;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2145 0061;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_143)
{
    uint32_t const cps[2] = { 0x1D403, 0x0061 };

    // 1D403 0061;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D403 0061;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_144)
{
    uint32_t const cps[2] = { 0x1D437, 0x0061 };

    // 1D437 0061;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D437 0061;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_145)
{
    uint32_t const cps[2] = { 0x1D46B, 0x0061 };

    // 1D46B 0061;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D46B 0061;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_146)
{
    uint32_t const cps[2] = { 0x1D49F, 0x0061 };

    // 1D49F 0061;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D49F 0061;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_147)
{
    uint32_t const cps[2] = { 0x1D4D3, 0x0061 };

    // 1D4D3 0061;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4D3 0061;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_148)
{
    uint32_t const cps[2] = { 0x1D507, 0x0061 };

    // 1D507 0061;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D507 0061;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_149)
{
    uint32_t const cps[2] = { 0x1D53B, 0x0061 };

    // 1D53B 0061;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53B 0061;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_150)
{
    uint32_t const cps[2] = { 0x1D56F, 0x0061 };

    // 1D56F 0061;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D56F 0061;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_151)
{
    uint32_t const cps[2] = { 0x1D5A3, 0x0061 };

    // 1D5A3 0061;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A3 0061;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_152)
{
    uint32_t const cps[2] = { 0x1D5D7, 0x0061 };

    // 1D5D7 0061;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5D7 0061;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_153)
{
    uint32_t const cps[2] = { 0x1D60B, 0x0061 };

    // 1D60B 0061;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D60B 0061;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_154)
{
    uint32_t const cps[2] = { 0x1D63F, 0x0061 };

    // 1D63F 0061;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D63F 0061;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_155)
{
    uint32_t const cps[2] = { 0x1D673, 0x0061 };

    // 1D673 0061;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D673 0061;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_156)
{
    uint32_t const cps[2] = { 0x2145, 0x0041 };

    // 2145 0041;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2145 0041;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_157)
{
    uint32_t const cps[2] = { 0x1D403, 0x0041 };

    // 1D403 0041;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D403 0041;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_158)
{
    uint32_t const cps[2] = { 0x1D437, 0x0041 };

    // 1D437 0041;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D437 0041;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_159)
{
    uint32_t const cps[2] = { 0x1D46B, 0x0041 };

    // 1D46B 0041;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D46B 0041;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_160)
{
    uint32_t const cps[2] = { 0x1D49F, 0x0041 };

    // 1D49F 0041;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D49F 0041;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_161)
{
    uint32_t const cps[2] = { 0x1D4D3, 0x0041 };

    // 1D4D3 0041;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4D3 0041;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_162)
{
    uint32_t const cps[2] = { 0x1D507, 0x0041 };

    // 1D507 0041;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D507 0041;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_163)
{
    uint32_t const cps[2] = { 0x1D53B, 0x0041 };

    // 1D53B 0041;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53B 0041;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_164)
{
    uint32_t const cps[2] = { 0x1D56F, 0x0041 };

    // 1D56F 0041;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D56F 0041;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_165)
{
    uint32_t const cps[2] = { 0x1D5A3, 0x0041 };

    // 1D5A3 0041;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A3 0041;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_166)
{
    uint32_t const cps[2] = { 0x1D5D7, 0x0041 };

    // 1D5D7 0041;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5D7 0041;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_167)
{
    uint32_t const cps[2] = { 0x1D60B, 0x0041 };

    // 1D60B 0041;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D60B 0041;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_168)
{
    uint32_t const cps[2] = { 0x1D63F, 0x0041 };

    // 1D63F 0041;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D63F 0041;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_169)
{
    uint32_t const cps[2] = { 0x1D673, 0x0041 };

    // 1D673 0041;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D673 0041;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CAD | 0020 0020 | 000B 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_170)
{
    uint32_t const cps[2] = { 0x24B9, 0x0061 };

    // 24B9 0061;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B9 0061;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_171)
{
    uint32_t const cps[2] = { 0x1F153, 0x0061 };

    // 1F153 0061;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F153 0061;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_172)
{
    uint32_t const cps[2] = { 0x24B9, 0x0041 };

    // 24B9 0041;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B9 0041;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_173)
{
    uint32_t const cps[2] = { 0x1F153, 0x0041 };

    // 1F153 0041;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F153 0041;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 000C 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_174)
{
    uint32_t const cps[2] = { 0x1D48, 0x0061 };

    // 1D48 0061;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CAD | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D48 0061;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CAD | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_175)
{
    uint32_t const cps[2] = { 0x1D48, 0x0041 };

    // 1D48 0041;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CAD | 0020 0020 | 0014 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D48 0041;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CAD | 0020 0020 | 0014 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_176)
{
    uint32_t const cps[2] = { 0x1F1A5, 0x0061 };

    // 1F1A5 0061;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 001C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1A5 0061;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 001C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_177)
{
    uint32_t const cps[2] = { 0x1F1A5, 0x0041 };

    // 1F1A5 0041;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 001C 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1A5 0041;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CAD | 0020 0020 | 001C 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_178)
{
    uint32_t const cps[2] = { 0x1D30, 0x0061 };

    // 1D30 0061;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D30 0061;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_179)
{
    uint32_t const cps[2] = { 0x1F133, 0x0061 };

    // 1F133 0061;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F133 0061;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_180)
{
    uint32_t const cps[2] = { 0x1F173, 0x0061 };

    // 1F173 0061;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F173 0061;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_181)
{
    uint32_t const cps[2] = { 0x1D30, 0x0041 };

    // 1D30 0041;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D30 0041;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_182)
{
    uint32_t const cps[2] = { 0x1F133, 0x0041 };

    // 1F133 0041;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F133 0041;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_183)
{
    uint32_t const cps[2] = { 0x1F173, 0x0041 };

    // 1F173 0041;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F173 0041;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CAD | 0020 0020 | 001D 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_184)
{
    uint32_t const cps[2] = { 0x010F, 0x0061 };

    // 010F 0061;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010F 0061;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_185)
{
    uint32_t const cps[2] = { 0x010F, 0x0041 };

    // 010F 0041;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010F 0041;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_186)
{
    uint32_t const cps[2] = { 0x010E, 0x0061 };

    // 010E 0061;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010E 0061;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_187)
{
    uint32_t const cps[2] = { 0x010E, 0x0041 };

    // 010E 0041;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010E 0041;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CAD | 0020 0028 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_188)
{
    uint32_t const cps[2] = { 0x1E0B, 0x0061 };

    // 1E0B 0061;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0B 0061;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_189)
{
    uint32_t const cps[2] = { 0x1E0B, 0x0041 };

    // 1E0B 0041;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0B 0041;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_190)
{
    uint32_t const cps[2] = { 0x1E0A, 0x0061 };

    // 1E0A 0061;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0A 0061;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_191)
{
    uint32_t const cps[2] = { 0x1E0A, 0x0041 };

    // 1E0A 0041;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0A 0041;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CAD | 0020 002E 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_192)
{
    uint32_t const cps[2] = { 0x1E11, 0x0061 };

    // 1E11 0061;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E11 0061;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_193)
{
    uint32_t const cps[2] = { 0x1E11, 0x0041 };

    // 1E11 0041;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E11 0041;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_194)
{
    uint32_t const cps[2] = { 0x1E10, 0x0061 };

    // 1E10 0061;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E10 0061;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_195)
{
    uint32_t const cps[2] = { 0x1E10, 0x0041 };

    // 1E10 0041;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E10 0041;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CAD | 0020 0030 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_196)
{
    uint32_t const cps[2] = { 0x0111, 0x0061 };

    // 0111 0061;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0111 0061;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_197)
{
    uint32_t const cps[2] = { 0x0111, 0x0041 };

    // 0111 0041;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0111 0041;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_198)
{
    uint32_t const cps[2] = { 0x0110, 0x0061 };

    // 0110 0061;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0110 0061;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_199)
{
    uint32_t const cps[2] = { 0x0110, 0x0041 };

    // 0110 0041;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0110 0041;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CAD | 0020 0039 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_200)
{
    uint32_t const cps[2] = { 0x1E0D, 0x0061 };

    // 1E0D 0061;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0D 0061;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_201)
{
    uint32_t const cps[2] = { 0x1E0D, 0x0041 };

    // 1E0D 0041;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0D 0041;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_202)
{
    uint32_t const cps[2] = { 0x1E0C, 0x0061 };

    // 1E0C 0061;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0C 0061;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_203)
{
    uint32_t const cps[2] = { 0x1E0C, 0x0041 };

    // 1E0C 0041;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0C 0041;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CAD | 0020 0042 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_204)
{
    uint32_t const cps[2] = { 0x1E13, 0x0061 };

    // 1E13 0061;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E13 0061;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_205)
{
    uint32_t const cps[2] = { 0x1E13, 0x0041 };

    // 1E13 0041;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E13 0041;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_206)
{
    uint32_t const cps[2] = { 0x1E12, 0x0061 };

    // 1E12 0061;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E12 0061;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_207)
{
    uint32_t const cps[2] = { 0x1E12, 0x0041 };

    // 1E12 0041;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E12 0041;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CAD | 0020 0046 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_208)
{
    uint32_t const cps[2] = { 0x1E0F, 0x0061 };

    // 1E0F 0061;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0F 0061;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_209)
{
    uint32_t const cps[2] = { 0x1E0F, 0x0041 };

    // 1E0F 0041;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0002 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0F 0041;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0002 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_210)
{
    uint32_t const cps[2] = { 0x1E0E, 0x0061 };

    // 1E0E 0061;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0E 0061;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_211)
{
    uint32_t const cps[2] = { 0x1E0E, 0x0041 };

    // 1E0E 0041;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0008 0002 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0E 0041;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CAD | 0020 0049 0020 | 0008 0002 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_212)
{
    uint32_t const cps[2] = { 0x00F0, 0x0061 };

    // 00F0 0061;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F0 0061;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_213)
{
    uint32_t const cps[2] = { 0x1DD9, 0x0061 };

    // 1DD9 0061;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD9 0061;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_214)
{
    uint32_t const cps[2] = { 0x00F0, 0x0041 };

    // 00F0 0041;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F0 0041;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_215)
{
    uint32_t const cps[2] = { 0x1DD9, 0x0041 };

    // 1DD9 0041;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD9 0041;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_216)
{
    uint32_t const cps[2] = { 0x00D0, 0x0061 };

    // 00D0 0061;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D0 0061;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_217)
{
    uint32_t const cps[2] = { 0x00D0, 0x0041 };

    // 00D0 0041;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D0 0041;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CAD | 0020 0111 0020 | 000A 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_218)
{
    uint32_t const cps[2] = { 0x1D9E, 0x0061 };

    // 1D9E 0061;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CAD | 0020 0111 0020 | 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D9E 0061;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CAD | 0020 0111 0020 | 0014 0014 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_219)
{
    uint32_t const cps[2] = { 0x1D9E, 0x0041 };

    // 1D9E 0041;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CAD | 0020 0111 0020 | 0014 0014 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D9E 0041;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CAD | 0020 0111 0020 | 0014 0014 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_220)
{
    uint32_t const cps[2] = { 0x1DD8, 0x0061 };

    // 1DD8 0061;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD8 0061;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_221)
{
    uint32_t const cps[2] = { 0xA77A, 0x0061 };

    // A77A 0061;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A77A 0061;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_222)
{
    uint32_t const cps[2] = { 0x1DD8, 0x0041 };

    // 1DD8 0041;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD8 0041;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_223)
{
    uint32_t const cps[2] = { 0xA77A, 0x0041 };

    // A77A 0041;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A77A 0041;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_224)
{
    uint32_t const cps[2] = { 0xA779, 0x0061 };

    // A779 0061;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A779 0061;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_225)
{
    uint32_t const cps[2] = { 0xA779, 0x0041 };

    // A779 0041;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A779 0041;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CAD | 0020 0112 0020 | 000A 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_226)
{
    uint32_t const cps[2] = { 0x3372, 0x0021 };

    // 3372 0021;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3372 0021;	
    // („ç≤) SQUARE DA	[1CF5 1CAD | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_227)
{
    uint32_t const cps[2] = { 0x3372, 0x003F };

    // 3372 003F;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3372 003F;	
    // („ç≤) SQUARE DA	[1CF5 1CAD | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_228)
{
    uint32_t const cps[2] = { 0x3372, 0x0061 };

    // 3372 0061;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3372 0061;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_229)
{
    uint32_t const cps[2] = { 0x3372, 0x0041 };

    // 3372 0041;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3372 0041;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_230)
{
    uint32_t const cps[2] = { 0x3372, 0x0062 };

    // 3372 0062;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3372 0062;	
    // („ç≤) SQUARE DA	[1CF5 1CAD 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_231)
{
    uint32_t const cps[2] = { 0x0064, 0x0062 };

    // 0064 0062;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0064 0062;	
    // (d) LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_232)
{
    uint32_t const cps[2] = { 0xFF44, 0x0062 };

    // FF44 0062;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0003 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF44 0062;	
    // (ÔΩÑ) FULLWIDTH LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0003 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_233)
{
    uint32_t const cps[2] = { 0x0369, 0x0062 };

    // 0369 0062;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0369 0062;	
    // (Õ©) COMBINING LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_234)
{
    uint32_t const cps[2] = { 0x217E, 0x0062 };

    // 217E 0062;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CC6 | 0020 0020 | 0004 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 217E 0062;	
    // (‚Öæ) SMALL ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CC6 | 0020 0020 | 0004 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_235)
{
    uint32_t const cps[2] = { 0x2146, 0x0062 };

    // 2146 0062;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2146 0062;	
    // (‚ÖÜ) DOUBLE-STRUCK ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_236)
{
    uint32_t const cps[2] = { 0x1D41D, 0x0062 };

    // 1D41D 0062;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D41D 0062;	
    // (ùêù) MATHEMATICAL BOLD SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_237)
{
    uint32_t const cps[2] = { 0x1D451, 0x0062 };

    // 1D451 0062;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D451 0062;	
    // (ùëë) MATHEMATICAL ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_238)
{
    uint32_t const cps[2] = { 0x1D485, 0x0062 };

    // 1D485 0062;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D485 0062;	
    // (ùíÖ) MATHEMATICAL BOLD ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_239)
{
    uint32_t const cps[2] = { 0x1D4B9, 0x0062 };

    // 1D4B9 0062;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4B9 0062;	
    // (ùíπ) MATHEMATICAL SCRIPT SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_240)
{
    uint32_t const cps[2] = { 0x1D4ED, 0x0062 };

    // 1D4ED 0062;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4ED 0062;	
    // (ùì≠) MATHEMATICAL BOLD SCRIPT SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_241)
{
    uint32_t const cps[2] = { 0x1D521, 0x0062 };

    // 1D521 0062;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D521 0062;	
    // (ùî°) MATHEMATICAL FRAKTUR SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_242)
{
    uint32_t const cps[2] = { 0x1D555, 0x0062 };

    // 1D555 0062;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D555 0062;	
    // (ùïï) MATHEMATICAL DOUBLE-STRUCK SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_243)
{
    uint32_t const cps[2] = { 0x1D589, 0x0062 };

    // 1D589 0062;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D589 0062;	
    // (ùñâ) MATHEMATICAL BOLD FRAKTUR SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_244)
{
    uint32_t const cps[2] = { 0x1D5BD, 0x0062 };

    // 1D5BD 0062;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5BD 0062;	
    // (ùñΩ) MATHEMATICAL SANS-SERIF SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_245)
{
    uint32_t const cps[2] = { 0x1D5F1, 0x0062 };

    // 1D5F1 0062;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5F1 0062;	
    // (ùó±) MATHEMATICAL SANS-SERIF BOLD SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_246)
{
    uint32_t const cps[2] = { 0x1D625, 0x0062 };

    // 1D625 0062;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D625 0062;	
    // (ùò•) MATHEMATICAL SANS-SERIF ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_247)
{
    uint32_t const cps[2] = { 0x1D659, 0x0062 };

    // 1D659 0062;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D659 0062;	
    // (ùôô) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_248)
{
    uint32_t const cps[2] = { 0x1D68D, 0x0062 };

    // 1D68D 0062;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D68D 0062;	
    // (ùöç) MATHEMATICAL MONOSPACE SMALL D	[1CF5 1CC6 | 0020 0020 | 0005 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_249)
{
    uint32_t const cps[2] = { 0x24D3, 0x0062 };

    // 24D3 0062;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0006 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24D3 0062;	
    // (‚ìì) CIRCLED LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 0006 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_250)
{
    uint32_t const cps[2] = { 0x0044, 0x0062 };

    // 0044 0062;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0044 0062;	
    // (D) LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_251)
{
    uint32_t const cps[2] = { 0xFF24, 0x0062 };

    // FF24 0062;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 0009 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // FF24 0062;	
    // (Ôº§) FULLWIDTH LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 0009 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0009, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_252)
{
    uint32_t const cps[2] = { 0x216E, 0x0062 };

    // 216E 0062;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CC6 | 0020 0020 | 000A 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 216E 0062;	
    // (‚ÖÆ) ROMAN NUMERAL FIVE HUNDRED	[1CF5 1CC6 | 0020 0020 | 000A 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_253)
{
    uint32_t const cps[2] = { 0x2145, 0x0062 };

    // 2145 0062;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 2145 0062;	
    // (‚ÖÖ) DOUBLE-STRUCK ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_254)
{
    uint32_t const cps[2] = { 0x1D403, 0x0062 };

    // 1D403 0062;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D403 0062;	
    // (ùêÉ) MATHEMATICAL BOLD CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_255)
{
    uint32_t const cps[2] = { 0x1D437, 0x0062 };

    // 1D437 0062;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D437 0062;	
    // (ùê∑) MATHEMATICAL ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_256)
{
    uint32_t const cps[2] = { 0x1D46B, 0x0062 };

    // 1D46B 0062;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D46B 0062;	
    // (ùë´) MATHEMATICAL BOLD ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_257)
{
    uint32_t const cps[2] = { 0x1D49F, 0x0062 };

    // 1D49F 0062;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D49F 0062;	
    // (ùíü) MATHEMATICAL SCRIPT CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_258)
{
    uint32_t const cps[2] = { 0x1D4D3, 0x0062 };

    // 1D4D3 0062;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D4D3 0062;	
    // (ùìì) MATHEMATICAL BOLD SCRIPT CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_259)
{
    uint32_t const cps[2] = { 0x1D507, 0x0062 };

    // 1D507 0062;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D507 0062;	
    // (ùîá) MATHEMATICAL FRAKTUR CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_260)
{
    uint32_t const cps[2] = { 0x1D53B, 0x0062 };

    // 1D53B 0062;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D53B 0062;	
    // (ùîª) MATHEMATICAL DOUBLE-STRUCK CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_261)
{
    uint32_t const cps[2] = { 0x1D56F, 0x0062 };

    // 1D56F 0062;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D56F 0062;	
    // (ùïØ) MATHEMATICAL BOLD FRAKTUR CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_262)
{
    uint32_t const cps[2] = { 0x1D5A3, 0x0062 };

    // 1D5A3 0062;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5A3 0062;	
    // (ùñ£) MATHEMATICAL SANS-SERIF CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_263)
{
    uint32_t const cps[2] = { 0x1D5D7, 0x0062 };

    // 1D5D7 0062;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D5D7 0062;	
    // (ùóó) MATHEMATICAL SANS-SERIF BOLD CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_264)
{
    uint32_t const cps[2] = { 0x1D60B, 0x0062 };

    // 1D60B 0062;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D60B 0062;	
    // (ùòã) MATHEMATICAL SANS-SERIF ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_265)
{
    uint32_t const cps[2] = { 0x1D63F, 0x0062 };

    // 1D63F 0062;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D63F 0062;	
    // (ùòø) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_266)
{
    uint32_t const cps[2] = { 0x1D673, 0x0062 };

    // 1D673 0062;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D673 0062;	
    // (ùô≥) MATHEMATICAL MONOSPACE CAPITAL D	[1CF5 1CC6 | 0020 0020 | 000B 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_267)
{
    uint32_t const cps[2] = { 0x24B9, 0x0062 };

    // 24B9 0062;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 24B9 0062;	
    // (‚íπ) CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_268)
{
    uint32_t const cps[2] = { 0x1F153, 0x0062 };

    // 1F153 0062;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 000C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F153 0062;	
    // (üÖì) NEGATIVE CIRCLED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 000C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_269)
{
    uint32_t const cps[2] = { 0x1D48, 0x0062 };

    // 1D48 0062;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CC6 | 0020 0020 | 0014 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D48 0062;	
    // (·µà) MODIFIER LETTER SMALL D	[1CF5 1CC6 | 0020 0020 | 0014 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_270)
{
    uint32_t const cps[2] = { 0x1F1A5, 0x0062 };

    // 1F1A5 0062;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 001C 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F1A5 0062;	
    // (üÜ•) SQUARED LATIN SMALL LETTER D	[1CF5 1CC6 | 0020 0020 | 001C 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_271)
{
    uint32_t const cps[2] = { 0x1D30, 0x0062 };

    // 1D30 0062;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D30 0062;	
    // (·¥∞) MODIFIER LETTER CAPITAL D	[1CF5 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_272)
{
    uint32_t const cps[2] = { 0x1F133, 0x0062 };

    // 1F133 0062;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F133 0062;	
    // (üÑ≥) SQUARED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_273)
{
    uint32_t const cps[2] = { 0x1F173, 0x0062 };

    // 1F173 0062;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 001D 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F173 0062;	
    // (üÖ≥) NEGATIVE SQUARED LATIN CAPITAL LETTER D	[1CF5 1CC6 | 0020 0020 | 001D 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_274)
{
    uint32_t const cps[2] = { 0x010F, 0x0062 };

    // 010F 0062;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CC6 | 0020 0028 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010F 0062;	
    // (ƒè) LATIN SMALL LETTER D WITH CARON	[1CF5 1CC6 | 0020 0028 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_275)
{
    uint32_t const cps[2] = { 0x010E, 0x0062 };

    // 010E 0062;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CC6 | 0020 0028 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 010E 0062;	
    // (ƒé) LATIN CAPITAL LETTER D WITH CARON	[1CF5 1CC6 | 0020 0028 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0028, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_276)
{
    uint32_t const cps[2] = { 0x1E0B, 0x0062 };

    // 1E0B 0062;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CC6 | 0020 002E 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0B 0062;	
    // (·∏ã) LATIN SMALL LETTER D WITH DOT ABOVE	[1CF5 1CC6 | 0020 002E 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_277)
{
    uint32_t const cps[2] = { 0x1E0A, 0x0062 };

    // 1E0A 0062;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CC6 | 0020 002E 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0A 0062;	
    // (·∏ä) LATIN CAPITAL LETTER D WITH DOT ABOVE	[1CF5 1CC6 | 0020 002E 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x002E, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_278)
{
    uint32_t const cps[2] = { 0x1E11, 0x0062 };

    // 1E11 0062;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CC6 | 0020 0030 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E11 0062;	
    // (·∏ë) LATIN SMALL LETTER D WITH CEDILLA	[1CF5 1CC6 | 0020 0030 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_279)
{
    uint32_t const cps[2] = { 0x1E10, 0x0062 };

    // 1E10 0062;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CC6 | 0020 0030 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E10 0062;	
    // (·∏ê) LATIN CAPITAL LETTER D WITH CEDILLA	[1CF5 1CC6 | 0020 0030 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0030, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_280)
{
    uint32_t const cps[2] = { 0x0111, 0x0062 };

    // 0111 0062;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CC6 | 0020 0039 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0111 0062;	
    // (ƒë) LATIN SMALL LETTER D WITH STROKE	[1CF5 1CC6 | 0020 0039 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_281)
{
    uint32_t const cps[2] = { 0x0110, 0x0062 };

    // 0110 0062;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CC6 | 0020 0039 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0110 0062;	
    // (ƒê) LATIN CAPITAL LETTER D WITH STROKE	[1CF5 1CC6 | 0020 0039 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0039, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_282)
{
    uint32_t const cps[2] = { 0x1E0D, 0x0062 };

    // 1E0D 0062;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CC6 | 0020 0042 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0D 0062;	
    // (·∏ç) LATIN SMALL LETTER D WITH DOT BELOW	[1CF5 1CC6 | 0020 0042 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_283)
{
    uint32_t const cps[2] = { 0x1E0C, 0x0062 };

    // 1E0C 0062;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CC6 | 0020 0042 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0C 0062;	
    // (·∏å) LATIN CAPITAL LETTER D WITH DOT BELOW	[1CF5 1CC6 | 0020 0042 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0042, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_284)
{
    uint32_t const cps[2] = { 0x1E13, 0x0062 };

    // 1E13 0062;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CC6 | 0020 0046 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E13 0062;	
    // (·∏ì) LATIN SMALL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CC6 | 0020 0046 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_285)
{
    uint32_t const cps[2] = { 0x1E12, 0x0062 };

    // 1E12 0062;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CC6 | 0020 0046 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E12 0062;	
    // (·∏í) LATIN CAPITAL LETTER D WITH CIRCUMFLEX BELOW	[1CF5 1CC6 | 0020 0046 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0046, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_286)
{
    uint32_t const cps[2] = { 0x1E0F, 0x0062 };

    // 1E0F 0062;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CC6 | 0020 0049 0020 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0F 0062;	
    // (·∏è) LATIN SMALL LETTER D WITH LINE BELOW	[1CF5 1CC6 | 0020 0049 0020 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_287)
{
    uint32_t const cps[2] = { 0x1E0E, 0x0062 };

    // 1E0E 0062;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CC6 | 0020 0049 0020 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E0E 0062;	
    // (·∏é) LATIN CAPITAL LETTER D WITH LINE BELOW	[1CF5 1CC6 | 0020 0049 0020 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0049, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_288)
{
    uint32_t const cps[2] = { 0x00F0, 0x0062 };

    // 00F0 0062;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00F0 0062;	
    // (√∞) LATIN SMALL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_289)
{
    uint32_t const cps[2] = { 0x1DD9, 0x0062 };

    // 1DD9 0062;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD9 0062;	
    // (·∑ô) COMBINING LATIN SMALL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_290)
{
    uint32_t const cps[2] = { 0x00D0, 0x0062 };

    // 00D0 0062;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00D0 0062;	
    // (√ê) LATIN CAPITAL LETTER ETH	[1CF5 1CC6 | 0020 0111 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_291)
{
    uint32_t const cps[2] = { 0x1D9E, 0x0062 };

    // 1D9E 0062;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CC6 | 0020 0111 0020 | 0014 0014 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D9E 0062;	
    // (·∂û) MODIFIER LETTER SMALL ETH	[1CF5 1CC6 | 0020 0111 0020 | 0014 0014 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0014, 0x0014, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_292)
{
    uint32_t const cps[2] = { 0x1DD8, 0x0062 };

    // 1DD8 0062;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1DD8 0062;	
    // (·∑ò) COMBINING LATIN SMALL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_293)
{
    uint32_t const cps[2] = { 0xA77A, 0x0062 };

    // A77A 0062;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A77A 0062;	
    // (Íù∫) LATIN SMALL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_294)
{
    uint32_t const cps[2] = { 0xA779, 0x0062 };

    // A779 0062;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[10] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A779 0062;	
    // (Íùπ) LATIN CAPITAL LETTER INSULAR D	[1CF5 1CC6 | 0020 0112 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[14] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0112, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_295)
{
    uint32_t const cps[2] = { 0x0238, 0x0021 };

    // 0238 0021;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0238 0021;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_296)
{
    uint32_t const cps[2] = { 0x33C8, 0x0021 };

    // 33C8 0021;	
    // („èà) SQUARE DB	[1CF5 1CC6 0261 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33C8 0021;	
    // („èà) SQUARE DB	[1CF5 1CC6 | 0020 0020 | 001C 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_297)
{
    uint32_t const cps[2] = { 0x0238, 0x003F };

    // 0238 003F;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0238 003F;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_298)
{
    uint32_t const cps[2] = { 0x33C8, 0x003F };

    // 33C8 003F;	
    // („èà) SQUARE DB	[1CF5 1CC6 0267 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33C8 003F;	
    // („èà) SQUARE DB	[1CF5 1CC6 | 0020 0020 | 001C 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_299)
{
    uint32_t const cps[2] = { 0x0238, 0x0061 };

    // 0238 0061;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0238 0061;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_300)
{
    uint32_t const cps[2] = { 0x0238, 0x0041 };

    // 0238 0041;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0238 0041;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_301)
{
    uint32_t const cps[2] = { 0x33C8, 0x0061 };

    // 33C8 0061;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CAD | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33C8 0061;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CAD | 0020 0020 0020 | 001C 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_302)
{
    uint32_t const cps[2] = { 0x33C8, 0x0041 };

    // 33C8 0041;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CAD | 0020 0020 0020 | 001C 001D 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33C8 0041;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CAD | 0020 0020 0020 | 001C 001D 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_303)
{
    uint32_t const cps[2] = { 0x0238, 0x0062 };

    // 0238 0062;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0238 0062;	
    // (»∏) LATIN SMALL LETTER DB DIGRAPH	[1CF5 1CC6 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_304)
{
    uint32_t const cps[2] = { 0x33C8, 0x0062 };

    // 33C8 0062;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CC6 | 0020 0020 0020 | 001C 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 33C8 0062;	
    // („èà) SQUARE DB	[1CF5 1CC6 1CC6 | 0020 0020 0020 | 001C 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1CC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_305)
{
    uint32_t const cps[2] = { 0x1F190, 0x0021 };

    // 1F190 0021;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 0261 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F190 0021;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 | 0020 0020 | 001D 001D | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1DB2, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_306)
{
    uint32_t const cps[2] = { 0x1F190, 0x003F };

    // 1F190 003F;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 0267 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F190 003F;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 | 0020 0020 | 001D 001D | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1DB2, 0x0000, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_307)
{
    uint32_t const cps[2] = { 0x1F190, 0x0061 };

    // 1F190 0061;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CAD | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F190 0061;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CAD | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_308)
{
    uint32_t const cps[2] = { 0x1F190, 0x0041 };

    // 1F190 0041;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CAD | 0020 0020 0020 | 001D 001D 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F190 0041;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CAD | 0020 0020 0020 | 001D 001D 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_309)
{
    uint32_t const cps[2] = { 0x1F190, 0x0062 };

    // 1F190 0062;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CC6 | 0020 0020 0020 | 001D 001D 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1F190 0062;	
    // (üÜê) SQUARE DJ	[1CF5 1DB2 1CC6 | 0020 0020 0020 | 001D 001D 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001D, 0x001D, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_310)
{
    uint32_t const cps[2] = { 0x3397, 0x0021 };

    // 3397 0021;	
    // („éó) SQUARE DL	[1CF5 1DDD 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3397 0021;	
    // („éó) SQUARE DL	[1CF5 1DDD | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1DDD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_311)
{
    uint32_t const cps[2] = { 0x3397, 0x003F };

    // 3397 003F;	
    // („éó) SQUARE DL	[1CF5 1DDD 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3397 003F;	
    // („éó) SQUARE DL	[1CF5 1DDD | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1DDD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_312)
{
    uint32_t const cps[2] = { 0x3397, 0x0061 };

    // 3397 0061;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3397 0061;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_313)
{
    uint32_t const cps[2] = { 0x3397, 0x0041 };

    // 3397 0041;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3397 0041;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_314)
{
    uint32_t const cps[2] = { 0x3397, 0x0062 };

    // 3397 0062;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3397 0062;	
    // („éó) SQUARE DL	[1CF5 1DDD 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1DDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_315)
{
    uint32_t const cps[2] = { 0x3377, 0x0021 };

    // 3377 0021;	
    // („ç∑) SQUARE DM	[1CF5 1E10 0261 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1E10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3377 0021;	
    // („ç∑) SQUARE DM	[1CF5 1E10 | 0020 0020 | 001C 001C | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1E10, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_316)
{
    uint32_t const cps[2] = { 0x3377, 0x003F };

    // 3377 003F;	
    // („ç∑) SQUARE DM	[1CF5 1E10 0267 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1E10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3377 003F;	
    // („ç∑) SQUARE DM	[1CF5 1E10 | 0020 0020 | 001C 001C | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1E10, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_317)
{
    uint32_t const cps[2] = { 0x3378, 0x0021 };

    // 3378 0021;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3378 0021;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x1CF5, 0x1E10, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_318)
{
    uint32_t const cps[2] = { 0x3378, 0x003F };

    // 3378 003F;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3378 003F;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x1CF5, 0x1E10, 0x1CA5, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_319)
{
    uint32_t const cps[2] = { 0x3378, 0x0061 };

    // 3378 0061;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3378 0061;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_320)
{
    uint32_t const cps[2] = { 0x3378, 0x0041 };

    // 3378 0041;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3378 0041;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_321)
{
    uint32_t const cps[2] = { 0x3378, 0x0062 };

    // 3378 0062;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3378 0062;	
    // („ç∏) SQUARE DM SQUARED	[1CF5 1E10 1CA5 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_322)
{
    uint32_t const cps[2] = { 0x3379, 0x0021 };

    // 3379 0021;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3379 0021;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[16] = { 0x1CF5, 0x1E10, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_323)
{
    uint32_t const cps[2] = { 0x3379, 0x003F };

    // 3379 003F;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3379 003F;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 | 0020 0020 0020 | 001C 001C 001C | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[16] = { 0x1CF5, 0x1E10, 0x1CA6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_324)
{
    uint32_t const cps[2] = { 0x3379, 0x0061 };

    // 3379 0061;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3379 0061;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_325)
{
    uint32_t const cps[2] = { 0x3379, 0x0041 };

    // 3379 0041;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3379 0041;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_326)
{
    uint32_t const cps[2] = { 0x3379, 0x0062 };

    // 3379 0062;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[14] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3379 0062;	
    // („çπ) SQUARE DM CUBED	[1CF5 1E10 1CA6 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[19] = { 0x1CF5, 0x1E10, 0x1CA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_327)
{
    uint32_t const cps[2] = { 0x3377, 0x0061 };

    // 3377 0061;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CAD | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3377 0061;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CAD | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_328)
{
    uint32_t const cps[2] = { 0x3377, 0x0041 };

    // 3377 0041;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CAD | 0020 0020 0020 | 001C 001C 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3377 0041;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CAD | 0020 0020 0020 | 001C 001C 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1E10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_329)
{
    uint32_t const cps[2] = { 0x3377, 0x0062 };

    // 3377 0062;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 3377 0062;	
    // („ç∑) SQUARE DM	[1CF5 1E10 1CC6 | 0020 0020 0020 | 001C 001C 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1E10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_330)
{
    uint32_t const cps[2] = { 0x01F3, 0x0021 };

    // 01F3 0021;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F3 0021;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_331)
{
    uint32_t const cps[2] = { 0x02A3, 0x0021 };

    // 02A3 0021;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A3 0021;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_332)
{
    uint32_t const cps[2] = { 0x01F2, 0x0021 };

    // 01F2 0021;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 0261 | 0020 0020 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F2 0021;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 | 0020 0020 | 000A 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_333)
{
    uint32_t const cps[2] = { 0x01F1, 0x0021 };

    // 01F1 0021;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 0261 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F1 0021;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 | 0020 0020 | 000A 000A | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_334)
{
    uint32_t const cps[2] = { 0x01C6, 0x0021 };

    // 01C6 0021;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 0261 | 0020 0020 0028 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C6 0021;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 0004 0004 0004 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_335)
{
    uint32_t const cps[2] = { 0x01C5, 0x0021 };

    // 01C5 0021;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 0261 | 0020 0020 0028 0020 | 000A 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C5 0021;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 000A 0004 0004 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x000A, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_336)
{
    uint32_t const cps[2] = { 0x01C4, 0x0021 };

    // 01C4 0021;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 0261 | 0020 0020 0028 0020 | 000A 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C4 0021;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 000A 000A 0004 | FFFF FFFF FFFF 0261 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x000A, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_337)
{
    uint32_t const cps[2] = { 0x01F3, 0x003F };

    // 01F3 003F;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F3 003F;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_338)
{
    uint32_t const cps[2] = { 0x02A3, 0x003F };

    // 02A3 003F;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A3 003F;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_339)
{
    uint32_t const cps[2] = { 0x01F2, 0x003F };

    // 01F2 003F;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 0267 | 0020 0020 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F2 003F;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 | 0020 0020 | 000A 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_340)
{
    uint32_t const cps[2] = { 0x01F1, 0x003F };

    // 01F1 003F;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 0267 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F1 003F;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 | 0020 0020 | 000A 000A | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_341)
{
    uint32_t const cps[2] = { 0x01C6, 0x003F };

    // 01C6 003F;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 0267 | 0020 0020 0028 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C6 003F;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 0004 0004 0004 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x0004, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_342)
{
    uint32_t const cps[2] = { 0x01C5, 0x003F };

    // 01C5 003F;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 0267 | 0020 0020 0028 0020 | 000A 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C5 003F;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 000A 0004 0004 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x000A, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_343)
{
    uint32_t const cps[2] = { 0x01C4, 0x003F };

    // 01C4 003F;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 0267 | 0020 0020 0028 0020 | 000A 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C4 003F;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 | 0020 0020 0028 | 000A 000A 0004 | FFFF FFFF FFFF 0267 |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x0000, 0x0020, 0x0020, 0x0028, 0x0000, 0x000A, 0x000A, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_344)
{
    uint32_t const cps[2] = { 0x01F3, 0x0061 };

    // 01F3 0061;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F3 0061;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_345)
{
    uint32_t const cps[2] = { 0x02A3, 0x0061 };

    // 02A3 0061;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A3 0061;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_346)
{
    uint32_t const cps[2] = { 0x01F3, 0x0041 };

    // 01F3 0041;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F3 0041;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_347)
{
    uint32_t const cps[2] = { 0x02A3, 0x0041 };

    // 02A3 0041;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A3 0041;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_348)
{
    uint32_t const cps[2] = { 0x01F2, 0x0061 };

    // 01F2 0061;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F2 0061;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_349)
{
    uint32_t const cps[2] = { 0x01F2, 0x0041 };

    // 01F2 0041;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F2 0041;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_350)
{
    uint32_t const cps[2] = { 0x01F1, 0x0061 };

    // 01F1 0061;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F1 0061;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_351)
{
    uint32_t const cps[2] = { 0x01F1, 0x0041 };

    // 01F1 0041;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 000A 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F1 0041;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CAD | 0020 0020 0020 | 000A 000A 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_352)
{
    uint32_t const cps[2] = { 0x01C6, 0x0061 };

    // 01C6 0061;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C6 0061;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_353)
{
    uint32_t const cps[2] = { 0x01C6, 0x0041 };

    // 01C6 0041;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 0004 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C6 0041;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 0004 0004 0004 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_354)
{
    uint32_t const cps[2] = { 0x01C5, 0x0061 };

    // 01C5 0061;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C5 0061;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_355)
{
    uint32_t const cps[2] = { 0x01C5, 0x0041 };

    // 01C5 0041;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C5 0041;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 0004 0004 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_356)
{
    uint32_t const cps[2] = { 0x01C4, 0x0061 };

    // 01C4 0061;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C4 0061;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 000A 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_357)
{
    uint32_t const cps[2] = { 0x01C4, 0x0041 };

    // 01C4 0041;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 000A 0004 0008 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C4 0041;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CAD | 0020 0020 0028 0020 | 000A 000A 0004 0008 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_358)
{
    uint32_t const cps[2] = { 0x01F3, 0x0062 };

    // 01F3 0062;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F3 0062;	
    // («≥) LATIN SMALL LETTER DZ	[1CF5 1F87 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_359)
{
    uint32_t const cps[2] = { 0x02A3, 0x0062 };

    // 02A3 0062;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A3 0062;	
    // ( £) LATIN SMALL LETTER DZ DIGRAPH	[1CF5 1F87 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_360)
{
    uint32_t const cps[2] = { 0x01F2, 0x0062 };

    // 01F2 0062;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CC6 | 0020 0020 0020 | 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F2 0062;	
    // («≤) LATIN CAPITAL LETTER D WITH SMALL LETTER Z	[1CF5 1F87 1CC6 | 0020 0020 0020 | 000A 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_361)
{
    uint32_t const cps[2] = { 0x01F1, 0x0062 };

    // 01F1 0062;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CC6 | 0020 0020 0020 | 000A 000A 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01F1 0062;	
    // («±) LATIN CAPITAL LETTER DZ	[1CF5 1F87 1CC6 | 0020 0020 0020 | 000A 000A 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x000A, 0x000A, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_362)
{
    uint32_t const cps[2] = { 0x01C6, 0x0062 };

    // 01C6 0062;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 0004 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C6 0062;	
    // («Ü) LATIN SMALL LETTER DZ WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 0004 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_363)
{
    uint32_t const cps[2] = { 0x01C5, 0x0062 };

    // 01C5 0062;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 000A 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C5 0062;	
    // («Ö) LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 000A 0004 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_364)
{
    uint32_t const cps[2] = { 0x01C4, 0x0062 };

    // 01C4 0062;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 000A 000A 0004 0002 |]
    uint32_t const ces_non_ignorable[13] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 01C4 0062;	
    // («Ñ) LATIN CAPITAL LETTER DZ WITH CARON	[1CF5 1F87 1CC6 | 0020 0020 0028 0020 | 000A 000A 0004 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[18] = { 0x1CF5, 0x1F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0028, 0x0020, 0x0000, 0x000A, 0x000A, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_365)
{
    uint32_t const cps[2] = { 0x02A5, 0x0021 };

    // 02A5 0021;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A5 0021;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F9A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_366)
{
    uint32_t const cps[2] = { 0x02A5, 0x003F };

    // 02A5 003F;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A5 003F;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1F9A, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_367)
{
    uint32_t const cps[2] = { 0x02A5, 0x0061 };

    // 02A5 0061;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A5 0061;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_368)
{
    uint32_t const cps[2] = { 0x02A5, 0x0041 };

    // 02A5 0041;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A5 0041;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_369)
{
    uint32_t const cps[2] = { 0x02A5, 0x0062 };

    // 02A5 0062;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A5 0062;	
    // ( •) LATIN SMALL LETTER DZ DIGRAPH WITH CURL	[1CF5 1F9A 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_370)
{
    uint32_t const cps[2] = { 0x02A4, 0x0021 };

    // 02A4 0021;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 0261 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A4 0021;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 | 0020 0020 | 0004 0004 | FFFF FFFF 0261 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1FA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_371)
{
    uint32_t const cps[2] = { 0x02A4, 0x003F };

    // 02A4 003F;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 0267 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A4 003F;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 | 0020 0020 | 0004 0004 | FFFF FFFF 0267 |]
    uint32_t const ces_shifted[12] = { 0x1CF5, 0x1FA4, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0000, 0xFFFF, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_372)
{
    uint32_t const cps[2] = { 0x02A4, 0x0061 };

    // 02A4 0061;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CAD | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A4 0061;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CAD | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_373)
{
    uint32_t const cps[2] = { 0x02A4, 0x0041 };

    // 02A4 0041;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CAD | 0020 0020 0020 | 0004 0004 0008 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A4 0041;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CAD | 0020 0020 0020 | 0004 0004 0008 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_374)
{
    uint32_t const cps[2] = { 0x02A4, 0x0062 };

    // 02A4 0062;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1CF5, 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 02A4 0062;	
    // ( §) LATIN SMALL LETTER DEZH DIGRAPH	[1CF5 1FA4 1CC6 | 0020 0020 0020 | 0004 0004 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[15] = { 0x1CF5, 0x1FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_375)
{
    uint32_t const cps[2] = { 0x1D05, 0x0021 };

    // 1D05 0021;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D05 0021;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CF9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_376)
{
    uint32_t const cps[2] = { 0x1D05, 0x003F };

    // 1D05 003F;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D05 003F;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CF9, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_377)
{
    uint32_t const cps[2] = { 0x1D05, 0x0061 };

    // 1D05 0061;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D05 0061;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_378)
{
    uint32_t const cps[2] = { 0x1D05, 0x0041 };

    // 1D05 0041;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D05 0041;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_379)
{
    uint32_t const cps[2] = { 0x1D05, 0x0062 };

    // 1D05 0062;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D05 0062;	
    // (·¥Ö) LATIN LETTER SMALL CAPITAL D	[1CF9 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_380)
{
    uint32_t const cps[2] = { 0x1D06, 0x0021 };

    // 1D06 0021;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D06 0021;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CFA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_381)
{
    uint32_t const cps[2] = { 0x1D06, 0x003F };

    // 1D06 003F;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D06 003F;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CFA, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_382)
{
    uint32_t const cps[2] = { 0x1D06, 0x0061 };

    // 1D06 0061;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D06 0061;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_383)
{
    uint32_t const cps[2] = { 0x1D06, 0x0041 };

    // 1D06 0041;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D06 0041;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_384)
{
    uint32_t const cps[2] = { 0x1D06, 0x0062 };

    // 1D06 0062;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D06 0062;	
    // (·¥Ü) LATIN LETTER SMALL CAPITAL ETH	[1CFA 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_385)
{
    uint32_t const cps[2] = { 0x1D6D, 0x0021 };

    // 1D6D 0021;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D6D 0021;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CFB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_386)
{
    uint32_t const cps[2] = { 0x1D6D, 0x003F };

    // 1D6D 003F;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D6D 003F;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CFB, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_387)
{
    uint32_t const cps[2] = { 0x1D6D, 0x0061 };

    // 1D6D 0061;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D6D 0061;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_388)
{
    uint32_t const cps[2] = { 0x1D6D, 0x0041 };

    // 1D6D 0041;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D6D 0041;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_389)
{
    uint32_t const cps[2] = { 0x1D6D, 0x0062 };

    // 1D6D 0062;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D6D 0062;	
    // (·µ≠) LATIN SMALL LETTER D WITH MIDDLE TILDE	[1CFB 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_390)
{
    uint32_t const cps[2] = { 0x1D81, 0x0021 };

    // 1D81 0021;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D81 0021;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CFC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_391)
{
    uint32_t const cps[2] = { 0x1D81, 0x003F };

    // 1D81 003F;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D81 003F;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CFC, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_392)
{
    uint32_t const cps[2] = { 0x1D81, 0x0061 };

    // 1D81 0061;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D81 0061;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_393)
{
    uint32_t const cps[2] = { 0x1D81, 0x0041 };

    // 1D81 0041;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D81 0041;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_394)
{
    uint32_t const cps[2] = { 0x1D81, 0x0062 };

    // 1D81 0062;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D81 0062;	
    // (·∂Å) LATIN SMALL LETTER D WITH PALATAL HOOK	[1CFC 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_395)
{
    uint32_t const cps[2] = { 0x0256, 0x0021 };

    // 0256 0021;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0256 0021;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CFD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_396)
{
    uint32_t const cps[2] = { 0x0189, 0x0021 };

    // 0189 0021;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0189 0021;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1CFD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_397)
{
    uint32_t const cps[2] = { 0x0256, 0x003F };

    // 0256 003F;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0256 003F;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CFD, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_398)
{
    uint32_t const cps[2] = { 0x0189, 0x003F };

    // 0189 003F;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0189 003F;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1CFD, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_399)
{
    uint32_t const cps[2] = { 0x0256, 0x0061 };

    // 0256 0061;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0256 0061;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_400)
{
    uint32_t const cps[2] = { 0x0256, 0x0041 };

    // 0256 0041;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0256 0041;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_401)
{
    uint32_t const cps[2] = { 0x0189, 0x0061 };

    // 0189 0061;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0189 0061;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_402)
{
    uint32_t const cps[2] = { 0x0189, 0x0041 };

    // 0189 0041;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0189 0041;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_403)
{
    uint32_t const cps[2] = { 0x0256, 0x0062 };

    // 0256 0062;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0256 0062;	
    // (…ñ) LATIN SMALL LETTER D WITH TAIL	[1CFD 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_404)
{
    uint32_t const cps[2] = { 0x0189, 0x0062 };

    // 0189 0062;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0189 0062;	
    // (∆â) LATIN CAPITAL LETTER AFRICAN D	[1CFD 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1CFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_405)
{
    uint32_t const cps[2] = { 0x0257, 0x0021 };

    // 0257 0021;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0257 0021;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D01, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_406)
{
    uint32_t const cps[2] = { 0x018A, 0x0021 };

    // 018A 0021;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018A 0021;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D01, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_407)
{
    uint32_t const cps[2] = { 0x0257, 0x003F };

    // 0257 003F;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0257 003F;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D01, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_408)
{
    uint32_t const cps[2] = { 0x018A, 0x003F };

    // 018A 003F;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018A 003F;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D01, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_409)
{
    uint32_t const cps[2] = { 0x0257, 0x0061 };

    // 0257 0061;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0257 0061;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_410)
{
    uint32_t const cps[2] = { 0x0257, 0x0041 };

    // 0257 0041;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0257 0041;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_411)
{
    uint32_t const cps[2] = { 0x018A, 0x0061 };

    // 018A 0061;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018A 0061;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_412)
{
    uint32_t const cps[2] = { 0x018A, 0x0041 };

    // 018A 0041;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018A 0041;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_413)
{
    uint32_t const cps[2] = { 0x0257, 0x0062 };

    // 0257 0062;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0257 0062;	
    // (…ó) LATIN SMALL LETTER D WITH HOOK	[1D01 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_414)
{
    uint32_t const cps[2] = { 0x018A, 0x0062 };

    // 018A 0062;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018A 0062;	
    // (∆ä) LATIN CAPITAL LETTER D WITH HOOK	[1D01 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_415)
{
    uint32_t const cps[2] = { 0x1D91, 0x0021 };

    // 1D91 0021;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D91 0021;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D05, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_416)
{
    uint32_t const cps[2] = { 0x1D91, 0x003F };

    // 1D91 003F;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D91 003F;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D05, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_417)
{
    uint32_t const cps[2] = { 0x1D91, 0x0061 };

    // 1D91 0061;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D91 0061;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_418)
{
    uint32_t const cps[2] = { 0x1D91, 0x0041 };

    // 1D91 0041;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D91 0041;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_419)
{
    uint32_t const cps[2] = { 0x1D91, 0x0062 };

    // 1D91 0062;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1D91 0062;	
    // (·∂ë) LATIN SMALL LETTER D WITH HOOK AND TAIL	[1D05 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_420)
{
    uint32_t const cps[2] = { 0x018C, 0x0021 };

    // 018C 0021;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018C 0021;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D06, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_421)
{
    uint32_t const cps[2] = { 0x018B, 0x0021 };

    // 018B 0021;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 0261 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018B 0021;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 | 0020 | 0008 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D06, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_422)
{
    uint32_t const cps[2] = { 0x018C, 0x003F };

    // 018C 003F;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018C 003F;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D06, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_423)
{
    uint32_t const cps[2] = { 0x018B, 0x003F };

    // 018B 003F;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 0267 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018B 003F;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 | 0020 | 0008 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D06, 0x0000, 0x0020, 0x0000, 0x0008, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_424)
{
    uint32_t const cps[2] = { 0x018C, 0x0061 };

    // 018C 0061;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018C 0061;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_425)
{
    uint32_t const cps[2] = { 0x018C, 0x0041 };

    // 018C 0041;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018C 0041;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_426)
{
    uint32_t const cps[2] = { 0x018B, 0x0061 };

    // 018B 0061;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018B 0061;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_427)
{
    uint32_t const cps[2] = { 0x018B, 0x0041 };

    // 018B 0041;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0008 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018B 0041;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CAD | 0020 0020 | 0008 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_428)
{
    uint32_t const cps[2] = { 0x018C, 0x0062 };

    // 018C 0062;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018C 0062;	
    // (∆å) LATIN SMALL LETTER D WITH TOPBAR	[1D06 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_429)
{
    uint32_t const cps[2] = { 0x018B, 0x0062 };

    // 018B 0062;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CC6 | 0020 0020 | 0008 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 018B 0062;	
    // (∆ã) LATIN CAPITAL LETTER D WITH TOPBAR	[1D06 1CC6 | 0020 0020 | 0008 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_430)
{
    uint32_t const cps[2] = { 0x0221, 0x0021 };

    // 0221 0021;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0221 0021;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D0A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_431)
{
    uint32_t const cps[2] = { 0x0221, 0x003F };

    // 0221 003F;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0221 003F;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D0A, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_432)
{
    uint32_t const cps[2] = { 0x0221, 0x0061 };

    // 0221 0061;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0221 0061;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_433)
{
    uint32_t const cps[2] = { 0x0221, 0x0041 };

    // 0221 0041;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0221 0041;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_434)
{
    uint32_t const cps[2] = { 0x0221, 0x0062 };

    // 0221 0062;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0221 0062;	
    // (»°) LATIN SMALL LETTER D WITH CURL	[1D0A 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_435)
{
    uint32_t const cps[2] = { 0xA771, 0x0021 };

    // A771 0021;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A771 0021;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D0E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_436)
{
    uint32_t const cps[2] = { 0xA771, 0x003F };

    // A771 003F;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A771 003F;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D0E, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_437)
{
    uint32_t const cps[2] = { 0xA771, 0x0061 };

    // A771 0061;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A771 0061;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_438)
{
    uint32_t const cps[2] = { 0xA771, 0x0041 };

    // A771 0041;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A771 0041;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_439)
{
    uint32_t const cps[2] = { 0xA771, 0x0062 };

    // A771 0062;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // A771 0062;	
    // (Íù±) LATIN SMALL LETTER DUM	[1D0E 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_440)
{
    uint32_t const cps[2] = { 0x1E9F, 0x0021 };

    // 1E9F 0021;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 0261 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E9F 0021;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F | 0020 | 0002 | FFFF 0261 |]
    uint32_t const ces_shifted[8] = { 0x1D0F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0261 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_441)
{
    uint32_t const cps[2] = { 0x1E9F, 0x003F };

    // 1E9F 003F;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 0267 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E9F 003F;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F | 0020 | 0002 | FFFF 0267 |]
    uint32_t const ces_shifted[8] = { 0x1D0F, 0x0000, 0x0020, 0x0000, 0x0002, 0x0000, 0xFFFF, 0x0267 };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_442)
{
    uint32_t const cps[2] = { 0x1E9F, 0x0061 };

    // 1E9F 0061;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CAD | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E9F 0061;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CAD | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_443)
{
    uint32_t const cps[2] = { 0x1E9F, 0x0041 };

    // 1E9F 0041;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CAD | 0020 0020 | 0002 0008 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E9F 0041;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CAD | 0020 0020 | 0002 0008 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_444)
{
    uint32_t const cps[2] = { 0x1E9F, 0x0062 };

    // 1E9F 0062;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CC6 | 0020 0020 | 0002 0002 |]
    uint32_t const ces_non_ignorable[8] = { 0x1D0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1E9F 0062;	
    // (·∫ü) LATIN SMALL LETTER DELTA	[1D0F 1CC6 | 0020 0020 | 0002 0002 | FFFF FFFF |]
    uint32_t const ces_shifted[11] = { 0x1D0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_445)
{
    uint32_t const cps[3] = { 0x0065, 0x0301, 0x0334 };

    // 0065 0301 0334;	
    // (√©) LATIN SMALL LETTER E, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0301 0334;	
    // (√©) LATIN SMALL LETTER E, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_446)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0301 };

    // 0065 0334 0301;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0301;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_447)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0341 };

    // 0065 0334 0341;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0341;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_448)
{
    uint32_t const cps[3] = { 0x0065, 0x0341, 0x0334 };

    // 0065 0341 0334;	
    // (√©) LATIN SMALL LETTER E, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0024 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0341 0334;	
    // (√©) LATIN SMALL LETTER E, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0024 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_449)
{
    uint32_t const cps[3] = { 0x0045, 0x0301, 0x0334 };

    // 0045 0301 0334;	
    // (√â) LATIN CAPITAL LETTER E, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0301 0334;	
    // (√â) LATIN CAPITAL LETTER E, COMBINING ACUTE ACCENT	[1D10 | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_450)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0301 };

    // 0045 0334 0301;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0301;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_451)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0341 };

    // 0045 0334 0341;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0341;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_452)
{
    uint32_t const cps[3] = { 0x0045, 0x0341, 0x0334 };

    // 0045 0341 0334;	
    // (√â) LATIN CAPITAL LETTER E, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0024 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0341 0334;	
    // (√â) LATIN CAPITAL LETTER E, COMBINING ACUTE TONE MARK	[1D10 | 0020 004A 0024 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_453)
{
    uint32_t const cps[3] = { 0x0065, 0x0300, 0x0334 };

    // 0065 0300 0334;	
    // (√®) LATIN SMALL LETTER E, COMBINING GRAVE ACCENT	[1D10 | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0300 0334;	
    // (√®) LATIN SMALL LETTER E, COMBINING GRAVE ACCENT	[1D10 | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_454)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0300 };

    // 0065 0334 0300;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0300;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_455)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0340 };

    // 0065 0334 0340;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0340;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_456)
{
    uint32_t const cps[3] = { 0x0065, 0x0340, 0x0334 };

    // 0065 0340 0334;	
    // (√®) LATIN SMALL LETTER E, COMBINING GRAVE TONE MARK	[1D10 | 0020 004A 0025 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0340 0334;	
    // (√®) LATIN SMALL LETTER E, COMBINING GRAVE TONE MARK	[1D10 | 0020 004A 0025 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_457)
{
    uint32_t const cps[3] = { 0x0045, 0x0300, 0x0334 };

    // 0045 0300 0334;	
    // (√à) LATIN CAPITAL LETTER E, COMBINING GRAVE ACCENT	[1D10 | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0300 0334;	
    // (√à) LATIN CAPITAL LETTER E, COMBINING GRAVE ACCENT	[1D10 | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_458)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0300 };

    // 0045 0334 0300;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0300;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_459)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0340 };

    // 0045 0334 0340;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0340;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_460)
{
    uint32_t const cps[3] = { 0x0045, 0x0340, 0x0334 };

    // 0045 0340 0334;	
    // (√à) LATIN CAPITAL LETTER E, COMBINING GRAVE TONE MARK	[1D10 | 0020 004A 0025 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0340 0334;	
    // (√à) LATIN CAPITAL LETTER E, COMBINING GRAVE TONE MARK	[1D10 | 0020 004A 0025 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_461)
{
    uint32_t const cps[3] = { 0x0065, 0x0306, 0x0334 };

    // 0065 0306 0334;	
    // (ƒï) LATIN SMALL LETTER E, COMBINING BREVE	[1D10 | 0020 004A 0026 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0306 0334;	
    // (ƒï) LATIN SMALL LETTER E, COMBINING BREVE	[1D10 | 0020 004A 0026 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_462)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0306 };

    // 0065 0334 0306;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0026 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0306;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0026 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_463)
{
    uint32_t const cps[2] = { 0x0115, 0x0334 };

    // 0115 0334;	
    // (ƒï) LATIN SMALL LETTER E WITH BREVE	[1D10 | 0020 004A 0026 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0115 0334;	
    // (ƒï) LATIN SMALL LETTER E WITH BREVE	[1D10 | 0020 004A 0026 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_464)
{
    uint32_t const cps[3] = { 0x0045, 0x0306, 0x0334 };

    // 0045 0306 0334;	
    // (ƒî) LATIN CAPITAL LETTER E, COMBINING BREVE	[1D10 | 0020 004A 0026 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0306 0334;	
    // (ƒî) LATIN CAPITAL LETTER E, COMBINING BREVE	[1D10 | 0020 004A 0026 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_465)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0306 };

    // 0045 0334 0306;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0026 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0306;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0026 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_466)
{
    uint32_t const cps[2] = { 0x0114, 0x0334 };

    // 0114 0334;	
    // (ƒî) LATIN CAPITAL LETTER E WITH BREVE	[1D10 | 0020 004A 0026 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0114 0334;	
    // (ƒî) LATIN CAPITAL LETTER E WITH BREVE	[1D10 | 0020 004A 0026 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0026, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_467)
{
    uint32_t const cps[3] = { 0x0065, 0x0302, 0x0334 };

    // 0065 0302 0334;	
    // (√™) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334;	
    // (√™) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_468)
{
    uint32_t const cps[3] = { 0x0065, 0x0334, 0x0302 };

    // 0065 0334 0302;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0302;	
    // (eÃ¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_469)
{
    uint32_t const cps[2] = { 0x00EA, 0x0334 };

    // 00EA 0334;	
    // (√™) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 | 0020 004A 0027 | 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00EA 0334;	
    // (√™) LATIN SMALL LETTER E WITH CIRCUMFLEX	[1D10 | 0020 004A 0027 | 0002 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_470)
{
    uint32_t const cps[3] = { 0x0045, 0x0302, 0x0334 };

    // 0045 0302 0334;	
    // (√ä) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334;	
    // (√ä) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_471)
{
    uint32_t const cps[3] = { 0x0045, 0x0334, 0x0302 };

    // 0045 0334 0302;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0334 0302;	
    // (EÃ¥) LATIN CAPITAL LETTER E, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_472)
{
    uint32_t const cps[2] = { 0x00CA, 0x0334 };

    // 00CA 0334;	
    // (√ä) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 | 0020 004A 0027 | 0008 0002 0002 |]
    uint32_t const ces_non_ignorable[9] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0334;	
    // (√ä) LATIN CAPITAL LETTER E WITH CIRCUMFLEX	[1D10 | 0020 004A 0027 | 0008 0002 0002 | FFFF FFFF FFFF |]
    uint32_t const ces_shifted[13] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_473)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0301 };

    // 0065 0302 0334 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_474)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0341 };

    // 0065 0302 0334 0341;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0341;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_475)
{
    uint32_t const cps[4] = { 0x0065, 0x0334, 0x0302, 0x0301 };

    // 0065 0334 0302 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0302 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_476)
{
    uint32_t const cps[3] = { 0x00EA, 0x0334, 0x0301 };

    // 00EA 0334 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00EA 0334 0301;	
    // (√™Ã¥) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_477)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0334, 0x0301 };

    // 0045 0302 0334 0301;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334 0301;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_478)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0334, 0x0341 };

    // 0045 0302 0334 0341;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334 0341;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_479)
{
    uint32_t const cps[3] = { 0x00CA, 0x0334, 0x0301 };

    // 00CA 0334 0301;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0334 0301;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_480)
{
    uint32_t const cps[3] = { 0x00CA, 0x0334, 0x0341 };

    // 00CA 0334 0341;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0334 0341;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0024 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_481)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0300 };

    // 0065 0302 0334 0300;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0300;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_482)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0340 };

    // 0065 0302 0334 0340;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0340;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_483)
{
    uint32_t const cps[3] = { 0x00EA, 0x0334, 0x0300 };

    // 00EA 0334 0300;	
    // (√™Ã¥) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00EA 0334 0300;	
    // (√™Ã¥) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_484)
{
    uint32_t const cps[2] = { 0x1EC1, 0x0334 };

    // 1EC1 0334;	
    // (·ªÅ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EC1 0334;	
    // (·ªÅ) LATIN SMALL LETTER E WITH CIRCUMFLEX AND GRAVE	[1D10 | 0020 004A 0027 0025 | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_485)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0334, 0x0300 };

    // 0045 0302 0334 0300;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334 0300;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_486)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0334, 0x0340 };

    // 0045 0302 0334 0340;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334 0340;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_487)
{
    uint32_t const cps[3] = { 0x00CA, 0x0334, 0x0300 };

    // 00CA 0334 0300;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0334 0300;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_488)
{
    uint32_t const cps[3] = { 0x00CA, 0x0334, 0x0340 };

    // 00CA 0334 0340;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0334 0340;	
    // (√äÃ¥) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 0025 | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_489)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0303, 0x0334 };

    // 0065 0302 0303 0334;	
    // (·ªÖ) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0303 0334;	
    // (·ªÖ) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_490)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0303 };

    // 0065 0302 0334 0303;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0303;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_491)
{
    uint32_t const cps[4] = { 0x0065, 0x0334, 0x0302, 0x0303 };

    // 0065 0334 0302 0303;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0334 0302 0303;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING TILDE OVERLAY, COMBINING CIRCUMFLEX ACCENT	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_492)
{
    uint32_t const cps[3] = { 0x00EA, 0x0303, 0x0334 };

    // 00EA 0303 0334;	
    // (·ªÖ) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00EA 0303 0334;	
    // (·ªÖ) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_493)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0303, 0x0334 };

    // 0045 0302 0303 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0303 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_494)
{
    uint32_t const cps[4] = { 0x0045, 0x0302, 0x0334, 0x0303 };

    // 0045 0302 0334 0303;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0045 0302 0334 0303;	
    // (√äÃ¥) LATIN CAPITAL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_495)
{
    uint32_t const cps[3] = { 0x00CA, 0x0303, 0x0334 };

    // 00CA 0303 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00CA 0303 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX, COMBINING TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_496)
{
    uint32_t const cps[2] = { 0x1EC4, 0x0334 };

    // 1EC4 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 1EC4 0334;	
    // (·ªÑ) LATIN CAPITAL LETTER E WITH CIRCUMFLEX AND TILDE	[1D10 | 0020 004A 0027 002D | 0008 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x002D, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_497)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0309, 0x0334 };

    // 0065 0302 0309 0334;	
    // (·ªÉ) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0309 0334;	
    // (·ªÉ) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_498)
{
    uint32_t const cps[4] = { 0x0065, 0x0302, 0x0334, 0x0309 };

    // 0065 0302 0334 0309;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 0065 0302 0334 0309;	
    // (√™Ã¥) LATIN SMALL LETTER E, COMBINING CIRCUMFLEX ACCENT, COMBINING TILDE OVERLAY	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

TEST(collation, verbatim_104_499)
{
    uint32_t const cps[3] = { 0x00EA, 0x0309, 0x0334 };

    // 00EA 0309 0334;	
    // (·ªÉ) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 |]
    uint32_t const ces_non_ignorable[11] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002 };

    auto const non_ignorable = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable,
        boost::text::collation_strength::tertiary);

    EXPECT_EQ(non_ignorable.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(non_ignorable.begin(), non_ignorable.end(), ces_non_ignorable, ces_non_ignorable + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_non_ignorable)
        << "got:      " << ce_dumper(non_ignorable);

    // 00EA 0309 0334;	
    // (·ªÉ) LATIN SMALL LETTER E WITH CIRCUMFLEX, COMBINING HOOK ABOVE	[1D10 | 0020 004A 0027 003B | 0002 0002 0002 0002 | FFFF FFFF FFFF FFFF |]
    uint32_t const ces_shifted[16] = { 0x1D10, 0x0000, 0x0020, 0x004A, 0x0027, 0x003B, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000, 0xFFFF, 0xFFFF, 0xFFFF, 0xFFFF };

    auto const shifted = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::shifted,
        boost::text::collation_strength::quaternary);

    EXPECT_EQ(shifted.size(), 16);
    EXPECT_TRUE(boost::algorithm::equal(shifted.begin(), shifted.end(), ces_shifted, ces_shifted + 16))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces_shifted)
        << "got:      " << ce_dumper(shifted);
}

