// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_093_000)
{
    // A50C  ; [.387D.0020.0002] 
    // VAI SYLLABLE FEE

    uint32_t const cps[1] = { 0xa50c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_001)
{
    // A50D  ; [.387E.0020.0002] 
    // VAI SYLLABLE VEE

    uint32_t const cps[1] = { 0xa50d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_002)
{
    // A50E  ; [.387F.0020.0002] 
    // VAI SYLLABLE TEE

    uint32_t const cps[1] = { 0xa50e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x387f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_003)
{
    // A50F  ; [.3880.0020.0002] 
    // VAI SYLLABLE THEE

    uint32_t const cps[1] = { 0xa50f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3880), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_004)
{
    // A510  ; [.3881.0020.0002] 
    // VAI SYLLABLE DHEE

    uint32_t const cps[1] = { 0xa510 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3881), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_005)
{
    // A511  ; [.3882.0020.0002] 
    // VAI SYLLABLE DHHEE

    uint32_t const cps[1] = { 0xa511 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3882), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_006)
{
    // A512  ; [.3883.0020.0002] 
    // VAI SYLLABLE LEE

    uint32_t const cps[1] = { 0xa512 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3883), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_007)
{
    // A513  ; [.3884.0020.0002] 
    // VAI SYLLABLE REE

    uint32_t const cps[1] = { 0xa513 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3884), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_008)
{
    // A514  ; [.3885.0020.0002] 
    // VAI SYLLABLE DEE

    uint32_t const cps[1] = { 0xa514 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3885), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_009)
{
    // A515  ; [.3886.0020.0002] 
    // VAI SYLLABLE NDEE

    uint32_t const cps[1] = { 0xa515 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3886), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_010)
{
    // A516  ; [.3887.0020.0002] 
    // VAI SYLLABLE SEE

    uint32_t const cps[1] = { 0xa516 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3887), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_011)
{
    // A517  ; [.3888.0020.0002] 
    // VAI SYLLABLE SHEE

    uint32_t const cps[1] = { 0xa517 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3888), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_012)
{
    // A518  ; [.3889.0020.0002] 
    // VAI SYLLABLE ZEE

    uint32_t const cps[1] = { 0xa518 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3889), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_013)
{
    // A519  ; [.388A.0020.0002] 
    // VAI SYLLABLE ZHEE

    uint32_t const cps[1] = { 0xa519 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_014)
{
    // A51A  ; [.388B.0020.0002] 
    // VAI SYLLABLE CEE

    uint32_t const cps[1] = { 0xa51a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_015)
{
    // A51B  ; [.388C.0020.0002] 
    // VAI SYLLABLE JEE

    uint32_t const cps[1] = { 0xa51b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_016)
{
    // A51C  ; [.388D.0020.0002] 
    // VAI SYLLABLE NJEE

    uint32_t const cps[1] = { 0xa51c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_017)
{
    // A51D  ; [.388E.0020.0002] 
    // VAI SYLLABLE YEE

    uint32_t const cps[1] = { 0xa51d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_018)
{
    // A51E  ; [.388F.0020.0002] 
    // VAI SYLLABLE KEE

    uint32_t const cps[1] = { 0xa51e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x388f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_019)
{
    // A51F  ; [.3890.0020.0002] 
    // VAI SYLLABLE NGGEE

    uint32_t const cps[1] = { 0xa51f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3890), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_020)
{
    // A520  ; [.3891.0020.0002] 
    // VAI SYLLABLE GEE

    uint32_t const cps[1] = { 0xa520 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3891), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_021)
{
    // A521  ; [.3892.0020.0002] 
    // VAI SYLLABLE MEE

    uint32_t const cps[1] = { 0xa521 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3892), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_022)
{
    // A522  ; [.3893.0020.0002] 
    // VAI SYLLABLE NEE

    uint32_t const cps[1] = { 0xa522 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3893), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_023)
{
    // A523  ; [.3894.0020.0002] 
    // VAI SYLLABLE NYEE

    uint32_t const cps[1] = { 0xa523 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3894), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_024)
{
    // A524  ; [.3895.0020.0002] 
    // VAI SYLLABLE I

    uint32_t const cps[1] = { 0xa524 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3895), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_025)
{
    // A525  ; [.3896.0020.0002] 
    // VAI SYLLABLE IN

    uint32_t const cps[1] = { 0xa525 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3896), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_026)
{
    // A526  ; [.3897.0020.0002] 
    // VAI SYLLABLE HI

    uint32_t const cps[1] = { 0xa526 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3897), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_027)
{
    // A527  ; [.3898.0020.0002] 
    // VAI SYLLABLE HIN

    uint32_t const cps[1] = { 0xa527 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3898), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_028)
{
    // A528  ; [.3899.0020.0002] 
    // VAI SYLLABLE WI

    uint32_t const cps[1] = { 0xa528 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3899), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_029)
{
    // A529  ; [.389A.0020.0002] 
    // VAI SYLLABLE WIN

    uint32_t const cps[1] = { 0xa529 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_030)
{
    // A52A  ; [.389B.0020.0002] 
    // VAI SYLLABLE PI

    uint32_t const cps[1] = { 0xa52a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_031)
{
    // A52B  ; [.389C.0020.0002] 
    // VAI SYLLABLE BHI

    uint32_t const cps[1] = { 0xa52b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_032)
{
    // A52C  ; [.389D.0020.0002] 
    // VAI SYLLABLE BI

    uint32_t const cps[1] = { 0xa52c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_033)
{
    // A52D  ; [.389E.0020.0002] 
    // VAI SYLLABLE MBI

    uint32_t const cps[1] = { 0xa52d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_034)
{
    // A52E  ; [.389F.0020.0002] 
    // VAI SYLLABLE KPI

    uint32_t const cps[1] = { 0xa52e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x389f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_035)
{
    // A52F  ; [.38A0.0020.0002] 
    // VAI SYLLABLE MGBI

    uint32_t const cps[1] = { 0xa52f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_036)
{
    // A530  ; [.38A1.0020.0002] 
    // VAI SYLLABLE GBI

    uint32_t const cps[1] = { 0xa530 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_037)
{
    // A531  ; [.38A2.0020.0002] 
    // VAI SYLLABLE FI

    uint32_t const cps[1] = { 0xa531 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_038)
{
    // A532  ; [.38A3.0020.0002] 
    // VAI SYLLABLE VI

    uint32_t const cps[1] = { 0xa532 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_039)
{
    // A533  ; [.38A4.0020.0002] 
    // VAI SYLLABLE TI

    uint32_t const cps[1] = { 0xa533 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_040)
{
    // A534  ; [.38A5.0020.0002] 
    // VAI SYLLABLE THI

    uint32_t const cps[1] = { 0xa534 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_041)
{
    // A535  ; [.38A6.0020.0002] 
    // VAI SYLLABLE DHI

    uint32_t const cps[1] = { 0xa535 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_042)
{
    // A536  ; [.38A7.0020.0002] 
    // VAI SYLLABLE DHHI

    uint32_t const cps[1] = { 0xa536 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_043)
{
    // A537  ; [.38A8.0020.0002] 
    // VAI SYLLABLE LI

    uint32_t const cps[1] = { 0xa537 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_044)
{
    // A538  ; [.38A9.0020.0002] 
    // VAI SYLLABLE RI

    uint32_t const cps[1] = { 0xa538 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38a9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_045)
{
    // A539  ; [.38AA.0020.0002] 
    // VAI SYLLABLE DI

    uint32_t const cps[1] = { 0xa539 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38aa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_046)
{
    // A53A  ; [.38AB.0020.0002] 
    // VAI SYLLABLE NDI

    uint32_t const cps[1] = { 0xa53a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ab), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_047)
{
    // A53B  ; [.38AC.0020.0002] 
    // VAI SYLLABLE SI

    uint32_t const cps[1] = { 0xa53b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ac), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_048)
{
    // A53C  ; [.38AD.0020.0002] 
    // VAI SYLLABLE SHI

    uint32_t const cps[1] = { 0xa53c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ad), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_049)
{
    // A53D  ; [.38AE.0020.0002] 
    // VAI SYLLABLE ZI

    uint32_t const cps[1] = { 0xa53d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ae), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_050)
{
    // A53E  ; [.38AF.0020.0002] 
    // VAI SYLLABLE ZHI

    uint32_t const cps[1] = { 0xa53e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38af), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_051)
{
    // A53F  ; [.38B0.0020.0002] 
    // VAI SYLLABLE CI

    uint32_t const cps[1] = { 0xa53f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_052)
{
    // A540  ; [.38B1.0020.0002] 
    // VAI SYLLABLE JI

    uint32_t const cps[1] = { 0xa540 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_053)
{
    // A541  ; [.38B2.0020.0002] 
    // VAI SYLLABLE NJI

    uint32_t const cps[1] = { 0xa541 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_054)
{
    // A542  ; [.38B3.0020.0002] 
    // VAI SYLLABLE YI

    uint32_t const cps[1] = { 0xa542 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_055)
{
    // A543  ; [.38B4.0020.0002] 
    // VAI SYLLABLE KI

    uint32_t const cps[1] = { 0xa543 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_056)
{
    // A544  ; [.38B5.0020.0002] 
    // VAI SYLLABLE NGGI

    uint32_t const cps[1] = { 0xa544 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_057)
{
    // A545  ; [.38B6.0020.0002] 
    // VAI SYLLABLE GI

    uint32_t const cps[1] = { 0xa545 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_058)
{
    // A546  ; [.38B7.0020.0002] 
    // VAI SYLLABLE MI

    uint32_t const cps[1] = { 0xa546 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_059)
{
    // A547  ; [.38B8.0020.0002] 
    // VAI SYLLABLE NI

    uint32_t const cps[1] = { 0xa547 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_060)
{
    // A548  ; [.38B9.0020.0002] 
    // VAI SYLLABLE NYI

    uint32_t const cps[1] = { 0xa548 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38b9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_061)
{
    // A549  ; [.38BA.0020.0002] 
    // VAI SYLLABLE A

    uint32_t const cps[1] = { 0xa549 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ba), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_062)
{
    // A54A  ; [.38BB.0020.0002] 
    // VAI SYLLABLE AN

    uint32_t const cps[1] = { 0xa54a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38bb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_063)
{
    // A54B  ; [.38BC.0020.0002] 
    // VAI SYLLABLE NGAN

    uint32_t const cps[1] = { 0xa54b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38bc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_064)
{
    // A54C  ; [.38BD.0020.0002] 
    // VAI SYLLABLE HA

    uint32_t const cps[1] = { 0xa54c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38bd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_065)
{
    // A54D  ; [.38BE.0020.0002] 
    // VAI SYLLABLE HAN

    uint32_t const cps[1] = { 0xa54d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38be), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_066)
{
    // A54E  ; [.38BF.0020.0002] 
    // VAI SYLLABLE WA

    uint32_t const cps[1] = { 0xa54e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38bf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_067)
{
    // A54F  ; [.38C0.0020.0002] 
    // VAI SYLLABLE WAN

    uint32_t const cps[1] = { 0xa54f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_068)
{
    // A550  ; [.38C1.0020.0002] 
    // VAI SYLLABLE PA

    uint32_t const cps[1] = { 0xa550 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_069)
{
    // A551  ; [.38C2.0020.0002] 
    // VAI SYLLABLE BHA

    uint32_t const cps[1] = { 0xa551 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_070)
{
    // A552  ; [.38C3.0020.0002] 
    // VAI SYLLABLE BA

    uint32_t const cps[1] = { 0xa552 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_071)
{
    // A553  ; [.38C4.0020.0002] 
    // VAI SYLLABLE MBA

    uint32_t const cps[1] = { 0xa553 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_072)
{
    // A554  ; [.38C5.0020.0002] 
    // VAI SYLLABLE KPA

    uint32_t const cps[1] = { 0xa554 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_073)
{
    // A555  ; [.38C6.0020.0002] 
    // VAI SYLLABLE KPAN

    uint32_t const cps[1] = { 0xa555 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_074)
{
    // A556  ; [.38C7.0020.0002] 
    // VAI SYLLABLE MGBA

    uint32_t const cps[1] = { 0xa556 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_075)
{
    // A557  ; [.38C8.0020.0002] 
    // VAI SYLLABLE GBA

    uint32_t const cps[1] = { 0xa557 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_076)
{
    // A558  ; [.38C9.0020.0002] 
    // VAI SYLLABLE FA

    uint32_t const cps[1] = { 0xa558 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38c9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_077)
{
    // A559  ; [.38CA.0020.0002] 
    // VAI SYLLABLE VA

    uint32_t const cps[1] = { 0xa559 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_078)
{
    // A55A  ; [.38CB.0020.0002] 
    // VAI SYLLABLE TA

    uint32_t const cps[1] = { 0xa55a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_079)
{
    // A55B  ; [.38CC.0020.0002] 
    // VAI SYLLABLE THA

    uint32_t const cps[1] = { 0xa55b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_080)
{
    // A55C  ; [.38CD.0020.0002] 
    // VAI SYLLABLE DHA

    uint32_t const cps[1] = { 0xa55c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_081)
{
    // A55D  ; [.38CE.0020.0002] 
    // VAI SYLLABLE DHHA

    uint32_t const cps[1] = { 0xa55d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_082)
{
    // A55E  ; [.38CF.0020.0002] 
    // VAI SYLLABLE LA

    uint32_t const cps[1] = { 0xa55e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_083)
{
    // A55F  ; [.38D0.0020.0002] 
    // VAI SYLLABLE RA

    uint32_t const cps[1] = { 0xa55f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_084)
{
    // A560  ; [.38D1.0020.0002] 
    // VAI SYLLABLE DA

    uint32_t const cps[1] = { 0xa560 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_085)
{
    // A561  ; [.38D2.0020.0002] 
    // VAI SYLLABLE NDA

    uint32_t const cps[1] = { 0xa561 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_086)
{
    // A562  ; [.38D3.0020.0002] 
    // VAI SYLLABLE SA

    uint32_t const cps[1] = { 0xa562 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_087)
{
    // A563  ; [.38D4.0020.0002] 
    // VAI SYLLABLE SHA

    uint32_t const cps[1] = { 0xa563 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_088)
{
    // A564  ; [.38D5.0020.0002] 
    // VAI SYLLABLE ZA

    uint32_t const cps[1] = { 0xa564 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_089)
{
    // A565  ; [.38D6.0020.0002] 
    // VAI SYLLABLE ZHA

    uint32_t const cps[1] = { 0xa565 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_090)
{
    // A566  ; [.38D7.0020.0002] 
    // VAI SYLLABLE CA

    uint32_t const cps[1] = { 0xa566 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_091)
{
    // A567  ; [.38D8.0020.0002] 
    // VAI SYLLABLE JA

    uint32_t const cps[1] = { 0xa567 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_092)
{
    // A568  ; [.38D9.0020.0002] 
    // VAI SYLLABLE NJA

    uint32_t const cps[1] = { 0xa568 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_093)
{
    // A569  ; [.38DA.0020.0002] 
    // VAI SYLLABLE YA

    uint32_t const cps[1] = { 0xa569 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38da), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_094)
{
    // A56A  ; [.38DB.0020.0002] 
    // VAI SYLLABLE KA

    uint32_t const cps[1] = { 0xa56a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38db), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_095)
{
    // A56B  ; [.38DC.0020.0002] 
    // VAI SYLLABLE KAN

    uint32_t const cps[1] = { 0xa56b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_096)
{
    // A56C  ; [.38DD.0020.0002] 
    // VAI SYLLABLE NGGA

    uint32_t const cps[1] = { 0xa56c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_097)
{
    // A56D  ; [.38DE.0020.0002] 
    // VAI SYLLABLE GA

    uint32_t const cps[1] = { 0xa56d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38de), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_098)
{
    // A56E  ; [.38DF.0020.0002] 
    // VAI SYLLABLE MA

    uint32_t const cps[1] = { 0xa56e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38df), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_099)
{
    // A56F  ; [.38E0.0020.0002] 
    // VAI SYLLABLE NA

    uint32_t const cps[1] = { 0xa56f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_100)
{
    // A570  ; [.38E1.0020.0002] 
    // VAI SYLLABLE NYA

    uint32_t const cps[1] = { 0xa570 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_101)
{
    // A571  ; [.38E2.0020.0002] 
    // VAI SYLLABLE OO

    uint32_t const cps[1] = { 0xa571 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_102)
{
    // A572  ; [.38E3.0020.0002] 
    // VAI SYLLABLE OON

    uint32_t const cps[1] = { 0xa572 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_103)
{
    // A573  ; [.38E4.0020.0002] 
    // VAI SYLLABLE HOO

    uint32_t const cps[1] = { 0xa573 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_104)
{
    // A574  ; [.38E5.0020.0002] 
    // VAI SYLLABLE WOO

    uint32_t const cps[1] = { 0xa574 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_105)
{
    // A575  ; [.38E6.0020.0002] 
    // VAI SYLLABLE WOON

    uint32_t const cps[1] = { 0xa575 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_106)
{
    // A576  ; [.38E7.0020.0002] 
    // VAI SYLLABLE POO

    uint32_t const cps[1] = { 0xa576 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_107)
{
    // A577  ; [.38E8.0020.0002] 
    // VAI SYLLABLE BHOO

    uint32_t const cps[1] = { 0xa577 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_108)
{
    // A578  ; [.38E9.0020.0002] 
    // VAI SYLLABLE BOO

    uint32_t const cps[1] = { 0xa578 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_109)
{
    // A579  ; [.38EA.0020.0002] 
    // VAI SYLLABLE MBOO

    uint32_t const cps[1] = { 0xa579 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_110)
{
    // A57A  ; [.38EB.0020.0002] 
    // VAI SYLLABLE KPOO

    uint32_t const cps[1] = { 0xa57a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_111)
{
    // A57B  ; [.38EC.0020.0002] 
    // VAI SYLLABLE MGBOO

    uint32_t const cps[1] = { 0xa57b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_112)
{
    // A57C  ; [.38ED.0020.0002] 
    // VAI SYLLABLE GBOO

    uint32_t const cps[1] = { 0xa57c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_113)
{
    // A57D  ; [.38EE.0020.0002] 
    // VAI SYLLABLE FOO

    uint32_t const cps[1] = { 0xa57d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_114)
{
    // A57E  ; [.38EF.0020.0002] 
    // VAI SYLLABLE VOO

    uint32_t const cps[1] = { 0xa57e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_115)
{
    // A57F  ; [.38F0.0020.0002] 
    // VAI SYLLABLE TOO

    uint32_t const cps[1] = { 0xa57f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_116)
{
    // A580  ; [.38F1.0020.0002] 
    // VAI SYLLABLE THOO

    uint32_t const cps[1] = { 0xa580 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_117)
{
    // A581  ; [.38F2.0020.0002] 
    // VAI SYLLABLE DHOO

    uint32_t const cps[1] = { 0xa581 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_118)
{
    // A582  ; [.38F3.0020.0002] 
    // VAI SYLLABLE DHHOO

    uint32_t const cps[1] = { 0xa582 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_119)
{
    // A583  ; [.38F4.0020.0002] 
    // VAI SYLLABLE LOO

    uint32_t const cps[1] = { 0xa583 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_120)
{
    // A584  ; [.38F5.0020.0002] 
    // VAI SYLLABLE ROO

    uint32_t const cps[1] = { 0xa584 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_121)
{
    // A585  ; [.38F6.0020.0002] 
    // VAI SYLLABLE DOO

    uint32_t const cps[1] = { 0xa585 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_122)
{
    // A586  ; [.38F7.0020.0002] 
    // VAI SYLLABLE NDOO

    uint32_t const cps[1] = { 0xa586 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_123)
{
    // A587  ; [.38F8.0020.0002] 
    // VAI SYLLABLE SOO

    uint32_t const cps[1] = { 0xa587 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_124)
{
    // A588  ; [.38F9.0020.0002] 
    // VAI SYLLABLE SHOO

    uint32_t const cps[1] = { 0xa588 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_125)
{
    // A589  ; [.38FA.0020.0002] 
    // VAI SYLLABLE ZOO

    uint32_t const cps[1] = { 0xa589 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_126)
{
    // A58A  ; [.38FB.0020.0002] 
    // VAI SYLLABLE ZHOO

    uint32_t const cps[1] = { 0xa58a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_127)
{
    // A58B  ; [.38FC.0020.0002] 
    // VAI SYLLABLE COO

    uint32_t const cps[1] = { 0xa58b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_128)
{
    // A58C  ; [.38FD.0020.0002] 
    // VAI SYLLABLE JOO

    uint32_t const cps[1] = { 0xa58c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_129)
{
    // A58D  ; [.38FE.0020.0002] 
    // VAI SYLLABLE NJOO

    uint32_t const cps[1] = { 0xa58d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_130)
{
    // A58E  ; [.38FF.0020.0002] 
    // VAI SYLLABLE YOO

    uint32_t const cps[1] = { 0xa58e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_131)
{
    // A58F  ; [.3900.0020.0002] 
    // VAI SYLLABLE KOO

    uint32_t const cps[1] = { 0xa58f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3900), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_132)
{
    // A590  ; [.3901.0020.0002] 
    // VAI SYLLABLE NGGOO

    uint32_t const cps[1] = { 0xa590 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3901), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_133)
{
    // A591  ; [.3902.0020.0002] 
    // VAI SYLLABLE GOO

    uint32_t const cps[1] = { 0xa591 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3902), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_134)
{
    // A592  ; [.3903.0020.0002] 
    // VAI SYLLABLE MOO

    uint32_t const cps[1] = { 0xa592 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3903), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_135)
{
    // A593  ; [.3904.0020.0002] 
    // VAI SYLLABLE NOO

    uint32_t const cps[1] = { 0xa593 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3904), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_136)
{
    // A594  ; [.3905.0020.0002] 
    // VAI SYLLABLE NYOO

    uint32_t const cps[1] = { 0xa594 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3905), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_137)
{
    // A595  ; [.3906.0020.0002] 
    // VAI SYLLABLE U

    uint32_t const cps[1] = { 0xa595 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3906), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_138)
{
    // A596  ; [.3907.0020.0002] 
    // VAI SYLLABLE UN

    uint32_t const cps[1] = { 0xa596 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3907), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_139)
{
    // A597  ; [.3908.0020.0002] 
    // VAI SYLLABLE HU

    uint32_t const cps[1] = { 0xa597 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3908), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_140)
{
    // A598  ; [.3909.0020.0002] 
    // VAI SYLLABLE HUN

    uint32_t const cps[1] = { 0xa598 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3909), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_141)
{
    // A599  ; [.390A.0020.0002] 
    // VAI SYLLABLE WU

    uint32_t const cps[1] = { 0xa599 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390a), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_142)
{
    // A59A  ; [.390B.0020.0002] 
    // VAI SYLLABLE WUN

    uint32_t const cps[1] = { 0xa59a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390b), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_143)
{
    // A59B  ; [.390C.0020.0002] 
    // VAI SYLLABLE PU

    uint32_t const cps[1] = { 0xa59b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390c), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_144)
{
    // A59C  ; [.390D.0020.0002] 
    // VAI SYLLABLE BHU

    uint32_t const cps[1] = { 0xa59c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390d), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_145)
{
    // A59D  ; [.390E.0020.0002] 
    // VAI SYLLABLE BU

    uint32_t const cps[1] = { 0xa59d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390e), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_146)
{
    // A59E  ; [.390F.0020.0002] 
    // VAI SYLLABLE MBU

    uint32_t const cps[1] = { 0xa59e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390f), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_147)
{
    // A59F  ; [.3910.0020.0002] 
    // VAI SYLLABLE KPU

    uint32_t const cps[1] = { 0xa59f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3910), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_148)
{
    // A5A0  ; [.3911.0020.0002] 
    // VAI SYLLABLE MGBU

    uint32_t const cps[1] = { 0xa5a0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3911), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_093_149)
{
    // A5A1  ; [.3912.0020.0002] 
    // VAI SYLLABLE GBU

    uint32_t const cps[1] = { 0xa5a1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3912), uint8_t(0x0), uint8_t(0x2)} };

    auto const multi_coll = boost::text::longest_collation(cps, cps + 1);
    auto const singleton_coll = boost::text::collation(cps[0]);

    EXPECT_FALSE(multi_coll.collation_elements_);
    EXPECT_EQ(multi_coll.match_length_, 0);

    EXPECT_TRUE(singleton_coll.collation_elements_);
    EXPECT_EQ(singleton_coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(singleton_coll.collation_elements_.begin(), singleton_coll.collation_elements_.end(), ces, ces + 1));
}

