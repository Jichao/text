// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_194_000)
{
    // AAB9 AA9A 0062;	
    // (ꪹꪚ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW BO	[2EAA 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9A, 0x0062 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_001)
{
    // AABB AA9A 0021;	
    // (ꪻꪚ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW BO	[2EAA 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9A, 0x0021 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_002)
{
    // AABB AA9A 003F;	
    // (ꪻꪚ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW BO	[2EAA 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9A, 0x003F };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_003)
{
    // AABB AA9A 0061;	
    // (ꪻꪚ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW BO	[2EAA 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_004)
{
    // AABB AA9A 0041;	
    // (ꪻꪚ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW BO	[2EAA 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9A, 0x0041 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_005)
{
    // AABB AA9A 0062;	
    // (ꪻꪚ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW BO	[2EAA 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9A, 0x0062 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_006)
{
    // AABC AA9A 0021;	
    // (ꪼꪚ) TAI VIET VOWEL AY, TAI VIET LETTER LOW BO	[2EAA 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9A, 0x0021 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_007)
{
    // AABC AA9A 003F;	
    // (ꪼꪚ) TAI VIET VOWEL AY, TAI VIET LETTER LOW BO	[2EAA 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9A, 0x003F };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_008)
{
    // AABC AA9A 0061;	
    // (ꪼꪚ) TAI VIET VOWEL AY, TAI VIET LETTER LOW BO	[2EAA 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_009)
{
    // AABC AA9A 0041;	
    // (ꪼꪚ) TAI VIET VOWEL AY, TAI VIET LETTER LOW BO	[2EAA 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9A, 0x0041 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_010)
{
    // AABC AA9A 0062;	
    // (ꪼꪚ) TAI VIET VOWEL AY, TAI VIET LETTER LOW BO	[2EAA 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9A, 0x0062 };
    uint32_t const ces[12] = { 0x2EAA, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_011)
{
    // AA9B 0021;	
    // (ꪛ) TAI VIET LETTER HIGH BO	[2EAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9B, 0x0021 };
    uint32_t const ces[9] = { 0x2EAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_012)
{
    // AA9B 003F;	
    // (ꪛ) TAI VIET LETTER HIGH BO	[2EAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9B, 0x003F };
    uint32_t const ces[9] = { 0x2EAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_013)
{
    // AA9B 0061;	
    // (ꪛ) TAI VIET LETTER HIGH BO	[2EAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9B, 0x0061 };
    uint32_t const ces[9] = { 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_014)
{
    // AA9B 0041;	
    // (ꪛ) TAI VIET LETTER HIGH BO	[2EAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9B, 0x0041 };
    uint32_t const ces[9] = { 0x2EAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_015)
{
    // AA9B 0062;	
    // (ꪛ) TAI VIET LETTER HIGH BO	[2EAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9B, 0x0062 };
    uint32_t const ces[9] = { 0x2EAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_016)
{
    // AAB5 AA9B 0021;	
    // (ꪵꪛ) TAI VIET VOWEL E, TAI VIET LETTER HIGH BO	[2EAB 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9B, 0x0021 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_017)
{
    // AAB5 AA9B 003F;	
    // (ꪵꪛ) TAI VIET VOWEL E, TAI VIET LETTER HIGH BO	[2EAB 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9B, 0x003F };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_018)
{
    // AAB5 AA9B 0061;	
    // (ꪵꪛ) TAI VIET VOWEL E, TAI VIET LETTER HIGH BO	[2EAB 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_019)
{
    // AAB5 AA9B 0041;	
    // (ꪵꪛ) TAI VIET VOWEL E, TAI VIET LETTER HIGH BO	[2EAB 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9B, 0x0041 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_020)
{
    // AAB5 AA9B 0062;	
    // (ꪵꪛ) TAI VIET VOWEL E, TAI VIET LETTER HIGH BO	[2EAB 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9B, 0x0062 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_021)
{
    // AAB6 AA9B 0021;	
    // (ꪶꪛ) TAI VIET VOWEL O, TAI VIET LETTER HIGH BO	[2EAB 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9B, 0x0021 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_022)
{
    // AAB6 AA9B 003F;	
    // (ꪶꪛ) TAI VIET VOWEL O, TAI VIET LETTER HIGH BO	[2EAB 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9B, 0x003F };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_023)
{
    // AAB6 AA9B 0061;	
    // (ꪶꪛ) TAI VIET VOWEL O, TAI VIET LETTER HIGH BO	[2EAB 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_024)
{
    // AAB6 AA9B 0041;	
    // (ꪶꪛ) TAI VIET VOWEL O, TAI VIET LETTER HIGH BO	[2EAB 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9B, 0x0041 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_025)
{
    // AAB6 AA9B 0062;	
    // (ꪶꪛ) TAI VIET VOWEL O, TAI VIET LETTER HIGH BO	[2EAB 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9B, 0x0062 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_026)
{
    // AAB9 AA9B 0021;	
    // (ꪹꪛ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH BO	[2EAB 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9B, 0x0021 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_027)
{
    // AAB9 AA9B 003F;	
    // (ꪹꪛ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH BO	[2EAB 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9B, 0x003F };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_028)
{
    // AAB9 AA9B 0061;	
    // (ꪹꪛ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH BO	[2EAB 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_029)
{
    // AAB9 AA9B 0041;	
    // (ꪹꪛ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH BO	[2EAB 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9B, 0x0041 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_030)
{
    // AAB9 AA9B 0062;	
    // (ꪹꪛ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH BO	[2EAB 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9B, 0x0062 };
    uint32_t const ces[12] = { 0x2EAB, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_031)
{
    // AABB AA9B 0021;	
    // (ꪻꪛ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH BO	[2EAB 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9B, 0x0021 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_032)
{
    // AABB AA9B 003F;	
    // (ꪻꪛ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH BO	[2EAB 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9B, 0x003F };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_033)
{
    // AABB AA9B 0061;	
    // (ꪻꪛ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH BO	[2EAB 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_034)
{
    // AABB AA9B 0041;	
    // (ꪻꪛ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH BO	[2EAB 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9B, 0x0041 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_035)
{
    // AABB AA9B 0062;	
    // (ꪻꪛ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH BO	[2EAB 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9B, 0x0062 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_036)
{
    // AABC AA9B 0021;	
    // (ꪼꪛ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH BO	[2EAB 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9B, 0x0021 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_037)
{
    // AABC AA9B 003F;	
    // (ꪼꪛ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH BO	[2EAB 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9B, 0x003F };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_038)
{
    // AABC AA9B 0061;	
    // (ꪼꪛ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH BO	[2EAB 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9B, 0x0061 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_039)
{
    // AABC AA9B 0041;	
    // (ꪼꪛ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH BO	[2EAB 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9B, 0x0041 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_040)
{
    // AABC AA9B 0062;	
    // (ꪼꪛ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH BO	[2EAB 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9B, 0x0062 };
    uint32_t const ces[12] = { 0x2EAB, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_041)
{
    // AA9C 0021;	
    // (ꪜ) TAI VIET LETTER LOW PO	[2EAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9C, 0x0021 };
    uint32_t const ces[9] = { 0x2EAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_042)
{
    // AA9C 003F;	
    // (ꪜ) TAI VIET LETTER LOW PO	[2EAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9C, 0x003F };
    uint32_t const ces[9] = { 0x2EAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_043)
{
    // AA9C 0061;	
    // (ꪜ) TAI VIET LETTER LOW PO	[2EAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9C, 0x0061 };
    uint32_t const ces[9] = { 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_044)
{
    // AA9C 0041;	
    // (ꪜ) TAI VIET LETTER LOW PO	[2EAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9C, 0x0041 };
    uint32_t const ces[9] = { 0x2EAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_045)
{
    // AA9C 0062;	
    // (ꪜ) TAI VIET LETTER LOW PO	[2EAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9C, 0x0062 };
    uint32_t const ces[9] = { 0x2EAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_046)
{
    // AAB5 AA9C 0021;	
    // (ꪵꪜ) TAI VIET VOWEL E, TAI VIET LETTER LOW PO	[2EAC 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9C, 0x0021 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_047)
{
    // AAB5 AA9C 003F;	
    // (ꪵꪜ) TAI VIET VOWEL E, TAI VIET LETTER LOW PO	[2EAC 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9C, 0x003F };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_048)
{
    // AAB5 AA9C 0061;	
    // (ꪵꪜ) TAI VIET VOWEL E, TAI VIET LETTER LOW PO	[2EAC 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_049)
{
    // AAB5 AA9C 0041;	
    // (ꪵꪜ) TAI VIET VOWEL E, TAI VIET LETTER LOW PO	[2EAC 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9C, 0x0041 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_050)
{
    // AAB5 AA9C 0062;	
    // (ꪵꪜ) TAI VIET VOWEL E, TAI VIET LETTER LOW PO	[2EAC 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9C, 0x0062 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_051)
{
    // AAB6 AA9C 0021;	
    // (ꪶꪜ) TAI VIET VOWEL O, TAI VIET LETTER LOW PO	[2EAC 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9C, 0x0021 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_052)
{
    // AAB6 AA9C 003F;	
    // (ꪶꪜ) TAI VIET VOWEL O, TAI VIET LETTER LOW PO	[2EAC 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9C, 0x003F };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_053)
{
    // AAB6 AA9C 0061;	
    // (ꪶꪜ) TAI VIET VOWEL O, TAI VIET LETTER LOW PO	[2EAC 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_054)
{
    // AAB6 AA9C 0041;	
    // (ꪶꪜ) TAI VIET VOWEL O, TAI VIET LETTER LOW PO	[2EAC 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9C, 0x0041 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_055)
{
    // AAB6 AA9C 0062;	
    // (ꪶꪜ) TAI VIET VOWEL O, TAI VIET LETTER LOW PO	[2EAC 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9C, 0x0062 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_056)
{
    // AAB9 AA9C 0021;	
    // (ꪹꪜ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PO	[2EAC 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9C, 0x0021 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_057)
{
    // AAB9 AA9C 003F;	
    // (ꪹꪜ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PO	[2EAC 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9C, 0x003F };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_058)
{
    // AAB9 AA9C 0061;	
    // (ꪹꪜ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PO	[2EAC 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_059)
{
    // AAB9 AA9C 0041;	
    // (ꪹꪜ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PO	[2EAC 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9C, 0x0041 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_060)
{
    // AAB9 AA9C 0062;	
    // (ꪹꪜ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PO	[2EAC 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9C, 0x0062 };
    uint32_t const ces[12] = { 0x2EAC, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_061)
{
    // AABB AA9C 0021;	
    // (ꪻꪜ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PO	[2EAC 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9C, 0x0021 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_062)
{
    // AABB AA9C 003F;	
    // (ꪻꪜ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PO	[2EAC 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9C, 0x003F };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_063)
{
    // AABB AA9C 0061;	
    // (ꪻꪜ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PO	[2EAC 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_064)
{
    // AABB AA9C 0041;	
    // (ꪻꪜ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PO	[2EAC 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9C, 0x0041 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_065)
{
    // AABB AA9C 0062;	
    // (ꪻꪜ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PO	[2EAC 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9C, 0x0062 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_066)
{
    // AABC AA9C 0021;	
    // (ꪼꪜ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PO	[2EAC 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9C, 0x0021 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_067)
{
    // AABC AA9C 003F;	
    // (ꪼꪜ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PO	[2EAC 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9C, 0x003F };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_068)
{
    // AABC AA9C 0061;	
    // (ꪼꪜ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PO	[2EAC 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9C, 0x0061 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_069)
{
    // AABC AA9C 0041;	
    // (ꪼꪜ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PO	[2EAC 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9C, 0x0041 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_070)
{
    // AABC AA9C 0062;	
    // (ꪼꪜ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PO	[2EAC 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9C, 0x0062 };
    uint32_t const ces[12] = { 0x2EAC, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_071)
{
    // AA9D 0021;	
    // (ꪝ) TAI VIET LETTER HIGH PO	[2EAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9D, 0x0021 };
    uint32_t const ces[9] = { 0x2EAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_072)
{
    // AA9D 003F;	
    // (ꪝ) TAI VIET LETTER HIGH PO	[2EAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9D, 0x003F };
    uint32_t const ces[9] = { 0x2EAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_073)
{
    // AA9D 0061;	
    // (ꪝ) TAI VIET LETTER HIGH PO	[2EAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9D, 0x0061 };
    uint32_t const ces[9] = { 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_074)
{
    // AA9D 0041;	
    // (ꪝ) TAI VIET LETTER HIGH PO	[2EAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9D, 0x0041 };
    uint32_t const ces[9] = { 0x2EAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_075)
{
    // AA9D 0062;	
    // (ꪝ) TAI VIET LETTER HIGH PO	[2EAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9D, 0x0062 };
    uint32_t const ces[9] = { 0x2EAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_076)
{
    // AAB5 AA9D 0021;	
    // (ꪵꪝ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PO	[2EAD 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_077)
{
    // AAB5 AA9D 003F;	
    // (ꪵꪝ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PO	[2EAD 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9D, 0x003F };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_078)
{
    // AAB5 AA9D 0061;	
    // (ꪵꪝ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PO	[2EAD 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_079)
{
    // AAB5 AA9D 0041;	
    // (ꪵꪝ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PO	[2EAD 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_080)
{
    // AAB5 AA9D 0062;	
    // (ꪵꪝ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PO	[2EAD 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_081)
{
    // AAB6 AA9D 0021;	
    // (ꪶꪝ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PO	[2EAD 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_082)
{
    // AAB6 AA9D 003F;	
    // (ꪶꪝ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PO	[2EAD 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9D, 0x003F };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_083)
{
    // AAB6 AA9D 0061;	
    // (ꪶꪝ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PO	[2EAD 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_084)
{
    // AAB6 AA9D 0041;	
    // (ꪶꪝ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PO	[2EAD 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_085)
{
    // AAB6 AA9D 0062;	
    // (ꪶꪝ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PO	[2EAD 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_086)
{
    // AAB9 AA9D 0021;	
    // (ꪹꪝ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PO	[2EAD 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_087)
{
    // AAB9 AA9D 003F;	
    // (ꪹꪝ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PO	[2EAD 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9D, 0x003F };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_088)
{
    // AAB9 AA9D 0061;	
    // (ꪹꪝ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PO	[2EAD 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_089)
{
    // AAB9 AA9D 0041;	
    // (ꪹꪝ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PO	[2EAD 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_090)
{
    // AAB9 AA9D 0062;	
    // (ꪹꪝ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PO	[2EAD 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EAD, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_091)
{
    // AABB AA9D 0021;	
    // (ꪻꪝ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PO	[2EAD 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_092)
{
    // AABB AA9D 003F;	
    // (ꪻꪝ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PO	[2EAD 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9D, 0x003F };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_093)
{
    // AABB AA9D 0061;	
    // (ꪻꪝ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PO	[2EAD 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_094)
{
    // AABB AA9D 0041;	
    // (ꪻꪝ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PO	[2EAD 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_095)
{
    // AABB AA9D 0062;	
    // (ꪻꪝ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PO	[2EAD 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_096)
{
    // AABC AA9D 0021;	
    // (ꪼꪝ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PO	[2EAD 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9D, 0x0021 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_097)
{
    // AABC AA9D 003F;	
    // (ꪼꪝ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PO	[2EAD 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9D, 0x003F };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_098)
{
    // AABC AA9D 0061;	
    // (ꪼꪝ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PO	[2EAD 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9D, 0x0061 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_099)
{
    // AABC AA9D 0041;	
    // (ꪼꪝ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PO	[2EAD 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9D, 0x0041 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_100)
{
    // AABC AA9D 0062;	
    // (ꪼꪝ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PO	[2EAD 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9D, 0x0062 };
    uint32_t const ces[12] = { 0x2EAD, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_101)
{
    // AA9E 0021;	
    // (ꪞ) TAI VIET LETTER LOW PHO	[2EAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9E, 0x0021 };
    uint32_t const ces[9] = { 0x2EAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_102)
{
    // AA9E 003F;	
    // (ꪞ) TAI VIET LETTER LOW PHO	[2EAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9E, 0x003F };
    uint32_t const ces[9] = { 0x2EAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_103)
{
    // AA9E 0061;	
    // (ꪞ) TAI VIET LETTER LOW PHO	[2EAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9E, 0x0061 };
    uint32_t const ces[9] = { 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_104)
{
    // AA9E 0041;	
    // (ꪞ) TAI VIET LETTER LOW PHO	[2EAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9E, 0x0041 };
    uint32_t const ces[9] = { 0x2EAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_105)
{
    // AA9E 0062;	
    // (ꪞ) TAI VIET LETTER LOW PHO	[2EAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9E, 0x0062 };
    uint32_t const ces[9] = { 0x2EAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_106)
{
    // AAB5 AA9E 0021;	
    // (ꪵꪞ) TAI VIET VOWEL E, TAI VIET LETTER LOW PHO	[2EAE 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9E, 0x0021 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_107)
{
    // AAB5 AA9E 003F;	
    // (ꪵꪞ) TAI VIET VOWEL E, TAI VIET LETTER LOW PHO	[2EAE 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9E, 0x003F };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_108)
{
    // AAB5 AA9E 0061;	
    // (ꪵꪞ) TAI VIET VOWEL E, TAI VIET LETTER LOW PHO	[2EAE 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_109)
{
    // AAB5 AA9E 0041;	
    // (ꪵꪞ) TAI VIET VOWEL E, TAI VIET LETTER LOW PHO	[2EAE 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9E, 0x0041 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_110)
{
    // AAB5 AA9E 0062;	
    // (ꪵꪞ) TAI VIET VOWEL E, TAI VIET LETTER LOW PHO	[2EAE 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9E, 0x0062 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_111)
{
    // AAB6 AA9E 0021;	
    // (ꪶꪞ) TAI VIET VOWEL O, TAI VIET LETTER LOW PHO	[2EAE 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9E, 0x0021 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_112)
{
    // AAB6 AA9E 003F;	
    // (ꪶꪞ) TAI VIET VOWEL O, TAI VIET LETTER LOW PHO	[2EAE 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9E, 0x003F };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_113)
{
    // AAB6 AA9E 0061;	
    // (ꪶꪞ) TAI VIET VOWEL O, TAI VIET LETTER LOW PHO	[2EAE 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_114)
{
    // AAB6 AA9E 0041;	
    // (ꪶꪞ) TAI VIET VOWEL O, TAI VIET LETTER LOW PHO	[2EAE 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9E, 0x0041 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_115)
{
    // AAB6 AA9E 0062;	
    // (ꪶꪞ) TAI VIET VOWEL O, TAI VIET LETTER LOW PHO	[2EAE 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9E, 0x0062 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_116)
{
    // AAB9 AA9E 0021;	
    // (ꪹꪞ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PHO	[2EAE 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9E, 0x0021 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_117)
{
    // AAB9 AA9E 003F;	
    // (ꪹꪞ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PHO	[2EAE 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9E, 0x003F };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_118)
{
    // AAB9 AA9E 0061;	
    // (ꪹꪞ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PHO	[2EAE 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_119)
{
    // AAB9 AA9E 0041;	
    // (ꪹꪞ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PHO	[2EAE 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9E, 0x0041 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_120)
{
    // AAB9 AA9E 0062;	
    // (ꪹꪞ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW PHO	[2EAE 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9E, 0x0062 };
    uint32_t const ces[12] = { 0x2EAE, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_121)
{
    // AABB AA9E 0021;	
    // (ꪻꪞ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PHO	[2EAE 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9E, 0x0021 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_122)
{
    // AABB AA9E 003F;	
    // (ꪻꪞ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PHO	[2EAE 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9E, 0x003F };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_123)
{
    // AABB AA9E 0061;	
    // (ꪻꪞ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PHO	[2EAE 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_124)
{
    // AABB AA9E 0041;	
    // (ꪻꪞ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PHO	[2EAE 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9E, 0x0041 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_125)
{
    // AABB AA9E 0062;	
    // (ꪻꪞ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW PHO	[2EAE 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9E, 0x0062 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_126)
{
    // AABC AA9E 0021;	
    // (ꪼꪞ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PHO	[2EAE 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9E, 0x0021 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_127)
{
    // AABC AA9E 003F;	
    // (ꪼꪞ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PHO	[2EAE 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9E, 0x003F };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_128)
{
    // AABC AA9E 0061;	
    // (ꪼꪞ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PHO	[2EAE 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9E, 0x0061 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_129)
{
    // AABC AA9E 0041;	
    // (ꪼꪞ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PHO	[2EAE 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9E, 0x0041 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_130)
{
    // AABC AA9E 0062;	
    // (ꪼꪞ) TAI VIET VOWEL AY, TAI VIET LETTER LOW PHO	[2EAE 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9E, 0x0062 };
    uint32_t const ces[12] = { 0x2EAE, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_131)
{
    // AA9F 0021;	
    // (ꪟ) TAI VIET LETTER HIGH PHO	[2EAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9F, 0x0021 };
    uint32_t const ces[9] = { 0x2EAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_132)
{
    // AA9F 003F;	
    // (ꪟ) TAI VIET LETTER HIGH PHO	[2EAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9F, 0x003F };
    uint32_t const ces[9] = { 0x2EAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_133)
{
    // AA9F 0061;	
    // (ꪟ) TAI VIET LETTER HIGH PHO	[2EAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9F, 0x0061 };
    uint32_t const ces[9] = { 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_134)
{
    // AA9F 0041;	
    // (ꪟ) TAI VIET LETTER HIGH PHO	[2EAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9F, 0x0041 };
    uint32_t const ces[9] = { 0x2EAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_135)
{
    // AA9F 0062;	
    // (ꪟ) TAI VIET LETTER HIGH PHO	[2EAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9F, 0x0062 };
    uint32_t const ces[9] = { 0x2EAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_136)
{
    // AAB5 AA9F 0021;	
    // (ꪵꪟ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO	[2EAF 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9F, 0x0021 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_137)
{
    // AAB5 AA9F 003F;	
    // (ꪵꪟ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO	[2EAF 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9F, 0x003F };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_138)
{
    // AAB5 AA9F 0061;	
    // (ꪵꪟ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO	[2EAF 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_139)
{
    // AAB5 AA9F 0041;	
    // (ꪵꪟ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO	[2EAF 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9F, 0x0041 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_140)
{
    // AAB5 AA9F 0062;	
    // (ꪵꪟ) TAI VIET VOWEL E, TAI VIET LETTER HIGH PHO	[2EAF 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9F, 0x0062 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_141)
{
    // AAB6 AA9F 0021;	
    // (ꪶꪟ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PHO	[2EAF 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9F, 0x0021 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_142)
{
    // AAB6 AA9F 003F;	
    // (ꪶꪟ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PHO	[2EAF 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9F, 0x003F };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_143)
{
    // AAB6 AA9F 0061;	
    // (ꪶꪟ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PHO	[2EAF 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_144)
{
    // AAB6 AA9F 0041;	
    // (ꪶꪟ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PHO	[2EAF 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9F, 0x0041 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_145)
{
    // AAB6 AA9F 0062;	
    // (ꪶꪟ) TAI VIET VOWEL O, TAI VIET LETTER HIGH PHO	[2EAF 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9F, 0x0062 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_146)
{
    // AAB9 AA9F 0021;	
    // (ꪹꪟ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PHO	[2EAF 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9F, 0x0021 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_147)
{
    // AAB9 AA9F 003F;	
    // (ꪹꪟ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PHO	[2EAF 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9F, 0x003F };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_148)
{
    // AAB9 AA9F 0061;	
    // (ꪹꪟ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PHO	[2EAF 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_149)
{
    // AAB9 AA9F 0041;	
    // (ꪹꪟ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PHO	[2EAF 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9F, 0x0041 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_150)
{
    // AAB9 AA9F 0062;	
    // (ꪹꪟ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH PHO	[2EAF 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9F, 0x0062 };
    uint32_t const ces[12] = { 0x2EAF, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_151)
{
    // AABB AA9F 0021;	
    // (ꪻꪟ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PHO	[2EAF 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9F, 0x0021 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_152)
{
    // AABB AA9F 003F;	
    // (ꪻꪟ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PHO	[2EAF 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9F, 0x003F };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_153)
{
    // AABB AA9F 0061;	
    // (ꪻꪟ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PHO	[2EAF 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_154)
{
    // AABB AA9F 0041;	
    // (ꪻꪟ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PHO	[2EAF 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9F, 0x0041 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_155)
{
    // AABB AA9F 0062;	
    // (ꪻꪟ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH PHO	[2EAF 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA9F, 0x0062 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_156)
{
    // AABC AA9F 0021;	
    // (ꪼꪟ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PHO	[2EAF 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9F, 0x0021 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_157)
{
    // AABC AA9F 003F;	
    // (ꪼꪟ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PHO	[2EAF 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9F, 0x003F };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_158)
{
    // AABC AA9F 0061;	
    // (ꪼꪟ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PHO	[2EAF 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9F, 0x0061 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_159)
{
    // AABC AA9F 0041;	
    // (ꪼꪟ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PHO	[2EAF 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9F, 0x0041 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_160)
{
    // AABC AA9F 0062;	
    // (ꪼꪟ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH PHO	[2EAF 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA9F, 0x0062 };
    uint32_t const ces[12] = { 0x2EAF, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_161)
{
    // AAA0 0021;	
    // (ꪠ) TAI VIET LETTER LOW FO	[2EB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA0, 0x0021 };
    uint32_t const ces[9] = { 0x2EB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_162)
{
    // AAA0 003F;	
    // (ꪠ) TAI VIET LETTER LOW FO	[2EB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA0, 0x003F };
    uint32_t const ces[9] = { 0x2EB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_163)
{
    // AAA0 0061;	
    // (ꪠ) TAI VIET LETTER LOW FO	[2EB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA0, 0x0061 };
    uint32_t const ces[9] = { 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_164)
{
    // AAA0 0041;	
    // (ꪠ) TAI VIET LETTER LOW FO	[2EB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA0, 0x0041 };
    uint32_t const ces[9] = { 0x2EB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_165)
{
    // AAA0 0062;	
    // (ꪠ) TAI VIET LETTER LOW FO	[2EB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA0, 0x0062 };
    uint32_t const ces[9] = { 0x2EB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_166)
{
    // AAB5 AAA0 0021;	
    // (ꪵꪠ) TAI VIET VOWEL E, TAI VIET LETTER LOW FO	[2EB0 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA0, 0x0021 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_167)
{
    // AAB5 AAA0 003F;	
    // (ꪵꪠ) TAI VIET VOWEL E, TAI VIET LETTER LOW FO	[2EB0 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA0, 0x003F };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_168)
{
    // AAB5 AAA0 0061;	
    // (ꪵꪠ) TAI VIET VOWEL E, TAI VIET LETTER LOW FO	[2EB0 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_169)
{
    // AAB5 AAA0 0041;	
    // (ꪵꪠ) TAI VIET VOWEL E, TAI VIET LETTER LOW FO	[2EB0 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA0, 0x0041 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_170)
{
    // AAB5 AAA0 0062;	
    // (ꪵꪠ) TAI VIET VOWEL E, TAI VIET LETTER LOW FO	[2EB0 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA0, 0x0062 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_171)
{
    // AAB6 AAA0 0021;	
    // (ꪶꪠ) TAI VIET VOWEL O, TAI VIET LETTER LOW FO	[2EB0 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA0, 0x0021 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_172)
{
    // AAB6 AAA0 003F;	
    // (ꪶꪠ) TAI VIET VOWEL O, TAI VIET LETTER LOW FO	[2EB0 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA0, 0x003F };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_173)
{
    // AAB6 AAA0 0061;	
    // (ꪶꪠ) TAI VIET VOWEL O, TAI VIET LETTER LOW FO	[2EB0 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_174)
{
    // AAB6 AAA0 0041;	
    // (ꪶꪠ) TAI VIET VOWEL O, TAI VIET LETTER LOW FO	[2EB0 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA0, 0x0041 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_175)
{
    // AAB6 AAA0 0062;	
    // (ꪶꪠ) TAI VIET VOWEL O, TAI VIET LETTER LOW FO	[2EB0 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA0, 0x0062 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_176)
{
    // AAB9 AAA0 0021;	
    // (ꪹꪠ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW FO	[2EB0 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA0, 0x0021 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_177)
{
    // AAB9 AAA0 003F;	
    // (ꪹꪠ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW FO	[2EB0 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA0, 0x003F };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_178)
{
    // AAB9 AAA0 0061;	
    // (ꪹꪠ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW FO	[2EB0 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_179)
{
    // AAB9 AAA0 0041;	
    // (ꪹꪠ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW FO	[2EB0 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA0, 0x0041 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_180)
{
    // AAB9 AAA0 0062;	
    // (ꪹꪠ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW FO	[2EB0 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA0, 0x0062 };
    uint32_t const ces[12] = { 0x2EB0, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_181)
{
    // AABB AAA0 0021;	
    // (ꪻꪠ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW FO	[2EB0 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA0, 0x0021 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_182)
{
    // AABB AAA0 003F;	
    // (ꪻꪠ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW FO	[2EB0 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA0, 0x003F };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_183)
{
    // AABB AAA0 0061;	
    // (ꪻꪠ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW FO	[2EB0 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_184)
{
    // AABB AAA0 0041;	
    // (ꪻꪠ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW FO	[2EB0 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA0, 0x0041 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_185)
{
    // AABB AAA0 0062;	
    // (ꪻꪠ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW FO	[2EB0 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA0, 0x0062 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_186)
{
    // AABC AAA0 0021;	
    // (ꪼꪠ) TAI VIET VOWEL AY, TAI VIET LETTER LOW FO	[2EB0 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA0, 0x0021 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_187)
{
    // AABC AAA0 003F;	
    // (ꪼꪠ) TAI VIET VOWEL AY, TAI VIET LETTER LOW FO	[2EB0 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA0, 0x003F };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_188)
{
    // AABC AAA0 0061;	
    // (ꪼꪠ) TAI VIET VOWEL AY, TAI VIET LETTER LOW FO	[2EB0 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA0, 0x0061 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_189)
{
    // AABC AAA0 0041;	
    // (ꪼꪠ) TAI VIET VOWEL AY, TAI VIET LETTER LOW FO	[2EB0 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA0, 0x0041 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_190)
{
    // AABC AAA0 0062;	
    // (ꪼꪠ) TAI VIET VOWEL AY, TAI VIET LETTER LOW FO	[2EB0 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA0, 0x0062 };
    uint32_t const ces[12] = { 0x2EB0, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_191)
{
    // AAA1 0021;	
    // (ꪡ) TAI VIET LETTER HIGH FO	[2EB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA1, 0x0021 };
    uint32_t const ces[9] = { 0x2EB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_192)
{
    // AAA1 003F;	
    // (ꪡ) TAI VIET LETTER HIGH FO	[2EB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA1, 0x003F };
    uint32_t const ces[9] = { 0x2EB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_193)
{
    // AAA1 0061;	
    // (ꪡ) TAI VIET LETTER HIGH FO	[2EB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA1, 0x0061 };
    uint32_t const ces[9] = { 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_194)
{
    // AAA1 0041;	
    // (ꪡ) TAI VIET LETTER HIGH FO	[2EB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA1, 0x0041 };
    uint32_t const ces[9] = { 0x2EB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_195)
{
    // AAA1 0062;	
    // (ꪡ) TAI VIET LETTER HIGH FO	[2EB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA1, 0x0062 };
    uint32_t const ces[9] = { 0x2EB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_196)
{
    // AAB5 AAA1 0021;	
    // (ꪵꪡ) TAI VIET VOWEL E, TAI VIET LETTER HIGH FO	[2EB1 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA1, 0x0021 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_197)
{
    // AAB5 AAA1 003F;	
    // (ꪵꪡ) TAI VIET VOWEL E, TAI VIET LETTER HIGH FO	[2EB1 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA1, 0x003F };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_198)
{
    // AAB5 AAA1 0061;	
    // (ꪵꪡ) TAI VIET VOWEL E, TAI VIET LETTER HIGH FO	[2EB1 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_199)
{
    // AAB5 AAA1 0041;	
    // (ꪵꪡ) TAI VIET VOWEL E, TAI VIET LETTER HIGH FO	[2EB1 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA1, 0x0041 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_200)
{
    // AAB5 AAA1 0062;	
    // (ꪵꪡ) TAI VIET VOWEL E, TAI VIET LETTER HIGH FO	[2EB1 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA1, 0x0062 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_201)
{
    // AAB6 AAA1 0021;	
    // (ꪶꪡ) TAI VIET VOWEL O, TAI VIET LETTER HIGH FO	[2EB1 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA1, 0x0021 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_202)
{
    // AAB6 AAA1 003F;	
    // (ꪶꪡ) TAI VIET VOWEL O, TAI VIET LETTER HIGH FO	[2EB1 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA1, 0x003F };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_203)
{
    // AAB6 AAA1 0061;	
    // (ꪶꪡ) TAI VIET VOWEL O, TAI VIET LETTER HIGH FO	[2EB1 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_204)
{
    // AAB6 AAA1 0041;	
    // (ꪶꪡ) TAI VIET VOWEL O, TAI VIET LETTER HIGH FO	[2EB1 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA1, 0x0041 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_205)
{
    // AAB6 AAA1 0062;	
    // (ꪶꪡ) TAI VIET VOWEL O, TAI VIET LETTER HIGH FO	[2EB1 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA1, 0x0062 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_206)
{
    // AAB9 AAA1 0021;	
    // (ꪹꪡ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH FO	[2EB1 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA1, 0x0021 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_207)
{
    // AAB9 AAA1 003F;	
    // (ꪹꪡ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH FO	[2EB1 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA1, 0x003F };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_208)
{
    // AAB9 AAA1 0061;	
    // (ꪹꪡ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH FO	[2EB1 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_209)
{
    // AAB9 AAA1 0041;	
    // (ꪹꪡ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH FO	[2EB1 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA1, 0x0041 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_210)
{
    // AAB9 AAA1 0062;	
    // (ꪹꪡ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH FO	[2EB1 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA1, 0x0062 };
    uint32_t const ces[12] = { 0x2EB1, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_211)
{
    // AABB AAA1 0021;	
    // (ꪻꪡ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH FO	[2EB1 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA1, 0x0021 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_212)
{
    // AABB AAA1 003F;	
    // (ꪻꪡ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH FO	[2EB1 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA1, 0x003F };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_213)
{
    // AABB AAA1 0061;	
    // (ꪻꪡ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH FO	[2EB1 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_214)
{
    // AABB AAA1 0041;	
    // (ꪻꪡ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH FO	[2EB1 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA1, 0x0041 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_215)
{
    // AABB AAA1 0062;	
    // (ꪻꪡ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH FO	[2EB1 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA1, 0x0062 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_216)
{
    // AABC AAA1 0021;	
    // (ꪼꪡ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH FO	[2EB1 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA1, 0x0021 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_217)
{
    // AABC AAA1 003F;	
    // (ꪼꪡ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH FO	[2EB1 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA1, 0x003F };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_218)
{
    // AABC AAA1 0061;	
    // (ꪼꪡ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH FO	[2EB1 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA1, 0x0061 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_219)
{
    // AABC AAA1 0041;	
    // (ꪼꪡ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH FO	[2EB1 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA1, 0x0041 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_220)
{
    // AABC AAA1 0062;	
    // (ꪼꪡ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH FO	[2EB1 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA1, 0x0062 };
    uint32_t const ces[12] = { 0x2EB1, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_221)
{
    // AAA2 0021;	
    // (ꪢ) TAI VIET LETTER LOW MO	[2EB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA2, 0x0021 };
    uint32_t const ces[9] = { 0x2EB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_222)
{
    // AAA2 003F;	
    // (ꪢ) TAI VIET LETTER LOW MO	[2EB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA2, 0x003F };
    uint32_t const ces[9] = { 0x2EB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_223)
{
    // AAA2 0061;	
    // (ꪢ) TAI VIET LETTER LOW MO	[2EB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA2, 0x0061 };
    uint32_t const ces[9] = { 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_224)
{
    // AAA2 0041;	
    // (ꪢ) TAI VIET LETTER LOW MO	[2EB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA2, 0x0041 };
    uint32_t const ces[9] = { 0x2EB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_225)
{
    // AAA2 0062;	
    // (ꪢ) TAI VIET LETTER LOW MO	[2EB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA2, 0x0062 };
    uint32_t const ces[9] = { 0x2EB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_226)
{
    // AAB5 AAA2 0021;	
    // (ꪵꪢ) TAI VIET VOWEL E, TAI VIET LETTER LOW MO	[2EB2 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_227)
{
    // AAB5 AAA2 003F;	
    // (ꪵꪢ) TAI VIET VOWEL E, TAI VIET LETTER LOW MO	[2EB2 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA2, 0x003F };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_228)
{
    // AAB5 AAA2 0061;	
    // (ꪵꪢ) TAI VIET VOWEL E, TAI VIET LETTER LOW MO	[2EB2 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_229)
{
    // AAB5 AAA2 0041;	
    // (ꪵꪢ) TAI VIET VOWEL E, TAI VIET LETTER LOW MO	[2EB2 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_230)
{
    // AAB5 AAA2 0062;	
    // (ꪵꪢ) TAI VIET VOWEL E, TAI VIET LETTER LOW MO	[2EB2 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_231)
{
    // AAB6 AAA2 0021;	
    // (ꪶꪢ) TAI VIET VOWEL O, TAI VIET LETTER LOW MO	[2EB2 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_232)
{
    // AAB6 AAA2 003F;	
    // (ꪶꪢ) TAI VIET VOWEL O, TAI VIET LETTER LOW MO	[2EB2 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA2, 0x003F };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_233)
{
    // AAB6 AAA2 0061;	
    // (ꪶꪢ) TAI VIET VOWEL O, TAI VIET LETTER LOW MO	[2EB2 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_234)
{
    // AAB6 AAA2 0041;	
    // (ꪶꪢ) TAI VIET VOWEL O, TAI VIET LETTER LOW MO	[2EB2 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_235)
{
    // AAB6 AAA2 0062;	
    // (ꪶꪢ) TAI VIET VOWEL O, TAI VIET LETTER LOW MO	[2EB2 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_236)
{
    // AAB9 AAA2 0021;	
    // (ꪹꪢ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW MO	[2EB2 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_237)
{
    // AAB9 AAA2 003F;	
    // (ꪹꪢ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW MO	[2EB2 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA2, 0x003F };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_238)
{
    // AAB9 AAA2 0061;	
    // (ꪹꪢ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW MO	[2EB2 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_239)
{
    // AAB9 AAA2 0041;	
    // (ꪹꪢ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW MO	[2EB2 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_240)
{
    // AAB9 AAA2 0062;	
    // (ꪹꪢ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW MO	[2EB2 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EB2, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_241)
{
    // AABB AAA2 0021;	
    // (ꪻꪢ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW MO	[2EB2 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_242)
{
    // AABB AAA2 003F;	
    // (ꪻꪢ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW MO	[2EB2 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA2, 0x003F };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_243)
{
    // AABB AAA2 0061;	
    // (ꪻꪢ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW MO	[2EB2 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_244)
{
    // AABB AAA2 0041;	
    // (ꪻꪢ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW MO	[2EB2 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_245)
{
    // AABB AAA2 0062;	
    // (ꪻꪢ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW MO	[2EB2 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_246)
{
    // AABC AAA2 0021;	
    // (ꪼꪢ) TAI VIET VOWEL AY, TAI VIET LETTER LOW MO	[2EB2 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA2, 0x0021 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_247)
{
    // AABC AAA2 003F;	
    // (ꪼꪢ) TAI VIET VOWEL AY, TAI VIET LETTER LOW MO	[2EB2 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA2, 0x003F };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_248)
{
    // AABC AAA2 0061;	
    // (ꪼꪢ) TAI VIET VOWEL AY, TAI VIET LETTER LOW MO	[2EB2 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA2, 0x0061 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_249)
{
    // AABC AAA2 0041;	
    // (ꪼꪢ) TAI VIET VOWEL AY, TAI VIET LETTER LOW MO	[2EB2 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA2, 0x0041 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_250)
{
    // AABC AAA2 0062;	
    // (ꪼꪢ) TAI VIET VOWEL AY, TAI VIET LETTER LOW MO	[2EB2 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA2, 0x0062 };
    uint32_t const ces[12] = { 0x2EB2, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_251)
{
    // AAA3 0021;	
    // (ꪣ) TAI VIET LETTER HIGH MO	[2EB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA3, 0x0021 };
    uint32_t const ces[9] = { 0x2EB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_252)
{
    // AAA3 003F;	
    // (ꪣ) TAI VIET LETTER HIGH MO	[2EB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA3, 0x003F };
    uint32_t const ces[9] = { 0x2EB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_253)
{
    // AAA3 0061;	
    // (ꪣ) TAI VIET LETTER HIGH MO	[2EB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA3, 0x0061 };
    uint32_t const ces[9] = { 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_254)
{
    // AAA3 0041;	
    // (ꪣ) TAI VIET LETTER HIGH MO	[2EB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA3, 0x0041 };
    uint32_t const ces[9] = { 0x2EB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_255)
{
    // AAA3 0062;	
    // (ꪣ) TAI VIET LETTER HIGH MO	[2EB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA3, 0x0062 };
    uint32_t const ces[9] = { 0x2EB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_256)
{
    // AAB5 AAA3 0021;	
    // (ꪵꪣ) TAI VIET VOWEL E, TAI VIET LETTER HIGH MO	[2EB3 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA3, 0x0021 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_257)
{
    // AAB5 AAA3 003F;	
    // (ꪵꪣ) TAI VIET VOWEL E, TAI VIET LETTER HIGH MO	[2EB3 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA3, 0x003F };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_258)
{
    // AAB5 AAA3 0061;	
    // (ꪵꪣ) TAI VIET VOWEL E, TAI VIET LETTER HIGH MO	[2EB3 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_259)
{
    // AAB5 AAA3 0041;	
    // (ꪵꪣ) TAI VIET VOWEL E, TAI VIET LETTER HIGH MO	[2EB3 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA3, 0x0041 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_260)
{
    // AAB5 AAA3 0062;	
    // (ꪵꪣ) TAI VIET VOWEL E, TAI VIET LETTER HIGH MO	[2EB3 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA3, 0x0062 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_261)
{
    // AAB6 AAA3 0021;	
    // (ꪶꪣ) TAI VIET VOWEL O, TAI VIET LETTER HIGH MO	[2EB3 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA3, 0x0021 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_262)
{
    // AAB6 AAA3 003F;	
    // (ꪶꪣ) TAI VIET VOWEL O, TAI VIET LETTER HIGH MO	[2EB3 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA3, 0x003F };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_263)
{
    // AAB6 AAA3 0061;	
    // (ꪶꪣ) TAI VIET VOWEL O, TAI VIET LETTER HIGH MO	[2EB3 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_264)
{
    // AAB6 AAA3 0041;	
    // (ꪶꪣ) TAI VIET VOWEL O, TAI VIET LETTER HIGH MO	[2EB3 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA3, 0x0041 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_265)
{
    // AAB6 AAA3 0062;	
    // (ꪶꪣ) TAI VIET VOWEL O, TAI VIET LETTER HIGH MO	[2EB3 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA3, 0x0062 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_266)
{
    // AAB9 AAA3 0021;	
    // (ꪹꪣ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH MO	[2EB3 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA3, 0x0021 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_267)
{
    // AAB9 AAA3 003F;	
    // (ꪹꪣ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH MO	[2EB3 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA3, 0x003F };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_268)
{
    // AAB9 AAA3 0061;	
    // (ꪹꪣ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH MO	[2EB3 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_269)
{
    // AAB9 AAA3 0041;	
    // (ꪹꪣ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH MO	[2EB3 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA3, 0x0041 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_270)
{
    // AAB9 AAA3 0062;	
    // (ꪹꪣ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH MO	[2EB3 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA3, 0x0062 };
    uint32_t const ces[12] = { 0x2EB3, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_271)
{
    // AABB AAA3 0021;	
    // (ꪻꪣ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH MO	[2EB3 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA3, 0x0021 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_272)
{
    // AABB AAA3 003F;	
    // (ꪻꪣ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH MO	[2EB3 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA3, 0x003F };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_273)
{
    // AABB AAA3 0061;	
    // (ꪻꪣ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH MO	[2EB3 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_274)
{
    // AABB AAA3 0041;	
    // (ꪻꪣ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH MO	[2EB3 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA3, 0x0041 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_275)
{
    // AABB AAA3 0062;	
    // (ꪻꪣ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH MO	[2EB3 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA3, 0x0062 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_276)
{
    // AABC AAA3 0021;	
    // (ꪼꪣ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH MO	[2EB3 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA3, 0x0021 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_277)
{
    // AABC AAA3 003F;	
    // (ꪼꪣ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH MO	[2EB3 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA3, 0x003F };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_278)
{
    // AABC AAA3 0061;	
    // (ꪼꪣ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH MO	[2EB3 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA3, 0x0061 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_279)
{
    // AABC AAA3 0041;	
    // (ꪼꪣ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH MO	[2EB3 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA3, 0x0041 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_280)
{
    // AABC AAA3 0062;	
    // (ꪼꪣ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH MO	[2EB3 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA3, 0x0062 };
    uint32_t const ces[12] = { 0x2EB3, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_281)
{
    // AAA4 0021;	
    // (ꪤ) TAI VIET LETTER LOW YO	[2EB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA4, 0x0021 };
    uint32_t const ces[9] = { 0x2EB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_282)
{
    // AAA4 003F;	
    // (ꪤ) TAI VIET LETTER LOW YO	[2EB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA4, 0x003F };
    uint32_t const ces[9] = { 0x2EB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_283)
{
    // AAA4 0061;	
    // (ꪤ) TAI VIET LETTER LOW YO	[2EB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA4, 0x0061 };
    uint32_t const ces[9] = { 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_284)
{
    // AAA4 0041;	
    // (ꪤ) TAI VIET LETTER LOW YO	[2EB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA4, 0x0041 };
    uint32_t const ces[9] = { 0x2EB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_285)
{
    // AAA4 0062;	
    // (ꪤ) TAI VIET LETTER LOW YO	[2EB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA4, 0x0062 };
    uint32_t const ces[9] = { 0x2EB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_286)
{
    // AAB5 AAA4 0021;	
    // (ꪵꪤ) TAI VIET VOWEL E, TAI VIET LETTER LOW YO	[2EB4 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA4, 0x0021 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_287)
{
    // AAB5 AAA4 003F;	
    // (ꪵꪤ) TAI VIET VOWEL E, TAI VIET LETTER LOW YO	[2EB4 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA4, 0x003F };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_288)
{
    // AAB5 AAA4 0061;	
    // (ꪵꪤ) TAI VIET VOWEL E, TAI VIET LETTER LOW YO	[2EB4 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_289)
{
    // AAB5 AAA4 0041;	
    // (ꪵꪤ) TAI VIET VOWEL E, TAI VIET LETTER LOW YO	[2EB4 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA4, 0x0041 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_290)
{
    // AAB5 AAA4 0062;	
    // (ꪵꪤ) TAI VIET VOWEL E, TAI VIET LETTER LOW YO	[2EB4 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA4, 0x0062 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_291)
{
    // AAB6 AAA4 0021;	
    // (ꪶꪤ) TAI VIET VOWEL O, TAI VIET LETTER LOW YO	[2EB4 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA4, 0x0021 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_292)
{
    // AAB6 AAA4 003F;	
    // (ꪶꪤ) TAI VIET VOWEL O, TAI VIET LETTER LOW YO	[2EB4 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA4, 0x003F };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_293)
{
    // AAB6 AAA4 0061;	
    // (ꪶꪤ) TAI VIET VOWEL O, TAI VIET LETTER LOW YO	[2EB4 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_294)
{
    // AAB6 AAA4 0041;	
    // (ꪶꪤ) TAI VIET VOWEL O, TAI VIET LETTER LOW YO	[2EB4 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA4, 0x0041 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_295)
{
    // AAB6 AAA4 0062;	
    // (ꪶꪤ) TAI VIET VOWEL O, TAI VIET LETTER LOW YO	[2EB4 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA4, 0x0062 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_296)
{
    // AAB9 AAA4 0021;	
    // (ꪹꪤ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW YO	[2EB4 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA4, 0x0021 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_297)
{
    // AAB9 AAA4 003F;	
    // (ꪹꪤ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW YO	[2EB4 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA4, 0x003F };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_298)
{
    // AAB9 AAA4 0061;	
    // (ꪹꪤ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW YO	[2EB4 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_299)
{
    // AAB9 AAA4 0041;	
    // (ꪹꪤ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW YO	[2EB4 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA4, 0x0041 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_300)
{
    // AAB9 AAA4 0062;	
    // (ꪹꪤ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW YO	[2EB4 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA4, 0x0062 };
    uint32_t const ces[12] = { 0x2EB4, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_301)
{
    // AABB AAA4 0021;	
    // (ꪻꪤ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW YO	[2EB4 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA4, 0x0021 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_302)
{
    // AABB AAA4 003F;	
    // (ꪻꪤ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW YO	[2EB4 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA4, 0x003F };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_303)
{
    // AABB AAA4 0061;	
    // (ꪻꪤ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW YO	[2EB4 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_304)
{
    // AABB AAA4 0041;	
    // (ꪻꪤ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW YO	[2EB4 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA4, 0x0041 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_305)
{
    // AABB AAA4 0062;	
    // (ꪻꪤ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW YO	[2EB4 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA4, 0x0062 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_306)
{
    // AABC AAA4 0021;	
    // (ꪼꪤ) TAI VIET VOWEL AY, TAI VIET LETTER LOW YO	[2EB4 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA4, 0x0021 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_307)
{
    // AABC AAA4 003F;	
    // (ꪼꪤ) TAI VIET VOWEL AY, TAI VIET LETTER LOW YO	[2EB4 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA4, 0x003F };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_308)
{
    // AABC AAA4 0061;	
    // (ꪼꪤ) TAI VIET VOWEL AY, TAI VIET LETTER LOW YO	[2EB4 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA4, 0x0061 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_309)
{
    // AABC AAA4 0041;	
    // (ꪼꪤ) TAI VIET VOWEL AY, TAI VIET LETTER LOW YO	[2EB4 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA4, 0x0041 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_310)
{
    // AABC AAA4 0062;	
    // (ꪼꪤ) TAI VIET VOWEL AY, TAI VIET LETTER LOW YO	[2EB4 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA4, 0x0062 };
    uint32_t const ces[12] = { 0x2EB4, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_311)
{
    // AAA5 0021;	
    // (ꪥ) TAI VIET LETTER HIGH YO	[2EB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA5, 0x0021 };
    uint32_t const ces[9] = { 0x2EB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_312)
{
    // AAA5 003F;	
    // (ꪥ) TAI VIET LETTER HIGH YO	[2EB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA5, 0x003F };
    uint32_t const ces[9] = { 0x2EB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_313)
{
    // AAA5 0061;	
    // (ꪥ) TAI VIET LETTER HIGH YO	[2EB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA5, 0x0061 };
    uint32_t const ces[9] = { 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_314)
{
    // AAA5 0041;	
    // (ꪥ) TAI VIET LETTER HIGH YO	[2EB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA5, 0x0041 };
    uint32_t const ces[9] = { 0x2EB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_315)
{
    // AAA5 0062;	
    // (ꪥ) TAI VIET LETTER HIGH YO	[2EB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA5, 0x0062 };
    uint32_t const ces[9] = { 0x2EB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_316)
{
    // AAB5 AAA5 0021;	
    // (ꪵꪥ) TAI VIET VOWEL E, TAI VIET LETTER HIGH YO	[2EB5 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA5, 0x0021 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_317)
{
    // AAB5 AAA5 003F;	
    // (ꪵꪥ) TAI VIET VOWEL E, TAI VIET LETTER HIGH YO	[2EB5 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA5, 0x003F };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_318)
{
    // AAB5 AAA5 0061;	
    // (ꪵꪥ) TAI VIET VOWEL E, TAI VIET LETTER HIGH YO	[2EB5 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_319)
{
    // AAB5 AAA5 0041;	
    // (ꪵꪥ) TAI VIET VOWEL E, TAI VIET LETTER HIGH YO	[2EB5 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA5, 0x0041 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_320)
{
    // AAB5 AAA5 0062;	
    // (ꪵꪥ) TAI VIET VOWEL E, TAI VIET LETTER HIGH YO	[2EB5 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA5, 0x0062 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_321)
{
    // AAB6 AAA5 0021;	
    // (ꪶꪥ) TAI VIET VOWEL O, TAI VIET LETTER HIGH YO	[2EB5 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA5, 0x0021 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_322)
{
    // AAB6 AAA5 003F;	
    // (ꪶꪥ) TAI VIET VOWEL O, TAI VIET LETTER HIGH YO	[2EB5 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA5, 0x003F };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_323)
{
    // AAB6 AAA5 0061;	
    // (ꪶꪥ) TAI VIET VOWEL O, TAI VIET LETTER HIGH YO	[2EB5 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_324)
{
    // AAB6 AAA5 0041;	
    // (ꪶꪥ) TAI VIET VOWEL O, TAI VIET LETTER HIGH YO	[2EB5 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA5, 0x0041 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_325)
{
    // AAB6 AAA5 0062;	
    // (ꪶꪥ) TAI VIET VOWEL O, TAI VIET LETTER HIGH YO	[2EB5 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA5, 0x0062 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_326)
{
    // AAB9 AAA5 0021;	
    // (ꪹꪥ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH YO	[2EB5 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA5, 0x0021 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_327)
{
    // AAB9 AAA5 003F;	
    // (ꪹꪥ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH YO	[2EB5 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA5, 0x003F };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_328)
{
    // AAB9 AAA5 0061;	
    // (ꪹꪥ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH YO	[2EB5 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_329)
{
    // AAB9 AAA5 0041;	
    // (ꪹꪥ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH YO	[2EB5 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA5, 0x0041 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_330)
{
    // AAB9 AAA5 0062;	
    // (ꪹꪥ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH YO	[2EB5 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA5, 0x0062 };
    uint32_t const ces[12] = { 0x2EB5, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_331)
{
    // AABB AAA5 0021;	
    // (ꪻꪥ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH YO	[2EB5 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA5, 0x0021 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_332)
{
    // AABB AAA5 003F;	
    // (ꪻꪥ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH YO	[2EB5 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA5, 0x003F };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_333)
{
    // AABB AAA5 0061;	
    // (ꪻꪥ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH YO	[2EB5 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_334)
{
    // AABB AAA5 0041;	
    // (ꪻꪥ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH YO	[2EB5 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA5, 0x0041 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_335)
{
    // AABB AAA5 0062;	
    // (ꪻꪥ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH YO	[2EB5 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA5, 0x0062 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_336)
{
    // AABC AAA5 0021;	
    // (ꪼꪥ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH YO	[2EB5 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA5, 0x0021 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_337)
{
    // AABC AAA5 003F;	
    // (ꪼꪥ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH YO	[2EB5 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA5, 0x003F };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_338)
{
    // AABC AAA5 0061;	
    // (ꪼꪥ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH YO	[2EB5 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA5, 0x0061 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_339)
{
    // AABC AAA5 0041;	
    // (ꪼꪥ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH YO	[2EB5 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA5, 0x0041 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_340)
{
    // AABC AAA5 0062;	
    // (ꪼꪥ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH YO	[2EB5 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA5, 0x0062 };
    uint32_t const ces[12] = { 0x2EB5, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_341)
{
    // AAA6 0021;	
    // (ꪦ) TAI VIET LETTER LOW RO	[2EB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA6, 0x0021 };
    uint32_t const ces[9] = { 0x2EB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_342)
{
    // AAA6 003F;	
    // (ꪦ) TAI VIET LETTER LOW RO	[2EB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA6, 0x003F };
    uint32_t const ces[9] = { 0x2EB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_343)
{
    // AAA6 0061;	
    // (ꪦ) TAI VIET LETTER LOW RO	[2EB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA6, 0x0061 };
    uint32_t const ces[9] = { 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_344)
{
    // AAA6 0041;	
    // (ꪦ) TAI VIET LETTER LOW RO	[2EB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA6, 0x0041 };
    uint32_t const ces[9] = { 0x2EB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_345)
{
    // AAA6 0062;	
    // (ꪦ) TAI VIET LETTER LOW RO	[2EB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA6, 0x0062 };
    uint32_t const ces[9] = { 0x2EB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_346)
{
    // AAB5 AAA6 0021;	
    // (ꪵꪦ) TAI VIET VOWEL E, TAI VIET LETTER LOW RO	[2EB6 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA6, 0x0021 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_347)
{
    // AAB5 AAA6 003F;	
    // (ꪵꪦ) TAI VIET VOWEL E, TAI VIET LETTER LOW RO	[2EB6 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA6, 0x003F };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_348)
{
    // AAB5 AAA6 0061;	
    // (ꪵꪦ) TAI VIET VOWEL E, TAI VIET LETTER LOW RO	[2EB6 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_349)
{
    // AAB5 AAA6 0041;	
    // (ꪵꪦ) TAI VIET VOWEL E, TAI VIET LETTER LOW RO	[2EB6 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA6, 0x0041 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_350)
{
    // AAB5 AAA6 0062;	
    // (ꪵꪦ) TAI VIET VOWEL E, TAI VIET LETTER LOW RO	[2EB6 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA6, 0x0062 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_351)
{
    // AAB6 AAA6 0021;	
    // (ꪶꪦ) TAI VIET VOWEL O, TAI VIET LETTER LOW RO	[2EB6 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA6, 0x0021 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_352)
{
    // AAB6 AAA6 003F;	
    // (ꪶꪦ) TAI VIET VOWEL O, TAI VIET LETTER LOW RO	[2EB6 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA6, 0x003F };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_353)
{
    // AAB6 AAA6 0061;	
    // (ꪶꪦ) TAI VIET VOWEL O, TAI VIET LETTER LOW RO	[2EB6 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_354)
{
    // AAB6 AAA6 0041;	
    // (ꪶꪦ) TAI VIET VOWEL O, TAI VIET LETTER LOW RO	[2EB6 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA6, 0x0041 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_355)
{
    // AAB6 AAA6 0062;	
    // (ꪶꪦ) TAI VIET VOWEL O, TAI VIET LETTER LOW RO	[2EB6 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA6, 0x0062 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_356)
{
    // AAB9 AAA6 0021;	
    // (ꪹꪦ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW RO	[2EB6 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA6, 0x0021 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_357)
{
    // AAB9 AAA6 003F;	
    // (ꪹꪦ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW RO	[2EB6 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA6, 0x003F };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_358)
{
    // AAB9 AAA6 0061;	
    // (ꪹꪦ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW RO	[2EB6 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_359)
{
    // AAB9 AAA6 0041;	
    // (ꪹꪦ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW RO	[2EB6 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA6, 0x0041 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_360)
{
    // AAB9 AAA6 0062;	
    // (ꪹꪦ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW RO	[2EB6 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA6, 0x0062 };
    uint32_t const ces[12] = { 0x2EB6, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_361)
{
    // AABB AAA6 0021;	
    // (ꪻꪦ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW RO	[2EB6 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA6, 0x0021 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_362)
{
    // AABB AAA6 003F;	
    // (ꪻꪦ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW RO	[2EB6 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA6, 0x003F };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_363)
{
    // AABB AAA6 0061;	
    // (ꪻꪦ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW RO	[2EB6 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_364)
{
    // AABB AAA6 0041;	
    // (ꪻꪦ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW RO	[2EB6 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA6, 0x0041 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_365)
{
    // AABB AAA6 0062;	
    // (ꪻꪦ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW RO	[2EB6 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA6, 0x0062 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_366)
{
    // AABC AAA6 0021;	
    // (ꪼꪦ) TAI VIET VOWEL AY, TAI VIET LETTER LOW RO	[2EB6 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA6, 0x0021 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_367)
{
    // AABC AAA6 003F;	
    // (ꪼꪦ) TAI VIET VOWEL AY, TAI VIET LETTER LOW RO	[2EB6 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA6, 0x003F };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_368)
{
    // AABC AAA6 0061;	
    // (ꪼꪦ) TAI VIET VOWEL AY, TAI VIET LETTER LOW RO	[2EB6 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA6, 0x0061 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_369)
{
    // AABC AAA6 0041;	
    // (ꪼꪦ) TAI VIET VOWEL AY, TAI VIET LETTER LOW RO	[2EB6 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA6, 0x0041 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_370)
{
    // AABC AAA6 0062;	
    // (ꪼꪦ) TAI VIET VOWEL AY, TAI VIET LETTER LOW RO	[2EB6 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA6, 0x0062 };
    uint32_t const ces[12] = { 0x2EB6, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_371)
{
    // AAA7 0021;	
    // (ꪧ) TAI VIET LETTER HIGH RO	[2EB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA7, 0x0021 };
    uint32_t const ces[9] = { 0x2EB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_372)
{
    // AAA7 003F;	
    // (ꪧ) TAI VIET LETTER HIGH RO	[2EB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA7, 0x003F };
    uint32_t const ces[9] = { 0x2EB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_373)
{
    // AAA7 0061;	
    // (ꪧ) TAI VIET LETTER HIGH RO	[2EB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA7, 0x0061 };
    uint32_t const ces[9] = { 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_374)
{
    // AAA7 0041;	
    // (ꪧ) TAI VIET LETTER HIGH RO	[2EB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA7, 0x0041 };
    uint32_t const ces[9] = { 0x2EB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_375)
{
    // AAA7 0062;	
    // (ꪧ) TAI VIET LETTER HIGH RO	[2EB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA7, 0x0062 };
    uint32_t const ces[9] = { 0x2EB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_376)
{
    // AAB5 AAA7 0021;	
    // (ꪵꪧ) TAI VIET VOWEL E, TAI VIET LETTER HIGH RO	[2EB7 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_377)
{
    // AAB5 AAA7 003F;	
    // (ꪵꪧ) TAI VIET VOWEL E, TAI VIET LETTER HIGH RO	[2EB7 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA7, 0x003F };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_378)
{
    // AAB5 AAA7 0061;	
    // (ꪵꪧ) TAI VIET VOWEL E, TAI VIET LETTER HIGH RO	[2EB7 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_379)
{
    // AAB5 AAA7 0041;	
    // (ꪵꪧ) TAI VIET VOWEL E, TAI VIET LETTER HIGH RO	[2EB7 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_380)
{
    // AAB5 AAA7 0062;	
    // (ꪵꪧ) TAI VIET VOWEL E, TAI VIET LETTER HIGH RO	[2EB7 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_381)
{
    // AAB6 AAA7 0021;	
    // (ꪶꪧ) TAI VIET VOWEL O, TAI VIET LETTER HIGH RO	[2EB7 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_382)
{
    // AAB6 AAA7 003F;	
    // (ꪶꪧ) TAI VIET VOWEL O, TAI VIET LETTER HIGH RO	[2EB7 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA7, 0x003F };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_383)
{
    // AAB6 AAA7 0061;	
    // (ꪶꪧ) TAI VIET VOWEL O, TAI VIET LETTER HIGH RO	[2EB7 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_384)
{
    // AAB6 AAA7 0041;	
    // (ꪶꪧ) TAI VIET VOWEL O, TAI VIET LETTER HIGH RO	[2EB7 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_385)
{
    // AAB6 AAA7 0062;	
    // (ꪶꪧ) TAI VIET VOWEL O, TAI VIET LETTER HIGH RO	[2EB7 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_386)
{
    // AAB9 AAA7 0021;	
    // (ꪹꪧ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH RO	[2EB7 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_387)
{
    // AAB9 AAA7 003F;	
    // (ꪹꪧ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH RO	[2EB7 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA7, 0x003F };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_388)
{
    // AAB9 AAA7 0061;	
    // (ꪹꪧ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH RO	[2EB7 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_389)
{
    // AAB9 AAA7 0041;	
    // (ꪹꪧ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH RO	[2EB7 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_390)
{
    // AAB9 AAA7 0062;	
    // (ꪹꪧ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH RO	[2EB7 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EB7, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_391)
{
    // AABB AAA7 0021;	
    // (ꪻꪧ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH RO	[2EB7 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_392)
{
    // AABB AAA7 003F;	
    // (ꪻꪧ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH RO	[2EB7 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA7, 0x003F };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_393)
{
    // AABB AAA7 0061;	
    // (ꪻꪧ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH RO	[2EB7 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_394)
{
    // AABB AAA7 0041;	
    // (ꪻꪧ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH RO	[2EB7 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_395)
{
    // AABB AAA7 0062;	
    // (ꪻꪧ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH RO	[2EB7 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_396)
{
    // AABC AAA7 0021;	
    // (ꪼꪧ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH RO	[2EB7 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA7, 0x0021 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_397)
{
    // AABC AAA7 003F;	
    // (ꪼꪧ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH RO	[2EB7 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA7, 0x003F };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_398)
{
    // AABC AAA7 0061;	
    // (ꪼꪧ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH RO	[2EB7 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA7, 0x0061 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_399)
{
    // AABC AAA7 0041;	
    // (ꪼꪧ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH RO	[2EB7 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA7, 0x0041 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_400)
{
    // AABC AAA7 0062;	
    // (ꪼꪧ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH RO	[2EB7 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA7, 0x0062 };
    uint32_t const ces[12] = { 0x2EB7, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_401)
{
    // AAA8 0021;	
    // (ꪨ) TAI VIET LETTER LOW LO	[2EB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA8, 0x0021 };
    uint32_t const ces[9] = { 0x2EB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_402)
{
    // AAA8 003F;	
    // (ꪨ) TAI VIET LETTER LOW LO	[2EB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA8, 0x003F };
    uint32_t const ces[9] = { 0x2EB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_403)
{
    // AAA8 0061;	
    // (ꪨ) TAI VIET LETTER LOW LO	[2EB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA8, 0x0061 };
    uint32_t const ces[9] = { 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_404)
{
    // AAA8 0041;	
    // (ꪨ) TAI VIET LETTER LOW LO	[2EB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA8, 0x0041 };
    uint32_t const ces[9] = { 0x2EB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_405)
{
    // AAA8 0062;	
    // (ꪨ) TAI VIET LETTER LOW LO	[2EB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA8, 0x0062 };
    uint32_t const ces[9] = { 0x2EB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_406)
{
    // AAB5 AAA8 0021;	
    // (ꪵꪨ) TAI VIET VOWEL E, TAI VIET LETTER LOW LO	[2EB8 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA8, 0x0021 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_407)
{
    // AAB5 AAA8 003F;	
    // (ꪵꪨ) TAI VIET VOWEL E, TAI VIET LETTER LOW LO	[2EB8 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA8, 0x003F };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_408)
{
    // AAB5 AAA8 0061;	
    // (ꪵꪨ) TAI VIET VOWEL E, TAI VIET LETTER LOW LO	[2EB8 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_409)
{
    // AAB5 AAA8 0041;	
    // (ꪵꪨ) TAI VIET VOWEL E, TAI VIET LETTER LOW LO	[2EB8 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA8, 0x0041 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_410)
{
    // AAB5 AAA8 0062;	
    // (ꪵꪨ) TAI VIET VOWEL E, TAI VIET LETTER LOW LO	[2EB8 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA8, 0x0062 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_411)
{
    // AAB6 AAA8 0021;	
    // (ꪶꪨ) TAI VIET VOWEL O, TAI VIET LETTER LOW LO	[2EB8 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA8, 0x0021 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_412)
{
    // AAB6 AAA8 003F;	
    // (ꪶꪨ) TAI VIET VOWEL O, TAI VIET LETTER LOW LO	[2EB8 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA8, 0x003F };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_413)
{
    // AAB6 AAA8 0061;	
    // (ꪶꪨ) TAI VIET VOWEL O, TAI VIET LETTER LOW LO	[2EB8 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_414)
{
    // AAB6 AAA8 0041;	
    // (ꪶꪨ) TAI VIET VOWEL O, TAI VIET LETTER LOW LO	[2EB8 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA8, 0x0041 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_415)
{
    // AAB6 AAA8 0062;	
    // (ꪶꪨ) TAI VIET VOWEL O, TAI VIET LETTER LOW LO	[2EB8 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA8, 0x0062 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_416)
{
    // AAB9 AAA8 0021;	
    // (ꪹꪨ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW LO	[2EB8 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA8, 0x0021 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_417)
{
    // AAB9 AAA8 003F;	
    // (ꪹꪨ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW LO	[2EB8 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA8, 0x003F };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_418)
{
    // AAB9 AAA8 0061;	
    // (ꪹꪨ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW LO	[2EB8 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_419)
{
    // AAB9 AAA8 0041;	
    // (ꪹꪨ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW LO	[2EB8 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA8, 0x0041 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_420)
{
    // AAB9 AAA8 0062;	
    // (ꪹꪨ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW LO	[2EB8 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA8, 0x0062 };
    uint32_t const ces[12] = { 0x2EB8, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_421)
{
    // AABB AAA8 0021;	
    // (ꪻꪨ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW LO	[2EB8 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA8, 0x0021 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_422)
{
    // AABB AAA8 003F;	
    // (ꪻꪨ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW LO	[2EB8 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA8, 0x003F };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_423)
{
    // AABB AAA8 0061;	
    // (ꪻꪨ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW LO	[2EB8 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_424)
{
    // AABB AAA8 0041;	
    // (ꪻꪨ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW LO	[2EB8 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA8, 0x0041 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_425)
{
    // AABB AAA8 0062;	
    // (ꪻꪨ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW LO	[2EB8 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA8, 0x0062 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_426)
{
    // AABC AAA8 0021;	
    // (ꪼꪨ) TAI VIET VOWEL AY, TAI VIET LETTER LOW LO	[2EB8 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA8, 0x0021 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_427)
{
    // AABC AAA8 003F;	
    // (ꪼꪨ) TAI VIET VOWEL AY, TAI VIET LETTER LOW LO	[2EB8 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA8, 0x003F };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_428)
{
    // AABC AAA8 0061;	
    // (ꪼꪨ) TAI VIET VOWEL AY, TAI VIET LETTER LOW LO	[2EB8 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA8, 0x0061 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_429)
{
    // AABC AAA8 0041;	
    // (ꪼꪨ) TAI VIET VOWEL AY, TAI VIET LETTER LOW LO	[2EB8 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA8, 0x0041 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_430)
{
    // AABC AAA8 0062;	
    // (ꪼꪨ) TAI VIET VOWEL AY, TAI VIET LETTER LOW LO	[2EB8 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA8, 0x0062 };
    uint32_t const ces[12] = { 0x2EB8, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_431)
{
    // AAA9 0021;	
    // (ꪩ) TAI VIET LETTER HIGH LO	[2EB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA9, 0x0021 };
    uint32_t const ces[9] = { 0x2EB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_432)
{
    // AAA9 003F;	
    // (ꪩ) TAI VIET LETTER HIGH LO	[2EB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA9, 0x003F };
    uint32_t const ces[9] = { 0x2EB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_433)
{
    // AAA9 0061;	
    // (ꪩ) TAI VIET LETTER HIGH LO	[2EB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA9, 0x0061 };
    uint32_t const ces[9] = { 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_434)
{
    // AAA9 0041;	
    // (ꪩ) TAI VIET LETTER HIGH LO	[2EB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAA9, 0x0041 };
    uint32_t const ces[9] = { 0x2EB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_435)
{
    // AAA9 0062;	
    // (ꪩ) TAI VIET LETTER HIGH LO	[2EB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAA9, 0x0062 };
    uint32_t const ces[9] = { 0x2EB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_436)
{
    // AAB5 AAA9 0021;	
    // (ꪵꪩ) TAI VIET VOWEL E, TAI VIET LETTER HIGH LO	[2EB9 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA9, 0x0021 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_437)
{
    // AAB5 AAA9 003F;	
    // (ꪵꪩ) TAI VIET VOWEL E, TAI VIET LETTER HIGH LO	[2EB9 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA9, 0x003F };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_438)
{
    // AAB5 AAA9 0061;	
    // (ꪵꪩ) TAI VIET VOWEL E, TAI VIET LETTER HIGH LO	[2EB9 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_439)
{
    // AAB5 AAA9 0041;	
    // (ꪵꪩ) TAI VIET VOWEL E, TAI VIET LETTER HIGH LO	[2EB9 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA9, 0x0041 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_440)
{
    // AAB5 AAA9 0062;	
    // (ꪵꪩ) TAI VIET VOWEL E, TAI VIET LETTER HIGH LO	[2EB9 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAA9, 0x0062 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_441)
{
    // AAB6 AAA9 0021;	
    // (ꪶꪩ) TAI VIET VOWEL O, TAI VIET LETTER HIGH LO	[2EB9 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA9, 0x0021 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_442)
{
    // AAB6 AAA9 003F;	
    // (ꪶꪩ) TAI VIET VOWEL O, TAI VIET LETTER HIGH LO	[2EB9 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA9, 0x003F };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_443)
{
    // AAB6 AAA9 0061;	
    // (ꪶꪩ) TAI VIET VOWEL O, TAI VIET LETTER HIGH LO	[2EB9 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_444)
{
    // AAB6 AAA9 0041;	
    // (ꪶꪩ) TAI VIET VOWEL O, TAI VIET LETTER HIGH LO	[2EB9 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA9, 0x0041 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_445)
{
    // AAB6 AAA9 0062;	
    // (ꪶꪩ) TAI VIET VOWEL O, TAI VIET LETTER HIGH LO	[2EB9 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAA9, 0x0062 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_446)
{
    // AAB9 AAA9 0021;	
    // (ꪹꪩ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH LO	[2EB9 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA9, 0x0021 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_447)
{
    // AAB9 AAA9 003F;	
    // (ꪹꪩ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH LO	[2EB9 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA9, 0x003F };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_448)
{
    // AAB9 AAA9 0061;	
    // (ꪹꪩ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH LO	[2EB9 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_449)
{
    // AAB9 AAA9 0041;	
    // (ꪹꪩ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH LO	[2EB9 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA9, 0x0041 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_450)
{
    // AAB9 AAA9 0062;	
    // (ꪹꪩ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH LO	[2EB9 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAA9, 0x0062 };
    uint32_t const ces[12] = { 0x2EB9, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_451)
{
    // AABB AAA9 0021;	
    // (ꪻꪩ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH LO	[2EB9 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA9, 0x0021 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_452)
{
    // AABB AAA9 003F;	
    // (ꪻꪩ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH LO	[2EB9 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA9, 0x003F };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_453)
{
    // AABB AAA9 0061;	
    // (ꪻꪩ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH LO	[2EB9 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_454)
{
    // AABB AAA9 0041;	
    // (ꪻꪩ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH LO	[2EB9 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA9, 0x0041 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_455)
{
    // AABB AAA9 0062;	
    // (ꪻꪩ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH LO	[2EB9 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAA9, 0x0062 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_456)
{
    // AABC AAA9 0021;	
    // (ꪼꪩ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH LO	[2EB9 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA9, 0x0021 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_457)
{
    // AABC AAA9 003F;	
    // (ꪼꪩ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH LO	[2EB9 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA9, 0x003F };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_458)
{
    // AABC AAA9 0061;	
    // (ꪼꪩ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH LO	[2EB9 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA9, 0x0061 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_459)
{
    // AABC AAA9 0041;	
    // (ꪼꪩ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH LO	[2EB9 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA9, 0x0041 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_460)
{
    // AABC AAA9 0062;	
    // (ꪼꪩ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH LO	[2EB9 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAA9, 0x0062 };
    uint32_t const ces[12] = { 0x2EB9, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_461)
{
    // AAAA 0021;	
    // (ꪪ) TAI VIET LETTER LOW VO	[2EBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAA, 0x0021 };
    uint32_t const ces[9] = { 0x2EBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_462)
{
    // AAAA 003F;	
    // (ꪪ) TAI VIET LETTER LOW VO	[2EBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAA, 0x003F };
    uint32_t const ces[9] = { 0x2EBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_463)
{
    // AAAA 0061;	
    // (ꪪ) TAI VIET LETTER LOW VO	[2EBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAA, 0x0061 };
    uint32_t const ces[9] = { 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_464)
{
    // AAAA 0041;	
    // (ꪪ) TAI VIET LETTER LOW VO	[2EBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAA, 0x0041 };
    uint32_t const ces[9] = { 0x2EBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_465)
{
    // AAAA 0062;	
    // (ꪪ) TAI VIET LETTER LOW VO	[2EBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAA, 0x0062 };
    uint32_t const ces[9] = { 0x2EBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_466)
{
    // AAB5 AAAA 0021;	
    // (ꪵꪪ) TAI VIET VOWEL E, TAI VIET LETTER LOW VO	[2EBA 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAA, 0x0021 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_467)
{
    // AAB5 AAAA 003F;	
    // (ꪵꪪ) TAI VIET VOWEL E, TAI VIET LETTER LOW VO	[2EBA 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAA, 0x003F };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_468)
{
    // AAB5 AAAA 0061;	
    // (ꪵꪪ) TAI VIET VOWEL E, TAI VIET LETTER LOW VO	[2EBA 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_469)
{
    // AAB5 AAAA 0041;	
    // (ꪵꪪ) TAI VIET VOWEL E, TAI VIET LETTER LOW VO	[2EBA 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAA, 0x0041 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_470)
{
    // AAB5 AAAA 0062;	
    // (ꪵꪪ) TAI VIET VOWEL E, TAI VIET LETTER LOW VO	[2EBA 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAA, 0x0062 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_471)
{
    // AAB6 AAAA 0021;	
    // (ꪶꪪ) TAI VIET VOWEL O, TAI VIET LETTER LOW VO	[2EBA 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAA, 0x0021 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_472)
{
    // AAB6 AAAA 003F;	
    // (ꪶꪪ) TAI VIET VOWEL O, TAI VIET LETTER LOW VO	[2EBA 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAA, 0x003F };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_473)
{
    // AAB6 AAAA 0061;	
    // (ꪶꪪ) TAI VIET VOWEL O, TAI VIET LETTER LOW VO	[2EBA 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_474)
{
    // AAB6 AAAA 0041;	
    // (ꪶꪪ) TAI VIET VOWEL O, TAI VIET LETTER LOW VO	[2EBA 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAA, 0x0041 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_475)
{
    // AAB6 AAAA 0062;	
    // (ꪶꪪ) TAI VIET VOWEL O, TAI VIET LETTER LOW VO	[2EBA 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAAAA, 0x0062 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_476)
{
    // AAB9 AAAA 0021;	
    // (ꪹꪪ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW VO	[2EBA 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAA, 0x0021 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_477)
{
    // AAB9 AAAA 003F;	
    // (ꪹꪪ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW VO	[2EBA 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAA, 0x003F };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_478)
{
    // AAB9 AAAA 0061;	
    // (ꪹꪪ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW VO	[2EBA 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_479)
{
    // AAB9 AAAA 0041;	
    // (ꪹꪪ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW VO	[2EBA 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAA, 0x0041 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_480)
{
    // AAB9 AAAA 0062;	
    // (ꪹꪪ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW VO	[2EBA 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAAAA, 0x0062 };
    uint32_t const ces[12] = { 0x2EBA, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_481)
{
    // AABB AAAA 0021;	
    // (ꪻꪪ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW VO	[2EBA 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAA, 0x0021 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_482)
{
    // AABB AAAA 003F;	
    // (ꪻꪪ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW VO	[2EBA 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAA, 0x003F };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_483)
{
    // AABB AAAA 0061;	
    // (ꪻꪪ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW VO	[2EBA 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_484)
{
    // AABB AAAA 0041;	
    // (ꪻꪪ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW VO	[2EBA 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAA, 0x0041 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_485)
{
    // AABB AAAA 0062;	
    // (ꪻꪪ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW VO	[2EBA 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAAAA, 0x0062 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_486)
{
    // AABC AAAA 0021;	
    // (ꪼꪪ) TAI VIET VOWEL AY, TAI VIET LETTER LOW VO	[2EBA 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAA, 0x0021 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_487)
{
    // AABC AAAA 003F;	
    // (ꪼꪪ) TAI VIET VOWEL AY, TAI VIET LETTER LOW VO	[2EBA 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAA, 0x003F };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_488)
{
    // AABC AAAA 0061;	
    // (ꪼꪪ) TAI VIET VOWEL AY, TAI VIET LETTER LOW VO	[2EBA 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAA, 0x0061 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_489)
{
    // AABC AAAA 0041;	
    // (ꪼꪪ) TAI VIET VOWEL AY, TAI VIET LETTER LOW VO	[2EBA 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAA, 0x0041 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_490)
{
    // AABC AAAA 0062;	
    // (ꪼꪪ) TAI VIET VOWEL AY, TAI VIET LETTER LOW VO	[2EBA 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAAAA, 0x0062 };
    uint32_t const ces[12] = { 0x2EBA, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_491)
{
    // AAAB 0021;	
    // (ꪫ) TAI VIET LETTER HIGH VO	[2EBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAB, 0x0021 };
    uint32_t const ces[9] = { 0x2EBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_492)
{
    // AAAB 003F;	
    // (ꪫ) TAI VIET LETTER HIGH VO	[2EBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAB, 0x003F };
    uint32_t const ces[9] = { 0x2EBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_493)
{
    // AAAB 0061;	
    // (ꪫ) TAI VIET LETTER HIGH VO	[2EBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAB, 0x0061 };
    uint32_t const ces[9] = { 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_494)
{
    // AAAB 0041;	
    // (ꪫ) TAI VIET LETTER HIGH VO	[2EBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAAAB, 0x0041 };
    uint32_t const ces[9] = { 0x2EBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_495)
{
    // AAAB 0062;	
    // (ꪫ) TAI VIET LETTER HIGH VO	[2EBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAAAB, 0x0062 };
    uint32_t const ces[9] = { 0x2EBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_496)
{
    // AAB5 AAAB 0021;	
    // (ꪵꪫ) TAI VIET VOWEL E, TAI VIET LETTER HIGH VO	[2EBB 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAB, 0x0021 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_497)
{
    // AAB5 AAAB 003F;	
    // (ꪵꪫ) TAI VIET VOWEL E, TAI VIET LETTER HIGH VO	[2EBB 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAB, 0x003F };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_498)
{
    // AAB5 AAAB 0061;	
    // (ꪵꪫ) TAI VIET VOWEL E, TAI VIET LETTER HIGH VO	[2EBB 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAB, 0x0061 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_194_499)
{
    // AAB5 AAAB 0041;	
    // (ꪵꪫ) TAI VIET VOWEL E, TAI VIET LETTER HIGH VO	[2EBB 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAAAB, 0x0041 };
    uint32_t const ces[12] = { 0x2EBB, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

