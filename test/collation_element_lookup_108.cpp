// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_108_000)
{
    // FA82  ; [.FB40.0020.0002][.DED2.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA82

    uint32_t const cps[1] = { 0xfa82 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xded2), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_001)
{
    // FA83  ; [.FB40.0020.0002][.DED9.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA83

    uint32_t const cps[1] = { 0xfa83 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xded9), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_002)
{
    // FA84  ; [.FB40.0020.0002][.DF69.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA84

    uint32_t const cps[1] = { 0xfa84 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xdf69), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_003)
{
    // FA85  ; [.FB40.0020.0002][.DFAD.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA85

    uint32_t const cps[1] = { 0xfa85 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xdfad), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_004)
{
    // FA86  ; [.FB40.0020.0002][.E0D8.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA86

    uint32_t const cps[1] = { 0xfa86 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe0d8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_005)
{
    // FA87  ; [.FB40.0020.0002][.E14E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA87

    uint32_t const cps[1] = { 0xfa87 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe14e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_006)
{
    // FA88  ; [.FB40.0020.0002][.E108.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA88

    uint32_t const cps[1] = { 0xfa88 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe108), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_007)
{
    // FA89  ; [.FB40.0020.0002][.E18E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA89

    uint32_t const cps[1] = { 0xfa89 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe18e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_008)
{
    // FA8A  ; [.FB40.0020.0002][.E160.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8A

    uint32_t const cps[1] = { 0xfa8a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe160), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_009)
{
    // FA8B  ; [.FB40.0020.0002][.E1F2.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8B

    uint32_t const cps[1] = { 0xfa8b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe1f2), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_010)
{
    // FA8C  ; [.FB40.0020.0002][.E234.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8C

    uint32_t const cps[1] = { 0xfa8c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe234), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_011)
{
    // FA8D  ; [.FB40.0020.0002][.E3C4.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8D

    uint32_t const cps[1] = { 0xfa8d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe3c4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_012)
{
    // FA8E  ; [.FB40.0020.0002][.E41C.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8E

    uint32_t const cps[1] = { 0xfa8e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe41c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_013)
{
    // FA8F  ; [.FB40.0020.0002][.E452.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA8F

    uint32_t const cps[1] = { 0xfa8f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe452), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_014)
{
    // FA90  ; [.FB40.0020.0002][.E556.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA90

    uint32_t const cps[1] = { 0xfa90 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe556), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_015)
{
    // FA91  ; [.FB40.0020.0002][.E674.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA91

    uint32_t const cps[1] = { 0xfa91 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe674), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_016)
{
    // FA92  ; [.FB40.0020.0002][.E717.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA92

    uint32_t const cps[1] = { 0xfa92 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe717), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_017)
{
    // FA93  ; [.FB40.0020.0002][.E71B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA93

    uint32_t const cps[1] = { 0xfa93 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe71b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_018)
{
    // FA94  ; [.FB40.0020.0002][.E756.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA94

    uint32_t const cps[1] = { 0xfa94 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xe756), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_019)
{
    // FA95  ; [.FB40.0020.0002][.EB79.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA95

    uint32_t const cps[1] = { 0xfa95 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xeb79), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_020)
{
    // FA96  ; [.FB40.0020.0002][.EBBA.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA96

    uint32_t const cps[1] = { 0xfa96 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xebba), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_021)
{
    // FA97  ; [.FB40.0020.0002][.ED41.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA97

    uint32_t const cps[1] = { 0xfa97 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xed41), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_022)
{
    // FA98  ; [.FB40.0020.0002][.EEDB.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA98

    uint32_t const cps[1] = { 0xfa98 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xeedb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_023)
{
    // FA99  ; [.FB40.0020.0002][.EECB.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA99

    uint32_t const cps[1] = { 0xfa99 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xeecb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_024)
{
    // FA9A  ; [.FB40.0020.0002][.EF22.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9A

    uint32_t const cps[1] = { 0xfa9a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xef22), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_025)
{
    // FA9B  ; [.FB40.0020.0002][.F01E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9B

    uint32_t const cps[1] = { 0xfa9b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf01e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_026)
{
    // FA9C  ; [.FB40.0020.0002][.F16E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9C

    uint32_t const cps[1] = { 0xfa9c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf16e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_027)
{
    // FA9D  ; [.FB40.0020.0002][.F7A7.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9D

    uint32_t const cps[1] = { 0xfa9d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf7a7), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_028)
{
    // FA9E  ; [.FB40.0020.0002][.F235.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9E

    uint32_t const cps[1] = { 0xfa9e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf235), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_029)
{
    // FA9F  ; [.FB40.0020.0002][.F2AF.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FA9F

    uint32_t const cps[1] = { 0xfa9f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf2af), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_030)
{
    // FAA0  ; [.FB40.0020.0002][.F32A.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA0

    uint32_t const cps[1] = { 0xfaa0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf32a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_031)
{
    // FAA1  ; [.FB40.0020.0002][.F471.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA1

    uint32_t const cps[1] = { 0xfaa1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf471), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_032)
{
    // FAA2  ; [.FB40.0020.0002][.F506.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA2

    uint32_t const cps[1] = { 0xfaa2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf506), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_033)
{
    // FAA3  ; [.FB40.0020.0002][.F53B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA3

    uint32_t const cps[1] = { 0xfaa3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf53b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_034)
{
    // FAA4  ; [.FB40.0020.0002][.F61D.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA4

    uint32_t const cps[1] = { 0xfaa4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf61d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_035)
{
    // FAA5  ; [.FB40.0020.0002][.F61F.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA5

    uint32_t const cps[1] = { 0xfaa5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf61f), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_036)
{
    // FAA6  ; [.FB40.0020.0002][.F6CA.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA6

    uint32_t const cps[1] = { 0xfaa6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf6ca), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_037)
{
    // FAA7  ; [.FB40.0020.0002][.F6DB.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA7

    uint32_t const cps[1] = { 0xfaa7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf6db), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_038)
{
    // FAA8  ; [.FB40.0020.0002][.F6F4.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA8

    uint32_t const cps[1] = { 0xfaa8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf6f4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_039)
{
    // FAA9  ; [.FB40.0020.0002][.F74A.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAA9

    uint32_t const cps[1] = { 0xfaa9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf74a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_040)
{
    // FAAA  ; [.FB40.0020.0002][.F740.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAA

    uint32_t const cps[1] = { 0xfaaa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf740), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_041)
{
    // FAAB  ; [.FB40.0020.0002][.F8CC.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAB

    uint32_t const cps[1] = { 0xfaab };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xf8cc), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_042)
{
    // FAAC  ; [.FB40.0020.0002][.FAB1.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAC

    uint32_t const cps[1] = { 0xfaac };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfab1), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_043)
{
    // FAAD  ; [.FB40.0020.0002][.FBC0.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAD

    uint32_t const cps[1] = { 0xfaad };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfbc0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_044)
{
    // FAAE  ; [.FB40.0020.0002][.FC7B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAE

    uint32_t const cps[1] = { 0xfaae };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfc7b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_045)
{
    // FAAF  ; [.FB40.0020.0002][.FD5B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAAF

    uint32_t const cps[1] = { 0xfaaf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfd5b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_046)
{
    // FAB0  ; [.FB40.0020.0002][.FDF4.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB0

    uint32_t const cps[1] = { 0xfab0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfdf4), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_047)
{
    // FAB1  ; [.FB40.0020.0002][.FF3E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB1

    uint32_t const cps[1] = { 0xfab1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xff3e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_048)
{
    // FAB2  ; [.FB41.0020.0002][.8005.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB2

    uint32_t const cps[1] = { 0xfab2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8005), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_049)
{
    // FAB3  ; [.FB41.0020.0002][.8352.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB3

    uint32_t const cps[1] = { 0xfab3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8352), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_050)
{
    // FAB4  ; [.FB41.0020.0002][.83EF.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB4

    uint32_t const cps[1] = { 0xfab4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x83ef), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_051)
{
    // FAB5  ; [.FB41.0020.0002][.8779.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB5

    uint32_t const cps[1] = { 0xfab5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8779), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_052)
{
    // FAB6  ; [.FB41.0020.0002][.8941.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB6

    uint32_t const cps[1] = { 0xfab6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8941), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_053)
{
    // FAB7  ; [.FB41.0020.0002][.8986.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB7

    uint32_t const cps[1] = { 0xfab7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8986), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_054)
{
    // FAB8  ; [.FB41.0020.0002][.8996.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB8

    uint32_t const cps[1] = { 0xfab8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8996), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_055)
{
    // FAB9  ; [.FB41.0020.0002][.8ABF.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAB9

    uint32_t const cps[1] = { 0xfab9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8abf), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_056)
{
    // FABA  ; [.FB41.0020.0002][.8AF8.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABA

    uint32_t const cps[1] = { 0xfaba };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8af8), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_057)
{
    // FABB  ; [.FB41.0020.0002][.8ACB.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABB

    uint32_t const cps[1] = { 0xfabb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8acb), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_058)
{
    // FABC  ; [.FB41.0020.0002][.8B01.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABC

    uint32_t const cps[1] = { 0xfabc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8b01), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_059)
{
    // FABD  ; [.FB41.0020.0002][.8AFE.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABD

    uint32_t const cps[1] = { 0xfabd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8afe), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_060)
{
    // FABE  ; [.FB41.0020.0002][.8AED.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABE

    uint32_t const cps[1] = { 0xfabe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8aed), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_061)
{
    // FABF  ; [.FB41.0020.0002][.8B39.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FABF

    uint32_t const cps[1] = { 0xfabf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8b39), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_062)
{
    // FAC0  ; [.FB41.0020.0002][.8B8A.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC0

    uint32_t const cps[1] = { 0xfac0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8b8a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_063)
{
    // FAC1  ; [.FB41.0020.0002][.8D08.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC1

    uint32_t const cps[1] = { 0xfac1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8d08), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_064)
{
    // FAC2  ; [.FB41.0020.0002][.8F38.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC2

    uint32_t const cps[1] = { 0xfac2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x8f38), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_065)
{
    // FAC3  ; [.FB41.0020.0002][.9072.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC3

    uint32_t const cps[1] = { 0xfac3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9072), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_066)
{
    // FAC4  ; [.FB41.0020.0002][.9199.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC4

    uint32_t const cps[1] = { 0xfac4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9199), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_067)
{
    // FAC5  ; [.FB41.0020.0002][.9276.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC5

    uint32_t const cps[1] = { 0xfac5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9276), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_068)
{
    // FAC6  ; [.FB41.0020.0002][.967C.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC6

    uint32_t const cps[1] = { 0xfac6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x967c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_069)
{
    // FAC7  ; [.FB41.0020.0002][.96E3.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC7

    uint32_t const cps[1] = { 0xfac7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x96e3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_070)
{
    // FAC8  ; [.FB41.0020.0002][.9756.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC8

    uint32_t const cps[1] = { 0xfac8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9756), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_071)
{
    // FAC9  ; [.FB41.0020.0002][.97DB.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAC9

    uint32_t const cps[1] = { 0xfac9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x97db), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_072)
{
    // FACA  ; [.FB41.0020.0002][.97FF.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACA

    uint32_t const cps[1] = { 0xfaca };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x97ff), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_073)
{
    // FACB  ; [.FB41.0020.0002][.980B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACB

    uint32_t const cps[1] = { 0xfacb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x980b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_074)
{
    // FACC  ; [.FB41.0020.0002][.983B.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACC

    uint32_t const cps[1] = { 0xfacc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x983b), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_075)
{
    // FACD  ; [.FB41.0020.0002][.9B12.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACD

    uint32_t const cps[1] = { 0xfacd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9b12), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_076)
{
    // FACE  ; [.FB41.0020.0002][.9F9C.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACE

    uint32_t const cps[1] = { 0xface };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9f9c), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_077)
{
    // FACF  ; [.FB84.0020.0002][.A84A.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FACF

    uint32_t const cps[1] = { 0xfacf };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xa84a), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_078)
{
    // FAD0  ; [.FB84.0020.0002][.A844.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD0

    uint32_t const cps[1] = { 0xfad0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xa844), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_079)
{
    // FAD1  ; [.FB84.0020.0002][.B3D5.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD1

    uint32_t const cps[1] = { 0xfad1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xb3d5), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_080)
{
    // FAD2  ; [.FB80.0020.0002][.BB9D.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD2

    uint32_t const cps[1] = { 0xfad2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb80), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xbb9d), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_081)
{
    // FAD3  ; [.FB80.0020.0002][.C018.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD3

    uint32_t const cps[1] = { 0xfad3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb80), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xc018), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_082)
{
    // FAD4  ; [.FB80.0020.0002][.C039.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD4

    uint32_t const cps[1] = { 0xfad4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb80), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xc039), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_083)
{
    // FAD5  ; [.FB84.0020.0002][.D249.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD5

    uint32_t const cps[1] = { 0xfad5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xd249), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_084)
{
    // FAD6  ; [.FB84.0020.0002][.DCD0.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD6

    uint32_t const cps[1] = { 0xfad6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xdcd0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_085)
{
    // FAD7  ; [.FB84.0020.0002][.FED3.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD7

    uint32_t const cps[1] = { 0xfad7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb84), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0xfed3), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_086)
{
    // FAD8  ; [.FB41.0020.0002][.9F43.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD8

    uint32_t const cps[1] = { 0xfad8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9f43), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_087)
{
    // FAD9  ; [.FB41.0020.0002][.9F8E.0000.0000] 
    // CJK COMPATIBILITY IDEOGRAPH-FAD9

    uint32_t const cps[1] = { 0xfad9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x9f8e), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_088)
{
    // FB00  ; [.1D4B.0020.0004][.1D4B.0020.0004] 
    // LATIN SMALL LIGATURE FF

    uint32_t const cps[1] = { 0xfb00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_089)
{
    // FB01  ; [.1D4B.0020.0004][.1D98.0020.0004] 
    // LATIN SMALL LIGATURE FI

    uint32_t const cps[1] = { 0xfb01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_090)
{
    // FB02  ; [.1D4B.0020.0004][.1DDD.0020.0004] 
    // LATIN SMALL LIGATURE FL

    uint32_t const cps[1] = { 0xfb02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_091)
{
    // FB03  ; [.1D4B.0020.0004][.1D4B.0020.0004][.1D98.0020.0004] 
    // LATIN SMALL LIGATURE FFI

    uint32_t const cps[1] = { 0xfb03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d98), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_092)
{
    // FB04  ; [.1D4B.0020.0004][.1D4B.0020.0004][.1DDD.0020.0004] 
    // LATIN SMALL LIGATURE FFL

    uint32_t const cps[1] = { 0xfb04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1d4b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1ddd), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_093)
{
    // FB05  ; [.1ED7.0020.0004][.0000.0112.0004][.1EFB.0020.0004] 
    // LATIN SMALL LIGATURE LONG S T

    uint32_t const cps[1] = { 0xfb05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)}, {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_094)
{
    // FB06  ; [.1ED7.0020.0004][.1EFB.0020.0004] 
    // LATIN SMALL LIGATURE ST

    uint32_t const cps[1] = { 0xfb06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_095)
{
    // FB13  ; [.2309.0020.0004][.230B.0020.0004] 
    // ARMENIAN SMALL LIGATURE MEN NOW

    uint32_t const cps[1] = { 0xfb13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x230b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_096)
{
    // FB14  ; [.2309.0020.0004][.22FA.0020.0004] 
    // ARMENIAN SMALL LIGATURE MEN ECH

    uint32_t const cps[1] = { 0xfb14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x22fa), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_097)
{
    // FB15  ; [.2309.0020.0004][.2300.0020.0004] 
    // ARMENIAN SMALL LIGATURE MEN INI

    uint32_t const cps[1] = { 0xfb15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2300), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_098)
{
    // FB16  ; [.2313.0020.0004][.230B.0020.0004] 
    // ARMENIAN SMALL LIGATURE VEW NOW

    uint32_t const cps[1] = { 0xfb16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2313), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x230b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_099)
{
    // FB17  ; [.2309.0020.0004][.2302.0020.0004] 
    // ARMENIAN SMALL LIGATURE MEN XEH

    uint32_t const cps[1] = { 0xfb17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2309), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2302), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_100)
{
    // FB1D  ; [.2326.0020.0002][.0000.0056.0002] 
    // HEBREW LETTER YOD WITH HIRIQ

    uint32_t const cps[1] = { 0xfb1d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x36), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_101)
{
    // FB1E  ; [.0000.0061.0002] 
    // HEBREW POINT JUDEO-SPANISH VARIKA

    uint32_t const cps[1] = { 0xfb1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x41), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_102)
{
    // FB1F  ; [.2326.0020.0004][.2326.0020.0004][.0000.0059.0002] 
    // HEBREW LIGATURE YIDDISH YOD YOD PATAH

    uint32_t const cps[1] = { 0xfb1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x39), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_103)
{
    // FB20  ; [.232C.0020.0005] 
    // HEBREW LETTER ALTERNATIVE AYIN

    uint32_t const cps[1] = { 0xfb20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x232c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_104)
{
    // FB21  ; [.231D.0020.0005] 
    // HEBREW LETTER WIDE ALEF

    uint32_t const cps[1] = { 0xfb21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_105)
{
    // FB22  ; [.2320.0020.0005] 
    // HEBREW LETTER WIDE DALET

    uint32_t const cps[1] = { 0xfb22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2320), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_106)
{
    // FB23  ; [.2321.0020.0005] 
    // HEBREW LETTER WIDE HE

    uint32_t const cps[1] = { 0xfb23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2321), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_107)
{
    // FB24  ; [.2327.0020.0005] 
    // HEBREW LETTER WIDE KAF

    uint32_t const cps[1] = { 0xfb24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_108)
{
    // FB25  ; [.2328.0020.0005] 
    // HEBREW LETTER WIDE LAMED

    uint32_t const cps[1] = { 0xfb25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2328), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_109)
{
    // FB26  ; [.2329.0020.0005] 
    // HEBREW LETTER WIDE FINAL MEM

    uint32_t const cps[1] = { 0xfb26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2329), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_110)
{
    // FB27  ; [.2330.0020.0005] 
    // HEBREW LETTER WIDE RESH

    uint32_t const cps[1] = { 0xfb27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2330), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_111)
{
    // FB28  ; [.2332.0020.0005] 
    // HEBREW LETTER WIDE TAV

    uint32_t const cps[1] = { 0xfb28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2332), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_112)
{
    // FB29  ; [*062C.0020.0005] 
    // HEBREW LETTER ALTERNATIVE PLUS SIGN

    uint32_t const cps[1] = { 0xfb29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x62c), uint8_t(0x0), uint8_t(0x5)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_113)
{
    // FB2A  ; [.2331.0020.0002][.0000.005E.0002] 
    // HEBREW LETTER SHIN WITH SHIN DOT

    uint32_t const cps[1] = { 0xfb2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_114)
{
    // FB2B  ; [.2331.0020.0002][.0000.005D.0002] 
    // HEBREW LETTER SHIN WITH SIN DOT

    uint32_t const cps[1] = { 0xfb2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_115)
{
    // FB2C  ; [.2331.0020.0002][.0000.005F.0002][.0000.005E.0002] 
    // HEBREW LETTER SHIN WITH DAGESH AND SHIN DOT

    uint32_t const cps[1] = { 0xfb2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_116)
{
    // FB2D  ; [.2331.0020.0002][.0000.005F.0002][.0000.005D.0002] 
    // HEBREW LETTER SHIN WITH DAGESH AND SIN DOT

    uint32_t const cps[1] = { 0xfb2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3d), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_108_117)
{
    // FB2E  ; [.231D.0020.0002][.0000.0059.0002] 
    // HEBREW LETTER ALEF WITH PATAH

    uint32_t const cps[1] = { 0xfb2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x39), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_118)
{
    // FB2F  ; [.231D.0020.0002][.0000.005A.0002] 
    // HEBREW LETTER ALEF WITH QAMATS

    uint32_t const cps[1] = { 0xfb2f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3a), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_119)
{
    // FB30  ; [.231D.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER ALEF WITH MAPIQ

    uint32_t const cps[1] = { 0xfb30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_120)
{
    // FB31  ; [.231E.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER BET WITH DAGESH

    uint32_t const cps[1] = { 0xfb31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_121)
{
    // FB32  ; [.231F.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER GIMEL WITH DAGESH

    uint32_t const cps[1] = { 0xfb32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_122)
{
    // FB33  ; [.2320.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER DALET WITH DAGESH

    uint32_t const cps[1] = { 0xfb33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2320), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_123)
{
    // FB34  ; [.2321.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER HE WITH MAPIQ

    uint32_t const cps[1] = { 0xfb34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2321), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_124)
{
    // FB35  ; [.2322.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER VAV WITH DAGESH

    uint32_t const cps[1] = { 0xfb35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_125)
{
    // FB36  ; [.2323.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER ZAYIN WITH DAGESH

    uint32_t const cps[1] = { 0xfb36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2323), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_126)
{
    // FB38  ; [.2325.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER TET WITH DAGESH

    uint32_t const cps[1] = { 0xfb38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2325), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_127)
{
    // FB39  ; [.2326.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER YOD WITH DAGESH

    uint32_t const cps[1] = { 0xfb39 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2326), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_128)
{
    // FB3A  ; [.2327.0020.0019][.0000.005F.0002] 
    // HEBREW LETTER FINAL KAF WITH DAGESH

    uint32_t const cps[1] = { 0xfb3a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x19)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_129)
{
    // FB3B  ; [.2327.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER KAF WITH DAGESH

    uint32_t const cps[1] = { 0xfb3b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_130)
{
    // FB3C  ; [.2328.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER LAMED WITH DAGESH

    uint32_t const cps[1] = { 0xfb3c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2328), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_131)
{
    // FB3E  ; [.2329.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER MEM WITH DAGESH

    uint32_t const cps[1] = { 0xfb3e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2329), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_132)
{
    // FB40  ; [.232A.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER NUN WITH DAGESH

    uint32_t const cps[1] = { 0xfb40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232a), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_133)
{
    // FB41  ; [.232B.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER SAMEKH WITH DAGESH

    uint32_t const cps[1] = { 0xfb41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232b), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_134)
{
    // FB43  ; [.232D.0020.0019][.0000.005F.0002] 
    // HEBREW LETTER FINAL PE WITH DAGESH

    uint32_t const cps[1] = { 0xfb43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232d), uint8_t(0x0), uint8_t(0x19)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_135)
{
    // FB44  ; [.232D.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER PE WITH DAGESH

    uint32_t const cps[1] = { 0xfb44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_136)
{
    // FB46  ; [.232E.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER TSADI WITH DAGESH

    uint32_t const cps[1] = { 0xfb46 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_137)
{
    // FB47  ; [.232F.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER QOF WITH DAGESH

    uint32_t const cps[1] = { 0xfb47 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232f), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_138)
{
    // FB48  ; [.2330.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER RESH WITH DAGESH

    uint32_t const cps[1] = { 0xfb48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2330), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_139)
{
    // FB49  ; [.2331.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER SHIN WITH DAGESH

    uint32_t const cps[1] = { 0xfb49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2331), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_140)
{
    // FB4A  ; [.2332.0020.0002][.0000.005F.0002] 
    // HEBREW LETTER TAV WITH DAGESH

    uint32_t const cps[1] = { 0xfb4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2332), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_141)
{
    // FB4B  ; [.2322.0020.0002][.0000.005B.0002] 
    // HEBREW LETTER VAV WITH HOLAM

    uint32_t const cps[1] = { 0xfb4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2322), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x3b), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_142)
{
    // FB4C  ; [.231E.0020.0002][.0000.0060.0002] 
    // HEBREW LETTER BET WITH RAFE

    uint32_t const cps[1] = { 0xfb4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231e), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x40), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_143)
{
    // FB4D  ; [.2327.0020.0002][.0000.0060.0002] 
    // HEBREW LETTER KAF WITH RAFE

    uint32_t const cps[1] = { 0xfb4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x2327), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x40), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_144)
{
    // FB4E  ; [.232D.0020.0002][.0000.0060.0002] 
    // HEBREW LETTER PE WITH RAFE

    uint32_t const cps[1] = { 0xfb4e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x232d), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x0), uint8_t(0x40), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_145)
{
    // FB4F  ; [.231D.0020.0004][.2328.0020.0004] 
    // HEBREW LIGATURE ALEF LAMED

    uint32_t const cps[1] = { 0xfb4f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[2] = { {uint16_t(0x231d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x2328), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_108_146)
{
    // FB50  ; [.2367.0020.001A] 
    // ARABIC LETTER ALEF WASLA ISOLATED FORM

    uint32_t const cps[1] = { 0xfb50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2367), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_147)
{
    // FB51  ; [.2367.0020.0019] 
    // ARABIC LETTER ALEF WASLA FINAL FORM

    uint32_t const cps[1] = { 0xfb51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2367), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_148)
{
    // FB52  ; [.2374.0020.001A] 
    // ARABIC LETTER BEEH ISOLATED FORM

    uint32_t const cps[1] = { 0xfb52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2374), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_108_149)
{
    // FB53  ; [.2374.0020.0019] 
    // ARABIC LETTER BEEH FINAL FORM

    uint32_t const cps[1] = { 0xfb53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2374), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

