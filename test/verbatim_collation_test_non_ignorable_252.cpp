// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_252_000)
{
    // 1B0AC 003F;	
    // (𛂬) HENTAIGANA LETTER HI-4	[3F4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AC, 0x003F };
    uint32_t const ces[9] = { 0x3F4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_001)
{
    // 1B0AC 0061;	
    // (𛂬) HENTAIGANA LETTER HI-4	[3F4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AC, 0x0061 };
    uint32_t const ces[9] = { 0x3F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_002)
{
    // 1B0AC 0041;	
    // (𛂬) HENTAIGANA LETTER HI-4	[3F4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AC, 0x0041 };
    uint32_t const ces[9] = { 0x3F4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_003)
{
    // 1B0AC 0062;	
    // (𛂬) HENTAIGANA LETTER HI-4	[3F4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AC, 0x0062 };
    uint32_t const ces[9] = { 0x3F4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_004)
{
    // 1B0AD 0021;	
    // (𛂭) HENTAIGANA LETTER HI-5	[3F4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AD, 0x0021 };
    uint32_t const ces[9] = { 0x3F4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_005)
{
    // 1B0AD 003F;	
    // (𛂭) HENTAIGANA LETTER HI-5	[3F4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AD, 0x003F };
    uint32_t const ces[9] = { 0x3F4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_006)
{
    // 1B0AD 0061;	
    // (𛂭) HENTAIGANA LETTER HI-5	[3F4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AD, 0x0061 };
    uint32_t const ces[9] = { 0x3F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_007)
{
    // 1B0AD 0041;	
    // (𛂭) HENTAIGANA LETTER HI-5	[3F4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AD, 0x0041 };
    uint32_t const ces[9] = { 0x3F4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_008)
{
    // 1B0AD 0062;	
    // (𛂭) HENTAIGANA LETTER HI-5	[3F4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AD, 0x0062 };
    uint32_t const ces[9] = { 0x3F4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_009)
{
    // 1B0AE 0021;	
    // (𛂮) HENTAIGANA LETTER HI-6	[3F4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AE, 0x0021 };
    uint32_t const ces[9] = { 0x3F4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_010)
{
    // 1B0AE 003F;	
    // (𛂮) HENTAIGANA LETTER HI-6	[3F4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AE, 0x003F };
    uint32_t const ces[9] = { 0x3F4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_011)
{
    // 1B0AE 0061;	
    // (𛂮) HENTAIGANA LETTER HI-6	[3F4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AE, 0x0061 };
    uint32_t const ces[9] = { 0x3F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_012)
{
    // 1B0AE 0041;	
    // (𛂮) HENTAIGANA LETTER HI-6	[3F4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AE, 0x0041 };
    uint32_t const ces[9] = { 0x3F4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_013)
{
    // 1B0AE 0062;	
    // (𛂮) HENTAIGANA LETTER HI-6	[3F4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AE, 0x0062 };
    uint32_t const ces[9] = { 0x3F4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_014)
{
    // 1B0AF 0021;	
    // (𛂯) HENTAIGANA LETTER HI-7	[3F50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AF, 0x0021 };
    uint32_t const ces[9] = { 0x3F50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_015)
{
    // 1B0AF 003F;	
    // (𛂯) HENTAIGANA LETTER HI-7	[3F50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AF, 0x003F };
    uint32_t const ces[9] = { 0x3F50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_016)
{
    // 1B0AF 0061;	
    // (𛂯) HENTAIGANA LETTER HI-7	[3F50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AF, 0x0061 };
    uint32_t const ces[9] = { 0x3F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_017)
{
    // 1B0AF 0041;	
    // (𛂯) HENTAIGANA LETTER HI-7	[3F50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0AF, 0x0041 };
    uint32_t const ces[9] = { 0x3F50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_018)
{
    // 1B0AF 0062;	
    // (𛂯) HENTAIGANA LETTER HI-7	[3F50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0AF, 0x0062 };
    uint32_t const ces[9] = { 0x3F50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_019)
{
    // 1B0B0 0021;	
    // (𛂰) HENTAIGANA LETTER HU-1	[3F51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B0, 0x0021 };
    uint32_t const ces[9] = { 0x3F51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_020)
{
    // 1B0B0 003F;	
    // (𛂰) HENTAIGANA LETTER HU-1	[3F51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B0, 0x003F };
    uint32_t const ces[9] = { 0x3F51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_021)
{
    // 1B0B0 0061;	
    // (𛂰) HENTAIGANA LETTER HU-1	[3F51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B0, 0x0061 };
    uint32_t const ces[9] = { 0x3F51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_022)
{
    // 1B0B0 0041;	
    // (𛂰) HENTAIGANA LETTER HU-1	[3F51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B0, 0x0041 };
    uint32_t const ces[9] = { 0x3F51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_023)
{
    // 1B0B0 0062;	
    // (𛂰) HENTAIGANA LETTER HU-1	[3F51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B0, 0x0062 };
    uint32_t const ces[9] = { 0x3F51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_024)
{
    // 1B0B1 0021;	
    // (𛂱) HENTAIGANA LETTER HU-2	[3F52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B1, 0x0021 };
    uint32_t const ces[9] = { 0x3F52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_025)
{
    // 1B0B1 003F;	
    // (𛂱) HENTAIGANA LETTER HU-2	[3F52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B1, 0x003F };
    uint32_t const ces[9] = { 0x3F52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_026)
{
    // 1B0B1 0061;	
    // (𛂱) HENTAIGANA LETTER HU-2	[3F52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B1, 0x0061 };
    uint32_t const ces[9] = { 0x3F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_027)
{
    // 1B0B1 0041;	
    // (𛂱) HENTAIGANA LETTER HU-2	[3F52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B1, 0x0041 };
    uint32_t const ces[9] = { 0x3F52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_028)
{
    // 1B0B1 0062;	
    // (𛂱) HENTAIGANA LETTER HU-2	[3F52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B1, 0x0062 };
    uint32_t const ces[9] = { 0x3F52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_029)
{
    // 1B0B2 0021;	
    // (𛂲) HENTAIGANA LETTER HU-3	[3F53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B2, 0x0021 };
    uint32_t const ces[9] = { 0x3F53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_030)
{
    // 1B0B2 003F;	
    // (𛂲) HENTAIGANA LETTER HU-3	[3F53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B2, 0x003F };
    uint32_t const ces[9] = { 0x3F53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_031)
{
    // 1B0B2 0061;	
    // (𛂲) HENTAIGANA LETTER HU-3	[3F53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B2, 0x0061 };
    uint32_t const ces[9] = { 0x3F53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_032)
{
    // 1B0B2 0041;	
    // (𛂲) HENTAIGANA LETTER HU-3	[3F53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B2, 0x0041 };
    uint32_t const ces[9] = { 0x3F53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_033)
{
    // 1B0B2 0062;	
    // (𛂲) HENTAIGANA LETTER HU-3	[3F53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B2, 0x0062 };
    uint32_t const ces[9] = { 0x3F53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_034)
{
    // 1B0B3 0021;	
    // (𛂳) HENTAIGANA LETTER HE-1	[3F54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B3, 0x0021 };
    uint32_t const ces[9] = { 0x3F54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_035)
{
    // 1B0B3 003F;	
    // (𛂳) HENTAIGANA LETTER HE-1	[3F54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B3, 0x003F };
    uint32_t const ces[9] = { 0x3F54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_036)
{
    // 1B0B3 0061;	
    // (𛂳) HENTAIGANA LETTER HE-1	[3F54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B3, 0x0061 };
    uint32_t const ces[9] = { 0x3F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_037)
{
    // 1B0B3 0041;	
    // (𛂳) HENTAIGANA LETTER HE-1	[3F54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B3, 0x0041 };
    uint32_t const ces[9] = { 0x3F54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_038)
{
    // 1B0B3 0062;	
    // (𛂳) HENTAIGANA LETTER HE-1	[3F54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B3, 0x0062 };
    uint32_t const ces[9] = { 0x3F54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_039)
{
    // 1B0B4 0021;	
    // (𛂴) HENTAIGANA LETTER HE-2	[3F55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B4, 0x0021 };
    uint32_t const ces[9] = { 0x3F55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_040)
{
    // 1B0B4 003F;	
    // (𛂴) HENTAIGANA LETTER HE-2	[3F55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B4, 0x003F };
    uint32_t const ces[9] = { 0x3F55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_041)
{
    // 1B0B4 0061;	
    // (𛂴) HENTAIGANA LETTER HE-2	[3F55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B4, 0x0061 };
    uint32_t const ces[9] = { 0x3F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_042)
{
    // 1B0B4 0041;	
    // (𛂴) HENTAIGANA LETTER HE-2	[3F55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B4, 0x0041 };
    uint32_t const ces[9] = { 0x3F55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_043)
{
    // 1B0B4 0062;	
    // (𛂴) HENTAIGANA LETTER HE-2	[3F55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B4, 0x0062 };
    uint32_t const ces[9] = { 0x3F55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_044)
{
    // 1B0B5 0021;	
    // (𛂵) HENTAIGANA LETTER HE-3	[3F56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B5, 0x0021 };
    uint32_t const ces[9] = { 0x3F56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_045)
{
    // 1B0B5 003F;	
    // (𛂵) HENTAIGANA LETTER HE-3	[3F56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B5, 0x003F };
    uint32_t const ces[9] = { 0x3F56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_046)
{
    // 1B0B5 0061;	
    // (𛂵) HENTAIGANA LETTER HE-3	[3F56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B5, 0x0061 };
    uint32_t const ces[9] = { 0x3F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_047)
{
    // 1B0B5 0041;	
    // (𛂵) HENTAIGANA LETTER HE-3	[3F56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B5, 0x0041 };
    uint32_t const ces[9] = { 0x3F56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_048)
{
    // 1B0B5 0062;	
    // (𛂵) HENTAIGANA LETTER HE-3	[3F56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B5, 0x0062 };
    uint32_t const ces[9] = { 0x3F56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_049)
{
    // 1B0B6 0021;	
    // (𛂶) HENTAIGANA LETTER HE-4	[3F57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B6, 0x0021 };
    uint32_t const ces[9] = { 0x3F57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_050)
{
    // 1B0B6 003F;	
    // (𛂶) HENTAIGANA LETTER HE-4	[3F57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B6, 0x003F };
    uint32_t const ces[9] = { 0x3F57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_051)
{
    // 1B0B6 0061;	
    // (𛂶) HENTAIGANA LETTER HE-4	[3F57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B6, 0x0061 };
    uint32_t const ces[9] = { 0x3F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_052)
{
    // 1B0B6 0041;	
    // (𛂶) HENTAIGANA LETTER HE-4	[3F57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B6, 0x0041 };
    uint32_t const ces[9] = { 0x3F57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_053)
{
    // 1B0B6 0062;	
    // (𛂶) HENTAIGANA LETTER HE-4	[3F57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B6, 0x0062 };
    uint32_t const ces[9] = { 0x3F57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_054)
{
    // 1B0B7 0021;	
    // (𛂷) HENTAIGANA LETTER HE-5	[3F58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B7, 0x0021 };
    uint32_t const ces[9] = { 0x3F58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_055)
{
    // 1B0B7 003F;	
    // (𛂷) HENTAIGANA LETTER HE-5	[3F58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B7, 0x003F };
    uint32_t const ces[9] = { 0x3F58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_056)
{
    // 1B0B7 0061;	
    // (𛂷) HENTAIGANA LETTER HE-5	[3F58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B7, 0x0061 };
    uint32_t const ces[9] = { 0x3F58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_057)
{
    // 1B0B7 0041;	
    // (𛂷) HENTAIGANA LETTER HE-5	[3F58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B7, 0x0041 };
    uint32_t const ces[9] = { 0x3F58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_058)
{
    // 1B0B7 0062;	
    // (𛂷) HENTAIGANA LETTER HE-5	[3F58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B7, 0x0062 };
    uint32_t const ces[9] = { 0x3F58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_059)
{
    // 1B0B8 0021;	
    // (𛂸) HENTAIGANA LETTER HE-6	[3F59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B8, 0x0021 };
    uint32_t const ces[9] = { 0x3F59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_060)
{
    // 1B0B8 003F;	
    // (𛂸) HENTAIGANA LETTER HE-6	[3F59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B8, 0x003F };
    uint32_t const ces[9] = { 0x3F59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_061)
{
    // 1B0B8 0061;	
    // (𛂸) HENTAIGANA LETTER HE-6	[3F59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B8, 0x0061 };
    uint32_t const ces[9] = { 0x3F59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_062)
{
    // 1B0B8 0041;	
    // (𛂸) HENTAIGANA LETTER HE-6	[3F59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B8, 0x0041 };
    uint32_t const ces[9] = { 0x3F59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_063)
{
    // 1B0B8 0062;	
    // (𛂸) HENTAIGANA LETTER HE-6	[3F59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B8, 0x0062 };
    uint32_t const ces[9] = { 0x3F59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_064)
{
    // 1B0B9 0021;	
    // (𛂹) HENTAIGANA LETTER HE-7	[3F5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B9, 0x0021 };
    uint32_t const ces[9] = { 0x3F5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_065)
{
    // 1B0B9 003F;	
    // (𛂹) HENTAIGANA LETTER HE-7	[3F5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B9, 0x003F };
    uint32_t const ces[9] = { 0x3F5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_066)
{
    // 1B0B9 0061;	
    // (𛂹) HENTAIGANA LETTER HE-7	[3F5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B9, 0x0061 };
    uint32_t const ces[9] = { 0x3F5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_067)
{
    // 1B0B9 0041;	
    // (𛂹) HENTAIGANA LETTER HE-7	[3F5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0B9, 0x0041 };
    uint32_t const ces[9] = { 0x3F5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_068)
{
    // 1B0B9 0062;	
    // (𛂹) HENTAIGANA LETTER HE-7	[3F5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0B9, 0x0062 };
    uint32_t const ces[9] = { 0x3F5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_069)
{
    // 1B0BA 0021;	
    // (𛂺) HENTAIGANA LETTER HO-1	[3F5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BA, 0x0021 };
    uint32_t const ces[9] = { 0x3F5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_070)
{
    // 1B0BA 003F;	
    // (𛂺) HENTAIGANA LETTER HO-1	[3F5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BA, 0x003F };
    uint32_t const ces[9] = { 0x3F5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_071)
{
    // 1B0BA 0061;	
    // (𛂺) HENTAIGANA LETTER HO-1	[3F5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BA, 0x0061 };
    uint32_t const ces[9] = { 0x3F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_072)
{
    // 1B0BA 0041;	
    // (𛂺) HENTAIGANA LETTER HO-1	[3F5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BA, 0x0041 };
    uint32_t const ces[9] = { 0x3F5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_073)
{
    // 1B0BA 0062;	
    // (𛂺) HENTAIGANA LETTER HO-1	[3F5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BA, 0x0062 };
    uint32_t const ces[9] = { 0x3F5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_074)
{
    // 1B0BB 0021;	
    // (𛂻) HENTAIGANA LETTER HO-2	[3F5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BB, 0x0021 };
    uint32_t const ces[9] = { 0x3F5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_075)
{
    // 1B0BB 003F;	
    // (𛂻) HENTAIGANA LETTER HO-2	[3F5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BB, 0x003F };
    uint32_t const ces[9] = { 0x3F5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_076)
{
    // 1B0BB 0061;	
    // (𛂻) HENTAIGANA LETTER HO-2	[3F5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BB, 0x0061 };
    uint32_t const ces[9] = { 0x3F5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_077)
{
    // 1B0BB 0041;	
    // (𛂻) HENTAIGANA LETTER HO-2	[3F5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BB, 0x0041 };
    uint32_t const ces[9] = { 0x3F5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_078)
{
    // 1B0BB 0062;	
    // (𛂻) HENTAIGANA LETTER HO-2	[3F5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BB, 0x0062 };
    uint32_t const ces[9] = { 0x3F5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_079)
{
    // 1B0BC 0021;	
    // (𛂼) HENTAIGANA LETTER HO-3	[3F5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BC, 0x0021 };
    uint32_t const ces[9] = { 0x3F5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_080)
{
    // 1B0BC 003F;	
    // (𛂼) HENTAIGANA LETTER HO-3	[3F5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BC, 0x003F };
    uint32_t const ces[9] = { 0x3F5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_081)
{
    // 1B0BC 0061;	
    // (𛂼) HENTAIGANA LETTER HO-3	[3F5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BC, 0x0061 };
    uint32_t const ces[9] = { 0x3F5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_082)
{
    // 1B0BC 0041;	
    // (𛂼) HENTAIGANA LETTER HO-3	[3F5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BC, 0x0041 };
    uint32_t const ces[9] = { 0x3F5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_083)
{
    // 1B0BC 0062;	
    // (𛂼) HENTAIGANA LETTER HO-3	[3F5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BC, 0x0062 };
    uint32_t const ces[9] = { 0x3F5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_084)
{
    // 1B0BD 0021;	
    // (𛂽) HENTAIGANA LETTER HO-4	[3F5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BD, 0x0021 };
    uint32_t const ces[9] = { 0x3F5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_085)
{
    // 1B0BD 003F;	
    // (𛂽) HENTAIGANA LETTER HO-4	[3F5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BD, 0x003F };
    uint32_t const ces[9] = { 0x3F5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_086)
{
    // 1B0BD 0061;	
    // (𛂽) HENTAIGANA LETTER HO-4	[3F5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BD, 0x0061 };
    uint32_t const ces[9] = { 0x3F5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_087)
{
    // 1B0BD 0041;	
    // (𛂽) HENTAIGANA LETTER HO-4	[3F5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BD, 0x0041 };
    uint32_t const ces[9] = { 0x3F5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_088)
{
    // 1B0BD 0062;	
    // (𛂽) HENTAIGANA LETTER HO-4	[3F5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BD, 0x0062 };
    uint32_t const ces[9] = { 0x3F5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_089)
{
    // 1B0BE 0021;	
    // (𛂾) HENTAIGANA LETTER HO-5	[3F5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BE, 0x0021 };
    uint32_t const ces[9] = { 0x3F5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_090)
{
    // 1B0BE 003F;	
    // (𛂾) HENTAIGANA LETTER HO-5	[3F5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BE, 0x003F };
    uint32_t const ces[9] = { 0x3F5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_091)
{
    // 1B0BE 0061;	
    // (𛂾) HENTAIGANA LETTER HO-5	[3F5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BE, 0x0061 };
    uint32_t const ces[9] = { 0x3F5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_092)
{
    // 1B0BE 0041;	
    // (𛂾) HENTAIGANA LETTER HO-5	[3F5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BE, 0x0041 };
    uint32_t const ces[9] = { 0x3F5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_093)
{
    // 1B0BE 0062;	
    // (𛂾) HENTAIGANA LETTER HO-5	[3F5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BE, 0x0062 };
    uint32_t const ces[9] = { 0x3F5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_094)
{
    // 1B0BF 0021;	
    // (𛂿) HENTAIGANA LETTER HO-6	[3F60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BF, 0x0021 };
    uint32_t const ces[9] = { 0x3F60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_095)
{
    // 1B0BF 003F;	
    // (𛂿) HENTAIGANA LETTER HO-6	[3F60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BF, 0x003F };
    uint32_t const ces[9] = { 0x3F60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_096)
{
    // 1B0BF 0061;	
    // (𛂿) HENTAIGANA LETTER HO-6	[3F60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BF, 0x0061 };
    uint32_t const ces[9] = { 0x3F60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_097)
{
    // 1B0BF 0041;	
    // (𛂿) HENTAIGANA LETTER HO-6	[3F60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0BF, 0x0041 };
    uint32_t const ces[9] = { 0x3F60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_098)
{
    // 1B0BF 0062;	
    // (𛂿) HENTAIGANA LETTER HO-6	[3F60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0BF, 0x0062 };
    uint32_t const ces[9] = { 0x3F60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_099)
{
    // 1B0C0 0021;	
    // (𛃀) HENTAIGANA LETTER HO-7	[3F61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C0, 0x0021 };
    uint32_t const ces[9] = { 0x3F61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_100)
{
    // 1B0C0 003F;	
    // (𛃀) HENTAIGANA LETTER HO-7	[3F61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C0, 0x003F };
    uint32_t const ces[9] = { 0x3F61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_101)
{
    // 1B0C0 0061;	
    // (𛃀) HENTAIGANA LETTER HO-7	[3F61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C0, 0x0061 };
    uint32_t const ces[9] = { 0x3F61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_102)
{
    // 1B0C0 0041;	
    // (𛃀) HENTAIGANA LETTER HO-7	[3F61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C0, 0x0041 };
    uint32_t const ces[9] = { 0x3F61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_103)
{
    // 1B0C0 0062;	
    // (𛃀) HENTAIGANA LETTER HO-7	[3F61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C0, 0x0062 };
    uint32_t const ces[9] = { 0x3F61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_104)
{
    // 1B0C1 0021;	
    // (𛃁) HENTAIGANA LETTER HO-8	[3F62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C1, 0x0021 };
    uint32_t const ces[9] = { 0x3F62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_105)
{
    // 1B0C1 003F;	
    // (𛃁) HENTAIGANA LETTER HO-8	[3F62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C1, 0x003F };
    uint32_t const ces[9] = { 0x3F62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_106)
{
    // 1B0C1 0061;	
    // (𛃁) HENTAIGANA LETTER HO-8	[3F62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C1, 0x0061 };
    uint32_t const ces[9] = { 0x3F62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_107)
{
    // 1B0C1 0041;	
    // (𛃁) HENTAIGANA LETTER HO-8	[3F62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C1, 0x0041 };
    uint32_t const ces[9] = { 0x3F62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_108)
{
    // 1B0C1 0062;	
    // (𛃁) HENTAIGANA LETTER HO-8	[3F62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C1, 0x0062 };
    uint32_t const ces[9] = { 0x3F62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_109)
{
    // 1B0C2 0021;	
    // (𛃂) HENTAIGANA LETTER MA-1	[3F63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C2, 0x0021 };
    uint32_t const ces[9] = { 0x3F63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_110)
{
    // 1B0C2 003F;	
    // (𛃂) HENTAIGANA LETTER MA-1	[3F63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C2, 0x003F };
    uint32_t const ces[9] = { 0x3F63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_111)
{
    // 1B0C2 0061;	
    // (𛃂) HENTAIGANA LETTER MA-1	[3F63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C2, 0x0061 };
    uint32_t const ces[9] = { 0x3F63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_112)
{
    // 1B0C2 0041;	
    // (𛃂) HENTAIGANA LETTER MA-1	[3F63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C2, 0x0041 };
    uint32_t const ces[9] = { 0x3F63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_113)
{
    // 1B0C2 0062;	
    // (𛃂) HENTAIGANA LETTER MA-1	[3F63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C2, 0x0062 };
    uint32_t const ces[9] = { 0x3F63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_114)
{
    // 1B0C3 0021;	
    // (𛃃) HENTAIGANA LETTER MA-2	[3F64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C3, 0x0021 };
    uint32_t const ces[9] = { 0x3F64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_115)
{
    // 1B0C3 003F;	
    // (𛃃) HENTAIGANA LETTER MA-2	[3F64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C3, 0x003F };
    uint32_t const ces[9] = { 0x3F64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_116)
{
    // 1B0C3 0061;	
    // (𛃃) HENTAIGANA LETTER MA-2	[3F64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C3, 0x0061 };
    uint32_t const ces[9] = { 0x3F64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_117)
{
    // 1B0C3 0041;	
    // (𛃃) HENTAIGANA LETTER MA-2	[3F64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C3, 0x0041 };
    uint32_t const ces[9] = { 0x3F64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_118)
{
    // 1B0C3 0062;	
    // (𛃃) HENTAIGANA LETTER MA-2	[3F64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C3, 0x0062 };
    uint32_t const ces[9] = { 0x3F64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_119)
{
    // 1B0C4 0021;	
    // (𛃄) HENTAIGANA LETTER MA-3	[3F65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C4, 0x0021 };
    uint32_t const ces[9] = { 0x3F65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_120)
{
    // 1B0C4 003F;	
    // (𛃄) HENTAIGANA LETTER MA-3	[3F65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C4, 0x003F };
    uint32_t const ces[9] = { 0x3F65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_121)
{
    // 1B0C4 0061;	
    // (𛃄) HENTAIGANA LETTER MA-3	[3F65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C4, 0x0061 };
    uint32_t const ces[9] = { 0x3F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_122)
{
    // 1B0C4 0041;	
    // (𛃄) HENTAIGANA LETTER MA-3	[3F65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C4, 0x0041 };
    uint32_t const ces[9] = { 0x3F65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_123)
{
    // 1B0C4 0062;	
    // (𛃄) HENTAIGANA LETTER MA-3	[3F65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C4, 0x0062 };
    uint32_t const ces[9] = { 0x3F65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_124)
{
    // 1B0C5 0021;	
    // (𛃅) HENTAIGANA LETTER MA-4	[3F66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C5, 0x0021 };
    uint32_t const ces[9] = { 0x3F66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_125)
{
    // 1B0C5 003F;	
    // (𛃅) HENTAIGANA LETTER MA-4	[3F66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C5, 0x003F };
    uint32_t const ces[9] = { 0x3F66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_126)
{
    // 1B0C5 0061;	
    // (𛃅) HENTAIGANA LETTER MA-4	[3F66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C5, 0x0061 };
    uint32_t const ces[9] = { 0x3F66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_127)
{
    // 1B0C5 0041;	
    // (𛃅) HENTAIGANA LETTER MA-4	[3F66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C5, 0x0041 };
    uint32_t const ces[9] = { 0x3F66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_128)
{
    // 1B0C5 0062;	
    // (𛃅) HENTAIGANA LETTER MA-4	[3F66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C5, 0x0062 };
    uint32_t const ces[9] = { 0x3F66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_129)
{
    // 1B0C6 0021;	
    // (𛃆) HENTAIGANA LETTER MA-5	[3F67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C6, 0x0021 };
    uint32_t const ces[9] = { 0x3F67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_130)
{
    // 1B0C6 003F;	
    // (𛃆) HENTAIGANA LETTER MA-5	[3F67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C6, 0x003F };
    uint32_t const ces[9] = { 0x3F67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_131)
{
    // 1B0C6 0061;	
    // (𛃆) HENTAIGANA LETTER MA-5	[3F67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C6, 0x0061 };
    uint32_t const ces[9] = { 0x3F67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_132)
{
    // 1B0C6 0041;	
    // (𛃆) HENTAIGANA LETTER MA-5	[3F67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C6, 0x0041 };
    uint32_t const ces[9] = { 0x3F67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_133)
{
    // 1B0C6 0062;	
    // (𛃆) HENTAIGANA LETTER MA-5	[3F67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C6, 0x0062 };
    uint32_t const ces[9] = { 0x3F67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_134)
{
    // 1B0C7 0021;	
    // (𛃇) HENTAIGANA LETTER MA-6	[3F68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C7, 0x0021 };
    uint32_t const ces[9] = { 0x3F68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_135)
{
    // 1B0C7 003F;	
    // (𛃇) HENTAIGANA LETTER MA-6	[3F68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C7, 0x003F };
    uint32_t const ces[9] = { 0x3F68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_136)
{
    // 1B0C7 0061;	
    // (𛃇) HENTAIGANA LETTER MA-6	[3F68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C7, 0x0061 };
    uint32_t const ces[9] = { 0x3F68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_137)
{
    // 1B0C7 0041;	
    // (𛃇) HENTAIGANA LETTER MA-6	[3F68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C7, 0x0041 };
    uint32_t const ces[9] = { 0x3F68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_138)
{
    // 1B0C7 0062;	
    // (𛃇) HENTAIGANA LETTER MA-6	[3F68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C7, 0x0062 };
    uint32_t const ces[9] = { 0x3F68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_139)
{
    // 1B0C8 0021;	
    // (𛃈) HENTAIGANA LETTER MA-7	[3F69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C8, 0x0021 };
    uint32_t const ces[9] = { 0x3F69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_140)
{
    // 1B0C8 003F;	
    // (𛃈) HENTAIGANA LETTER MA-7	[3F69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C8, 0x003F };
    uint32_t const ces[9] = { 0x3F69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_141)
{
    // 1B0C8 0061;	
    // (𛃈) HENTAIGANA LETTER MA-7	[3F69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C8, 0x0061 };
    uint32_t const ces[9] = { 0x3F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_142)
{
    // 1B0C8 0041;	
    // (𛃈) HENTAIGANA LETTER MA-7	[3F69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C8, 0x0041 };
    uint32_t const ces[9] = { 0x3F69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_143)
{
    // 1B0C8 0062;	
    // (𛃈) HENTAIGANA LETTER MA-7	[3F69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C8, 0x0062 };
    uint32_t const ces[9] = { 0x3F69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_144)
{
    // 1B0C9 0021;	
    // (𛃉) HENTAIGANA LETTER MI-1	[3F6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C9, 0x0021 };
    uint32_t const ces[9] = { 0x3F6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_145)
{
    // 1B0C9 003F;	
    // (𛃉) HENTAIGANA LETTER MI-1	[3F6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C9, 0x003F };
    uint32_t const ces[9] = { 0x3F6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_146)
{
    // 1B0C9 0061;	
    // (𛃉) HENTAIGANA LETTER MI-1	[3F6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C9, 0x0061 };
    uint32_t const ces[9] = { 0x3F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_147)
{
    // 1B0C9 0041;	
    // (𛃉) HENTAIGANA LETTER MI-1	[3F6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0C9, 0x0041 };
    uint32_t const ces[9] = { 0x3F6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_148)
{
    // 1B0C9 0062;	
    // (𛃉) HENTAIGANA LETTER MI-1	[3F6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0C9, 0x0062 };
    uint32_t const ces[9] = { 0x3F6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_149)
{
    // 1B0CA 0021;	
    // (𛃊) HENTAIGANA LETTER MI-2	[3F6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CA, 0x0021 };
    uint32_t const ces[9] = { 0x3F6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_150)
{
    // 1B0CA 003F;	
    // (𛃊) HENTAIGANA LETTER MI-2	[3F6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CA, 0x003F };
    uint32_t const ces[9] = { 0x3F6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_151)
{
    // 1B0CA 0061;	
    // (𛃊) HENTAIGANA LETTER MI-2	[3F6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CA, 0x0061 };
    uint32_t const ces[9] = { 0x3F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_152)
{
    // 1B0CA 0041;	
    // (𛃊) HENTAIGANA LETTER MI-2	[3F6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CA, 0x0041 };
    uint32_t const ces[9] = { 0x3F6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_153)
{
    // 1B0CA 0062;	
    // (𛃊) HENTAIGANA LETTER MI-2	[3F6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CA, 0x0062 };
    uint32_t const ces[9] = { 0x3F6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_154)
{
    // 1B0CB 0021;	
    // (𛃋) HENTAIGANA LETTER MI-3	[3F6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CB, 0x0021 };
    uint32_t const ces[9] = { 0x3F6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_155)
{
    // 1B0CB 003F;	
    // (𛃋) HENTAIGANA LETTER MI-3	[3F6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CB, 0x003F };
    uint32_t const ces[9] = { 0x3F6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_156)
{
    // 1B0CB 0061;	
    // (𛃋) HENTAIGANA LETTER MI-3	[3F6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CB, 0x0061 };
    uint32_t const ces[9] = { 0x3F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_157)
{
    // 1B0CB 0041;	
    // (𛃋) HENTAIGANA LETTER MI-3	[3F6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CB, 0x0041 };
    uint32_t const ces[9] = { 0x3F6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_158)
{
    // 1B0CB 0062;	
    // (𛃋) HENTAIGANA LETTER MI-3	[3F6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CB, 0x0062 };
    uint32_t const ces[9] = { 0x3F6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_159)
{
    // 1B0CC 0021;	
    // (𛃌) HENTAIGANA LETTER MI-4	[3F6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CC, 0x0021 };
    uint32_t const ces[9] = { 0x3F6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_160)
{
    // 1B0CC 003F;	
    // (𛃌) HENTAIGANA LETTER MI-4	[3F6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CC, 0x003F };
    uint32_t const ces[9] = { 0x3F6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_161)
{
    // 1B0CC 0061;	
    // (𛃌) HENTAIGANA LETTER MI-4	[3F6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CC, 0x0061 };
    uint32_t const ces[9] = { 0x3F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_162)
{
    // 1B0CC 0041;	
    // (𛃌) HENTAIGANA LETTER MI-4	[3F6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CC, 0x0041 };
    uint32_t const ces[9] = { 0x3F6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_163)
{
    // 1B0CC 0062;	
    // (𛃌) HENTAIGANA LETTER MI-4	[3F6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CC, 0x0062 };
    uint32_t const ces[9] = { 0x3F6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_164)
{
    // 1B0CD 0021;	
    // (𛃍) HENTAIGANA LETTER MI-5	[3F6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CD, 0x0021 };
    uint32_t const ces[9] = { 0x3F6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_165)
{
    // 1B0CD 003F;	
    // (𛃍) HENTAIGANA LETTER MI-5	[3F6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CD, 0x003F };
    uint32_t const ces[9] = { 0x3F6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_166)
{
    // 1B0CD 0061;	
    // (𛃍) HENTAIGANA LETTER MI-5	[3F6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CD, 0x0061 };
    uint32_t const ces[9] = { 0x3F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_167)
{
    // 1B0CD 0041;	
    // (𛃍) HENTAIGANA LETTER MI-5	[3F6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CD, 0x0041 };
    uint32_t const ces[9] = { 0x3F6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_168)
{
    // 1B0CD 0062;	
    // (𛃍) HENTAIGANA LETTER MI-5	[3F6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CD, 0x0062 };
    uint32_t const ces[9] = { 0x3F6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_169)
{
    // 1B0CE 0021;	
    // (𛃎) HENTAIGANA LETTER MI-6	[3F6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CE, 0x0021 };
    uint32_t const ces[9] = { 0x3F6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_170)
{
    // 1B0CE 003F;	
    // (𛃎) HENTAIGANA LETTER MI-6	[3F6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CE, 0x003F };
    uint32_t const ces[9] = { 0x3F6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_171)
{
    // 1B0CE 0061;	
    // (𛃎) HENTAIGANA LETTER MI-6	[3F6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CE, 0x0061 };
    uint32_t const ces[9] = { 0x3F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_172)
{
    // 1B0CE 0041;	
    // (𛃎) HENTAIGANA LETTER MI-6	[3F6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CE, 0x0041 };
    uint32_t const ces[9] = { 0x3F6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_173)
{
    // 1B0CE 0062;	
    // (𛃎) HENTAIGANA LETTER MI-6	[3F6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CE, 0x0062 };
    uint32_t const ces[9] = { 0x3F6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_174)
{
    // 1B0CF 0021;	
    // (𛃏) HENTAIGANA LETTER MI-7	[3F70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CF, 0x0021 };
    uint32_t const ces[9] = { 0x3F70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_175)
{
    // 1B0CF 003F;	
    // (𛃏) HENTAIGANA LETTER MI-7	[3F70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CF, 0x003F };
    uint32_t const ces[9] = { 0x3F70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_176)
{
    // 1B0CF 0061;	
    // (𛃏) HENTAIGANA LETTER MI-7	[3F70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CF, 0x0061 };
    uint32_t const ces[9] = { 0x3F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_177)
{
    // 1B0CF 0041;	
    // (𛃏) HENTAIGANA LETTER MI-7	[3F70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0CF, 0x0041 };
    uint32_t const ces[9] = { 0x3F70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_178)
{
    // 1B0CF 0062;	
    // (𛃏) HENTAIGANA LETTER MI-7	[3F70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0CF, 0x0062 };
    uint32_t const ces[9] = { 0x3F70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_179)
{
    // 1B0D0 0021;	
    // (𛃐) HENTAIGANA LETTER MU-1	[3F71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D0, 0x0021 };
    uint32_t const ces[9] = { 0x3F71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_180)
{
    // 1B0D0 003F;	
    // (𛃐) HENTAIGANA LETTER MU-1	[3F71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D0, 0x003F };
    uint32_t const ces[9] = { 0x3F71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_181)
{
    // 1B0D0 0061;	
    // (𛃐) HENTAIGANA LETTER MU-1	[3F71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D0, 0x0061 };
    uint32_t const ces[9] = { 0x3F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_182)
{
    // 1B0D0 0041;	
    // (𛃐) HENTAIGANA LETTER MU-1	[3F71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D0, 0x0041 };
    uint32_t const ces[9] = { 0x3F71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_183)
{
    // 1B0D0 0062;	
    // (𛃐) HENTAIGANA LETTER MU-1	[3F71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D0, 0x0062 };
    uint32_t const ces[9] = { 0x3F71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_184)
{
    // 1B0D1 0021;	
    // (𛃑) HENTAIGANA LETTER MU-2	[3F72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D1, 0x0021 };
    uint32_t const ces[9] = { 0x3F72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_185)
{
    // 1B0D1 003F;	
    // (𛃑) HENTAIGANA LETTER MU-2	[3F72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D1, 0x003F };
    uint32_t const ces[9] = { 0x3F72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_186)
{
    // 1B0D1 0061;	
    // (𛃑) HENTAIGANA LETTER MU-2	[3F72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D1, 0x0061 };
    uint32_t const ces[9] = { 0x3F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_187)
{
    // 1B0D1 0041;	
    // (𛃑) HENTAIGANA LETTER MU-2	[3F72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D1, 0x0041 };
    uint32_t const ces[9] = { 0x3F72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_188)
{
    // 1B0D1 0062;	
    // (𛃑) HENTAIGANA LETTER MU-2	[3F72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D1, 0x0062 };
    uint32_t const ces[9] = { 0x3F72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_189)
{
    // 1B0D2 0021;	
    // (𛃒) HENTAIGANA LETTER MU-3	[3F73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D2, 0x0021 };
    uint32_t const ces[9] = { 0x3F73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_190)
{
    // 1B0D2 003F;	
    // (𛃒) HENTAIGANA LETTER MU-3	[3F73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D2, 0x003F };
    uint32_t const ces[9] = { 0x3F73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_191)
{
    // 1B0D2 0061;	
    // (𛃒) HENTAIGANA LETTER MU-3	[3F73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D2, 0x0061 };
    uint32_t const ces[9] = { 0x3F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_192)
{
    // 1B0D2 0041;	
    // (𛃒) HENTAIGANA LETTER MU-3	[3F73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D2, 0x0041 };
    uint32_t const ces[9] = { 0x3F73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_193)
{
    // 1B0D2 0062;	
    // (𛃒) HENTAIGANA LETTER MU-3	[3F73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D2, 0x0062 };
    uint32_t const ces[9] = { 0x3F73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_194)
{
    // 1B0D3 0021;	
    // (𛃓) HENTAIGANA LETTER MU-4	[3F74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D3, 0x0021 };
    uint32_t const ces[9] = { 0x3F74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_195)
{
    // 1B0D3 003F;	
    // (𛃓) HENTAIGANA LETTER MU-4	[3F74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D3, 0x003F };
    uint32_t const ces[9] = { 0x3F74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_196)
{
    // 1B0D3 0061;	
    // (𛃓) HENTAIGANA LETTER MU-4	[3F74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D3, 0x0061 };
    uint32_t const ces[9] = { 0x3F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_197)
{
    // 1B0D3 0041;	
    // (𛃓) HENTAIGANA LETTER MU-4	[3F74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D3, 0x0041 };
    uint32_t const ces[9] = { 0x3F74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_198)
{
    // 1B0D3 0062;	
    // (𛃓) HENTAIGANA LETTER MU-4	[3F74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D3, 0x0062 };
    uint32_t const ces[9] = { 0x3F74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_199)
{
    // 1B0D4 0021;	
    // (𛃔) HENTAIGANA LETTER ME-1	[3F75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D4, 0x0021 };
    uint32_t const ces[9] = { 0x3F75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_200)
{
    // 1B0D4 003F;	
    // (𛃔) HENTAIGANA LETTER ME-1	[3F75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D4, 0x003F };
    uint32_t const ces[9] = { 0x3F75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_201)
{
    // 1B0D4 0061;	
    // (𛃔) HENTAIGANA LETTER ME-1	[3F75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D4, 0x0061 };
    uint32_t const ces[9] = { 0x3F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_202)
{
    // 1B0D4 0041;	
    // (𛃔) HENTAIGANA LETTER ME-1	[3F75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D4, 0x0041 };
    uint32_t const ces[9] = { 0x3F75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_203)
{
    // 1B0D4 0062;	
    // (𛃔) HENTAIGANA LETTER ME-1	[3F75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D4, 0x0062 };
    uint32_t const ces[9] = { 0x3F75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_204)
{
    // 1B0D5 0021;	
    // (𛃕) HENTAIGANA LETTER ME-2	[3F76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D5, 0x0021 };
    uint32_t const ces[9] = { 0x3F76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_205)
{
    // 1B0D5 003F;	
    // (𛃕) HENTAIGANA LETTER ME-2	[3F76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D5, 0x003F };
    uint32_t const ces[9] = { 0x3F76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_206)
{
    // 1B0D5 0061;	
    // (𛃕) HENTAIGANA LETTER ME-2	[3F76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D5, 0x0061 };
    uint32_t const ces[9] = { 0x3F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_207)
{
    // 1B0D5 0041;	
    // (𛃕) HENTAIGANA LETTER ME-2	[3F76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D5, 0x0041 };
    uint32_t const ces[9] = { 0x3F76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_208)
{
    // 1B0D5 0062;	
    // (𛃕) HENTAIGANA LETTER ME-2	[3F76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D5, 0x0062 };
    uint32_t const ces[9] = { 0x3F76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_209)
{
    // 1B0D6 0021;	
    // (𛃖) HENTAIGANA LETTER ME-MA	[3F77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D6, 0x0021 };
    uint32_t const ces[9] = { 0x3F77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_210)
{
    // 1B0D6 003F;	
    // (𛃖) HENTAIGANA LETTER ME-MA	[3F77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D6, 0x003F };
    uint32_t const ces[9] = { 0x3F77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_211)
{
    // 1B0D6 0061;	
    // (𛃖) HENTAIGANA LETTER ME-MA	[3F77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D6, 0x0061 };
    uint32_t const ces[9] = { 0x3F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_212)
{
    // 1B0D6 0041;	
    // (𛃖) HENTAIGANA LETTER ME-MA	[3F77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D6, 0x0041 };
    uint32_t const ces[9] = { 0x3F77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_213)
{
    // 1B0D6 0062;	
    // (𛃖) HENTAIGANA LETTER ME-MA	[3F77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D6, 0x0062 };
    uint32_t const ces[9] = { 0x3F77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_214)
{
    // 1B0D7 0021;	
    // (𛃗) HENTAIGANA LETTER MO-1	[3F78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D7, 0x0021 };
    uint32_t const ces[9] = { 0x3F78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_215)
{
    // 1B0D7 003F;	
    // (𛃗) HENTAIGANA LETTER MO-1	[3F78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D7, 0x003F };
    uint32_t const ces[9] = { 0x3F78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_216)
{
    // 1B0D7 0061;	
    // (𛃗) HENTAIGANA LETTER MO-1	[3F78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D7, 0x0061 };
    uint32_t const ces[9] = { 0x3F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_217)
{
    // 1B0D7 0041;	
    // (𛃗) HENTAIGANA LETTER MO-1	[3F78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D7, 0x0041 };
    uint32_t const ces[9] = { 0x3F78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_218)
{
    // 1B0D7 0062;	
    // (𛃗) HENTAIGANA LETTER MO-1	[3F78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D7, 0x0062 };
    uint32_t const ces[9] = { 0x3F78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_219)
{
    // 1B0D8 0021;	
    // (𛃘) HENTAIGANA LETTER MO-2	[3F79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D8, 0x0021 };
    uint32_t const ces[9] = { 0x3F79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_220)
{
    // 1B0D8 003F;	
    // (𛃘) HENTAIGANA LETTER MO-2	[3F79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D8, 0x003F };
    uint32_t const ces[9] = { 0x3F79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_221)
{
    // 1B0D8 0061;	
    // (𛃘) HENTAIGANA LETTER MO-2	[3F79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D8, 0x0061 };
    uint32_t const ces[9] = { 0x3F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_222)
{
    // 1B0D8 0041;	
    // (𛃘) HENTAIGANA LETTER MO-2	[3F79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D8, 0x0041 };
    uint32_t const ces[9] = { 0x3F79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_223)
{
    // 1B0D8 0062;	
    // (𛃘) HENTAIGANA LETTER MO-2	[3F79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D8, 0x0062 };
    uint32_t const ces[9] = { 0x3F79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_224)
{
    // 1B0D9 0021;	
    // (𛃙) HENTAIGANA LETTER MO-3	[3F7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D9, 0x0021 };
    uint32_t const ces[9] = { 0x3F7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_225)
{
    // 1B0D9 003F;	
    // (𛃙) HENTAIGANA LETTER MO-3	[3F7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D9, 0x003F };
    uint32_t const ces[9] = { 0x3F7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_226)
{
    // 1B0D9 0061;	
    // (𛃙) HENTAIGANA LETTER MO-3	[3F7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D9, 0x0061 };
    uint32_t const ces[9] = { 0x3F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_227)
{
    // 1B0D9 0041;	
    // (𛃙) HENTAIGANA LETTER MO-3	[3F7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0D9, 0x0041 };
    uint32_t const ces[9] = { 0x3F7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_228)
{
    // 1B0D9 0062;	
    // (𛃙) HENTAIGANA LETTER MO-3	[3F7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0D9, 0x0062 };
    uint32_t const ces[9] = { 0x3F7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_229)
{
    // 1B0DA 0021;	
    // (𛃚) HENTAIGANA LETTER MO-4	[3F7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DA, 0x0021 };
    uint32_t const ces[9] = { 0x3F7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_230)
{
    // 1B0DA 003F;	
    // (𛃚) HENTAIGANA LETTER MO-4	[3F7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DA, 0x003F };
    uint32_t const ces[9] = { 0x3F7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_231)
{
    // 1B0DA 0061;	
    // (𛃚) HENTAIGANA LETTER MO-4	[3F7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DA, 0x0061 };
    uint32_t const ces[9] = { 0x3F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_232)
{
    // 1B0DA 0041;	
    // (𛃚) HENTAIGANA LETTER MO-4	[3F7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DA, 0x0041 };
    uint32_t const ces[9] = { 0x3F7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_233)
{
    // 1B0DA 0062;	
    // (𛃚) HENTAIGANA LETTER MO-4	[3F7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DA, 0x0062 };
    uint32_t const ces[9] = { 0x3F7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_234)
{
    // 1B0DB 0021;	
    // (𛃛) HENTAIGANA LETTER MO-5	[3F7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DB, 0x0021 };
    uint32_t const ces[9] = { 0x3F7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_235)
{
    // 1B0DB 003F;	
    // (𛃛) HENTAIGANA LETTER MO-5	[3F7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DB, 0x003F };
    uint32_t const ces[9] = { 0x3F7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_236)
{
    // 1B0DB 0061;	
    // (𛃛) HENTAIGANA LETTER MO-5	[3F7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DB, 0x0061 };
    uint32_t const ces[9] = { 0x3F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_237)
{
    // 1B0DB 0041;	
    // (𛃛) HENTAIGANA LETTER MO-5	[3F7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DB, 0x0041 };
    uint32_t const ces[9] = { 0x3F7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_238)
{
    // 1B0DB 0062;	
    // (𛃛) HENTAIGANA LETTER MO-5	[3F7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DB, 0x0062 };
    uint32_t const ces[9] = { 0x3F7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_239)
{
    // 1B0DC 0021;	
    // (𛃜) HENTAIGANA LETTER MO-6	[3F7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DC, 0x0021 };
    uint32_t const ces[9] = { 0x3F7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_240)
{
    // 1B0DC 003F;	
    // (𛃜) HENTAIGANA LETTER MO-6	[3F7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DC, 0x003F };
    uint32_t const ces[9] = { 0x3F7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_241)
{
    // 1B0DC 0061;	
    // (𛃜) HENTAIGANA LETTER MO-6	[3F7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DC, 0x0061 };
    uint32_t const ces[9] = { 0x3F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_242)
{
    // 1B0DC 0041;	
    // (𛃜) HENTAIGANA LETTER MO-6	[3F7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DC, 0x0041 };
    uint32_t const ces[9] = { 0x3F7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_243)
{
    // 1B0DC 0062;	
    // (𛃜) HENTAIGANA LETTER MO-6	[3F7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DC, 0x0062 };
    uint32_t const ces[9] = { 0x3F7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_244)
{
    // 1B0DD 0021;	
    // (𛃝) HENTAIGANA LETTER YA-1	[3F7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DD, 0x0021 };
    uint32_t const ces[9] = { 0x3F7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_245)
{
    // 1B0DD 003F;	
    // (𛃝) HENTAIGANA LETTER YA-1	[3F7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DD, 0x003F };
    uint32_t const ces[9] = { 0x3F7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_246)
{
    // 1B0DD 0061;	
    // (𛃝) HENTAIGANA LETTER YA-1	[3F7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DD, 0x0061 };
    uint32_t const ces[9] = { 0x3F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_247)
{
    // 1B0DD 0041;	
    // (𛃝) HENTAIGANA LETTER YA-1	[3F7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DD, 0x0041 };
    uint32_t const ces[9] = { 0x3F7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_248)
{
    // 1B0DD 0062;	
    // (𛃝) HENTAIGANA LETTER YA-1	[3F7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DD, 0x0062 };
    uint32_t const ces[9] = { 0x3F7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_249)
{
    // 1B0DE 0021;	
    // (𛃞) HENTAIGANA LETTER YA-2	[3F7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DE, 0x0021 };
    uint32_t const ces[9] = { 0x3F7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_250)
{
    // 1B0DE 003F;	
    // (𛃞) HENTAIGANA LETTER YA-2	[3F7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DE, 0x003F };
    uint32_t const ces[9] = { 0x3F7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_251)
{
    // 1B0DE 0061;	
    // (𛃞) HENTAIGANA LETTER YA-2	[3F7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DE, 0x0061 };
    uint32_t const ces[9] = { 0x3F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_252)
{
    // 1B0DE 0041;	
    // (𛃞) HENTAIGANA LETTER YA-2	[3F7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DE, 0x0041 };
    uint32_t const ces[9] = { 0x3F7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_253)
{
    // 1B0DE 0062;	
    // (𛃞) HENTAIGANA LETTER YA-2	[3F7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DE, 0x0062 };
    uint32_t const ces[9] = { 0x3F7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_254)
{
    // 1B0DF 0021;	
    // (𛃟) HENTAIGANA LETTER YA-3	[3F80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DF, 0x0021 };
    uint32_t const ces[9] = { 0x3F80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_255)
{
    // 1B0DF 003F;	
    // (𛃟) HENTAIGANA LETTER YA-3	[3F80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DF, 0x003F };
    uint32_t const ces[9] = { 0x3F80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_256)
{
    // 1B0DF 0061;	
    // (𛃟) HENTAIGANA LETTER YA-3	[3F80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DF, 0x0061 };
    uint32_t const ces[9] = { 0x3F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_257)
{
    // 1B0DF 0041;	
    // (𛃟) HENTAIGANA LETTER YA-3	[3F80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0DF, 0x0041 };
    uint32_t const ces[9] = { 0x3F80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_258)
{
    // 1B0DF 0062;	
    // (𛃟) HENTAIGANA LETTER YA-3	[3F80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0DF, 0x0062 };
    uint32_t const ces[9] = { 0x3F80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_259)
{
    // 1B0E0 0021;	
    // (𛃠) HENTAIGANA LETTER YA-4	[3F81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E0, 0x0021 };
    uint32_t const ces[9] = { 0x3F81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_260)
{
    // 1B0E0 003F;	
    // (𛃠) HENTAIGANA LETTER YA-4	[3F81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E0, 0x003F };
    uint32_t const ces[9] = { 0x3F81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_261)
{
    // 1B0E0 0061;	
    // (𛃠) HENTAIGANA LETTER YA-4	[3F81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E0, 0x0061 };
    uint32_t const ces[9] = { 0x3F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_262)
{
    // 1B0E0 0041;	
    // (𛃠) HENTAIGANA LETTER YA-4	[3F81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E0, 0x0041 };
    uint32_t const ces[9] = { 0x3F81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_263)
{
    // 1B0E0 0062;	
    // (𛃠) HENTAIGANA LETTER YA-4	[3F81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E0, 0x0062 };
    uint32_t const ces[9] = { 0x3F81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_264)
{
    // 1B0E1 0021;	
    // (𛃡) HENTAIGANA LETTER YA-5	[3F82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E1, 0x0021 };
    uint32_t const ces[9] = { 0x3F82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_265)
{
    // 1B0E1 003F;	
    // (𛃡) HENTAIGANA LETTER YA-5	[3F82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E1, 0x003F };
    uint32_t const ces[9] = { 0x3F82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_266)
{
    // 1B0E1 0061;	
    // (𛃡) HENTAIGANA LETTER YA-5	[3F82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E1, 0x0061 };
    uint32_t const ces[9] = { 0x3F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_267)
{
    // 1B0E1 0041;	
    // (𛃡) HENTAIGANA LETTER YA-5	[3F82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E1, 0x0041 };
    uint32_t const ces[9] = { 0x3F82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_268)
{
    // 1B0E1 0062;	
    // (𛃡) HENTAIGANA LETTER YA-5	[3F82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E1, 0x0062 };
    uint32_t const ces[9] = { 0x3F82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_269)
{
    // 1B0E2 0021;	
    // (𛃢) HENTAIGANA LETTER YA-YO	[3F83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E2, 0x0021 };
    uint32_t const ces[9] = { 0x3F83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_270)
{
    // 1B0E2 003F;	
    // (𛃢) HENTAIGANA LETTER YA-YO	[3F83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E2, 0x003F };
    uint32_t const ces[9] = { 0x3F83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_271)
{
    // 1B0E2 0061;	
    // (𛃢) HENTAIGANA LETTER YA-YO	[3F83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E2, 0x0061 };
    uint32_t const ces[9] = { 0x3F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_272)
{
    // 1B0E2 0041;	
    // (𛃢) HENTAIGANA LETTER YA-YO	[3F83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E2, 0x0041 };
    uint32_t const ces[9] = { 0x3F83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_273)
{
    // 1B0E2 0062;	
    // (𛃢) HENTAIGANA LETTER YA-YO	[3F83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E2, 0x0062 };
    uint32_t const ces[9] = { 0x3F83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_274)
{
    // 1B0E3 0021;	
    // (𛃣) HENTAIGANA LETTER YU-1	[3F84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E3, 0x0021 };
    uint32_t const ces[9] = { 0x3F84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_275)
{
    // 1B0E3 003F;	
    // (𛃣) HENTAIGANA LETTER YU-1	[3F84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E3, 0x003F };
    uint32_t const ces[9] = { 0x3F84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_276)
{
    // 1B0E3 0061;	
    // (𛃣) HENTAIGANA LETTER YU-1	[3F84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E3, 0x0061 };
    uint32_t const ces[9] = { 0x3F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_277)
{
    // 1B0E3 0041;	
    // (𛃣) HENTAIGANA LETTER YU-1	[3F84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E3, 0x0041 };
    uint32_t const ces[9] = { 0x3F84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_278)
{
    // 1B0E3 0062;	
    // (𛃣) HENTAIGANA LETTER YU-1	[3F84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E3, 0x0062 };
    uint32_t const ces[9] = { 0x3F84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_279)
{
    // 1B0E4 0021;	
    // (𛃤) HENTAIGANA LETTER YU-2	[3F85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E4, 0x0021 };
    uint32_t const ces[9] = { 0x3F85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_280)
{
    // 1B0E4 003F;	
    // (𛃤) HENTAIGANA LETTER YU-2	[3F85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E4, 0x003F };
    uint32_t const ces[9] = { 0x3F85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_281)
{
    // 1B0E4 0061;	
    // (𛃤) HENTAIGANA LETTER YU-2	[3F85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E4, 0x0061 };
    uint32_t const ces[9] = { 0x3F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_282)
{
    // 1B0E4 0041;	
    // (𛃤) HENTAIGANA LETTER YU-2	[3F85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E4, 0x0041 };
    uint32_t const ces[9] = { 0x3F85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_283)
{
    // 1B0E4 0062;	
    // (𛃤) HENTAIGANA LETTER YU-2	[3F85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E4, 0x0062 };
    uint32_t const ces[9] = { 0x3F85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_284)
{
    // 1B0E5 0021;	
    // (𛃥) HENTAIGANA LETTER YU-3	[3F86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E5, 0x0021 };
    uint32_t const ces[9] = { 0x3F86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_285)
{
    // 1B0E5 003F;	
    // (𛃥) HENTAIGANA LETTER YU-3	[3F86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E5, 0x003F };
    uint32_t const ces[9] = { 0x3F86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_286)
{
    // 1B0E5 0061;	
    // (𛃥) HENTAIGANA LETTER YU-3	[3F86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E5, 0x0061 };
    uint32_t const ces[9] = { 0x3F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_287)
{
    // 1B0E5 0041;	
    // (𛃥) HENTAIGANA LETTER YU-3	[3F86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E5, 0x0041 };
    uint32_t const ces[9] = { 0x3F86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_288)
{
    // 1B0E5 0062;	
    // (𛃥) HENTAIGANA LETTER YU-3	[3F86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E5, 0x0062 };
    uint32_t const ces[9] = { 0x3F86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_289)
{
    // 1B0E6 0021;	
    // (𛃦) HENTAIGANA LETTER YU-4	[3F87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E6, 0x0021 };
    uint32_t const ces[9] = { 0x3F87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_290)
{
    // 1B0E6 003F;	
    // (𛃦) HENTAIGANA LETTER YU-4	[3F87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E6, 0x003F };
    uint32_t const ces[9] = { 0x3F87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_291)
{
    // 1B0E6 0061;	
    // (𛃦) HENTAIGANA LETTER YU-4	[3F87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E6, 0x0061 };
    uint32_t const ces[9] = { 0x3F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_292)
{
    // 1B0E6 0041;	
    // (𛃦) HENTAIGANA LETTER YU-4	[3F87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E6, 0x0041 };
    uint32_t const ces[9] = { 0x3F87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_293)
{
    // 1B0E6 0062;	
    // (𛃦) HENTAIGANA LETTER YU-4	[3F87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E6, 0x0062 };
    uint32_t const ces[9] = { 0x3F87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_294)
{
    // 1B0E7 0021;	
    // (𛃧) HENTAIGANA LETTER YO-1	[3F88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E7, 0x0021 };
    uint32_t const ces[9] = { 0x3F88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_295)
{
    // 1B0E7 003F;	
    // (𛃧) HENTAIGANA LETTER YO-1	[3F88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E7, 0x003F };
    uint32_t const ces[9] = { 0x3F88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_296)
{
    // 1B0E7 0061;	
    // (𛃧) HENTAIGANA LETTER YO-1	[3F88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E7, 0x0061 };
    uint32_t const ces[9] = { 0x3F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_297)
{
    // 1B0E7 0041;	
    // (𛃧) HENTAIGANA LETTER YO-1	[3F88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E7, 0x0041 };
    uint32_t const ces[9] = { 0x3F88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_298)
{
    // 1B0E7 0062;	
    // (𛃧) HENTAIGANA LETTER YO-1	[3F88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E7, 0x0062 };
    uint32_t const ces[9] = { 0x3F88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_299)
{
    // 1B0E8 0021;	
    // (𛃨) HENTAIGANA LETTER YO-2	[3F89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E8, 0x0021 };
    uint32_t const ces[9] = { 0x3F89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_300)
{
    // 1B0E8 003F;	
    // (𛃨) HENTAIGANA LETTER YO-2	[3F89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E8, 0x003F };
    uint32_t const ces[9] = { 0x3F89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_301)
{
    // 1B0E8 0061;	
    // (𛃨) HENTAIGANA LETTER YO-2	[3F89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E8, 0x0061 };
    uint32_t const ces[9] = { 0x3F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_302)
{
    // 1B0E8 0041;	
    // (𛃨) HENTAIGANA LETTER YO-2	[3F89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E8, 0x0041 };
    uint32_t const ces[9] = { 0x3F89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_303)
{
    // 1B0E8 0062;	
    // (𛃨) HENTAIGANA LETTER YO-2	[3F89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E8, 0x0062 };
    uint32_t const ces[9] = { 0x3F89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_304)
{
    // 1B0E9 0021;	
    // (𛃩) HENTAIGANA LETTER YO-3	[3F8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E9, 0x0021 };
    uint32_t const ces[9] = { 0x3F8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_305)
{
    // 1B0E9 003F;	
    // (𛃩) HENTAIGANA LETTER YO-3	[3F8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E9, 0x003F };
    uint32_t const ces[9] = { 0x3F8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_306)
{
    // 1B0E9 0061;	
    // (𛃩) HENTAIGANA LETTER YO-3	[3F8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E9, 0x0061 };
    uint32_t const ces[9] = { 0x3F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_307)
{
    // 1B0E9 0041;	
    // (𛃩) HENTAIGANA LETTER YO-3	[3F8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0E9, 0x0041 };
    uint32_t const ces[9] = { 0x3F8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_308)
{
    // 1B0E9 0062;	
    // (𛃩) HENTAIGANA LETTER YO-3	[3F8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0E9, 0x0062 };
    uint32_t const ces[9] = { 0x3F8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_309)
{
    // 1B0EA 0021;	
    // (𛃪) HENTAIGANA LETTER YO-4	[3F8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EA, 0x0021 };
    uint32_t const ces[9] = { 0x3F8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_310)
{
    // 1B0EA 003F;	
    // (𛃪) HENTAIGANA LETTER YO-4	[3F8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EA, 0x003F };
    uint32_t const ces[9] = { 0x3F8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_311)
{
    // 1B0EA 0061;	
    // (𛃪) HENTAIGANA LETTER YO-4	[3F8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EA, 0x0061 };
    uint32_t const ces[9] = { 0x3F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_312)
{
    // 1B0EA 0041;	
    // (𛃪) HENTAIGANA LETTER YO-4	[3F8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0EA, 0x0041 };
    uint32_t const ces[9] = { 0x3F8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_313)
{
    // 1B0EA 0062;	
    // (𛃪) HENTAIGANA LETTER YO-4	[3F8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EA, 0x0062 };
    uint32_t const ces[9] = { 0x3F8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_314)
{
    // 1B0EB 0021;	
    // (𛃫) HENTAIGANA LETTER YO-5	[3F8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EB, 0x0021 };
    uint32_t const ces[9] = { 0x3F8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_315)
{
    // 1B0EB 003F;	
    // (𛃫) HENTAIGANA LETTER YO-5	[3F8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EB, 0x003F };
    uint32_t const ces[9] = { 0x3F8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_316)
{
    // 1B0EB 0061;	
    // (𛃫) HENTAIGANA LETTER YO-5	[3F8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EB, 0x0061 };
    uint32_t const ces[9] = { 0x3F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_317)
{
    // 1B0EB 0041;	
    // (𛃫) HENTAIGANA LETTER YO-5	[3F8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0EB, 0x0041 };
    uint32_t const ces[9] = { 0x3F8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_318)
{
    // 1B0EB 0062;	
    // (𛃫) HENTAIGANA LETTER YO-5	[3F8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EB, 0x0062 };
    uint32_t const ces[9] = { 0x3F8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_319)
{
    // 1B0EC 0021;	
    // (𛃬) HENTAIGANA LETTER YO-6	[3F8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EC, 0x0021 };
    uint32_t const ces[9] = { 0x3F8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_320)
{
    // 1B0EC 003F;	
    // (𛃬) HENTAIGANA LETTER YO-6	[3F8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EC, 0x003F };
    uint32_t const ces[9] = { 0x3F8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_321)
{
    // 1B0EC 0061;	
    // (𛃬) HENTAIGANA LETTER YO-6	[3F8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EC, 0x0061 };
    uint32_t const ces[9] = { 0x3F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_322)
{
    // 1B0EC 0041;	
    // (𛃬) HENTAIGANA LETTER YO-6	[3F8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0EC, 0x0041 };
    uint32_t const ces[9] = { 0x3F8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_323)
{
    // 1B0EC 0062;	
    // (𛃬) HENTAIGANA LETTER YO-6	[3F8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EC, 0x0062 };
    uint32_t const ces[9] = { 0x3F8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_324)
{
    // 1B0ED 0021;	
    // (𛃭) HENTAIGANA LETTER RA-1	[3F8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0ED, 0x0021 };
    uint32_t const ces[9] = { 0x3F8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_325)
{
    // 1B0ED 003F;	
    // (𛃭) HENTAIGANA LETTER RA-1	[3F8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0ED, 0x003F };
    uint32_t const ces[9] = { 0x3F8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_326)
{
    // 1B0ED 0061;	
    // (𛃭) HENTAIGANA LETTER RA-1	[3F8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0ED, 0x0061 };
    uint32_t const ces[9] = { 0x3F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_327)
{
    // 1B0ED 0041;	
    // (𛃭) HENTAIGANA LETTER RA-1	[3F8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0ED, 0x0041 };
    uint32_t const ces[9] = { 0x3F8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_328)
{
    // 1B0ED 0062;	
    // (𛃭) HENTAIGANA LETTER RA-1	[3F8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0ED, 0x0062 };
    uint32_t const ces[9] = { 0x3F8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_329)
{
    // 1B0EE 0021;	
    // (𛃮) HENTAIGANA LETTER RA-2	[3F8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EE, 0x0021 };
    uint32_t const ces[9] = { 0x3F8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_330)
{
    // 1B0EE 003F;	
    // (𛃮) HENTAIGANA LETTER RA-2	[3F8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EE, 0x003F };
    uint32_t const ces[9] = { 0x3F8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_331)
{
    // 1B0EE 0061;	
    // (𛃮) HENTAIGANA LETTER RA-2	[3F8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EE, 0x0061 };
    uint32_t const ces[9] = { 0x3F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_332)
{
    // 1B0EE 0041;	
    // (𛃮) HENTAIGANA LETTER RA-2	[3F8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0EE, 0x0041 };
    uint32_t const ces[9] = { 0x3F8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_333)
{
    // 1B0EE 0062;	
    // (𛃮) HENTAIGANA LETTER RA-2	[3F8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EE, 0x0062 };
    uint32_t const ces[9] = { 0x3F8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_334)
{
    // 1B0EF 0021;	
    // (𛃯) HENTAIGANA LETTER RA-3	[3F90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EF, 0x0021 };
    uint32_t const ces[9] = { 0x3F90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_335)
{
    // 1B0EF 003F;	
    // (𛃯) HENTAIGANA LETTER RA-3	[3F90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EF, 0x003F };
    uint32_t const ces[9] = { 0x3F90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_336)
{
    // 1B0EF 0061;	
    // (𛃯) HENTAIGANA LETTER RA-3	[3F90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EF, 0x0061 };
    uint32_t const ces[9] = { 0x3F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_337)
{
    // 1B0EF 0041;	
    // (𛃯) HENTAIGANA LETTER RA-3	[3F90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0EF, 0x0041 };
    uint32_t const ces[9] = { 0x3F90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_338)
{
    // 1B0EF 0062;	
    // (𛃯) HENTAIGANA LETTER RA-3	[3F90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0EF, 0x0062 };
    uint32_t const ces[9] = { 0x3F90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_339)
{
    // 1B0F0 0021;	
    // (𛃰) HENTAIGANA LETTER RA-4	[3F91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F0, 0x0021 };
    uint32_t const ces[9] = { 0x3F91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_340)
{
    // 1B0F0 003F;	
    // (𛃰) HENTAIGANA LETTER RA-4	[3F91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F0, 0x003F };
    uint32_t const ces[9] = { 0x3F91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_341)
{
    // 1B0F0 0061;	
    // (𛃰) HENTAIGANA LETTER RA-4	[3F91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F0, 0x0061 };
    uint32_t const ces[9] = { 0x3F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_342)
{
    // 1B0F0 0041;	
    // (𛃰) HENTAIGANA LETTER RA-4	[3F91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F0, 0x0041 };
    uint32_t const ces[9] = { 0x3F91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_343)
{
    // 1B0F0 0062;	
    // (𛃰) HENTAIGANA LETTER RA-4	[3F91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F0, 0x0062 };
    uint32_t const ces[9] = { 0x3F91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_344)
{
    // 1B0F1 0021;	
    // (𛃱) HENTAIGANA LETTER RI-1	[3F92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F1, 0x0021 };
    uint32_t const ces[9] = { 0x3F92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_345)
{
    // 1B0F1 003F;	
    // (𛃱) HENTAIGANA LETTER RI-1	[3F92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F1, 0x003F };
    uint32_t const ces[9] = { 0x3F92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_346)
{
    // 1B0F1 0061;	
    // (𛃱) HENTAIGANA LETTER RI-1	[3F92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F1, 0x0061 };
    uint32_t const ces[9] = { 0x3F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_347)
{
    // 1B0F1 0041;	
    // (𛃱) HENTAIGANA LETTER RI-1	[3F92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F1, 0x0041 };
    uint32_t const ces[9] = { 0x3F92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_348)
{
    // 1B0F1 0062;	
    // (𛃱) HENTAIGANA LETTER RI-1	[3F92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F1, 0x0062 };
    uint32_t const ces[9] = { 0x3F92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_349)
{
    // 1B0F2 0021;	
    // (𛃲) HENTAIGANA LETTER RI-2	[3F93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F2, 0x0021 };
    uint32_t const ces[9] = { 0x3F93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_350)
{
    // 1B0F2 003F;	
    // (𛃲) HENTAIGANA LETTER RI-2	[3F93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F2, 0x003F };
    uint32_t const ces[9] = { 0x3F93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_351)
{
    // 1B0F2 0061;	
    // (𛃲) HENTAIGANA LETTER RI-2	[3F93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F2, 0x0061 };
    uint32_t const ces[9] = { 0x3F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_352)
{
    // 1B0F2 0041;	
    // (𛃲) HENTAIGANA LETTER RI-2	[3F93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F2, 0x0041 };
    uint32_t const ces[9] = { 0x3F93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_353)
{
    // 1B0F2 0062;	
    // (𛃲) HENTAIGANA LETTER RI-2	[3F93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F2, 0x0062 };
    uint32_t const ces[9] = { 0x3F93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_354)
{
    // 1B0F3 0021;	
    // (𛃳) HENTAIGANA LETTER RI-3	[3F94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F3, 0x0021 };
    uint32_t const ces[9] = { 0x3F94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_355)
{
    // 1B0F3 003F;	
    // (𛃳) HENTAIGANA LETTER RI-3	[3F94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F3, 0x003F };
    uint32_t const ces[9] = { 0x3F94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_356)
{
    // 1B0F3 0061;	
    // (𛃳) HENTAIGANA LETTER RI-3	[3F94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F3, 0x0061 };
    uint32_t const ces[9] = { 0x3F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_357)
{
    // 1B0F3 0041;	
    // (𛃳) HENTAIGANA LETTER RI-3	[3F94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F3, 0x0041 };
    uint32_t const ces[9] = { 0x3F94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_358)
{
    // 1B0F3 0062;	
    // (𛃳) HENTAIGANA LETTER RI-3	[3F94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F3, 0x0062 };
    uint32_t const ces[9] = { 0x3F94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_359)
{
    // 1B0F4 0021;	
    // (𛃴) HENTAIGANA LETTER RI-4	[3F95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F4, 0x0021 };
    uint32_t const ces[9] = { 0x3F95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_360)
{
    // 1B0F4 003F;	
    // (𛃴) HENTAIGANA LETTER RI-4	[3F95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F4, 0x003F };
    uint32_t const ces[9] = { 0x3F95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_361)
{
    // 1B0F4 0061;	
    // (𛃴) HENTAIGANA LETTER RI-4	[3F95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F4, 0x0061 };
    uint32_t const ces[9] = { 0x3F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_362)
{
    // 1B0F4 0041;	
    // (𛃴) HENTAIGANA LETTER RI-4	[3F95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F4, 0x0041 };
    uint32_t const ces[9] = { 0x3F95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_363)
{
    // 1B0F4 0062;	
    // (𛃴) HENTAIGANA LETTER RI-4	[3F95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F4, 0x0062 };
    uint32_t const ces[9] = { 0x3F95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_364)
{
    // 1B0F5 0021;	
    // (𛃵) HENTAIGANA LETTER RI-5	[3F96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F5, 0x0021 };
    uint32_t const ces[9] = { 0x3F96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_365)
{
    // 1B0F5 003F;	
    // (𛃵) HENTAIGANA LETTER RI-5	[3F96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F5, 0x003F };
    uint32_t const ces[9] = { 0x3F96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_366)
{
    // 1B0F5 0061;	
    // (𛃵) HENTAIGANA LETTER RI-5	[3F96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F5, 0x0061 };
    uint32_t const ces[9] = { 0x3F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_367)
{
    // 1B0F5 0041;	
    // (𛃵) HENTAIGANA LETTER RI-5	[3F96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F5, 0x0041 };
    uint32_t const ces[9] = { 0x3F96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_368)
{
    // 1B0F5 0062;	
    // (𛃵) HENTAIGANA LETTER RI-5	[3F96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F5, 0x0062 };
    uint32_t const ces[9] = { 0x3F96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_369)
{
    // 1B0F6 0021;	
    // (𛃶) HENTAIGANA LETTER RI-6	[3F97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F6, 0x0021 };
    uint32_t const ces[9] = { 0x3F97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_370)
{
    // 1B0F6 003F;	
    // (𛃶) HENTAIGANA LETTER RI-6	[3F97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F6, 0x003F };
    uint32_t const ces[9] = { 0x3F97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_371)
{
    // 1B0F6 0061;	
    // (𛃶) HENTAIGANA LETTER RI-6	[3F97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F6, 0x0061 };
    uint32_t const ces[9] = { 0x3F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_372)
{
    // 1B0F6 0041;	
    // (𛃶) HENTAIGANA LETTER RI-6	[3F97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F6, 0x0041 };
    uint32_t const ces[9] = { 0x3F97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_373)
{
    // 1B0F6 0062;	
    // (𛃶) HENTAIGANA LETTER RI-6	[3F97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F6, 0x0062 };
    uint32_t const ces[9] = { 0x3F97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_374)
{
    // 1B0F7 0021;	
    // (𛃷) HENTAIGANA LETTER RI-7	[3F98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F7, 0x0021 };
    uint32_t const ces[9] = { 0x3F98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_375)
{
    // 1B0F7 003F;	
    // (𛃷) HENTAIGANA LETTER RI-7	[3F98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F7, 0x003F };
    uint32_t const ces[9] = { 0x3F98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_376)
{
    // 1B0F7 0061;	
    // (𛃷) HENTAIGANA LETTER RI-7	[3F98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F7, 0x0061 };
    uint32_t const ces[9] = { 0x3F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_377)
{
    // 1B0F7 0041;	
    // (𛃷) HENTAIGANA LETTER RI-7	[3F98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F7, 0x0041 };
    uint32_t const ces[9] = { 0x3F98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_378)
{
    // 1B0F7 0062;	
    // (𛃷) HENTAIGANA LETTER RI-7	[3F98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F7, 0x0062 };
    uint32_t const ces[9] = { 0x3F98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_379)
{
    // 1B0F8 0021;	
    // (𛃸) HENTAIGANA LETTER RU-1	[3F99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F8, 0x0021 };
    uint32_t const ces[9] = { 0x3F99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_380)
{
    // 1B0F8 003F;	
    // (𛃸) HENTAIGANA LETTER RU-1	[3F99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F8, 0x003F };
    uint32_t const ces[9] = { 0x3F99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_381)
{
    // 1B0F8 0061;	
    // (𛃸) HENTAIGANA LETTER RU-1	[3F99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F8, 0x0061 };
    uint32_t const ces[9] = { 0x3F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_382)
{
    // 1B0F8 0041;	
    // (𛃸) HENTAIGANA LETTER RU-1	[3F99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F8, 0x0041 };
    uint32_t const ces[9] = { 0x3F99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_383)
{
    // 1B0F8 0062;	
    // (𛃸) HENTAIGANA LETTER RU-1	[3F99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F8, 0x0062 };
    uint32_t const ces[9] = { 0x3F99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_384)
{
    // 1B0F9 0021;	
    // (𛃹) HENTAIGANA LETTER RU-2	[3F9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F9, 0x0021 };
    uint32_t const ces[9] = { 0x3F9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_385)
{
    // 1B0F9 003F;	
    // (𛃹) HENTAIGANA LETTER RU-2	[3F9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F9, 0x003F };
    uint32_t const ces[9] = { 0x3F9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_386)
{
    // 1B0F9 0061;	
    // (𛃹) HENTAIGANA LETTER RU-2	[3F9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F9, 0x0061 };
    uint32_t const ces[9] = { 0x3F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_387)
{
    // 1B0F9 0041;	
    // (𛃹) HENTAIGANA LETTER RU-2	[3F9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0F9, 0x0041 };
    uint32_t const ces[9] = { 0x3F9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_388)
{
    // 1B0F9 0062;	
    // (𛃹) HENTAIGANA LETTER RU-2	[3F9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0F9, 0x0062 };
    uint32_t const ces[9] = { 0x3F9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_389)
{
    // 1B0FA 0021;	
    // (𛃺) HENTAIGANA LETTER RU-3	[3F9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FA, 0x0021 };
    uint32_t const ces[9] = { 0x3F9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_390)
{
    // 1B0FA 003F;	
    // (𛃺) HENTAIGANA LETTER RU-3	[3F9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FA, 0x003F };
    uint32_t const ces[9] = { 0x3F9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_391)
{
    // 1B0FA 0061;	
    // (𛃺) HENTAIGANA LETTER RU-3	[3F9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FA, 0x0061 };
    uint32_t const ces[9] = { 0x3F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_392)
{
    // 1B0FA 0041;	
    // (𛃺) HENTAIGANA LETTER RU-3	[3F9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FA, 0x0041 };
    uint32_t const ces[9] = { 0x3F9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_393)
{
    // 1B0FA 0062;	
    // (𛃺) HENTAIGANA LETTER RU-3	[3F9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FA, 0x0062 };
    uint32_t const ces[9] = { 0x3F9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_394)
{
    // 1B0FB 0021;	
    // (𛃻) HENTAIGANA LETTER RU-4	[3F9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FB, 0x0021 };
    uint32_t const ces[9] = { 0x3F9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_395)
{
    // 1B0FB 003F;	
    // (𛃻) HENTAIGANA LETTER RU-4	[3F9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FB, 0x003F };
    uint32_t const ces[9] = { 0x3F9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_396)
{
    // 1B0FB 0061;	
    // (𛃻) HENTAIGANA LETTER RU-4	[3F9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FB, 0x0061 };
    uint32_t const ces[9] = { 0x3F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_397)
{
    // 1B0FB 0041;	
    // (𛃻) HENTAIGANA LETTER RU-4	[3F9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FB, 0x0041 };
    uint32_t const ces[9] = { 0x3F9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_398)
{
    // 1B0FB 0062;	
    // (𛃻) HENTAIGANA LETTER RU-4	[3F9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FB, 0x0062 };
    uint32_t const ces[9] = { 0x3F9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_399)
{
    // 1B0FC 0021;	
    // (𛃼) HENTAIGANA LETTER RU-5	[3F9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FC, 0x0021 };
    uint32_t const ces[9] = { 0x3F9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_400)
{
    // 1B0FC 003F;	
    // (𛃼) HENTAIGANA LETTER RU-5	[3F9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FC, 0x003F };
    uint32_t const ces[9] = { 0x3F9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_401)
{
    // 1B0FC 0061;	
    // (𛃼) HENTAIGANA LETTER RU-5	[3F9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FC, 0x0061 };
    uint32_t const ces[9] = { 0x3F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_402)
{
    // 1B0FC 0041;	
    // (𛃼) HENTAIGANA LETTER RU-5	[3F9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FC, 0x0041 };
    uint32_t const ces[9] = { 0x3F9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_403)
{
    // 1B0FC 0062;	
    // (𛃼) HENTAIGANA LETTER RU-5	[3F9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FC, 0x0062 };
    uint32_t const ces[9] = { 0x3F9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_404)
{
    // 1B0FD 0021;	
    // (𛃽) HENTAIGANA LETTER RU-6	[3F9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FD, 0x0021 };
    uint32_t const ces[9] = { 0x3F9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_405)
{
    // 1B0FD 003F;	
    // (𛃽) HENTAIGANA LETTER RU-6	[3F9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FD, 0x003F };
    uint32_t const ces[9] = { 0x3F9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_406)
{
    // 1B0FD 0061;	
    // (𛃽) HENTAIGANA LETTER RU-6	[3F9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FD, 0x0061 };
    uint32_t const ces[9] = { 0x3F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_407)
{
    // 1B0FD 0041;	
    // (𛃽) HENTAIGANA LETTER RU-6	[3F9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FD, 0x0041 };
    uint32_t const ces[9] = { 0x3F9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_408)
{
    // 1B0FD 0062;	
    // (𛃽) HENTAIGANA LETTER RU-6	[3F9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FD, 0x0062 };
    uint32_t const ces[9] = { 0x3F9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_409)
{
    // 1B0FE 0021;	
    // (𛃾) HENTAIGANA LETTER RE-1	[3F9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FE, 0x0021 };
    uint32_t const ces[9] = { 0x3F9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_410)
{
    // 1B0FE 003F;	
    // (𛃾) HENTAIGANA LETTER RE-1	[3F9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FE, 0x003F };
    uint32_t const ces[9] = { 0x3F9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_411)
{
    // 1B0FE 0061;	
    // (𛃾) HENTAIGANA LETTER RE-1	[3F9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FE, 0x0061 };
    uint32_t const ces[9] = { 0x3F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_412)
{
    // 1B0FE 0041;	
    // (𛃾) HENTAIGANA LETTER RE-1	[3F9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FE, 0x0041 };
    uint32_t const ces[9] = { 0x3F9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_413)
{
    // 1B0FE 0062;	
    // (𛃾) HENTAIGANA LETTER RE-1	[3F9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FE, 0x0062 };
    uint32_t const ces[9] = { 0x3F9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_414)
{
    // 1B0FF 0021;	
    // (𛃿) HENTAIGANA LETTER RE-2	[3FA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FF, 0x0021 };
    uint32_t const ces[9] = { 0x3FA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_415)
{
    // 1B0FF 003F;	
    // (𛃿) HENTAIGANA LETTER RE-2	[3FA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FF, 0x003F };
    uint32_t const ces[9] = { 0x3FA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_416)
{
    // 1B0FF 0061;	
    // (𛃿) HENTAIGANA LETTER RE-2	[3FA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FF, 0x0061 };
    uint32_t const ces[9] = { 0x3FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_417)
{
    // 1B0FF 0041;	
    // (𛃿) HENTAIGANA LETTER RE-2	[3FA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B0FF, 0x0041 };
    uint32_t const ces[9] = { 0x3FA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_418)
{
    // 1B0FF 0062;	
    // (𛃿) HENTAIGANA LETTER RE-2	[3FA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B0FF, 0x0062 };
    uint32_t const ces[9] = { 0x3FA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_419)
{
    // 1B100 0021;	
    // (𛄀) HENTAIGANA LETTER RE-3	[3FA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B100, 0x0021 };
    uint32_t const ces[9] = { 0x3FA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_420)
{
    // 1B100 003F;	
    // (𛄀) HENTAIGANA LETTER RE-3	[3FA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B100, 0x003F };
    uint32_t const ces[9] = { 0x3FA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_421)
{
    // 1B100 0061;	
    // (𛄀) HENTAIGANA LETTER RE-3	[3FA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B100, 0x0061 };
    uint32_t const ces[9] = { 0x3FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_422)
{
    // 1B100 0041;	
    // (𛄀) HENTAIGANA LETTER RE-3	[3FA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B100, 0x0041 };
    uint32_t const ces[9] = { 0x3FA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_423)
{
    // 1B100 0062;	
    // (𛄀) HENTAIGANA LETTER RE-3	[3FA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B100, 0x0062 };
    uint32_t const ces[9] = { 0x3FA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_424)
{
    // 1B101 0021;	
    // (𛄁) HENTAIGANA LETTER RE-4	[3FA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B101, 0x0021 };
    uint32_t const ces[9] = { 0x3FA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_425)
{
    // 1B101 003F;	
    // (𛄁) HENTAIGANA LETTER RE-4	[3FA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B101, 0x003F };
    uint32_t const ces[9] = { 0x3FA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_426)
{
    // 1B101 0061;	
    // (𛄁) HENTAIGANA LETTER RE-4	[3FA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B101, 0x0061 };
    uint32_t const ces[9] = { 0x3FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_427)
{
    // 1B101 0041;	
    // (𛄁) HENTAIGANA LETTER RE-4	[3FA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B101, 0x0041 };
    uint32_t const ces[9] = { 0x3FA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_428)
{
    // 1B101 0062;	
    // (𛄁) HENTAIGANA LETTER RE-4	[3FA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B101, 0x0062 };
    uint32_t const ces[9] = { 0x3FA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_429)
{
    // 1B102 0021;	
    // (𛄂) HENTAIGANA LETTER RO-1	[3FA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B102, 0x0021 };
    uint32_t const ces[9] = { 0x3FA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_430)
{
    // 1B102 003F;	
    // (𛄂) HENTAIGANA LETTER RO-1	[3FA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B102, 0x003F };
    uint32_t const ces[9] = { 0x3FA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_431)
{
    // 1B102 0061;	
    // (𛄂) HENTAIGANA LETTER RO-1	[3FA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B102, 0x0061 };
    uint32_t const ces[9] = { 0x3FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_432)
{
    // 1B102 0041;	
    // (𛄂) HENTAIGANA LETTER RO-1	[3FA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B102, 0x0041 };
    uint32_t const ces[9] = { 0x3FA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_433)
{
    // 1B102 0062;	
    // (𛄂) HENTAIGANA LETTER RO-1	[3FA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B102, 0x0062 };
    uint32_t const ces[9] = { 0x3FA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_434)
{
    // 1B103 0021;	
    // (𛄃) HENTAIGANA LETTER RO-2	[3FA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B103, 0x0021 };
    uint32_t const ces[9] = { 0x3FA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_435)
{
    // 1B103 003F;	
    // (𛄃) HENTAIGANA LETTER RO-2	[3FA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B103, 0x003F };
    uint32_t const ces[9] = { 0x3FA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_436)
{
    // 1B103 0061;	
    // (𛄃) HENTAIGANA LETTER RO-2	[3FA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B103, 0x0061 };
    uint32_t const ces[9] = { 0x3FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_437)
{
    // 1B103 0041;	
    // (𛄃) HENTAIGANA LETTER RO-2	[3FA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B103, 0x0041 };
    uint32_t const ces[9] = { 0x3FA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_438)
{
    // 1B103 0062;	
    // (𛄃) HENTAIGANA LETTER RO-2	[3FA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B103, 0x0062 };
    uint32_t const ces[9] = { 0x3FA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_439)
{
    // 1B104 0021;	
    // (𛄄) HENTAIGANA LETTER RO-3	[3FA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B104, 0x0021 };
    uint32_t const ces[9] = { 0x3FA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_440)
{
    // 1B104 003F;	
    // (𛄄) HENTAIGANA LETTER RO-3	[3FA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B104, 0x003F };
    uint32_t const ces[9] = { 0x3FA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_441)
{
    // 1B104 0061;	
    // (𛄄) HENTAIGANA LETTER RO-3	[3FA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B104, 0x0061 };
    uint32_t const ces[9] = { 0x3FA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_442)
{
    // 1B104 0041;	
    // (𛄄) HENTAIGANA LETTER RO-3	[3FA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B104, 0x0041 };
    uint32_t const ces[9] = { 0x3FA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_443)
{
    // 1B104 0062;	
    // (𛄄) HENTAIGANA LETTER RO-3	[3FA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B104, 0x0062 };
    uint32_t const ces[9] = { 0x3FA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_444)
{
    // 1B105 0021;	
    // (𛄅) HENTAIGANA LETTER RO-4	[3FA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B105, 0x0021 };
    uint32_t const ces[9] = { 0x3FA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_445)
{
    // 1B105 003F;	
    // (𛄅) HENTAIGANA LETTER RO-4	[3FA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B105, 0x003F };
    uint32_t const ces[9] = { 0x3FA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_446)
{
    // 1B105 0061;	
    // (𛄅) HENTAIGANA LETTER RO-4	[3FA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B105, 0x0061 };
    uint32_t const ces[9] = { 0x3FA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_447)
{
    // 1B105 0041;	
    // (𛄅) HENTAIGANA LETTER RO-4	[3FA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B105, 0x0041 };
    uint32_t const ces[9] = { 0x3FA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_448)
{
    // 1B105 0062;	
    // (𛄅) HENTAIGANA LETTER RO-4	[3FA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B105, 0x0062 };
    uint32_t const ces[9] = { 0x3FA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_449)
{
    // 1B106 0021;	
    // (𛄆) HENTAIGANA LETTER RO-5	[3FA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B106, 0x0021 };
    uint32_t const ces[9] = { 0x3FA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_450)
{
    // 1B106 003F;	
    // (𛄆) HENTAIGANA LETTER RO-5	[3FA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B106, 0x003F };
    uint32_t const ces[9] = { 0x3FA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_451)
{
    // 1B106 0061;	
    // (𛄆) HENTAIGANA LETTER RO-5	[3FA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B106, 0x0061 };
    uint32_t const ces[9] = { 0x3FA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_452)
{
    // 1B106 0041;	
    // (𛄆) HENTAIGANA LETTER RO-5	[3FA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B106, 0x0041 };
    uint32_t const ces[9] = { 0x3FA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_453)
{
    // 1B106 0062;	
    // (𛄆) HENTAIGANA LETTER RO-5	[3FA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B106, 0x0062 };
    uint32_t const ces[9] = { 0x3FA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_454)
{
    // 1B107 0021;	
    // (𛄇) HENTAIGANA LETTER RO-6	[3FA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B107, 0x0021 };
    uint32_t const ces[9] = { 0x3FA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_455)
{
    // 1B107 003F;	
    // (𛄇) HENTAIGANA LETTER RO-6	[3FA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B107, 0x003F };
    uint32_t const ces[9] = { 0x3FA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_456)
{
    // 1B107 0061;	
    // (𛄇) HENTAIGANA LETTER RO-6	[3FA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B107, 0x0061 };
    uint32_t const ces[9] = { 0x3FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_457)
{
    // 1B107 0041;	
    // (𛄇) HENTAIGANA LETTER RO-6	[3FA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B107, 0x0041 };
    uint32_t const ces[9] = { 0x3FA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_458)
{
    // 1B107 0062;	
    // (𛄇) HENTAIGANA LETTER RO-6	[3FA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B107, 0x0062 };
    uint32_t const ces[9] = { 0x3FA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_459)
{
    // 1B108 0021;	
    // (𛄈) HENTAIGANA LETTER WA-1	[3FA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B108, 0x0021 };
    uint32_t const ces[9] = { 0x3FA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_460)
{
    // 1B108 003F;	
    // (𛄈) HENTAIGANA LETTER WA-1	[3FA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B108, 0x003F };
    uint32_t const ces[9] = { 0x3FA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_461)
{
    // 1B108 0061;	
    // (𛄈) HENTAIGANA LETTER WA-1	[3FA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B108, 0x0061 };
    uint32_t const ces[9] = { 0x3FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_462)
{
    // 1B108 0041;	
    // (𛄈) HENTAIGANA LETTER WA-1	[3FA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B108, 0x0041 };
    uint32_t const ces[9] = { 0x3FA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_463)
{
    // 1B108 0062;	
    // (𛄈) HENTAIGANA LETTER WA-1	[3FA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B108, 0x0062 };
    uint32_t const ces[9] = { 0x3FA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_464)
{
    // 1B109 0021;	
    // (𛄉) HENTAIGANA LETTER WA-2	[3FAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B109, 0x0021 };
    uint32_t const ces[9] = { 0x3FAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_465)
{
    // 1B109 003F;	
    // (𛄉) HENTAIGANA LETTER WA-2	[3FAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B109, 0x003F };
    uint32_t const ces[9] = { 0x3FAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_466)
{
    // 1B109 0061;	
    // (𛄉) HENTAIGANA LETTER WA-2	[3FAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B109, 0x0061 };
    uint32_t const ces[9] = { 0x3FAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_467)
{
    // 1B109 0041;	
    // (𛄉) HENTAIGANA LETTER WA-2	[3FAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B109, 0x0041 };
    uint32_t const ces[9] = { 0x3FAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_468)
{
    // 1B109 0062;	
    // (𛄉) HENTAIGANA LETTER WA-2	[3FAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B109, 0x0062 };
    uint32_t const ces[9] = { 0x3FAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_469)
{
    // 1B10A 0021;	
    // (𛄊) HENTAIGANA LETTER WA-3	[3FAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10A, 0x0021 };
    uint32_t const ces[9] = { 0x3FAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_470)
{
    // 1B10A 003F;	
    // (𛄊) HENTAIGANA LETTER WA-3	[3FAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10A, 0x003F };
    uint32_t const ces[9] = { 0x3FAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_471)
{
    // 1B10A 0061;	
    // (𛄊) HENTAIGANA LETTER WA-3	[3FAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10A, 0x0061 };
    uint32_t const ces[9] = { 0x3FAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_472)
{
    // 1B10A 0041;	
    // (𛄊) HENTAIGANA LETTER WA-3	[3FAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10A, 0x0041 };
    uint32_t const ces[9] = { 0x3FAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_473)
{
    // 1B10A 0062;	
    // (𛄊) HENTAIGANA LETTER WA-3	[3FAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10A, 0x0062 };
    uint32_t const ces[9] = { 0x3FAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_474)
{
    // 1B10B 0021;	
    // (𛄋) HENTAIGANA LETTER WA-4	[3FAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10B, 0x0021 };
    uint32_t const ces[9] = { 0x3FAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_475)
{
    // 1B10B 003F;	
    // (𛄋) HENTAIGANA LETTER WA-4	[3FAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10B, 0x003F };
    uint32_t const ces[9] = { 0x3FAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_476)
{
    // 1B10B 0061;	
    // (𛄋) HENTAIGANA LETTER WA-4	[3FAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10B, 0x0061 };
    uint32_t const ces[9] = { 0x3FAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_477)
{
    // 1B10B 0041;	
    // (𛄋) HENTAIGANA LETTER WA-4	[3FAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10B, 0x0041 };
    uint32_t const ces[9] = { 0x3FAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_478)
{
    // 1B10B 0062;	
    // (𛄋) HENTAIGANA LETTER WA-4	[3FAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10B, 0x0062 };
    uint32_t const ces[9] = { 0x3FAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_479)
{
    // 1B10C 0021;	
    // (𛄌) HENTAIGANA LETTER WA-5	[3FAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10C, 0x0021 };
    uint32_t const ces[9] = { 0x3FAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_480)
{
    // 1B10C 003F;	
    // (𛄌) HENTAIGANA LETTER WA-5	[3FAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10C, 0x003F };
    uint32_t const ces[9] = { 0x3FAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_481)
{
    // 1B10C 0061;	
    // (𛄌) HENTAIGANA LETTER WA-5	[3FAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10C, 0x0061 };
    uint32_t const ces[9] = { 0x3FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_482)
{
    // 1B10C 0041;	
    // (𛄌) HENTAIGANA LETTER WA-5	[3FAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10C, 0x0041 };
    uint32_t const ces[9] = { 0x3FAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_483)
{
    // 1B10C 0062;	
    // (𛄌) HENTAIGANA LETTER WA-5	[3FAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10C, 0x0062 };
    uint32_t const ces[9] = { 0x3FAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_484)
{
    // 1B10D 0021;	
    // (𛄍) HENTAIGANA LETTER WI-1	[3FAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10D, 0x0021 };
    uint32_t const ces[9] = { 0x3FAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_485)
{
    // 1B10D 003F;	
    // (𛄍) HENTAIGANA LETTER WI-1	[3FAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10D, 0x003F };
    uint32_t const ces[9] = { 0x3FAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_486)
{
    // 1B10D 0061;	
    // (𛄍) HENTAIGANA LETTER WI-1	[3FAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10D, 0x0061 };
    uint32_t const ces[9] = { 0x3FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_487)
{
    // 1B10D 0041;	
    // (𛄍) HENTAIGANA LETTER WI-1	[3FAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10D, 0x0041 };
    uint32_t const ces[9] = { 0x3FAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_488)
{
    // 1B10D 0062;	
    // (𛄍) HENTAIGANA LETTER WI-1	[3FAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10D, 0x0062 };
    uint32_t const ces[9] = { 0x3FAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_489)
{
    // 1B10E 0021;	
    // (𛄎) HENTAIGANA LETTER WI-2	[3FAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10E, 0x0021 };
    uint32_t const ces[9] = { 0x3FAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_490)
{
    // 1B10E 003F;	
    // (𛄎) HENTAIGANA LETTER WI-2	[3FAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10E, 0x003F };
    uint32_t const ces[9] = { 0x3FAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_491)
{
    // 1B10E 0061;	
    // (𛄎) HENTAIGANA LETTER WI-2	[3FAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10E, 0x0061 };
    uint32_t const ces[9] = { 0x3FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_492)
{
    // 1B10E 0041;	
    // (𛄎) HENTAIGANA LETTER WI-2	[3FAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10E, 0x0041 };
    uint32_t const ces[9] = { 0x3FAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_493)
{
    // 1B10E 0062;	
    // (𛄎) HENTAIGANA LETTER WI-2	[3FAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10E, 0x0062 };
    uint32_t const ces[9] = { 0x3FAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_494)
{
    // 1B10F 0021;	
    // (𛄏) HENTAIGANA LETTER WI-3	[3FB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10F, 0x0021 };
    uint32_t const ces[9] = { 0x3FB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_495)
{
    // 1B10F 003F;	
    // (𛄏) HENTAIGANA LETTER WI-3	[3FB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10F, 0x003F };
    uint32_t const ces[9] = { 0x3FB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_496)
{
    // 1B10F 0061;	
    // (𛄏) HENTAIGANA LETTER WI-3	[3FB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10F, 0x0061 };
    uint32_t const ces[9] = { 0x3FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_497)
{
    // 1B10F 0041;	
    // (𛄏) HENTAIGANA LETTER WI-3	[3FB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1B10F, 0x0041 };
    uint32_t const ces[9] = { 0x3FB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_498)
{
    // 1B10F 0062;	
    // (𛄏) HENTAIGANA LETTER WI-3	[3FB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B10F, 0x0062 };
    uint32_t const ces[9] = { 0x3FB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_252_499)
{
    // 1B110 0021;	
    // (𛄐) HENTAIGANA LETTER WI-4	[3FB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1B110, 0x0021 };
    uint32_t const ces[9] = { 0x3FB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

