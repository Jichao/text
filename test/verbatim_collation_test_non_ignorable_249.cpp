// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_249_000)
{
    // 32ED 003F;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32ED, 0x003F };
    uint32_t const ces[9] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_001)
{
    // 307C 003F;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F 0267 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307C, 0x003F };
    uint32_t const ces[11] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_002)
{
    // 30DC 003F;	
    // (ボ) KATAKANA LETTER BO	[3E8F 0267 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DC, 0x003F };
    uint32_t const ces[11] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_003)
{
    // 307D 003F;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F 0267 | 0020 0038 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307D, 0x003F };
    uint32_t const ces[11] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_004)
{
    // 30DD 003F;	
    // (ポ) KATAKANA LETTER PO	[3E8F 0267 | 0020 0038 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DD, 0x003F };
    uint32_t const ces[11] = { 0x3E8F, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_005)
{
    // 3341 0021;	
    // (㍁) SQUARE HOORU	[3E8F 1C73 3E9A 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3341, 0x0021 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_006)
{
    // 3341 003F;	
    // (㍁) SQUARE HOORU	[3E8F 1C73 3E9A 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3341, 0x003F };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_007)
{
    // 3341 0061;	
    // (㍁) SQUARE HOORU	[3E8F 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3341, 0x0061 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_008)
{
    // 3341 0041;	
    // (㍁) SQUARE HOORU	[3E8F 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3341, 0x0041 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_009)
{
    // 3341 0062;	
    // (㍁) SQUARE HOORU	[3E8F 1C73 3E9A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3341, 0x0062 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_010)
{
    // 3342 0021;	
    // (㍂) SQUARE HOON	[3E8F 1C73 3EA1 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3342, 0x0021 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_011)
{
    // 3342 003F;	
    // (㍂) SQUARE HOON	[3E8F 1C73 3EA1 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3342, 0x003F };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_012)
{
    // 3342 0061;	
    // (㍂) SQUARE HOON	[3E8F 1C73 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3342, 0x0061 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_013)
{
    // 3342 0041;	
    // (㍂) SQUARE HOON	[3E8F 1C73 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3342, 0x0041 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_014)
{
    // 3342 0062;	
    // (㍂) SQUARE HOON	[3E8F 1C73 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3342, 0x0062 };
    uint32_t const ces[15] = { 0x3E8F, 0x1C73, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_015)
{
    // 307B 0061;	
    // (ほ) HIRAGANA LETTER HO	[3E8F 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307B, 0x0061 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_016)
{
    // 307B 0041;	
    // (ほ) HIRAGANA LETTER HO	[3E8F 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x307B, 0x0041 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_017)
{
    // 31F9 0061;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F9, 0x0061 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_018)
{
    // 31F9 0041;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31F9, 0x0041 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_019)
{
    // 30DB 0061;	
    // (ホ) KATAKANA LETTER HO	[3E8F 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DB, 0x0061 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_020)
{
    // 30DB 0041;	
    // (ホ) KATAKANA LETTER HO	[3E8F 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30DB, 0x0041 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_021)
{
    // FF8E 0061;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8E, 0x0061 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_022)
{
    // FF8E 0041;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF8E, 0x0041 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_023)
{
    // 32ED 0061;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32ED, 0x0061 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_024)
{
    // 32ED 0041;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32ED, 0x0041 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_025)
{
    // 307C 0061;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F 1CAD | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307C, 0x0061 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_026)
{
    // 307C 0041;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F 1CAD | 0020 0037 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x307C, 0x0041 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_027)
{
    // 30DC 0061;	
    // (ボ) KATAKANA LETTER BO	[3E8F 1CAD | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DC, 0x0061 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_028)
{
    // 30DC 0041;	
    // (ボ) KATAKANA LETTER BO	[3E8F 1CAD | 0020 0037 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30DC, 0x0041 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_029)
{
    // 307D 0061;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F 1CAD | 0020 0038 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307D, 0x0061 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_030)
{
    // 307D 0041;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F 1CAD | 0020 0038 0020 | 000E 0002 0008 |]

    uint32_t cps[2] = { 0x307D, 0x0041 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_031)
{
    // 30DD 0061;	
    // (ポ) KATAKANA LETTER PO	[3E8F 1CAD | 0020 0038 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DD, 0x0061 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_032)
{
    // 30DD 0041;	
    // (ポ) KATAKANA LETTER PO	[3E8F 1CAD | 0020 0038 0020 | 0011 0002 0008 |]

    uint32_t cps[2] = { 0x30DD, 0x0041 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_033)
{
    // 307B 0062;	
    // (ほ) HIRAGANA LETTER HO	[3E8F 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307B, 0x0062 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_034)
{
    // 31F9 0062;	
    // (ㇹ) KATAKANA LETTER SMALL HO	[3E8F 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31F9, 0x0062 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_035)
{
    // 30DB 0062;	
    // (ホ) KATAKANA LETTER HO	[3E8F 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DB, 0x0062 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_036)
{
    // FF8E 0062;	
    // (ﾎ) HALFWIDTH KATAKANA LETTER HO	[3E8F 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8E, 0x0062 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_037)
{
    // 32ED 0062;	
    // (㋭) CIRCLED KATAKANA HO	[3E8F 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32ED, 0x0062 };
    uint32_t const ces[9] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_038)
{
    // 307C 0062;	
    // (ぼ) HIRAGANA LETTER BO	[3E8F 1CC6 | 0020 0037 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307C, 0x0062 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_039)
{
    // 30DC 0062;	
    // (ボ) KATAKANA LETTER BO	[3E8F 1CC6 | 0020 0037 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DC, 0x0062 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_040)
{
    // 307D 0062;	
    // (ぽ) HIRAGANA LETTER PO	[3E8F 1CC6 | 0020 0038 0020 | 000E 0002 0002 |]

    uint32_t cps[2] = { 0x307D, 0x0062 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x000E, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_041)
{
    // 30DD 0062;	
    // (ポ) KATAKANA LETTER PO	[3E8F 1CC6 | 0020 0038 0020 | 0011 0002 0002 |]

    uint32_t cps[2] = { 0x30DD, 0x0062 };
    uint32_t const ces[11] = { 0x3E8F, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0000, 0x0011, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_042)
{
    // 333D 0021;	
    // (㌽) SQUARE POINTO	[3E8F 3E72 3EA1 3E85 0261 | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333D, 0x0021 };
    uint32_t const ces[20] = { 0x3E8F, 0x3E72, 0x3EA1, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_043)
{
    // 333D 003F;	
    // (㌽) SQUARE POINTO	[3E8F 3E72 3EA1 3E85 0267 | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333D, 0x003F };
    uint32_t const ces[20] = { 0x3E8F, 0x3E72, 0x3EA1, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_044)
{
    // 333D 0061;	
    // (㌽) SQUARE POINTO	[3E8F 3E72 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333D, 0x0061 };
    uint32_t const ces[20] = { 0x3E8F, 0x3E72, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_045)
{
    // 333D 0041;	
    // (㌽) SQUARE POINTO	[3E8F 3E72 3EA1 3E85 1CAD | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x333D, 0x0041 };
    uint32_t const ces[20] = { 0x3E8F, 0x3E72, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_046)
{
    // 333D 0062;	
    // (㌽) SQUARE POINTO	[3E8F 3E72 3EA1 3E85 1CC6 | 0020 0038 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333D, 0x0062 };
    uint32_t const ces[20] = { 0x3E8F, 0x3E72, 0x3EA1, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_047)
{
    // 1F200 0021;	
    // (🈀) SQUARE HIRAGANA HOKA	[3E8F 3E77 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F200, 0x0021 };
    uint32_t const ces[12] = { 0x3E8F, 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_048)
{
    // 1F200 003F;	
    // (🈀) SQUARE HIRAGANA HOKA	[3E8F 3E77 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F200, 0x003F };
    uint32_t const ces[12] = { 0x3E8F, 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_049)
{
    // 1F200 0061;	
    // (🈀) SQUARE HIRAGANA HOKA	[3E8F 3E77 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F200, 0x0061 };
    uint32_t const ces[12] = { 0x3E8F, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_050)
{
    // 1F200 0041;	
    // (🈀) SQUARE HIRAGANA HOKA	[3E8F 3E77 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x1F200, 0x0041 };
    uint32_t const ces[12] = { 0x3E8F, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_051)
{
    // 1F200 0062;	
    // (🈀) SQUARE HIRAGANA HOKA	[3E8F 3E77 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x1F200, 0x0062 };
    uint32_t const ces[12] = { 0x3E8F, 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_052)
{
    // 333E 0021;	
    // (㌾) SQUARE BORUTO	[3E8F 3E9A 3E85 0261 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333E, 0x0021 };
    uint32_t const ces[17] = { 0x3E8F, 0x3E9A, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_053)
{
    // 333E 003F;	
    // (㌾) SQUARE BORUTO	[3E8F 3E9A 3E85 0267 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333E, 0x003F };
    uint32_t const ces[17] = { 0x3E8F, 0x3E9A, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_054)
{
    // 333E 0061;	
    // (㌾) SQUARE BORUTO	[3E8F 3E9A 3E85 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333E, 0x0061 };
    uint32_t const ces[17] = { 0x3E8F, 0x3E9A, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_055)
{
    // 333E 0041;	
    // (㌾) SQUARE BORUTO	[3E8F 3E9A 3E85 1CAD | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x333E, 0x0041 };
    uint32_t const ces[17] = { 0x3E8F, 0x3E9A, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_056)
{
    // 333E 0062;	
    // (㌾) SQUARE BORUTO	[3E8F 3E9A 3E85 1CC6 | 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333E, 0x0062 };
    uint32_t const ces[17] = { 0x3E8F, 0x3E9A, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_057)
{
    // 333F 0021;	
    // (㌿) SQUARE HON	[3E8F 3EA1 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333F, 0x0021 };
    uint32_t const ces[12] = { 0x3E8F, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_058)
{
    // 333F 003F;	
    // (㌿) SQUARE HON	[3E8F 3EA1 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333F, 0x003F };
    uint32_t const ces[12] = { 0x3E8F, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_059)
{
    // 333F 0061;	
    // (㌿) SQUARE HON	[3E8F 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333F, 0x0061 };
    uint32_t const ces[12] = { 0x3E8F, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_060)
{
    // 333F 0041;	
    // (㌿) SQUARE HON	[3E8F 3EA1 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x333F, 0x0041 };
    uint32_t const ces[12] = { 0x3E8F, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_061)
{
    // 333F 0062;	
    // (㌿) SQUARE HON	[3E8F 3EA1 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x333F, 0x0062 };
    uint32_t const ces[12] = { 0x3E8F, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_062)
{
    // 3340 0021;	
    // (㍀) SQUARE PONDO	[3E8F 3EA1 3E85 0261 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3340, 0x0021 };
    uint32_t const ces[19] = { 0x3E8F, 0x3EA1, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_063)
{
    // 3340 003F;	
    // (㍀) SQUARE PONDO	[3E8F 3EA1 3E85 0267 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3340, 0x003F };
    uint32_t const ces[19] = { 0x3E8F, 0x3EA1, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_064)
{
    // 3340 0061;	
    // (㍀) SQUARE PONDO	[3E8F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3340, 0x0061 };
    uint32_t const ces[19] = { 0x3E8F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_065)
{
    // 3340 0041;	
    // (㍀) SQUARE PONDO	[3E8F 3EA1 3E85 1CAD | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3340, 0x0041 };
    uint32_t const ces[19] = { 0x3E8F, 0x3EA1, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_066)
{
    // 3340 0062;	
    // (㍀) SQUARE PONDO	[3E8F 3EA1 3E85 1CC6 | 0020 0038 0020 0020 0037 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3340, 0x0062 };
    uint32_t const ces[19] = { 0x3E8F, 0x3EA1, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0038, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 19);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 19))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_067)
{
    // 307E 0021;	
    // (ま) HIRAGANA LETTER MA	[3E90 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307E, 0x0021 };
    uint32_t const ces[9] = { 0x3E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_068)
{
    // 30DE 0021;	
    // (マ) KATAKANA LETTER MA	[3E90 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DE, 0x0021 };
    uint32_t const ces[9] = { 0x3E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_069)
{
    // FF8F 0021;	
    // (ﾏ) HALFWIDTH KATAKANA LETTER MA	[3E90 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8F, 0x0021 };
    uint32_t const ces[9] = { 0x3E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_070)
{
    // 32EE 0021;	
    // (㋮) CIRCLED KATAKANA MA	[3E90 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EE, 0x0021 };
    uint32_t const ces[9] = { 0x3E90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_071)
{
    // 307E 003F;	
    // (ま) HIRAGANA LETTER MA	[3E90 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307E, 0x003F };
    uint32_t const ces[9] = { 0x3E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_072)
{
    // 30DE 003F;	
    // (マ) KATAKANA LETTER MA	[3E90 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DE, 0x003F };
    uint32_t const ces[9] = { 0x3E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_073)
{
    // FF8F 003F;	
    // (ﾏ) HALFWIDTH KATAKANA LETTER MA	[3E90 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8F, 0x003F };
    uint32_t const ces[9] = { 0x3E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_074)
{
    // 32EE 003F;	
    // (㋮) CIRCLED KATAKANA MA	[3E90 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EE, 0x003F };
    uint32_t const ces[9] = { 0x3E90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_075)
{
    // 307E 0061;	
    // (ま) HIRAGANA LETTER MA	[3E90 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307E, 0x0061 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_076)
{
    // 307E 0041;	
    // (ま) HIRAGANA LETTER MA	[3E90 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x307E, 0x0041 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_077)
{
    // 30DE 0061;	
    // (マ) KATAKANA LETTER MA	[3E90 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DE, 0x0061 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_078)
{
    // 30DE 0041;	
    // (マ) KATAKANA LETTER MA	[3E90 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30DE, 0x0041 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_079)
{
    // FF8F 0061;	
    // (ﾏ) HALFWIDTH KATAKANA LETTER MA	[3E90 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8F, 0x0061 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_080)
{
    // FF8F 0041;	
    // (ﾏ) HALFWIDTH KATAKANA LETTER MA	[3E90 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF8F, 0x0041 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_081)
{
    // 32EE 0061;	
    // (㋮) CIRCLED KATAKANA MA	[3E90 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EE, 0x0061 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_082)
{
    // 32EE 0041;	
    // (㋮) CIRCLED KATAKANA MA	[3E90 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32EE, 0x0041 };
    uint32_t const ces[9] = { 0x3E90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_083)
{
    // 307E 0062;	
    // (ま) HIRAGANA LETTER MA	[3E90 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307E, 0x0062 };
    uint32_t const ces[9] = { 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_084)
{
    // 30DE 0062;	
    // (マ) KATAKANA LETTER MA	[3E90 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DE, 0x0062 };
    uint32_t const ces[9] = { 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_085)
{
    // FF8F 0062;	
    // (ﾏ) HALFWIDTH KATAKANA LETTER MA	[3E90 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF8F, 0x0062 };
    uint32_t const ces[9] = { 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_086)
{
    // 32EE 0062;	
    // (㋮) CIRCLED KATAKANA MA	[3E90 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EE, 0x0062 };
    uint32_t const ces[9] = { 0x3E90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_087)
{
    // 3343 0021;	
    // (㍃) SQUARE MAIKURO	[3E90 3E72 3E79 3E9C 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3343, 0x0021 };
    uint32_t const ces[18] = { 0x3E90, 0x3E72, 0x3E79, 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_088)
{
    // 3343 003F;	
    // (㍃) SQUARE MAIKURO	[3E90 3E72 3E79 3E9C 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3343, 0x003F };
    uint32_t const ces[18] = { 0x3E90, 0x3E72, 0x3E79, 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_089)
{
    // 3343 0061;	
    // (㍃) SQUARE MAIKURO	[3E90 3E72 3E79 3E9C 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3343, 0x0061 };
    uint32_t const ces[18] = { 0x3E90, 0x3E72, 0x3E79, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_090)
{
    // 3343 0041;	
    // (㍃) SQUARE MAIKURO	[3E90 3E72 3E79 3E9C 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3343, 0x0041 };
    uint32_t const ces[18] = { 0x3E90, 0x3E72, 0x3E79, 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_091)
{
    // 3343 0062;	
    // (㍃) SQUARE MAIKURO	[3E90 3E72 3E79 3E9C 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3343, 0x0062 };
    uint32_t const ces[18] = { 0x3E90, 0x3E72, 0x3E79, 0x3E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_092)
{
    // 3344 0021;	
    // (㍄) SQUARE MAIRU	[3E90 3E72 3E9A 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3344, 0x0021 };
    uint32_t const ces[15] = { 0x3E90, 0x3E72, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_093)
{
    // 3344 003F;	
    // (㍄) SQUARE MAIRU	[3E90 3E72 3E9A 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3344, 0x003F };
    uint32_t const ces[15] = { 0x3E90, 0x3E72, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_094)
{
    // 3344 0061;	
    // (㍄) SQUARE MAIRU	[3E90 3E72 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3344, 0x0061 };
    uint32_t const ces[15] = { 0x3E90, 0x3E72, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_095)
{
    // 3344 0041;	
    // (㍄) SQUARE MAIRU	[3E90 3E72 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3344, 0x0041 };
    uint32_t const ces[15] = { 0x3E90, 0x3E72, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_096)
{
    // 3344 0062;	
    // (㍄) SQUARE MAIRU	[3E90 3E72 3E9A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3344, 0x0062 };
    uint32_t const ces[15] = { 0x3E90, 0x3E72, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_097)
{
    // 303C 0021;	
    // (〼) MASU MARK	[3E90 3E7E 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x303C, 0x0021 };
    uint32_t const ces[12] = { 0x3E90, 0x3E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_098)
{
    // 303C 003F;	
    // (〼) MASU MARK	[3E90 3E7E 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x303C, 0x003F };
    uint32_t const ces[12] = { 0x3E90, 0x3E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_099)
{
    // 303C 0061;	
    // (〼) MASU MARK	[3E90 3E7E 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x303C, 0x0061 };
    uint32_t const ces[12] = { 0x3E90, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_100)
{
    // 303C 0041;	
    // (〼) MASU MARK	[3E90 3E7E 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x303C, 0x0041 };
    uint32_t const ces[12] = { 0x3E90, 0x3E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_101)
{
    // 303C 0062;	
    // (〼) MASU MARK	[3E90 3E7E 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x303C, 0x0062 };
    uint32_t const ces[12] = { 0x3E90, 0x3E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_102)
{
    // 3345 0021;	
    // (㍅) SQUARE MAHHA	[3E90 3E83 3E8B 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3345, 0x0021 };
    uint32_t const ces[15] = { 0x3E90, 0x3E83, 0x3E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_103)
{
    // 3345 003F;	
    // (㍅) SQUARE MAHHA	[3E90 3E83 3E8B 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3345, 0x003F };
    uint32_t const ces[15] = { 0x3E90, 0x3E83, 0x3E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_104)
{
    // 3345 0061;	
    // (㍅) SQUARE MAHHA	[3E90 3E83 3E8B 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3345, 0x0061 };
    uint32_t const ces[15] = { 0x3E90, 0x3E83, 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_105)
{
    // 3345 0041;	
    // (㍅) SQUARE MAHHA	[3E90 3E83 3E8B 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3345, 0x0041 };
    uint32_t const ces[15] = { 0x3E90, 0x3E83, 0x3E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_106)
{
    // 3345 0062;	
    // (㍅) SQUARE MAHHA	[3E90 3E83 3E8B 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3345, 0x0062 };
    uint32_t const ces[15] = { 0x3E90, 0x3E83, 0x3E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_107)
{
    // 3346 0021;	
    // (㍆) SQUARE MARUKU	[3E90 3E9A 3E79 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3346, 0x0021 };
    uint32_t const ces[15] = { 0x3E90, 0x3E9A, 0x3E79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_108)
{
    // 3346 003F;	
    // (㍆) SQUARE MARUKU	[3E90 3E9A 3E79 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3346, 0x003F };
    uint32_t const ces[15] = { 0x3E90, 0x3E9A, 0x3E79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_109)
{
    // 3346 0061;	
    // (㍆) SQUARE MARUKU	[3E90 3E9A 3E79 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3346, 0x0061 };
    uint32_t const ces[15] = { 0x3E90, 0x3E9A, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_110)
{
    // 3346 0041;	
    // (㍆) SQUARE MARUKU	[3E90 3E9A 3E79 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3346, 0x0041 };
    uint32_t const ces[15] = { 0x3E90, 0x3E9A, 0x3E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_111)
{
    // 3346 0062;	
    // (㍆) SQUARE MARUKU	[3E90 3E9A 3E79 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3346, 0x0062 };
    uint32_t const ces[15] = { 0x3E90, 0x3E9A, 0x3E79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_112)
{
    // 3347 0021;	
    // (㍇) SQUARE MANSYON	[3E90 3EA1 3E7D 3E97 3EA1 0261 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3347, 0x0021 };
    uint32_t const ces[21] = { 0x3E90, 0x3EA1, 0x3E7D, 0x3E97, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_113)
{
    // 3347 003F;	
    // (㍇) SQUARE MANSYON	[3E90 3EA1 3E7D 3E97 3EA1 0267 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3347, 0x003F };
    uint32_t const ces[21] = { 0x3E90, 0x3EA1, 0x3E7D, 0x3E97, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_114)
{
    // 3347 0061;	
    // (㍇) SQUARE MANSYON	[3E90 3EA1 3E7D 3E97 3EA1 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3347, 0x0061 };
    uint32_t const ces[21] = { 0x3E90, 0x3EA1, 0x3E7D, 0x3E97, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_115)
{
    // 3347 0041;	
    // (㍇) SQUARE MANSYON	[3E90 3EA1 3E7D 3E97 3EA1 1CAD | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3347, 0x0041 };
    uint32_t const ces[21] = { 0x3E90, 0x3EA1, 0x3E7D, 0x3E97, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_116)
{
    // 3347 0062;	
    // (㍇) SQUARE MANSYON	[3E90 3EA1 3E7D 3E97 3EA1 1CC6 | 0020 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3347, 0x0062 };
    uint32_t const ces[21] = { 0x3E90, 0x3EA1, 0x3E7D, 0x3E97, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 21);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 21))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_117)
{
    // 307F 0021;	
    // (み) HIRAGANA LETTER MI	[3E91 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307F, 0x0021 };
    uint32_t const ces[9] = { 0x3E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_118)
{
    // 30DF 0021;	
    // (ミ) KATAKANA LETTER MI	[3E91 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DF, 0x0021 };
    uint32_t const ces[9] = { 0x3E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_119)
{
    // FF90 0021;	
    // (ﾐ) HALFWIDTH KATAKANA LETTER MI	[3E91 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF90, 0x0021 };
    uint32_t const ces[9] = { 0x3E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_120)
{
    // 32EF 0021;	
    // (㋯) CIRCLED KATAKANA MI	[3E91 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EF, 0x0021 };
    uint32_t const ces[9] = { 0x3E91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_121)
{
    // 307F 003F;	
    // (み) HIRAGANA LETTER MI	[3E91 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307F, 0x003F };
    uint32_t const ces[9] = { 0x3E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_122)
{
    // 30DF 003F;	
    // (ミ) KATAKANA LETTER MI	[3E91 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DF, 0x003F };
    uint32_t const ces[9] = { 0x3E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_123)
{
    // FF90 003F;	
    // (ﾐ) HALFWIDTH KATAKANA LETTER MI	[3E91 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF90, 0x003F };
    uint32_t const ces[9] = { 0x3E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_124)
{
    // 32EF 003F;	
    // (㋯) CIRCLED KATAKANA MI	[3E91 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EF, 0x003F };
    uint32_t const ces[9] = { 0x3E91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_125)
{
    // 307F 0061;	
    // (み) HIRAGANA LETTER MI	[3E91 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307F, 0x0061 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_126)
{
    // 307F 0041;	
    // (み) HIRAGANA LETTER MI	[3E91 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x307F, 0x0041 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_127)
{
    // 30DF 0061;	
    // (ミ) KATAKANA LETTER MI	[3E91 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DF, 0x0061 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_128)
{
    // 30DF 0041;	
    // (ミ) KATAKANA LETTER MI	[3E91 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30DF, 0x0041 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_129)
{
    // FF90 0061;	
    // (ﾐ) HALFWIDTH KATAKANA LETTER MI	[3E91 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF90, 0x0061 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_130)
{
    // FF90 0041;	
    // (ﾐ) HALFWIDTH KATAKANA LETTER MI	[3E91 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF90, 0x0041 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_131)
{
    // 32EF 0061;	
    // (㋯) CIRCLED KATAKANA MI	[3E91 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EF, 0x0061 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_132)
{
    // 32EF 0041;	
    // (㋯) CIRCLED KATAKANA MI	[3E91 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32EF, 0x0041 };
    uint32_t const ces[9] = { 0x3E91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_133)
{
    // 307F 0062;	
    // (み) HIRAGANA LETTER MI	[3E91 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x307F, 0x0062 };
    uint32_t const ces[9] = { 0x3E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_134)
{
    // 30DF 0062;	
    // (ミ) KATAKANA LETTER MI	[3E91 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30DF, 0x0062 };
    uint32_t const ces[9] = { 0x3E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_135)
{
    // FF90 0062;	
    // (ﾐ) HALFWIDTH KATAKANA LETTER MI	[3E91 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF90, 0x0062 };
    uint32_t const ces[9] = { 0x3E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_136)
{
    // 32EF 0062;	
    // (㋯) CIRCLED KATAKANA MI	[3E91 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32EF, 0x0062 };
    uint32_t const ces[9] = { 0x3E91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_137)
{
    // 3348 0021;	
    // (㍈) SQUARE MIKURON	[3E91 3E79 3E9C 3EA1 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3348, 0x0021 };
    uint32_t const ces[18] = { 0x3E91, 0x3E79, 0x3E9C, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_138)
{
    // 3348 003F;	
    // (㍈) SQUARE MIKURON	[3E91 3E79 3E9C 3EA1 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3348, 0x003F };
    uint32_t const ces[18] = { 0x3E91, 0x3E79, 0x3E9C, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_139)
{
    // 3348 0061;	
    // (㍈) SQUARE MIKURON	[3E91 3E79 3E9C 3EA1 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3348, 0x0061 };
    uint32_t const ces[18] = { 0x3E91, 0x3E79, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_140)
{
    // 3348 0041;	
    // (㍈) SQUARE MIKURON	[3E91 3E79 3E9C 3EA1 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3348, 0x0041 };
    uint32_t const ces[18] = { 0x3E91, 0x3E79, 0x3E9C, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_141)
{
    // 3348 0062;	
    // (㍈) SQUARE MIKURON	[3E91 3E79 3E9C 3EA1 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3348, 0x0062 };
    uint32_t const ces[18] = { 0x3E91, 0x3E79, 0x3E9C, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_142)
{
    // 3349 0021;	
    // (㍉) SQUARE MIRI	[3E91 3E99 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3349, 0x0021 };
    uint32_t const ces[12] = { 0x3E91, 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_143)
{
    // 3349 003F;	
    // (㍉) SQUARE MIRI	[3E91 3E99 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3349, 0x003F };
    uint32_t const ces[12] = { 0x3E91, 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_144)
{
    // 3349 0061;	
    // (㍉) SQUARE MIRI	[3E91 3E99 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3349, 0x0061 };
    uint32_t const ces[12] = { 0x3E91, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_145)
{
    // 3349 0041;	
    // (㍉) SQUARE MIRI	[3E91 3E99 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3349, 0x0041 };
    uint32_t const ces[12] = { 0x3E91, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_146)
{
    // 3349 0062;	
    // (㍉) SQUARE MIRI	[3E91 3E99 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3349, 0x0062 };
    uint32_t const ces[12] = { 0x3E91, 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_147)
{
    // 334A 0021;	
    // (㍊) SQUARE MIRIBAARU	[3E91 3E99 3E8B 1C73 3E9A 0261 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334A, 0x0021 };
    uint32_t const ces[23] = { 0x3E91, 0x3E99, 0x3E8B, 0x1C73, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_148)
{
    // 334A 003F;	
    // (㍊) SQUARE MIRIBAARU	[3E91 3E99 3E8B 1C73 3E9A 0267 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334A, 0x003F };
    uint32_t const ces[23] = { 0x3E91, 0x3E99, 0x3E8B, 0x1C73, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_149)
{
    // 334A 0061;	
    // (㍊) SQUARE MIRIBAARU	[3E91 3E99 3E8B 1C73 3E9A 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334A, 0x0061 };
    uint32_t const ces[23] = { 0x3E91, 0x3E99, 0x3E8B, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_150)
{
    // 334A 0041;	
    // (㍊) SQUARE MIRIBAARU	[3E91 3E99 3E8B 1C73 3E9A 1CAD | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334A, 0x0041 };
    uint32_t const ces[23] = { 0x3E91, 0x3E99, 0x3E8B, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_151)
{
    // 334A 0062;	
    // (㍊) SQUARE MIRIBAARU	[3E91 3E99 3E8B 1C73 3E9A 1CC6 | 0020 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334A, 0x0062 };
    uint32_t const ces[23] = { 0x3E91, 0x3E99, 0x3E8B, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_152)
{
    // 3080 0021;	
    // (む) HIRAGANA LETTER MU	[3E92 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3080, 0x0021 };
    uint32_t const ces[9] = { 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_153)
{
    // 31FA 0021;	
    // (ㇺ) KATAKANA LETTER SMALL MU	[3E92 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FA, 0x0021 };
    uint32_t const ces[9] = { 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_154)
{
    // 30E0 0021;	
    // (ム) KATAKANA LETTER MU	[3E92 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E0, 0x0021 };
    uint32_t const ces[9] = { 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_155)
{
    // FF91 0021;	
    // (ﾑ) HALFWIDTH KATAKANA LETTER MU	[3E92 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF91, 0x0021 };
    uint32_t const ces[9] = { 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_156)
{
    // 32F0 0021;	
    // (㋰) CIRCLED KATAKANA MU	[3E92 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F0, 0x0021 };
    uint32_t const ces[9] = { 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_157)
{
    // 3080 003F;	
    // (む) HIRAGANA LETTER MU	[3E92 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3080, 0x003F };
    uint32_t const ces[9] = { 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_158)
{
    // 31FA 003F;	
    // (ㇺ) KATAKANA LETTER SMALL MU	[3E92 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FA, 0x003F };
    uint32_t const ces[9] = { 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_159)
{
    // 30E0 003F;	
    // (ム) KATAKANA LETTER MU	[3E92 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E0, 0x003F };
    uint32_t const ces[9] = { 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_160)
{
    // FF91 003F;	
    // (ﾑ) HALFWIDTH KATAKANA LETTER MU	[3E92 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF91, 0x003F };
    uint32_t const ces[9] = { 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_161)
{
    // 32F0 003F;	
    // (㋰) CIRCLED KATAKANA MU	[3E92 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F0, 0x003F };
    uint32_t const ces[9] = { 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_162)
{
    // 3080 0061;	
    // (む) HIRAGANA LETTER MU	[3E92 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3080, 0x0061 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_163)
{
    // 3080 0041;	
    // (む) HIRAGANA LETTER MU	[3E92 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3080, 0x0041 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_164)
{
    // 31FA 0061;	
    // (ㇺ) KATAKANA LETTER SMALL MU	[3E92 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FA, 0x0061 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_165)
{
    // 31FA 0041;	
    // (ㇺ) KATAKANA LETTER SMALL MU	[3E92 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31FA, 0x0041 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_166)
{
    // 30E0 0061;	
    // (ム) KATAKANA LETTER MU	[3E92 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E0, 0x0061 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_167)
{
    // 30E0 0041;	
    // (ム) KATAKANA LETTER MU	[3E92 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E0, 0x0041 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_168)
{
    // FF91 0061;	
    // (ﾑ) HALFWIDTH KATAKANA LETTER MU	[3E92 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF91, 0x0061 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_169)
{
    // FF91 0041;	
    // (ﾑ) HALFWIDTH KATAKANA LETTER MU	[3E92 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF91, 0x0041 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_170)
{
    // 32F0 0061;	
    // (㋰) CIRCLED KATAKANA MU	[3E92 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F0, 0x0061 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_171)
{
    // 32F0 0041;	
    // (㋰) CIRCLED KATAKANA MU	[3E92 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F0, 0x0041 };
    uint32_t const ces[9] = { 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_172)
{
    // 3080 0062;	
    // (む) HIRAGANA LETTER MU	[3E92 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3080, 0x0062 };
    uint32_t const ces[9] = { 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_173)
{
    // 31FA 0062;	
    // (ㇺ) KATAKANA LETTER SMALL MU	[3E92 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FA, 0x0062 };
    uint32_t const ces[9] = { 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_174)
{
    // 30E0 0062;	
    // (ム) KATAKANA LETTER MU	[3E92 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E0, 0x0062 };
    uint32_t const ces[9] = { 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_175)
{
    // FF91 0062;	
    // (ﾑ) HALFWIDTH KATAKANA LETTER MU	[3E92 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF91, 0x0062 };
    uint32_t const ces[9] = { 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_176)
{
    // 32F0 0062;	
    // (㋰) CIRCLED KATAKANA MU	[3E92 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F0, 0x0062 };
    uint32_t const ces[9] = { 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_177)
{
    // 3081 0021;	
    // (め) HIRAGANA LETTER ME	[3E93 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3081, 0x0021 };
    uint32_t const ces[9] = { 0x3E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_178)
{
    // 30E1 0021;	
    // (メ) KATAKANA LETTER ME	[3E93 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E1, 0x0021 };
    uint32_t const ces[9] = { 0x3E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_179)
{
    // FF92 0021;	
    // (ﾒ) HALFWIDTH KATAKANA LETTER ME	[3E93 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF92, 0x0021 };
    uint32_t const ces[9] = { 0x3E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_180)
{
    // 32F1 0021;	
    // (㋱) CIRCLED KATAKANA ME	[3E93 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F1, 0x0021 };
    uint32_t const ces[9] = { 0x3E93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_181)
{
    // 3081 003F;	
    // (め) HIRAGANA LETTER ME	[3E93 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3081, 0x003F };
    uint32_t const ces[9] = { 0x3E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_182)
{
    // 30E1 003F;	
    // (メ) KATAKANA LETTER ME	[3E93 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E1, 0x003F };
    uint32_t const ces[9] = { 0x3E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_183)
{
    // FF92 003F;	
    // (ﾒ) HALFWIDTH KATAKANA LETTER ME	[3E93 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF92, 0x003F };
    uint32_t const ces[9] = { 0x3E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_184)
{
    // 32F1 003F;	
    // (㋱) CIRCLED KATAKANA ME	[3E93 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F1, 0x003F };
    uint32_t const ces[9] = { 0x3E93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_185)
{
    // 334D 0021;	
    // (㍍) SQUARE MEETORU	[3E93 1C73 3E85 3E9A 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334D, 0x0021 };
    uint32_t const ces[18] = { 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_186)
{
    // 334D 003F;	
    // (㍍) SQUARE MEETORU	[3E93 1C73 3E85 3E9A 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334D, 0x003F };
    uint32_t const ces[18] = { 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_187)
{
    // 334D 0061;	
    // (㍍) SQUARE MEETORU	[3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334D, 0x0061 };
    uint32_t const ces[18] = { 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_188)
{
    // 334D 0041;	
    // (㍍) SQUARE MEETORU	[3E93 1C73 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334D, 0x0041 };
    uint32_t const ces[18] = { 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_189)
{
    // 334D 0062;	
    // (㍍) SQUARE MEETORU	[3E93 1C73 3E85 3E9A 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334D, 0x0062 };
    uint32_t const ces[18] = { 0x3E93, 0x1C73, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_190)
{
    // 3081 0061;	
    // (め) HIRAGANA LETTER ME	[3E93 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3081, 0x0061 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_191)
{
    // 3081 0041;	
    // (め) HIRAGANA LETTER ME	[3E93 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3081, 0x0041 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_192)
{
    // 30E1 0061;	
    // (メ) KATAKANA LETTER ME	[3E93 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E1, 0x0061 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_193)
{
    // 30E1 0041;	
    // (メ) KATAKANA LETTER ME	[3E93 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E1, 0x0041 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_194)
{
    // FF92 0061;	
    // (ﾒ) HALFWIDTH KATAKANA LETTER ME	[3E93 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF92, 0x0061 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_195)
{
    // FF92 0041;	
    // (ﾒ) HALFWIDTH KATAKANA LETTER ME	[3E93 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF92, 0x0041 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_196)
{
    // 32F1 0061;	
    // (㋱) CIRCLED KATAKANA ME	[3E93 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F1, 0x0061 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_197)
{
    // 32F1 0041;	
    // (㋱) CIRCLED KATAKANA ME	[3E93 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F1, 0x0041 };
    uint32_t const ces[9] = { 0x3E93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_198)
{
    // 3081 0062;	
    // (め) HIRAGANA LETTER ME	[3E93 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3081, 0x0062 };
    uint32_t const ces[9] = { 0x3E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_199)
{
    // 30E1 0062;	
    // (メ) KATAKANA LETTER ME	[3E93 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E1, 0x0062 };
    uint32_t const ces[9] = { 0x3E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_200)
{
    // FF92 0062;	
    // (ﾒ) HALFWIDTH KATAKANA LETTER ME	[3E93 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF92, 0x0062 };
    uint32_t const ces[9] = { 0x3E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_201)
{
    // 32F1 0062;	
    // (㋱) CIRCLED KATAKANA ME	[3E93 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F1, 0x0062 };
    uint32_t const ces[9] = { 0x3E93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_202)
{
    // 334B 0021;	
    // (㍋) SQUARE MEGA	[3E93 3E77 0261 | 0020 0020 0037 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334B, 0x0021 };
    uint32_t const ces[14] = { 0x3E93, 0x3E77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_203)
{
    // 334B 003F;	
    // (㍋) SQUARE MEGA	[3E93 3E77 0267 | 0020 0020 0037 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334B, 0x003F };
    uint32_t const ces[14] = { 0x3E93, 0x3E77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_204)
{
    // 334B 0061;	
    // (㍋) SQUARE MEGA	[3E93 3E77 1CAD | 0020 0020 0037 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334B, 0x0061 };
    uint32_t const ces[14] = { 0x3E93, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_205)
{
    // 334B 0041;	
    // (㍋) SQUARE MEGA	[3E93 3E77 1CAD | 0020 0020 0037 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334B, 0x0041 };
    uint32_t const ces[14] = { 0x3E93, 0x3E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_206)
{
    // 334B 0062;	
    // (㍋) SQUARE MEGA	[3E93 3E77 1CC6 | 0020 0020 0037 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334B, 0x0062 };
    uint32_t const ces[14] = { 0x3E93, 0x3E77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_207)
{
    // 334C 0021;	
    // (㍌) SQUARE MEGATON	[3E93 3E77 3E85 3EA1 0261 | 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334C, 0x0021 };
    uint32_t const ces[20] = { 0x3E93, 0x3E77, 0x3E85, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_208)
{
    // 334C 003F;	
    // (㍌) SQUARE MEGATON	[3E93 3E77 3E85 3EA1 0267 | 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334C, 0x003F };
    uint32_t const ces[20] = { 0x3E93, 0x3E77, 0x3E85, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_209)
{
    // 334C 0061;	
    // (㍌) SQUARE MEGATON	[3E93 3E77 3E85 3EA1 1CAD | 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334C, 0x0061 };
    uint32_t const ces[20] = { 0x3E93, 0x3E77, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_210)
{
    // 334C 0041;	
    // (㍌) SQUARE MEGATON	[3E93 3E77 3E85 3EA1 1CAD | 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334C, 0x0041 };
    uint32_t const ces[20] = { 0x3E93, 0x3E77, 0x3E85, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_211)
{
    // 334C 0062;	
    // (㍌) SQUARE MEGATON	[3E93 3E77 3E85 3EA1 1CC6 | 0020 0020 0037 0020 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334C, 0x0062 };
    uint32_t const ces[20] = { 0x3E93, 0x3E77, 0x3E85, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_212)
{
    // 3082 0021;	
    // (も) HIRAGANA LETTER MO	[3E94 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3082, 0x0021 };
    uint32_t const ces[9] = { 0x3E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_213)
{
    // 30E2 0021;	
    // (モ) KATAKANA LETTER MO	[3E94 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E2, 0x0021 };
    uint32_t const ces[9] = { 0x3E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_214)
{
    // FF93 0021;	
    // (ﾓ) HALFWIDTH KATAKANA LETTER MO	[3E94 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF93, 0x0021 };
    uint32_t const ces[9] = { 0x3E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_215)
{
    // 32F2 0021;	
    // (㋲) CIRCLED KATAKANA MO	[3E94 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F2, 0x0021 };
    uint32_t const ces[9] = { 0x3E94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_216)
{
    // 3082 003F;	
    // (も) HIRAGANA LETTER MO	[3E94 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3082, 0x003F };
    uint32_t const ces[9] = { 0x3E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_217)
{
    // 30E2 003F;	
    // (モ) KATAKANA LETTER MO	[3E94 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E2, 0x003F };
    uint32_t const ces[9] = { 0x3E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_218)
{
    // FF93 003F;	
    // (ﾓ) HALFWIDTH KATAKANA LETTER MO	[3E94 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF93, 0x003F };
    uint32_t const ces[9] = { 0x3E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_219)
{
    // 32F2 003F;	
    // (㋲) CIRCLED KATAKANA MO	[3E94 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F2, 0x003F };
    uint32_t const ces[9] = { 0x3E94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_220)
{
    // 3082 0061;	
    // (も) HIRAGANA LETTER MO	[3E94 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3082, 0x0061 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_221)
{
    // 3082 0041;	
    // (も) HIRAGANA LETTER MO	[3E94 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3082, 0x0041 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_222)
{
    // 30E2 0061;	
    // (モ) KATAKANA LETTER MO	[3E94 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E2, 0x0061 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_223)
{
    // 30E2 0041;	
    // (モ) KATAKANA LETTER MO	[3E94 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E2, 0x0041 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_224)
{
    // FF93 0061;	
    // (ﾓ) HALFWIDTH KATAKANA LETTER MO	[3E94 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF93, 0x0061 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_225)
{
    // FF93 0041;	
    // (ﾓ) HALFWIDTH KATAKANA LETTER MO	[3E94 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF93, 0x0041 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_226)
{
    // 32F2 0061;	
    // (㋲) CIRCLED KATAKANA MO	[3E94 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F2, 0x0061 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_227)
{
    // 32F2 0041;	
    // (㋲) CIRCLED KATAKANA MO	[3E94 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F2, 0x0041 };
    uint32_t const ces[9] = { 0x3E94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_228)
{
    // 3082 0062;	
    // (も) HIRAGANA LETTER MO	[3E94 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3082, 0x0062 };
    uint32_t const ces[9] = { 0x3E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_229)
{
    // 30E2 0062;	
    // (モ) KATAKANA LETTER MO	[3E94 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E2, 0x0062 };
    uint32_t const ces[9] = { 0x3E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_230)
{
    // FF93 0062;	
    // (ﾓ) HALFWIDTH KATAKANA LETTER MO	[3E94 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF93, 0x0062 };
    uint32_t const ces[9] = { 0x3E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_231)
{
    // 32F2 0062;	
    // (㋲) CIRCLED KATAKANA MO	[3E94 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F2, 0x0062 };
    uint32_t const ces[9] = { 0x3E94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_232)
{
    // 3083 0021;	
    // (ゃ) HIRAGANA LETTER SMALL YA	[3E95 0261 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3083, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_233)
{
    // 3084 0021;	
    // (や) HIRAGANA LETTER YA	[3E95 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3084, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_234)
{
    // 30E3 0021;	
    // (ャ) KATAKANA LETTER SMALL YA	[3E95 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E3, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_235)
{
    // FF6C 0021;	
    // (ｬ) HALFWIDTH KATAKANA LETTER SMALL YA	[3E95 0261 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6C, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_236)
{
    // 30E4 0021;	
    // (ヤ) KATAKANA LETTER YA	[3E95 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E4, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_237)
{
    // FF94 0021;	
    // (ﾔ) HALFWIDTH KATAKANA LETTER YA	[3E95 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF94, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_238)
{
    // 32F3 0021;	
    // (㋳) CIRCLED KATAKANA YA	[3E95 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F3, 0x0021 };
    uint32_t const ces[9] = { 0x3E95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_239)
{
    // 3083 003F;	
    // (ゃ) HIRAGANA LETTER SMALL YA	[3E95 0267 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3083, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_240)
{
    // 3084 003F;	
    // (や) HIRAGANA LETTER YA	[3E95 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3084, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_241)
{
    // 30E3 003F;	
    // (ャ) KATAKANA LETTER SMALL YA	[3E95 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E3, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_242)
{
    // FF6C 003F;	
    // (ｬ) HALFWIDTH KATAKANA LETTER SMALL YA	[3E95 0267 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6C, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_243)
{
    // 30E4 003F;	
    // (ヤ) KATAKANA LETTER YA	[3E95 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E4, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_244)
{
    // FF94 003F;	
    // (ﾔ) HALFWIDTH KATAKANA LETTER YA	[3E95 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF94, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_245)
{
    // 32F3 003F;	
    // (㋳) CIRCLED KATAKANA YA	[3E95 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F3, 0x003F };
    uint32_t const ces[9] = { 0x3E95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_246)
{
    // 334E 0021;	
    // (㍎) SQUARE YAADO	[3E95 1C73 3E85 0261 | 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334E, 0x0021 };
    uint32_t const ces[17] = { 0x3E95, 0x1C73, 0x3E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_247)
{
    // 334E 003F;	
    // (㍎) SQUARE YAADO	[3E95 1C73 3E85 0267 | 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334E, 0x003F };
    uint32_t const ces[17] = { 0x3E95, 0x1C73, 0x3E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_248)
{
    // 334E 0061;	
    // (㍎) SQUARE YAADO	[3E95 1C73 3E85 1CAD | 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334E, 0x0061 };
    uint32_t const ces[17] = { 0x3E95, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_249)
{
    // 334E 0041;	
    // (㍎) SQUARE YAADO	[3E95 1C73 3E85 1CAD | 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334E, 0x0041 };
    uint32_t const ces[17] = { 0x3E95, 0x1C73, 0x3E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_250)
{
    // 334E 0062;	
    // (㍎) SQUARE YAADO	[3E95 1C73 3E85 1CC6 | 0020 0020 0020 0037 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334E, 0x0062 };
    uint32_t const ces[17] = { 0x3E95, 0x1C73, 0x3E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_251)
{
    // 334F 0021;	
    // (㍏) SQUARE YAARU	[3E95 1C73 3E9A 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334F, 0x0021 };
    uint32_t const ces[15] = { 0x3E95, 0x1C73, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_252)
{
    // 334F 003F;	
    // (㍏) SQUARE YAARU	[3E95 1C73 3E9A 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334F, 0x003F };
    uint32_t const ces[15] = { 0x3E95, 0x1C73, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_253)
{
    // 334F 0061;	
    // (㍏) SQUARE YAARU	[3E95 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334F, 0x0061 };
    uint32_t const ces[15] = { 0x3E95, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_254)
{
    // 334F 0041;	
    // (㍏) SQUARE YAARU	[3E95 1C73 3E9A 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x334F, 0x0041 };
    uint32_t const ces[15] = { 0x3E95, 0x1C73, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_255)
{
    // 334F 0062;	
    // (㍏) SQUARE YAARU	[3E95 1C73 3E9A 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x334F, 0x0062 };
    uint32_t const ces[15] = { 0x3E95, 0x1C73, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_256)
{
    // 3083 0061;	
    // (ゃ) HIRAGANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3083, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_257)
{
    // 3083 0041;	
    // (ゃ) HIRAGANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 000D 0008 |]

    uint32_t cps[2] = { 0x3083, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_258)
{
    // 3084 0061;	
    // (や) HIRAGANA LETTER YA	[3E95 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3084, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_259)
{
    // 3084 0041;	
    // (や) HIRAGANA LETTER YA	[3E95 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3084, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_260)
{
    // 30E3 0061;	
    // (ャ) KATAKANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E3, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_261)
{
    // 30E3 0041;	
    // (ャ) KATAKANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x30E3, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_262)
{
    // FF6C 0061;	
    // (ｬ) HALFWIDTH KATAKANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6C, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_263)
{
    // FF6C 0041;	
    // (ｬ) HALFWIDTH KATAKANA LETTER SMALL YA	[3E95 1CAD | 0020 0020 | 0010 0008 |]

    uint32_t cps[2] = { 0xFF6C, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_264)
{
    // 30E4 0061;	
    // (ヤ) KATAKANA LETTER YA	[3E95 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E4, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_265)
{
    // 30E4 0041;	
    // (ヤ) KATAKANA LETTER YA	[3E95 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E4, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_266)
{
    // FF94 0061;	
    // (ﾔ) HALFWIDTH KATAKANA LETTER YA	[3E95 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF94, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_267)
{
    // FF94 0041;	
    // (ﾔ) HALFWIDTH KATAKANA LETTER YA	[3E95 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF94, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_268)
{
    // 32F3 0061;	
    // (㋳) CIRCLED KATAKANA YA	[3E95 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F3, 0x0061 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_269)
{
    // 32F3 0041;	
    // (㋳) CIRCLED KATAKANA YA	[3E95 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F3, 0x0041 };
    uint32_t const ces[9] = { 0x3E95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_270)
{
    // 3083 0062;	
    // (ゃ) HIRAGANA LETTER SMALL YA	[3E95 1CC6 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3083, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_271)
{
    // 3084 0062;	
    // (や) HIRAGANA LETTER YA	[3E95 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3084, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_272)
{
    // 30E3 0062;	
    // (ャ) KATAKANA LETTER SMALL YA	[3E95 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E3, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_273)
{
    // FF6C 0062;	
    // (ｬ) HALFWIDTH KATAKANA LETTER SMALL YA	[3E95 1CC6 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6C, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_274)
{
    // 30E4 0062;	
    // (ヤ) KATAKANA LETTER YA	[3E95 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E4, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_275)
{
    // FF94 0062;	
    // (ﾔ) HALFWIDTH KATAKANA LETTER YA	[3E95 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF94, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_276)
{
    // 32F3 0062;	
    // (㋳) CIRCLED KATAKANA YA	[3E95 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F3, 0x0062 };
    uint32_t const ces[9] = { 0x3E95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_277)
{
    // 3085 0021;	
    // (ゅ) HIRAGANA LETTER SMALL YU	[3E96 0261 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3085, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_278)
{
    // 3086 0021;	
    // (ゆ) HIRAGANA LETTER YU	[3E96 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3086, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_279)
{
    // 30E5 0021;	
    // (ュ) KATAKANA LETTER SMALL YU	[3E96 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E5, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_280)
{
    // FF6D 0021;	
    // (ｭ) HALFWIDTH KATAKANA LETTER SMALL YU	[3E96 0261 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6D, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_281)
{
    // 30E6 0021;	
    // (ユ) KATAKANA LETTER YU	[3E96 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E6, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_282)
{
    // FF95 0021;	
    // (ﾕ) HALFWIDTH KATAKANA LETTER YU	[3E96 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF95, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_283)
{
    // 32F4 0021;	
    // (㋴) CIRCLED KATAKANA YU	[3E96 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F4, 0x0021 };
    uint32_t const ces[9] = { 0x3E96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_284)
{
    // 3085 003F;	
    // (ゅ) HIRAGANA LETTER SMALL YU	[3E96 0267 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3085, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_285)
{
    // 3086 003F;	
    // (ゆ) HIRAGANA LETTER YU	[3E96 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3086, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_286)
{
    // 30E5 003F;	
    // (ュ) KATAKANA LETTER SMALL YU	[3E96 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E5, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_287)
{
    // FF6D 003F;	
    // (ｭ) HALFWIDTH KATAKANA LETTER SMALL YU	[3E96 0267 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6D, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_288)
{
    // 30E6 003F;	
    // (ユ) KATAKANA LETTER YU	[3E96 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E6, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_289)
{
    // FF95 003F;	
    // (ﾕ) HALFWIDTH KATAKANA LETTER YU	[3E96 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF95, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_290)
{
    // 32F4 003F;	
    // (㋴) CIRCLED KATAKANA YU	[3E96 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F4, 0x003F };
    uint32_t const ces[9] = { 0x3E96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_291)
{
    // 3085 0061;	
    // (ゅ) HIRAGANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3085, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_292)
{
    // 3085 0041;	
    // (ゅ) HIRAGANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 000D 0008 |]

    uint32_t cps[2] = { 0x3085, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_293)
{
    // 3086 0061;	
    // (ゆ) HIRAGANA LETTER YU	[3E96 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3086, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_294)
{
    // 3086 0041;	
    // (ゆ) HIRAGANA LETTER YU	[3E96 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3086, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_295)
{
    // 30E5 0061;	
    // (ュ) KATAKANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E5, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_296)
{
    // 30E5 0041;	
    // (ュ) KATAKANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x30E5, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_297)
{
    // FF6D 0061;	
    // (ｭ) HALFWIDTH KATAKANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6D, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_298)
{
    // FF6D 0041;	
    // (ｭ) HALFWIDTH KATAKANA LETTER SMALL YU	[3E96 1CAD | 0020 0020 | 0010 0008 |]

    uint32_t cps[2] = { 0xFF6D, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_299)
{
    // 30E6 0061;	
    // (ユ) KATAKANA LETTER YU	[3E96 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E6, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_300)
{
    // 30E6 0041;	
    // (ユ) KATAKANA LETTER YU	[3E96 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E6, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_301)
{
    // FF95 0061;	
    // (ﾕ) HALFWIDTH KATAKANA LETTER YU	[3E96 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF95, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_302)
{
    // FF95 0041;	
    // (ﾕ) HALFWIDTH KATAKANA LETTER YU	[3E96 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF95, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_303)
{
    // 32F4 0061;	
    // (㋴) CIRCLED KATAKANA YU	[3E96 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F4, 0x0061 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_304)
{
    // 32F4 0041;	
    // (㋴) CIRCLED KATAKANA YU	[3E96 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F4, 0x0041 };
    uint32_t const ces[9] = { 0x3E96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_305)
{
    // 3085 0062;	
    // (ゅ) HIRAGANA LETTER SMALL YU	[3E96 1CC6 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3085, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_306)
{
    // 3086 0062;	
    // (ゆ) HIRAGANA LETTER YU	[3E96 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3086, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_307)
{
    // 30E5 0062;	
    // (ュ) KATAKANA LETTER SMALL YU	[3E96 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E5, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_308)
{
    // FF6D 0062;	
    // (ｭ) HALFWIDTH KATAKANA LETTER SMALL YU	[3E96 1CC6 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6D, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_309)
{
    // 30E6 0062;	
    // (ユ) KATAKANA LETTER YU	[3E96 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E6, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_310)
{
    // FF95 0062;	
    // (ﾕ) HALFWIDTH KATAKANA LETTER YU	[3E96 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF95, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_311)
{
    // 32F4 0062;	
    // (㋴) CIRCLED KATAKANA YU	[3E96 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F4, 0x0062 };
    uint32_t const ces[9] = { 0x3E96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_312)
{
    // 3350 0021;	
    // (㍐) SQUARE YUAN	[3E96 3E71 3EA1 0261 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3350, 0x0021 };
    uint32_t const ces[15] = { 0x3E96, 0x3E71, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_313)
{
    // 3350 003F;	
    // (㍐) SQUARE YUAN	[3E96 3E71 3EA1 0267 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3350, 0x003F };
    uint32_t const ces[15] = { 0x3E96, 0x3E71, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_314)
{
    // 3350 0061;	
    // (㍐) SQUARE YUAN	[3E96 3E71 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3350, 0x0061 };
    uint32_t const ces[15] = { 0x3E96, 0x3E71, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_315)
{
    // 3350 0041;	
    // (㍐) SQUARE YUAN	[3E96 3E71 3EA1 1CAD | 0020 0020 0020 0020 | 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3350, 0x0041 };
    uint32_t const ces[15] = { 0x3E96, 0x3E71, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_316)
{
    // 3350 0062;	
    // (㍐) SQUARE YUAN	[3E96 3E71 3EA1 1CC6 | 0020 0020 0020 0020 | 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3350, 0x0062 };
    uint32_t const ces[15] = { 0x3E96, 0x3E71, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_317)
{
    // 3087 0021;	
    // (ょ) HIRAGANA LETTER SMALL YO	[3E97 0261 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3087, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_318)
{
    // 3088 0021;	
    // (よ) HIRAGANA LETTER YO	[3E97 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3088, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_319)
{
    // 30E7 0021;	
    // (ョ) KATAKANA LETTER SMALL YO	[3E97 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E7, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_320)
{
    // FF6E 0021;	
    // (ｮ) HALFWIDTH KATAKANA LETTER SMALL YO	[3E97 0261 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6E, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_321)
{
    // 30E8 0021;	
    // (ヨ) KATAKANA LETTER YO	[3E97 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E8, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_322)
{
    // FF96 0021;	
    // (ﾖ) HALFWIDTH KATAKANA LETTER YO	[3E97 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF96, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_323)
{
    // 32F5 0021;	
    // (㋵) CIRCLED KATAKANA YO	[3E97 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F5, 0x0021 };
    uint32_t const ces[9] = { 0x3E97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_324)
{
    // 3087 003F;	
    // (ょ) HIRAGANA LETTER SMALL YO	[3E97 0267 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3087, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_325)
{
    // 3088 003F;	
    // (よ) HIRAGANA LETTER YO	[3E97 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3088, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_326)
{
    // 30E7 003F;	
    // (ョ) KATAKANA LETTER SMALL YO	[3E97 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E7, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_327)
{
    // FF6E 003F;	
    // (ｮ) HALFWIDTH KATAKANA LETTER SMALL YO	[3E97 0267 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6E, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_328)
{
    // 30E8 003F;	
    // (ヨ) KATAKANA LETTER YO	[3E97 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E8, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_329)
{
    // FF96 003F;	
    // (ﾖ) HALFWIDTH KATAKANA LETTER YO	[3E97 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF96, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_330)
{
    // 32F5 003F;	
    // (㋵) CIRCLED KATAKANA YO	[3E97 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F5, 0x003F };
    uint32_t const ces[9] = { 0x3E97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_331)
{
    // 3087 0061;	
    // (ょ) HIRAGANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3087, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_332)
{
    // 3087 0041;	
    // (ょ) HIRAGANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 000D 0008 |]

    uint32_t cps[2] = { 0x3087, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_333)
{
    // 3088 0061;	
    // (よ) HIRAGANA LETTER YO	[3E97 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3088, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_334)
{
    // 3088 0041;	
    // (よ) HIRAGANA LETTER YO	[3E97 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3088, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_335)
{
    // 30E7 0061;	
    // (ョ) KATAKANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E7, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_336)
{
    // 30E7 0041;	
    // (ョ) KATAKANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x30E7, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_337)
{
    // FF6E 0061;	
    // (ｮ) HALFWIDTH KATAKANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6E, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_338)
{
    // FF6E 0041;	
    // (ｮ) HALFWIDTH KATAKANA LETTER SMALL YO	[3E97 1CAD | 0020 0020 | 0010 0008 |]

    uint32_t cps[2] = { 0xFF6E, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_339)
{
    // 30E8 0061;	
    // (ヨ) KATAKANA LETTER YO	[3E97 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E8, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_340)
{
    // 30E8 0041;	
    // (ヨ) KATAKANA LETTER YO	[3E97 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E8, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_341)
{
    // FF96 0061;	
    // (ﾖ) HALFWIDTH KATAKANA LETTER YO	[3E97 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF96, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_342)
{
    // FF96 0041;	
    // (ﾖ) HALFWIDTH KATAKANA LETTER YO	[3E97 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF96, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_343)
{
    // 32F5 0061;	
    // (㋵) CIRCLED KATAKANA YO	[3E97 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F5, 0x0061 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_344)
{
    // 32F5 0041;	
    // (㋵) CIRCLED KATAKANA YO	[3E97 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F5, 0x0041 };
    uint32_t const ces[9] = { 0x3E97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_345)
{
    // 3087 0062;	
    // (ょ) HIRAGANA LETTER SMALL YO	[3E97 1CC6 | 0020 0020 | 000D 0002 |]

    uint32_t cps[2] = { 0x3087, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000D, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_346)
{
    // 3088 0062;	
    // (よ) HIRAGANA LETTER YO	[3E97 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3088, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_347)
{
    // 30E7 0062;	
    // (ョ) KATAKANA LETTER SMALL YO	[3E97 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x30E7, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_348)
{
    // FF6E 0062;	
    // (ｮ) HALFWIDTH KATAKANA LETTER SMALL YO	[3E97 1CC6 | 0020 0020 | 0010 0002 |]

    uint32_t cps[2] = { 0xFF6E, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0010, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_349)
{
    // 30E8 0062;	
    // (ヨ) KATAKANA LETTER YO	[3E97 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E8, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_350)
{
    // FF96 0062;	
    // (ﾖ) HALFWIDTH KATAKANA LETTER YO	[3E97 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF96, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_351)
{
    // 32F5 0062;	
    // (㋵) CIRCLED KATAKANA YO	[3E97 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F5, 0x0062 };
    uint32_t const ces[9] = { 0x3E97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_352)
{
    // 309F 0021;	
    // (ゟ) HIRAGANA DIGRAPH YORI	[3E97 3E99 0261 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x309F, 0x0021 };
    uint32_t const ces[12] = { 0x3E97, 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_353)
{
    // 309F 003F;	
    // (ゟ) HIRAGANA DIGRAPH YORI	[3E97 3E99 0267 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x309F, 0x003F };
    uint32_t const ces[12] = { 0x3E97, 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_354)
{
    // 309F 0061;	
    // (ゟ) HIRAGANA DIGRAPH YORI	[3E97 3E99 1CAD | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x309F, 0x0061 };
    uint32_t const ces[12] = { 0x3E97, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_355)
{
    // 309F 0041;	
    // (ゟ) HIRAGANA DIGRAPH YORI	[3E97 3E99 1CAD | 0020 0020 0020 | 0016 0016 0008 |]

    uint32_t cps[2] = { 0x309F, 0x0041 };
    uint32_t const ces[12] = { 0x3E97, 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_356)
{
    // 309F 0062;	
    // (ゟ) HIRAGANA DIGRAPH YORI	[3E97 3E99 1CC6 | 0020 0020 0020 | 0016 0016 0002 |]

    uint32_t cps[2] = { 0x309F, 0x0062 };
    uint32_t const ces[12] = { 0x3E97, 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0016, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_357)
{
    // 3089 0021;	
    // (ら) HIRAGANA LETTER RA	[3E98 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3089, 0x0021 };
    uint32_t const ces[9] = { 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_358)
{
    // 31FB 0021;	
    // (ㇻ) KATAKANA LETTER SMALL RA	[3E98 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FB, 0x0021 };
    uint32_t const ces[9] = { 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_359)
{
    // 30E9 0021;	
    // (ラ) KATAKANA LETTER RA	[3E98 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E9, 0x0021 };
    uint32_t const ces[9] = { 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_360)
{
    // FF97 0021;	
    // (ﾗ) HALFWIDTH KATAKANA LETTER RA	[3E98 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF97, 0x0021 };
    uint32_t const ces[9] = { 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_361)
{
    // 32F6 0021;	
    // (㋶) CIRCLED KATAKANA RA	[3E98 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F6, 0x0021 };
    uint32_t const ces[9] = { 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_362)
{
    // 3089 003F;	
    // (ら) HIRAGANA LETTER RA	[3E98 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3089, 0x003F };
    uint32_t const ces[9] = { 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_363)
{
    // 31FB 003F;	
    // (ㇻ) KATAKANA LETTER SMALL RA	[3E98 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FB, 0x003F };
    uint32_t const ces[9] = { 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_364)
{
    // 30E9 003F;	
    // (ラ) KATAKANA LETTER RA	[3E98 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E9, 0x003F };
    uint32_t const ces[9] = { 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_365)
{
    // FF97 003F;	
    // (ﾗ) HALFWIDTH KATAKANA LETTER RA	[3E98 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF97, 0x003F };
    uint32_t const ces[9] = { 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_366)
{
    // 32F6 003F;	
    // (㋶) CIRCLED KATAKANA RA	[3E98 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F6, 0x003F };
    uint32_t const ces[9] = { 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_367)
{
    // 3089 0061;	
    // (ら) HIRAGANA LETTER RA	[3E98 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3089, 0x0061 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_368)
{
    // 3089 0041;	
    // (ら) HIRAGANA LETTER RA	[3E98 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x3089, 0x0041 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_369)
{
    // 31FB 0061;	
    // (ㇻ) KATAKANA LETTER SMALL RA	[3E98 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FB, 0x0061 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_370)
{
    // 31FB 0041;	
    // (ㇻ) KATAKANA LETTER SMALL RA	[3E98 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31FB, 0x0041 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_371)
{
    // 30E9 0061;	
    // (ラ) KATAKANA LETTER RA	[3E98 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E9, 0x0061 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_372)
{
    // 30E9 0041;	
    // (ラ) KATAKANA LETTER RA	[3E98 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30E9, 0x0041 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_373)
{
    // FF97 0061;	
    // (ﾗ) HALFWIDTH KATAKANA LETTER RA	[3E98 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF97, 0x0061 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_374)
{
    // FF97 0041;	
    // (ﾗ) HALFWIDTH KATAKANA LETTER RA	[3E98 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF97, 0x0041 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_375)
{
    // 32F6 0061;	
    // (㋶) CIRCLED KATAKANA RA	[3E98 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F6, 0x0061 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_376)
{
    // 32F6 0041;	
    // (㋶) CIRCLED KATAKANA RA	[3E98 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F6, 0x0041 };
    uint32_t const ces[9] = { 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_377)
{
    // 3089 0062;	
    // (ら) HIRAGANA LETTER RA	[3E98 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x3089, 0x0062 };
    uint32_t const ces[9] = { 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_378)
{
    // 31FB 0062;	
    // (ㇻ) KATAKANA LETTER SMALL RA	[3E98 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FB, 0x0062 };
    uint32_t const ces[9] = { 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_379)
{
    // 30E9 0062;	
    // (ラ) KATAKANA LETTER RA	[3E98 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30E9, 0x0062 };
    uint32_t const ces[9] = { 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_380)
{
    // FF97 0062;	
    // (ﾗ) HALFWIDTH KATAKANA LETTER RA	[3E98 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF97, 0x0062 };
    uint32_t const ces[9] = { 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_381)
{
    // 32F6 0062;	
    // (㋶) CIRCLED KATAKANA RA	[3E98 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F6, 0x0062 };
    uint32_t const ces[9] = { 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_382)
{
    // 308A 0021;	
    // (り) HIRAGANA LETTER RI	[3E99 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308A, 0x0021 };
    uint32_t const ces[9] = { 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_383)
{
    // 31FC 0021;	
    // (ㇼ) KATAKANA LETTER SMALL RI	[3E99 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FC, 0x0021 };
    uint32_t const ces[9] = { 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_384)
{
    // 30EA 0021;	
    // (リ) KATAKANA LETTER RI	[3E99 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EA, 0x0021 };
    uint32_t const ces[9] = { 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_385)
{
    // FF98 0021;	
    // (ﾘ) HALFWIDTH KATAKANA LETTER RI	[3E99 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF98, 0x0021 };
    uint32_t const ces[9] = { 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_386)
{
    // 32F7 0021;	
    // (㋷) CIRCLED KATAKANA RI	[3E99 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F7, 0x0021 };
    uint32_t const ces[9] = { 0x3E99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_387)
{
    // 308A 003F;	
    // (り) HIRAGANA LETTER RI	[3E99 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308A, 0x003F };
    uint32_t const ces[9] = { 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_388)
{
    // 31FC 003F;	
    // (ㇼ) KATAKANA LETTER SMALL RI	[3E99 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FC, 0x003F };
    uint32_t const ces[9] = { 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_389)
{
    // 30EA 003F;	
    // (リ) KATAKANA LETTER RI	[3E99 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EA, 0x003F };
    uint32_t const ces[9] = { 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_390)
{
    // FF98 003F;	
    // (ﾘ) HALFWIDTH KATAKANA LETTER RI	[3E99 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF98, 0x003F };
    uint32_t const ces[9] = { 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_391)
{
    // 32F7 003F;	
    // (㋷) CIRCLED KATAKANA RI	[3E99 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F7, 0x003F };
    uint32_t const ces[9] = { 0x3E99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_392)
{
    // 308A 0061;	
    // (り) HIRAGANA LETTER RI	[3E99 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308A, 0x0061 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_393)
{
    // 308A 0041;	
    // (り) HIRAGANA LETTER RI	[3E99 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x308A, 0x0041 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_394)
{
    // 31FC 0061;	
    // (ㇼ) KATAKANA LETTER SMALL RI	[3E99 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FC, 0x0061 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_395)
{
    // 31FC 0041;	
    // (ㇼ) KATAKANA LETTER SMALL RI	[3E99 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31FC, 0x0041 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_396)
{
    // 30EA 0061;	
    // (リ) KATAKANA LETTER RI	[3E99 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EA, 0x0061 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_397)
{
    // 30EA 0041;	
    // (リ) KATAKANA LETTER RI	[3E99 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30EA, 0x0041 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_398)
{
    // FF98 0061;	
    // (ﾘ) HALFWIDTH KATAKANA LETTER RI	[3E99 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF98, 0x0061 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_399)
{
    // FF98 0041;	
    // (ﾘ) HALFWIDTH KATAKANA LETTER RI	[3E99 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF98, 0x0041 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_400)
{
    // 32F7 0061;	
    // (㋷) CIRCLED KATAKANA RI	[3E99 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F7, 0x0061 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_401)
{
    // 32F7 0041;	
    // (㋷) CIRCLED KATAKANA RI	[3E99 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F7, 0x0041 };
    uint32_t const ces[9] = { 0x3E99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_402)
{
    // 308A 0062;	
    // (り) HIRAGANA LETTER RI	[3E99 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308A, 0x0062 };
    uint32_t const ces[9] = { 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_403)
{
    // 31FC 0062;	
    // (ㇼ) KATAKANA LETTER SMALL RI	[3E99 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FC, 0x0062 };
    uint32_t const ces[9] = { 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_404)
{
    // 30EA 0062;	
    // (リ) KATAKANA LETTER RI	[3E99 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EA, 0x0062 };
    uint32_t const ces[9] = { 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_405)
{
    // FF98 0062;	
    // (ﾘ) HALFWIDTH KATAKANA LETTER RI	[3E99 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF98, 0x0062 };
    uint32_t const ces[9] = { 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_406)
{
    // 32F7 0062;	
    // (㋷) CIRCLED KATAKANA RI	[3E99 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F7, 0x0062 };
    uint32_t const ces[9] = { 0x3E99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_407)
{
    // 3351 0021;	
    // (㍑) SQUARE RITTORU	[3E99 3E83 3E85 3E9A 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3351, 0x0021 };
    uint32_t const ces[18] = { 0x3E99, 0x3E83, 0x3E85, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_408)
{
    // 3351 003F;	
    // (㍑) SQUARE RITTORU	[3E99 3E83 3E85 3E9A 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3351, 0x003F };
    uint32_t const ces[18] = { 0x3E99, 0x3E83, 0x3E85, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_409)
{
    // 3351 0061;	
    // (㍑) SQUARE RITTORU	[3E99 3E83 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3351, 0x0061 };
    uint32_t const ces[18] = { 0x3E99, 0x3E83, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_410)
{
    // 3351 0041;	
    // (㍑) SQUARE RITTORU	[3E99 3E83 3E85 3E9A 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3351, 0x0041 };
    uint32_t const ces[18] = { 0x3E99, 0x3E83, 0x3E85, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_411)
{
    // 3351 0062;	
    // (㍑) SQUARE RITTORU	[3E99 3E83 3E85 3E9A 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3351, 0x0062 };
    uint32_t const ces[18] = { 0x3E99, 0x3E83, 0x3E85, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 18);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 18))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_412)
{
    // 3352 0021;	
    // (㍒) SQUARE RIRA	[3E99 3E98 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3352, 0x0021 };
    uint32_t const ces[12] = { 0x3E99, 0x3E98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_413)
{
    // 3352 003F;	
    // (㍒) SQUARE RIRA	[3E99 3E98 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3352, 0x003F };
    uint32_t const ces[12] = { 0x3E99, 0x3E98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_414)
{
    // 3352 0061;	
    // (㍒) SQUARE RIRA	[3E99 3E98 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3352, 0x0061 };
    uint32_t const ces[12] = { 0x3E99, 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_415)
{
    // 3352 0041;	
    // (㍒) SQUARE RIRA	[3E99 3E98 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3352, 0x0041 };
    uint32_t const ces[12] = { 0x3E99, 0x3E98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_416)
{
    // 3352 0062;	
    // (㍒) SQUARE RIRA	[3E99 3E98 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3352, 0x0062 };
    uint32_t const ces[12] = { 0x3E99, 0x3E98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_417)
{
    // 308B 0021;	
    // (る) HIRAGANA LETTER RU	[3E9A 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308B, 0x0021 };
    uint32_t const ces[9] = { 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_418)
{
    // 31FD 0021;	
    // (ㇽ) KATAKANA LETTER SMALL RU	[3E9A 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FD, 0x0021 };
    uint32_t const ces[9] = { 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_419)
{
    // 30EB 0021;	
    // (ル) KATAKANA LETTER RU	[3E9A 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EB, 0x0021 };
    uint32_t const ces[9] = { 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_420)
{
    // FF99 0021;	
    // (ﾙ) HALFWIDTH KATAKANA LETTER RU	[3E9A 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF99, 0x0021 };
    uint32_t const ces[9] = { 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_421)
{
    // 32F8 0021;	
    // (㋸) CIRCLED KATAKANA RU	[3E9A 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F8, 0x0021 };
    uint32_t const ces[9] = { 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_422)
{
    // 308B 003F;	
    // (る) HIRAGANA LETTER RU	[3E9A 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308B, 0x003F };
    uint32_t const ces[9] = { 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_423)
{
    // 31FD 003F;	
    // (ㇽ) KATAKANA LETTER SMALL RU	[3E9A 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FD, 0x003F };
    uint32_t const ces[9] = { 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_424)
{
    // 30EB 003F;	
    // (ル) KATAKANA LETTER RU	[3E9A 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EB, 0x003F };
    uint32_t const ces[9] = { 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_425)
{
    // FF99 003F;	
    // (ﾙ) HALFWIDTH KATAKANA LETTER RU	[3E9A 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF99, 0x003F };
    uint32_t const ces[9] = { 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_426)
{
    // 32F8 003F;	
    // (㋸) CIRCLED KATAKANA RU	[3E9A 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F8, 0x003F };
    uint32_t const ces[9] = { 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_427)
{
    // 3354 0021;	
    // (㍔) SQUARE RUUBURU	[3E9A 1C73 3E8D 3E9A 0261 | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3354, 0x0021 };
    uint32_t const ces[20] = { 0x3E9A, 0x1C73, 0x3E8D, 0x3E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_428)
{
    // 3354 003F;	
    // (㍔) SQUARE RUUBURU	[3E9A 1C73 3E8D 3E9A 0267 | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3354, 0x003F };
    uint32_t const ces[20] = { 0x3E9A, 0x1C73, 0x3E8D, 0x3E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_429)
{
    // 3354 0061;	
    // (㍔) SQUARE RUUBURU	[3E9A 1C73 3E8D 3E9A 1CAD | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3354, 0x0061 };
    uint32_t const ces[20] = { 0x3E9A, 0x1C73, 0x3E8D, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_430)
{
    // 3354 0041;	
    // (㍔) SQUARE RUUBURU	[3E9A 1C73 3E8D 3E9A 1CAD | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3354, 0x0041 };
    uint32_t const ces[20] = { 0x3E9A, 0x1C73, 0x3E8D, 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_431)
{
    // 3354 0062;	
    // (㍔) SQUARE RUUBURU	[3E9A 1C73 3E8D 3E9A 1CC6 | 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3354, 0x0062 };
    uint32_t const ces[20] = { 0x3E9A, 0x1C73, 0x3E8D, 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 20);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 20))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_432)
{
    // 308B 0061;	
    // (る) HIRAGANA LETTER RU	[3E9A 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308B, 0x0061 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_433)
{
    // 308B 0041;	
    // (る) HIRAGANA LETTER RU	[3E9A 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x308B, 0x0041 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_434)
{
    // 31FD 0061;	
    // (ㇽ) KATAKANA LETTER SMALL RU	[3E9A 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FD, 0x0061 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_435)
{
    // 31FD 0041;	
    // (ㇽ) KATAKANA LETTER SMALL RU	[3E9A 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31FD, 0x0041 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_436)
{
    // 30EB 0061;	
    // (ル) KATAKANA LETTER RU	[3E9A 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EB, 0x0061 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_437)
{
    // 30EB 0041;	
    // (ル) KATAKANA LETTER RU	[3E9A 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30EB, 0x0041 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_438)
{
    // FF99 0061;	
    // (ﾙ) HALFWIDTH KATAKANA LETTER RU	[3E9A 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF99, 0x0061 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_439)
{
    // FF99 0041;	
    // (ﾙ) HALFWIDTH KATAKANA LETTER RU	[3E9A 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF99, 0x0041 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_440)
{
    // 32F8 0061;	
    // (㋸) CIRCLED KATAKANA RU	[3E9A 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F8, 0x0061 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_441)
{
    // 32F8 0041;	
    // (㋸) CIRCLED KATAKANA RU	[3E9A 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F8, 0x0041 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_442)
{
    // 308B 0062;	
    // (る) HIRAGANA LETTER RU	[3E9A 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308B, 0x0062 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_443)
{
    // 31FD 0062;	
    // (ㇽ) KATAKANA LETTER SMALL RU	[3E9A 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FD, 0x0062 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_444)
{
    // 30EB 0062;	
    // (ル) KATAKANA LETTER RU	[3E9A 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EB, 0x0062 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_445)
{
    // FF99 0062;	
    // (ﾙ) HALFWIDTH KATAKANA LETTER RU	[3E9A 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF99, 0x0062 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_446)
{
    // 32F8 0062;	
    // (㋸) CIRCLED KATAKANA RU	[3E9A 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F8, 0x0062 };
    uint32_t const ces[9] = { 0x3E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_447)
{
    // 3353 0021;	
    // (㍓) SQUARE RUPII	[3E9A 3E8C 1C73 0261 | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3353, 0x0021 };
    uint32_t const ces[17] = { 0x3E9A, 0x3E8C, 0x1C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_448)
{
    // 3353 003F;	
    // (㍓) SQUARE RUPII	[3E9A 3E8C 1C73 0267 | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3353, 0x003F };
    uint32_t const ces[17] = { 0x3E9A, 0x3E8C, 0x1C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_449)
{
    // 3353 0061;	
    // (㍓) SQUARE RUPII	[3E9A 3E8C 1C73 1CAD | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3353, 0x0061 };
    uint32_t const ces[17] = { 0x3E9A, 0x3E8C, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_450)
{
    // 3353 0041;	
    // (㍓) SQUARE RUPII	[3E9A 3E8C 1C73 1CAD | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3353, 0x0041 };
    uint32_t const ces[17] = { 0x3E9A, 0x3E8C, 0x1C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_451)
{
    // 3353 0062;	
    // (㍓) SQUARE RUPII	[3E9A 3E8C 1C73 1CC6 | 0020 0020 0038 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3353, 0x0062 };
    uint32_t const ces[17] = { 0x3E9A, 0x3E8C, 0x1C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0038, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 17);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 17))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_452)
{
    // 308C 0021;	
    // (れ) HIRAGANA LETTER RE	[3E9B 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308C, 0x0021 };
    uint32_t const ces[9] = { 0x3E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_453)
{
    // 31FE 0021;	
    // (ㇾ) KATAKANA LETTER SMALL RE	[3E9B 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FE, 0x0021 };
    uint32_t const ces[9] = { 0x3E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_454)
{
    // 30EC 0021;	
    // (レ) KATAKANA LETTER RE	[3E9B 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EC, 0x0021 };
    uint32_t const ces[9] = { 0x3E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_455)
{
    // FF9A 0021;	
    // (ﾚ) HALFWIDTH KATAKANA LETTER RE	[3E9B 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9A, 0x0021 };
    uint32_t const ces[9] = { 0x3E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_456)
{
    // 32F9 0021;	
    // (㋹) CIRCLED KATAKANA RE	[3E9B 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F9, 0x0021 };
    uint32_t const ces[9] = { 0x3E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_457)
{
    // 308C 003F;	
    // (れ) HIRAGANA LETTER RE	[3E9B 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308C, 0x003F };
    uint32_t const ces[9] = { 0x3E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_458)
{
    // 31FE 003F;	
    // (ㇾ) KATAKANA LETTER SMALL RE	[3E9B 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FE, 0x003F };
    uint32_t const ces[9] = { 0x3E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_459)
{
    // 30EC 003F;	
    // (レ) KATAKANA LETTER RE	[3E9B 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EC, 0x003F };
    uint32_t const ces[9] = { 0x3E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_460)
{
    // FF9A 003F;	
    // (ﾚ) HALFWIDTH KATAKANA LETTER RE	[3E9B 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9A, 0x003F };
    uint32_t const ces[9] = { 0x3E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_461)
{
    // 32F9 003F;	
    // (㋹) CIRCLED KATAKANA RE	[3E9B 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F9, 0x003F };
    uint32_t const ces[9] = { 0x3E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_462)
{
    // 308C 0061;	
    // (れ) HIRAGANA LETTER RE	[3E9B 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308C, 0x0061 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_463)
{
    // 308C 0041;	
    // (れ) HIRAGANA LETTER RE	[3E9B 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x308C, 0x0041 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_464)
{
    // 31FE 0061;	
    // (ㇾ) KATAKANA LETTER SMALL RE	[3E9B 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FE, 0x0061 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_465)
{
    // 31FE 0041;	
    // (ㇾ) KATAKANA LETTER SMALL RE	[3E9B 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0x31FE, 0x0041 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_466)
{
    // 30EC 0061;	
    // (レ) KATAKANA LETTER RE	[3E9B 1CAD | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EC, 0x0061 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_467)
{
    // 30EC 0041;	
    // (レ) KATAKANA LETTER RE	[3E9B 1CAD | 0020 0020 | 0011 0008 |]

    uint32_t cps[2] = { 0x30EC, 0x0041 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_468)
{
    // FF9A 0061;	
    // (ﾚ) HALFWIDTH KATAKANA LETTER RE	[3E9B 1CAD | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9A, 0x0061 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_469)
{
    // FF9A 0041;	
    // (ﾚ) HALFWIDTH KATAKANA LETTER RE	[3E9B 1CAD | 0020 0020 | 0012 0008 |]

    uint32_t cps[2] = { 0xFF9A, 0x0041 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_470)
{
    // 32F9 0061;	
    // (㋹) CIRCLED KATAKANA RE	[3E9B 1CAD | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F9, 0x0061 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_471)
{
    // 32F9 0041;	
    // (㋹) CIRCLED KATAKANA RE	[3E9B 1CAD | 0020 0020 | 0013 0008 |]

    uint32_t cps[2] = { 0x32F9, 0x0041 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_472)
{
    // 308C 0062;	
    // (れ) HIRAGANA LETTER RE	[3E9B 1CC6 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308C, 0x0062 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_473)
{
    // 31FE 0062;	
    // (ㇾ) KATAKANA LETTER SMALL RE	[3E9B 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FE, 0x0062 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_474)
{
    // 30EC 0062;	
    // (レ) KATAKANA LETTER RE	[3E9B 1CC6 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30EC, 0x0062 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_475)
{
    // FF9A 0062;	
    // (ﾚ) HALFWIDTH KATAKANA LETTER RE	[3E9B 1CC6 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9A, 0x0062 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_476)
{
    // 32F9 0062;	
    // (㋹) CIRCLED KATAKANA RE	[3E9B 1CC6 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32F9, 0x0062 };
    uint32_t const ces[9] = { 0x3E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_477)
{
    // 3355 0021;	
    // (㍕) SQUARE REMU	[3E9B 3E92 0261 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3355, 0x0021 };
    uint32_t const ces[12] = { 0x3E9B, 0x3E92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_478)
{
    // 3355 003F;	
    // (㍕) SQUARE REMU	[3E9B 3E92 0267 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3355, 0x003F };
    uint32_t const ces[12] = { 0x3E9B, 0x3E92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_479)
{
    // 3355 0061;	
    // (㍕) SQUARE REMU	[3E9B 3E92 1CAD | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3355, 0x0061 };
    uint32_t const ces[12] = { 0x3E9B, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_480)
{
    // 3355 0041;	
    // (㍕) SQUARE REMU	[3E9B 3E92 1CAD | 0020 0020 0020 | 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3355, 0x0041 };
    uint32_t const ces[12] = { 0x3E9B, 0x3E92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_481)
{
    // 3355 0062;	
    // (㍕) SQUARE REMU	[3E9B 3E92 1CC6 | 0020 0020 0020 | 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3355, 0x0062 };
    uint32_t const ces[12] = { 0x3E9B, 0x3E92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_482)
{
    // 3356 0021;	
    // (㍖) SQUARE RENTOGEN	[3E9B 3EA1 3E85 3E7A 3EA1 0261 | 0020 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3356, 0x0021 };
    uint32_t const ces[23] = { 0x3E9B, 0x3EA1, 0x3E85, 0x3E7A, 0x3EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_483)
{
    // 3356 003F;	
    // (㍖) SQUARE RENTOGEN	[3E9B 3EA1 3E85 3E7A 3EA1 0267 | 0020 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3356, 0x003F };
    uint32_t const ces[23] = { 0x3E9B, 0x3EA1, 0x3E85, 0x3E7A, 0x3EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_484)
{
    // 3356 0061;	
    // (㍖) SQUARE RENTOGEN	[3E9B 3EA1 3E85 3E7A 3EA1 1CAD | 0020 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3356, 0x0061 };
    uint32_t const ces[23] = { 0x3E9B, 0x3EA1, 0x3E85, 0x3E7A, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_485)
{
    // 3356 0041;	
    // (㍖) SQUARE RENTOGEN	[3E9B 3EA1 3E85 3E7A 3EA1 1CAD | 0020 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x3356, 0x0041 };
    uint32_t const ces[23] = { 0x3E9B, 0x3EA1, 0x3E85, 0x3E7A, 0x3EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_486)
{
    // 3356 0062;	
    // (㍖) SQUARE RENTOGEN	[3E9B 3EA1 3E85 3E7A 3EA1 1CC6 | 0020 0020 0020 0020 0037 0020 0020 | 001C 001C 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x3356, 0x0062 };
    uint32_t const ces[23] = { 0x3E9B, 0x3EA1, 0x3E85, 0x3E7A, 0x3EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0037, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 23);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 23))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_487)
{
    // 308D 0021;	
    // (ろ) HIRAGANA LETTER RO	[3E9C 0261 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308D, 0x0021 };
    uint32_t const ces[9] = { 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_488)
{
    // 31FF 0021;	
    // (ㇿ) KATAKANA LETTER SMALL RO	[3E9C 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FF, 0x0021 };
    uint32_t const ces[9] = { 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_489)
{
    // 30ED 0021;	
    // (ロ) KATAKANA LETTER RO	[3E9C 0261 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30ED, 0x0021 };
    uint32_t const ces[9] = { 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_490)
{
    // FF9B 0021;	
    // (ﾛ) HALFWIDTH KATAKANA LETTER RO	[3E9C 0261 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9B, 0x0021 };
    uint32_t const ces[9] = { 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_491)
{
    // 32FA 0021;	
    // (㋺) CIRCLED KATAKANA RO	[3E9C 0261 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32FA, 0x0021 };
    uint32_t const ces[9] = { 0x3E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_492)
{
    // 308D 003F;	
    // (ろ) HIRAGANA LETTER RO	[3E9C 0267 | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308D, 0x003F };
    uint32_t const ces[9] = { 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_493)
{
    // 31FF 003F;	
    // (ㇿ) KATAKANA LETTER SMALL RO	[3E9C 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FF, 0x003F };
    uint32_t const ces[9] = { 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_494)
{
    // 30ED 003F;	
    // (ロ) KATAKANA LETTER RO	[3E9C 0267 | 0020 0020 | 0011 0002 |]

    uint32_t cps[2] = { 0x30ED, 0x003F };
    uint32_t const ces[9] = { 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0011, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_495)
{
    // FF9B 003F;	
    // (ﾛ) HALFWIDTH KATAKANA LETTER RO	[3E9C 0267 | 0020 0020 | 0012 0002 |]

    uint32_t cps[2] = { 0xFF9B, 0x003F };
    uint32_t const ces[9] = { 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0012, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_496)
{
    // 32FA 003F;	
    // (㋺) CIRCLED KATAKANA RO	[3E9C 0267 | 0020 0020 | 0013 0002 |]

    uint32_t cps[2] = { 0x32FA, 0x003F };
    uint32_t const ces[9] = { 0x3E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0013, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_497)
{
    // 308D 0061;	
    // (ろ) HIRAGANA LETTER RO	[3E9C 1CAD | 0020 0020 | 000E 0002 |]

    uint32_t cps[2] = { 0x308D, 0x0061 };
    uint32_t const ces[9] = { 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_498)
{
    // 308D 0041;	
    // (ろ) HIRAGANA LETTER RO	[3E9C 1CAD | 0020 0020 | 000E 0008 |]

    uint32_t cps[2] = { 0x308D, 0x0041 };
    uint32_t const ces[9] = { 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000E, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_249_499)
{
    // 31FF 0061;	
    // (ㇿ) KATAKANA LETTER SMALL RO	[3E9C 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0x31FF, 0x0061 };
    uint32_t const ces[9] = { 0x3E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

