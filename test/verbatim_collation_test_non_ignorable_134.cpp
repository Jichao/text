// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_134_000)
{
    // 1FEB 003F;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEB, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_001)
{
    // 03D3 003F;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 0267 | 0020 0024 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D3, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_002)
{
    // 1F7A 003F;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_003)
{
    // 1FEA 003F;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEA, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_004)
{
    // 1FE0 003F;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 0267 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE0, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_005)
{
    // 1FE8 003F;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 0267 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE8, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_006)
{
    // 1FE6 003F;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE6, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_007)
{
    // 03CB 003F;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 0267 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CB, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_008)
{
    // 03AB 003F;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 0267 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AB, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_009)
{
    // 03D4 003F;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 0267 | 0020 002B 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D4, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_010)
{
    // 03B0 003F;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03B0, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_011)
{
    // 1FE3 003F;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA	[2042 0267 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE3, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_012)
{
    // 1FE2 003F;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 0267 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE2, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_013)
{
    // 1FE7 003F;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI	[2042 0267 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE7, 0x003F };
    uint32_t const ces[13] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_014)
{
    // 1FE1 003F;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 0267 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE1, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_015)
{
    // 1FE9 003F;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 0267 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE9, 0x003F };
    uint32_t const ces[11] = { 0x2042, 0x0267, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_016)
{
    // 03C5 0061;	
    // (υ) GREEK SMALL LETTER UPSILON	[2042 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C5, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_017)
{
    // 03C5 0041;	
    // (υ) GREEK SMALL LETTER UPSILON	[2042 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C5, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_018)
{
    // 1D6D6 0061;	
    // (𝛖) MATHEMATICAL BOLD SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D6, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_019)
{
    // 1D710 0061;	
    // (𝜐) MATHEMATICAL ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D710, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_020)
{
    // 1D74A 0061;	
    // (𝝊) MATHEMATICAL BOLD ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74A, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_021)
{
    // 1D784 0061;	
    // (𝞄) MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D784, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_022)
{
    // 1D7BE 0061;	
    // (𝞾) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BE, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_023)
{
    // 1D6D6 0041;	
    // (𝛖) MATHEMATICAL BOLD SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D6, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_024)
{
    // 1D710 0041;	
    // (𝜐) MATHEMATICAL ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D710, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_025)
{
    // 1D74A 0041;	
    // (𝝊) MATHEMATICAL BOLD ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74A, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_026)
{
    // 1D784 0041;	
    // (𝞄) MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D784, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_027)
{
    // 1D7BE 0041;	
    // (𝞾) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON	[2042 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BE, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_028)
{
    // 03A5 0061;	
    // (Υ) GREEK CAPITAL LETTER UPSILON	[2042 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A5, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_029)
{
    // 03A5 0041;	
    // (Υ) GREEK CAPITAL LETTER UPSILON	[2042 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A5, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_030)
{
    // 03D2 0061;	
    // (ϒ) GREEK UPSILON WITH HOOK SYMBOL	[2042 1CAD | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03D2, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_031)
{
    // 03D2 0041;	
    // (ϒ) GREEK UPSILON WITH HOOK SYMBOL	[2042 1CAD | 0020 0020 | 000A 0008 |]

    uint32_t cps[2] = { 0x03D2, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_032)
{
    // 1D6BC 0061;	
    // (𝚼) MATHEMATICAL BOLD CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BC, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_033)
{
    // 1D6F6 0061;	
    // (𝛶) MATHEMATICAL ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F6, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_034)
{
    // 1D730 0061;	
    // (𝜰) MATHEMATICAL BOLD ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D730, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_035)
{
    // 1D76A 0061;	
    // (𝝪) MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76A, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_036)
{
    // 1D7A4 0061;	
    // (𝞤) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A4, 0x0061 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_037)
{
    // 1D6BC 0041;	
    // (𝚼) MATHEMATICAL BOLD CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BC, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_038)
{
    // 1D6F6 0041;	
    // (𝛶) MATHEMATICAL ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F6, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_039)
{
    // 1D730 0041;	
    // (𝜰) MATHEMATICAL BOLD ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D730, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_040)
{
    // 1D76A 0041;	
    // (𝝪) MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D76A, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_041)
{
    // 1D7A4 0041;	
    // (𝞤) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON	[2042 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A4, 0x0041 };
    uint32_t const ces[9] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_042)
{
    // 1F50 0061;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 1CAD | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F50, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_043)
{
    // 1F50 0041;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 1CAD | 0020 0022 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F50, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_044)
{
    // 1F54 0061;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F54, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_045)
{
    // 1F54 0041;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F54, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_046)
{
    // 1F52 0061;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F52, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_047)
{
    // 1F52 0041;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F52, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_048)
{
    // 1F56 0061;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI	[2042 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F56, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_049)
{
    // 1F56 0041;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI	[2042 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F56, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_050)
{
    // 1F51 0061;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 1CAD | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F51, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_051)
{
    // 1F51 0041;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 1CAD | 0020 0023 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F51, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_052)
{
    // 1F59 0061;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 1CAD | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F59, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_053)
{
    // 1F59 0041;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 1CAD | 0020 0023 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F59, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_054)
{
    // 1F55 0061;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F55, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_055)
{
    // 1F55 0041;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F55, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_056)
{
    // 1F5D 0061;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_057)
{
    // 1F5D 0041;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F5D, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_058)
{
    // 1F53 0061;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F53, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_059)
{
    // 1F53 0041;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F53, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_060)
{
    // 1F5B 0061;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_061)
{
    // 1F5B 0041;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F5B, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_062)
{
    // 1F57 0061;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F57, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_063)
{
    // 1F57 0041;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F57, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_064)
{
    // 1F5F 0061;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_065)
{
    // 1F5F 0041;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F5F, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_066)
{
    // 03CD 0061;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CD, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_067)
{
    // 1F7B 0061;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_068)
{
    // 03CD 0041;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03CD, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_069)
{
    // 1F7B 0041;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F7B, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_070)
{
    // 038E 0061;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038E, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_071)
{
    // 1FEB 0061;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEB, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_072)
{
    // 038E 0041;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x038E, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_073)
{
    // 1FEB 0041;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FEB, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_074)
{
    // 03D3 0061;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 1CAD | 0020 0024 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D3, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_075)
{
    // 03D3 0041;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 1CAD | 0020 0024 0020 | 000A 0002 0008 |]

    uint32_t cps[2] = { 0x03D3, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x000A, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_076)
{
    // 1F7A 0061;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_077)
{
    // 1F7A 0041;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F7A, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_078)
{
    // 1FEA 0061;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEA, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_079)
{
    // 1FEA 0041;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FEA, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_080)
{
    // 1FE0 0061;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 1CAD | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE0, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_081)
{
    // 1FE0 0041;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 1CAD | 0020 0026 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE0, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_082)
{
    // 1FE8 0061;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 1CAD | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE8, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_083)
{
    // 1FE8 0041;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 1CAD | 0020 0026 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FE8, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_084)
{
    // 1FE6 0061;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE6, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_085)
{
    // 1FE6 0041;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE6, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_086)
{
    // 03CB 0061;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 1CAD | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CB, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_087)
{
    // 03CB 0041;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 1CAD | 0020 002B 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03CB, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_088)
{
    // 03AB 0061;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 1CAD | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AB, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_089)
{
    // 03AB 0041;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 1CAD | 0020 002B 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x03AB, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_090)
{
    // 03D4 0061;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 1CAD | 0020 002B 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D4, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_091)
{
    // 03D4 0041;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 1CAD | 0020 002B 0020 | 000A 0002 0008 |]

    uint32_t cps[2] = { 0x03D4, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_092)
{
    // 03B0 0061;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03B0, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_093)
{
    // 1FE3 0061;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA	[2042 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE3, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_094)
{
    // 03B0 0041;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03B0, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_095)
{
    // 1FE3 0041;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA	[2042 1CAD | 0020 002B 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE3, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_096)
{
    // 1FE2 0061;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE2, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_097)
{
    // 1FE2 0041;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 1CAD | 0020 002B 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE2, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_098)
{
    // 1FE7 0061;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI	[2042 1CAD | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE7, 0x0061 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_099)
{
    // 1FE7 0041;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI	[2042 1CAD | 0020 002B 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE7, 0x0041 };
    uint32_t const ces[13] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_100)
{
    // 1FE1 0061;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 1CAD | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE1, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_101)
{
    // 1FE1 0041;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 1CAD | 0020 0032 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FE1, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_102)
{
    // 1FE9 0061;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 1CAD | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE9, 0x0061 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_103)
{
    // 1FE9 0041;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 1CAD | 0020 0032 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FE9, 0x0041 };
    uint32_t const ces[11] = { 0x2042, 0x1CAD, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_104)
{
    // 03C5 0062;	
    // (υ) GREEK SMALL LETTER UPSILON	[2042 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C5, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_105)
{
    // 1D6D6 0062;	
    // (𝛖) MATHEMATICAL BOLD SMALL UPSILON	[2042 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D6, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_106)
{
    // 1D710 0062;	
    // (𝜐) MATHEMATICAL ITALIC SMALL UPSILON	[2042 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D710, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_107)
{
    // 1D74A 0062;	
    // (𝝊) MATHEMATICAL BOLD ITALIC SMALL UPSILON	[2042 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74A, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_108)
{
    // 1D784 0062;	
    // (𝞄) MATHEMATICAL SANS-SERIF BOLD SMALL UPSILON	[2042 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D784, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_109)
{
    // 1D7BE 0062;	
    // (𝞾) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL UPSILON	[2042 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BE, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_110)
{
    // 03A5 0062;	
    // (Υ) GREEK CAPITAL LETTER UPSILON	[2042 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A5, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_111)
{
    // 03D2 0062;	
    // (ϒ) GREEK UPSILON WITH HOOK SYMBOL	[2042 1CC6 | 0020 0020 | 000A 0002 |]

    uint32_t cps[2] = { 0x03D2, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000A, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_112)
{
    // 1D6BC 0062;	
    // (𝚼) MATHEMATICAL BOLD CAPITAL UPSILON	[2042 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BC, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_113)
{
    // 1D6F6 0062;	
    // (𝛶) MATHEMATICAL ITALIC CAPITAL UPSILON	[2042 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F6, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_114)
{
    // 1D730 0062;	
    // (𝜰) MATHEMATICAL BOLD ITALIC CAPITAL UPSILON	[2042 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D730, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_115)
{
    // 1D76A 0062;	
    // (𝝪) MATHEMATICAL SANS-SERIF BOLD CAPITAL UPSILON	[2042 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76A, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_116)
{
    // 1D7A4 0062;	
    // (𝞤) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL UPSILON	[2042 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A4, 0x0062 };
    uint32_t const ces[9] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_117)
{
    // 1F50 0062;	
    // (ὐ) GREEK SMALL LETTER UPSILON WITH PSILI	[2042 1CC6 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F50, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_118)
{
    // 1F54 0062;	
    // (ὔ) GREEK SMALL LETTER UPSILON WITH PSILI AND OXIA	[2042 1CC6 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F54, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_119)
{
    // 1F52 0062;	
    // (ὒ) GREEK SMALL LETTER UPSILON WITH PSILI AND VARIA	[2042 1CC6 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F52, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_120)
{
    // 1F56 0062;	
    // (ὖ) GREEK SMALL LETTER UPSILON WITH PSILI AND PERISPOMENI	[2042 1CC6 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F56, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_121)
{
    // 1F51 0062;	
    // (ὑ) GREEK SMALL LETTER UPSILON WITH DASIA	[2042 1CC6 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F51, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_122)
{
    // 1F59 0062;	
    // (Ὑ) GREEK CAPITAL LETTER UPSILON WITH DASIA	[2042 1CC6 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F59, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_123)
{
    // 1F55 0062;	
    // (ὕ) GREEK SMALL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CC6 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F55, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_124)
{
    // 1F5D 0062;	
    // (Ὕ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND OXIA	[2042 1CC6 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5D, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_125)
{
    // 1F53 0062;	
    // (ὓ) GREEK SMALL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CC6 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F53, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_126)
{
    // 1F5B 0062;	
    // (Ὓ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND VARIA	[2042 1CC6 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5B, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_127)
{
    // 1F57 0062;	
    // (ὗ) GREEK SMALL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CC6 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F57, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_128)
{
    // 1F5F 0062;	
    // (Ὗ) GREEK CAPITAL LETTER UPSILON WITH DASIA AND PERISPOMENI	[2042 1CC6 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F5F, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_129)
{
    // 03CD 0062;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH TONOS	[2042 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CD, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_130)
{
    // 1F7B 0062;	
    // (ύ) GREEK SMALL LETTER UPSILON WITH OXIA	[2042 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7B, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_131)
{
    // 038E 0062;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH TONOS	[2042 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038E, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_132)
{
    // 1FEB 0062;	
    // (Ύ) GREEK CAPITAL LETTER UPSILON WITH OXIA	[2042 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEB, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_133)
{
    // 03D3 0062;	
    // (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL	[2042 1CC6 | 0020 0024 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D3, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_134)
{
    // 1F7A 0062;	
    // (ὺ) GREEK SMALL LETTER UPSILON WITH VARIA	[2042 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7A, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_135)
{
    // 1FEA 0062;	
    // (Ὺ) GREEK CAPITAL LETTER UPSILON WITH VARIA	[2042 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FEA, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_136)
{
    // 1FE0 0062;	
    // (ῠ) GREEK SMALL LETTER UPSILON WITH VRACHY	[2042 1CC6 | 0020 0026 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE0, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_137)
{
    // 1FE8 0062;	
    // (Ῠ) GREEK CAPITAL LETTER UPSILON WITH VRACHY	[2042 1CC6 | 0020 0026 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE8, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0026, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_138)
{
    // 1FE6 0062;	
    // (ῦ) GREEK SMALL LETTER UPSILON WITH PERISPOMENI	[2042 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE6, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_139)
{
    // 03CB 0062;	
    // (ϋ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA	[2042 1CC6 | 0020 002B 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CB, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_140)
{
    // 03AB 0062;	
    // (Ϋ) GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA	[2042 1CC6 | 0020 002B 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x03AB, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_141)
{
    // 03D4 0062;	
    // (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL	[2042 1CC6 | 0020 002B 0020 | 000A 0002 0002 |]

    uint32_t cps[2] = { 0x03D4, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0020, 0x0000, 0x000A, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_142)
{
    // 03B0 0062;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS	[2042 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03B0, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_143)
{
    // 1FE3 0062;	
    // (ΰ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND OXIA	[2042 1CC6 | 0020 002B 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE3, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_144)
{
    // 1FE2 0062;	
    // (ῢ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND VARIA	[2042 1CC6 | 0020 002B 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE2, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_145)
{
    // 1FE7 0062;	
    // (ῧ) GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND PERISPOMENI	[2042 1CC6 | 0020 002B 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE7, 0x0062 };
    uint32_t const ces[13] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x002B, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_146)
{
    // 1FE1 0062;	
    // (ῡ) GREEK SMALL LETTER UPSILON WITH MACRON	[2042 1CC6 | 0020 0032 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FE1, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_147)
{
    // 1FE9 0062;	
    // (Ῡ) GREEK CAPITAL LETTER UPSILON WITH MACRON	[2042 1CC6 | 0020 0032 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FE9, 0x0062 };
    uint32_t const ces[11] = { 0x2042, 0x1CC6, 0x0000, 0x0020, 0x0032, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_148)
{
    // 03C6 0021;	
    // (φ) GREEK SMALL LETTER PHI	[2043 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C6, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_149)
{
    // 03D5 0021;	
    // (ϕ) GREEK PHI SYMBOL	[2043 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D5, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_150)
{
    // 1D6D7 0021;	
    // (𝛗) MATHEMATICAL BOLD SMALL PHI	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D7, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_151)
{
    // 1D6DF 0021;	
    // (𝛟) MATHEMATICAL BOLD PHI SYMBOL	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DF, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_152)
{
    // 1D711 0021;	
    // (𝜑) MATHEMATICAL ITALIC SMALL PHI	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D711, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_153)
{
    // 1D719 0021;	
    // (𝜙) MATHEMATICAL ITALIC PHI SYMBOL	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D719, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_154)
{
    // 1D74B 0021;	
    // (𝝋) MATHEMATICAL BOLD ITALIC SMALL PHI	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74B, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_155)
{
    // 1D753 0021;	
    // (𝝓) MATHEMATICAL BOLD ITALIC PHI SYMBOL	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D753, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_156)
{
    // 1D785 0021;	
    // (𝞅) MATHEMATICAL SANS-SERIF BOLD SMALL PHI	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D785, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_157)
{
    // 1D78D 0021;	
    // (𝞍) MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78D, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_158)
{
    // 1D7BF 0021;	
    // (𝞿) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BF, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_159)
{
    // 1D7C7 0021;	
    // (𝟇) MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL	[2043 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C7, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_160)
{
    // 03A6 0021;	
    // (Φ) GREEK CAPITAL LETTER PHI	[2043 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A6, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_161)
{
    // 1D6BD 0021;	
    // (𝚽) MATHEMATICAL BOLD CAPITAL PHI	[2043 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BD, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_162)
{
    // 1D6F7 0021;	
    // (𝛷) MATHEMATICAL ITALIC CAPITAL PHI	[2043 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F7, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_163)
{
    // 1D731 0021;	
    // (𝜱) MATHEMATICAL BOLD ITALIC CAPITAL PHI	[2043 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D731, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_164)
{
    // 1D76B 0021;	
    // (𝝫) MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI	[2043 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76B, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_165)
{
    // 1D7A5 0021;	
    // (𝞥) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI	[2043 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A5, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_166)
{
    // 1D60 0021;	
    // (ᵠ) MODIFIER LETTER SMALL GREEK PHI	[2043 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D60, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_167)
{
    // 1D69 0021;	
    // (ᵩ) GREEK SUBSCRIPT SMALL LETTER PHI	[2043 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D69, 0x0021 };
    uint32_t const ces[9] = { 0x2043, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_168)
{
    // 03C6 003F;	
    // (φ) GREEK SMALL LETTER PHI	[2043 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C6, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_169)
{
    // 03D5 003F;	
    // (ϕ) GREEK PHI SYMBOL	[2043 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D5, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_170)
{
    // 1D6D7 003F;	
    // (𝛗) MATHEMATICAL BOLD SMALL PHI	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D7, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_171)
{
    // 1D6DF 003F;	
    // (𝛟) MATHEMATICAL BOLD PHI SYMBOL	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DF, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_172)
{
    // 1D711 003F;	
    // (𝜑) MATHEMATICAL ITALIC SMALL PHI	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D711, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_173)
{
    // 1D719 003F;	
    // (𝜙) MATHEMATICAL ITALIC PHI SYMBOL	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D719, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_174)
{
    // 1D74B 003F;	
    // (𝝋) MATHEMATICAL BOLD ITALIC SMALL PHI	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74B, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_175)
{
    // 1D753 003F;	
    // (𝝓) MATHEMATICAL BOLD ITALIC PHI SYMBOL	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D753, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_176)
{
    // 1D785 003F;	
    // (𝞅) MATHEMATICAL SANS-SERIF BOLD SMALL PHI	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D785, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_177)
{
    // 1D78D 003F;	
    // (𝞍) MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78D, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_178)
{
    // 1D7BF 003F;	
    // (𝞿) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BF, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_179)
{
    // 1D7C7 003F;	
    // (𝟇) MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL	[2043 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C7, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_180)
{
    // 03A6 003F;	
    // (Φ) GREEK CAPITAL LETTER PHI	[2043 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A6, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_181)
{
    // 1D6BD 003F;	
    // (𝚽) MATHEMATICAL BOLD CAPITAL PHI	[2043 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BD, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_182)
{
    // 1D6F7 003F;	
    // (𝛷) MATHEMATICAL ITALIC CAPITAL PHI	[2043 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F7, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_183)
{
    // 1D731 003F;	
    // (𝜱) MATHEMATICAL BOLD ITALIC CAPITAL PHI	[2043 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D731, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_184)
{
    // 1D76B 003F;	
    // (𝝫) MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI	[2043 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76B, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_185)
{
    // 1D7A5 003F;	
    // (𝞥) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI	[2043 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A5, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_186)
{
    // 1D60 003F;	
    // (ᵠ) MODIFIER LETTER SMALL GREEK PHI	[2043 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D60, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_187)
{
    // 1D69 003F;	
    // (ᵩ) GREEK SUBSCRIPT SMALL LETTER PHI	[2043 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D69, 0x003F };
    uint32_t const ces[9] = { 0x2043, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_188)
{
    // 03C6 0061;	
    // (φ) GREEK SMALL LETTER PHI	[2043 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C6, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_189)
{
    // 03C6 0041;	
    // (φ) GREEK SMALL LETTER PHI	[2043 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C6, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_190)
{
    // 03D5 0061;	
    // (ϕ) GREEK PHI SYMBOL	[2043 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D5, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_191)
{
    // 03D5 0041;	
    // (ϕ) GREEK PHI SYMBOL	[2043 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x03D5, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_192)
{
    // 1D6D7 0061;	
    // (𝛗) MATHEMATICAL BOLD SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D7, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_193)
{
    // 1D6DF 0061;	
    // (𝛟) MATHEMATICAL BOLD PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DF, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_194)
{
    // 1D711 0061;	
    // (𝜑) MATHEMATICAL ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D711, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_195)
{
    // 1D719 0061;	
    // (𝜙) MATHEMATICAL ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D719, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_196)
{
    // 1D74B 0061;	
    // (𝝋) MATHEMATICAL BOLD ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74B, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_197)
{
    // 1D753 0061;	
    // (𝝓) MATHEMATICAL BOLD ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D753, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_198)
{
    // 1D785 0061;	
    // (𝞅) MATHEMATICAL SANS-SERIF BOLD SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D785, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_199)
{
    // 1D78D 0061;	
    // (𝞍) MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78D, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_200)
{
    // 1D7BF 0061;	
    // (𝞿) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BF, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_201)
{
    // 1D7C7 0061;	
    // (𝟇) MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C7, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_202)
{
    // 1D6D7 0041;	
    // (𝛗) MATHEMATICAL BOLD SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D7, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_203)
{
    // 1D6DF 0041;	
    // (𝛟) MATHEMATICAL BOLD PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6DF, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_204)
{
    // 1D711 0041;	
    // (𝜑) MATHEMATICAL ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D711, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_205)
{
    // 1D719 0041;	
    // (𝜙) MATHEMATICAL ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D719, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_206)
{
    // 1D74B 0041;	
    // (𝝋) MATHEMATICAL BOLD ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74B, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_207)
{
    // 1D753 0041;	
    // (𝝓) MATHEMATICAL BOLD ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D753, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_208)
{
    // 1D785 0041;	
    // (𝞅) MATHEMATICAL SANS-SERIF BOLD SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D785, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_209)
{
    // 1D78D 0041;	
    // (𝞍) MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D78D, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_210)
{
    // 1D7BF 0041;	
    // (𝞿) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7BF, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_211)
{
    // 1D7C7 0041;	
    // (𝟇) MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL	[2043 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C7, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_212)
{
    // 03A6 0061;	
    // (Φ) GREEK CAPITAL LETTER PHI	[2043 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A6, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_213)
{
    // 03A6 0041;	
    // (Φ) GREEK CAPITAL LETTER PHI	[2043 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A6, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_214)
{
    // 1D6BD 0061;	
    // (𝚽) MATHEMATICAL BOLD CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BD, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_215)
{
    // 1D6F7 0061;	
    // (𝛷) MATHEMATICAL ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F7, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_216)
{
    // 1D731 0061;	
    // (𝜱) MATHEMATICAL BOLD ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D731, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_217)
{
    // 1D76B 0061;	
    // (𝝫) MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76B, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_218)
{
    // 1D7A5 0061;	
    // (𝞥) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A5, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_219)
{
    // 1D6BD 0041;	
    // (𝚽) MATHEMATICAL BOLD CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BD, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_220)
{
    // 1D6F7 0041;	
    // (𝛷) MATHEMATICAL ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F7, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_221)
{
    // 1D731 0041;	
    // (𝜱) MATHEMATICAL BOLD ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D731, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_222)
{
    // 1D76B 0041;	
    // (𝝫) MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D76B, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_223)
{
    // 1D7A5 0041;	
    // (𝞥) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI	[2043 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A5, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_224)
{
    // 1D60 0061;	
    // (ᵠ) MODIFIER LETTER SMALL GREEK PHI	[2043 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D60, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_225)
{
    // 1D60 0041;	
    // (ᵠ) MODIFIER LETTER SMALL GREEK PHI	[2043 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D60, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_226)
{
    // 1D69 0061;	
    // (ᵩ) GREEK SUBSCRIPT SMALL LETTER PHI	[2043 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D69, 0x0061 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_227)
{
    // 1D69 0041;	
    // (ᵩ) GREEK SUBSCRIPT SMALL LETTER PHI	[2043 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x1D69, 0x0041 };
    uint32_t const ces[9] = { 0x2043, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_228)
{
    // 03C6 0062;	
    // (φ) GREEK SMALL LETTER PHI	[2043 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C6, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_229)
{
    // 03D5 0062;	
    // (ϕ) GREEK PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x03D5, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_230)
{
    // 1D6D7 0062;	
    // (𝛗) MATHEMATICAL BOLD SMALL PHI	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D7, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_231)
{
    // 1D6DF 0062;	
    // (𝛟) MATHEMATICAL BOLD PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DF, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_232)
{
    // 1D711 0062;	
    // (𝜑) MATHEMATICAL ITALIC SMALL PHI	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D711, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_233)
{
    // 1D719 0062;	
    // (𝜙) MATHEMATICAL ITALIC PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D719, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_234)
{
    // 1D74B 0062;	
    // (𝝋) MATHEMATICAL BOLD ITALIC SMALL PHI	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74B, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_235)
{
    // 1D753 0062;	
    // (𝝓) MATHEMATICAL BOLD ITALIC PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D753, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_236)
{
    // 1D785 0062;	
    // (𝞅) MATHEMATICAL SANS-SERIF BOLD SMALL PHI	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D785, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_237)
{
    // 1D78D 0062;	
    // (𝞍) MATHEMATICAL SANS-SERIF BOLD PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D78D, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_238)
{
    // 1D7BF 0062;	
    // (𝞿) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PHI	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7BF, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_239)
{
    // 1D7C7 0062;	
    // (𝟇) MATHEMATICAL SANS-SERIF BOLD ITALIC PHI SYMBOL	[2043 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C7, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_240)
{
    // 03A6 0062;	
    // (Φ) GREEK CAPITAL LETTER PHI	[2043 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A6, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_241)
{
    // 1D6BD 0062;	
    // (𝚽) MATHEMATICAL BOLD CAPITAL PHI	[2043 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BD, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_242)
{
    // 1D6F7 0062;	
    // (𝛷) MATHEMATICAL ITALIC CAPITAL PHI	[2043 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F7, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_243)
{
    // 1D731 0062;	
    // (𝜱) MATHEMATICAL BOLD ITALIC CAPITAL PHI	[2043 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D731, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_244)
{
    // 1D76B 0062;	
    // (𝝫) MATHEMATICAL SANS-SERIF BOLD CAPITAL PHI	[2043 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76B, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_245)
{
    // 1D7A5 0062;	
    // (𝞥) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PHI	[2043 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A5, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_246)
{
    // 1D60 0062;	
    // (ᵠ) MODIFIER LETTER SMALL GREEK PHI	[2043 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D60, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_247)
{
    // 1D69 0062;	
    // (ᵩ) GREEK SUBSCRIPT SMALL LETTER PHI	[2043 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D69, 0x0062 };
    uint32_t const ces[9] = { 0x2043, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_248)
{
    // 03C7 0021;	
    // (χ) GREEK SMALL LETTER CHI	[2044 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C7, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_249)
{
    // 1D6D8 0021;	
    // (𝛘) MATHEMATICAL BOLD SMALL CHI	[2044 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D8, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_250)
{
    // 1D712 0021;	
    // (𝜒) MATHEMATICAL ITALIC SMALL CHI	[2044 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D712, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_251)
{
    // 1D74C 0021;	
    // (𝝌) MATHEMATICAL BOLD ITALIC SMALL CHI	[2044 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74C, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_252)
{
    // 1D786 0021;	
    // (𝞆) MATHEMATICAL SANS-SERIF BOLD SMALL CHI	[2044 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D786, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_253)
{
    // 1D7C0 0021;	
    // (𝟀) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI	[2044 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C0, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_254)
{
    // 03A7 0021;	
    // (Χ) GREEK CAPITAL LETTER CHI	[2044 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A7, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_255)
{
    // 1D6BE 0021;	
    // (𝚾) MATHEMATICAL BOLD CAPITAL CHI	[2044 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BE, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_256)
{
    // 1D6F8 0021;	
    // (𝛸) MATHEMATICAL ITALIC CAPITAL CHI	[2044 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F8, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_257)
{
    // 1D732 0021;	
    // (𝜲) MATHEMATICAL BOLD ITALIC CAPITAL CHI	[2044 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D732, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_258)
{
    // 1D76C 0021;	
    // (𝝬) MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI	[2044 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76C, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_259)
{
    // 1D7A6 0021;	
    // (𝞦) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI	[2044 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A6, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_260)
{
    // 1D61 0021;	
    // (ᵡ) MODIFIER LETTER SMALL CHI	[2044 0261 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D61, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_261)
{
    // 1D6A 0021;	
    // (ᵪ) GREEK SUBSCRIPT SMALL LETTER CHI	[2044 0261 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D6A, 0x0021 };
    uint32_t const ces[9] = { 0x2044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_262)
{
    // 03C7 003F;	
    // (χ) GREEK SMALL LETTER CHI	[2044 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C7, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_263)
{
    // 1D6D8 003F;	
    // (𝛘) MATHEMATICAL BOLD SMALL CHI	[2044 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D8, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_264)
{
    // 1D712 003F;	
    // (𝜒) MATHEMATICAL ITALIC SMALL CHI	[2044 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D712, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_265)
{
    // 1D74C 003F;	
    // (𝝌) MATHEMATICAL BOLD ITALIC SMALL CHI	[2044 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74C, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_266)
{
    // 1D786 003F;	
    // (𝞆) MATHEMATICAL SANS-SERIF BOLD SMALL CHI	[2044 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D786, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_267)
{
    // 1D7C0 003F;	
    // (𝟀) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI	[2044 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C0, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_268)
{
    // 03A7 003F;	
    // (Χ) GREEK CAPITAL LETTER CHI	[2044 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A7, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_269)
{
    // 1D6BE 003F;	
    // (𝚾) MATHEMATICAL BOLD CAPITAL CHI	[2044 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BE, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_270)
{
    // 1D6F8 003F;	
    // (𝛸) MATHEMATICAL ITALIC CAPITAL CHI	[2044 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F8, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_271)
{
    // 1D732 003F;	
    // (𝜲) MATHEMATICAL BOLD ITALIC CAPITAL CHI	[2044 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D732, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_272)
{
    // 1D76C 003F;	
    // (𝝬) MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI	[2044 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76C, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_273)
{
    // 1D7A6 003F;	
    // (𝞦) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI	[2044 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A6, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_274)
{
    // 1D61 003F;	
    // (ᵡ) MODIFIER LETTER SMALL CHI	[2044 0267 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D61, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_275)
{
    // 1D6A 003F;	
    // (ᵪ) GREEK SUBSCRIPT SMALL LETTER CHI	[2044 0267 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D6A, 0x003F };
    uint32_t const ces[9] = { 0x2044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_276)
{
    // 03C7 0061;	
    // (χ) GREEK SMALL LETTER CHI	[2044 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C7, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_277)
{
    // 03C7 0041;	
    // (χ) GREEK SMALL LETTER CHI	[2044 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C7, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_278)
{
    // 1D6D8 0061;	
    // (𝛘) MATHEMATICAL BOLD SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D8, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_279)
{
    // 1D712 0061;	
    // (𝜒) MATHEMATICAL ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D712, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_280)
{
    // 1D74C 0061;	
    // (𝝌) MATHEMATICAL BOLD ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74C, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_281)
{
    // 1D786 0061;	
    // (𝞆) MATHEMATICAL SANS-SERIF BOLD SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D786, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_282)
{
    // 1D7C0 0061;	
    // (𝟀) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C0, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_283)
{
    // 1D6D8 0041;	
    // (𝛘) MATHEMATICAL BOLD SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D8, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_284)
{
    // 1D712 0041;	
    // (𝜒) MATHEMATICAL ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D712, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_285)
{
    // 1D74C 0041;	
    // (𝝌) MATHEMATICAL BOLD ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74C, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_286)
{
    // 1D786 0041;	
    // (𝞆) MATHEMATICAL SANS-SERIF BOLD SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D786, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_287)
{
    // 1D7C0 0041;	
    // (𝟀) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI	[2044 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C0, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_288)
{
    // 03A7 0061;	
    // (Χ) GREEK CAPITAL LETTER CHI	[2044 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A7, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_289)
{
    // 03A7 0041;	
    // (Χ) GREEK CAPITAL LETTER CHI	[2044 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A7, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_290)
{
    // 1D6BE 0061;	
    // (𝚾) MATHEMATICAL BOLD CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BE, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_291)
{
    // 1D6F8 0061;	
    // (𝛸) MATHEMATICAL ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F8, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_292)
{
    // 1D732 0061;	
    // (𝜲) MATHEMATICAL BOLD ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D732, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_293)
{
    // 1D76C 0061;	
    // (𝝬) MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76C, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_294)
{
    // 1D7A6 0061;	
    // (𝞦) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A6, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_295)
{
    // 1D6BE 0041;	
    // (𝚾) MATHEMATICAL BOLD CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BE, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_296)
{
    // 1D6F8 0041;	
    // (𝛸) MATHEMATICAL ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F8, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_297)
{
    // 1D732 0041;	
    // (𝜲) MATHEMATICAL BOLD ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D732, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_298)
{
    // 1D76C 0041;	
    // (𝝬) MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D76C, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_299)
{
    // 1D7A6 0041;	
    // (𝞦) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI	[2044 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A6, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_300)
{
    // 1D61 0061;	
    // (ᵡ) MODIFIER LETTER SMALL CHI	[2044 1CAD | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D61, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_301)
{
    // 1D61 0041;	
    // (ᵡ) MODIFIER LETTER SMALL CHI	[2044 1CAD | 0020 0020 | 0014 0008 |]

    uint32_t cps[2] = { 0x1D61, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_302)
{
    // 1D6A 0061;	
    // (ᵪ) GREEK SUBSCRIPT SMALL LETTER CHI	[2044 1CAD | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D6A, 0x0061 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_303)
{
    // 1D6A 0041;	
    // (ᵪ) GREEK SUBSCRIPT SMALL LETTER CHI	[2044 1CAD | 0020 0020 | 0015 0008 |]

    uint32_t cps[2] = { 0x1D6A, 0x0041 };
    uint32_t const ces[9] = { 0x2044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_304)
{
    // 03C7 0062;	
    // (χ) GREEK SMALL LETTER CHI	[2044 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C7, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_305)
{
    // 1D6D8 0062;	
    // (𝛘) MATHEMATICAL BOLD SMALL CHI	[2044 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D8, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_306)
{
    // 1D712 0062;	
    // (𝜒) MATHEMATICAL ITALIC SMALL CHI	[2044 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D712, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_307)
{
    // 1D74C 0062;	
    // (𝝌) MATHEMATICAL BOLD ITALIC SMALL CHI	[2044 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74C, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_308)
{
    // 1D786 0062;	
    // (𝞆) MATHEMATICAL SANS-SERIF BOLD SMALL CHI	[2044 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D786, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_309)
{
    // 1D7C0 0062;	
    // (𝟀) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL CHI	[2044 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C0, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_310)
{
    // 03A7 0062;	
    // (Χ) GREEK CAPITAL LETTER CHI	[2044 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A7, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_311)
{
    // 1D6BE 0062;	
    // (𝚾) MATHEMATICAL BOLD CAPITAL CHI	[2044 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BE, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_312)
{
    // 1D6F8 0062;	
    // (𝛸) MATHEMATICAL ITALIC CAPITAL CHI	[2044 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F8, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_313)
{
    // 1D732 0062;	
    // (𝜲) MATHEMATICAL BOLD ITALIC CAPITAL CHI	[2044 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D732, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_314)
{
    // 1D76C 0062;	
    // (𝝬) MATHEMATICAL SANS-SERIF BOLD CAPITAL CHI	[2044 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76C, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_315)
{
    // 1D7A6 0062;	
    // (𝞦) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL CHI	[2044 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A6, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_316)
{
    // 1D61 0062;	
    // (ᵡ) MODIFIER LETTER SMALL CHI	[2044 1CC6 | 0020 0020 | 0014 0002 |]

    uint32_t cps[2] = { 0x1D61, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0014, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_317)
{
    // 1D6A 0062;	
    // (ᵪ) GREEK SUBSCRIPT SMALL LETTER CHI	[2044 1CC6 | 0020 0020 | 0015 0002 |]

    uint32_t cps[2] = { 0x1D6A, 0x0062 };
    uint32_t const ces[9] = { 0x2044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0015, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_318)
{
    // 03C8 0021;	
    // (ψ) GREEK SMALL LETTER PSI	[2045 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C8, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_319)
{
    // 1D6D9 0021;	
    // (𝛙) MATHEMATICAL BOLD SMALL PSI	[2045 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D9, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_320)
{
    // 1D713 0021;	
    // (𝜓) MATHEMATICAL ITALIC SMALL PSI	[2045 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D713, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_321)
{
    // 1D74D 0021;	
    // (𝝍) MATHEMATICAL BOLD ITALIC SMALL PSI	[2045 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74D, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_322)
{
    // 1D787 0021;	
    // (𝞇) MATHEMATICAL SANS-SERIF BOLD SMALL PSI	[2045 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D787, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_323)
{
    // 1D7C1 0021;	
    // (𝟁) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI	[2045 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C1, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_324)
{
    // 03A8 0021;	
    // (Ψ) GREEK CAPITAL LETTER PSI	[2045 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A8, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_325)
{
    // 1D6BF 0021;	
    // (𝚿) MATHEMATICAL BOLD CAPITAL PSI	[2045 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BF, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_326)
{
    // 1D6F9 0021;	
    // (𝛹) MATHEMATICAL ITALIC CAPITAL PSI	[2045 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F9, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_327)
{
    // 1D733 0021;	
    // (𝜳) MATHEMATICAL BOLD ITALIC CAPITAL PSI	[2045 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D733, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_328)
{
    // 1D76D 0021;	
    // (𝝭) MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI	[2045 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76D, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_329)
{
    // 1D7A7 0021;	
    // (𝞧) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI	[2045 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A7, 0x0021 };
    uint32_t const ces[9] = { 0x2045, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_330)
{
    // 03C8 003F;	
    // (ψ) GREEK SMALL LETTER PSI	[2045 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C8, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_331)
{
    // 1D6D9 003F;	
    // (𝛙) MATHEMATICAL BOLD SMALL PSI	[2045 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D9, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_332)
{
    // 1D713 003F;	
    // (𝜓) MATHEMATICAL ITALIC SMALL PSI	[2045 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D713, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_333)
{
    // 1D74D 003F;	
    // (𝝍) MATHEMATICAL BOLD ITALIC SMALL PSI	[2045 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74D, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_334)
{
    // 1D787 003F;	
    // (𝞇) MATHEMATICAL SANS-SERIF BOLD SMALL PSI	[2045 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D787, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_335)
{
    // 1D7C1 003F;	
    // (𝟁) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI	[2045 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C1, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_336)
{
    // 03A8 003F;	
    // (Ψ) GREEK CAPITAL LETTER PSI	[2045 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A8, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_337)
{
    // 1D6BF 003F;	
    // (𝚿) MATHEMATICAL BOLD CAPITAL PSI	[2045 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BF, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_338)
{
    // 1D6F9 003F;	
    // (𝛹) MATHEMATICAL ITALIC CAPITAL PSI	[2045 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F9, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_339)
{
    // 1D733 003F;	
    // (𝜳) MATHEMATICAL BOLD ITALIC CAPITAL PSI	[2045 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D733, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_340)
{
    // 1D76D 003F;	
    // (𝝭) MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI	[2045 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76D, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_341)
{
    // 1D7A7 003F;	
    // (𝞧) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI	[2045 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A7, 0x003F };
    uint32_t const ces[9] = { 0x2045, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_342)
{
    // 03C8 0061;	
    // (ψ) GREEK SMALL LETTER PSI	[2045 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C8, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_343)
{
    // 03C8 0041;	
    // (ψ) GREEK SMALL LETTER PSI	[2045 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C8, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_344)
{
    // 1D6D9 0061;	
    // (𝛙) MATHEMATICAL BOLD SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D9, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_345)
{
    // 1D713 0061;	
    // (𝜓) MATHEMATICAL ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D713, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_346)
{
    // 1D74D 0061;	
    // (𝝍) MATHEMATICAL BOLD ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74D, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_347)
{
    // 1D787 0061;	
    // (𝞇) MATHEMATICAL SANS-SERIF BOLD SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D787, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_348)
{
    // 1D7C1 0061;	
    // (𝟁) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C1, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_349)
{
    // 1D6D9 0041;	
    // (𝛙) MATHEMATICAL BOLD SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6D9, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_350)
{
    // 1D713 0041;	
    // (𝜓) MATHEMATICAL ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D713, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_351)
{
    // 1D74D 0041;	
    // (𝝍) MATHEMATICAL BOLD ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74D, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_352)
{
    // 1D787 0041;	
    // (𝞇) MATHEMATICAL SANS-SERIF BOLD SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D787, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_353)
{
    // 1D7C1 0041;	
    // (𝟁) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI	[2045 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C1, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_354)
{
    // 03A8 0061;	
    // (Ψ) GREEK CAPITAL LETTER PSI	[2045 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A8, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_355)
{
    // 03A8 0041;	
    // (Ψ) GREEK CAPITAL LETTER PSI	[2045 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A8, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_356)
{
    // 1D6BF 0061;	
    // (𝚿) MATHEMATICAL BOLD CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BF, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_357)
{
    // 1D6F9 0061;	
    // (𝛹) MATHEMATICAL ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F9, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_358)
{
    // 1D733 0061;	
    // (𝜳) MATHEMATICAL BOLD ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D733, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_359)
{
    // 1D76D 0061;	
    // (𝝭) MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76D, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_360)
{
    // 1D7A7 0061;	
    // (𝞧) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A7, 0x0061 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_361)
{
    // 1D6BF 0041;	
    // (𝚿) MATHEMATICAL BOLD CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6BF, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_362)
{
    // 1D6F9 0041;	
    // (𝛹) MATHEMATICAL ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6F9, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_363)
{
    // 1D733 0041;	
    // (𝜳) MATHEMATICAL BOLD ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D733, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_364)
{
    // 1D76D 0041;	
    // (𝝭) MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D76D, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_365)
{
    // 1D7A7 0041;	
    // (𝞧) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI	[2045 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A7, 0x0041 };
    uint32_t const ces[9] = { 0x2045, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_366)
{
    // 03C8 0062;	
    // (ψ) GREEK SMALL LETTER PSI	[2045 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C8, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_367)
{
    // 1D6D9 0062;	
    // (𝛙) MATHEMATICAL BOLD SMALL PSI	[2045 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6D9, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_368)
{
    // 1D713 0062;	
    // (𝜓) MATHEMATICAL ITALIC SMALL PSI	[2045 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D713, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_369)
{
    // 1D74D 0062;	
    // (𝝍) MATHEMATICAL BOLD ITALIC SMALL PSI	[2045 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74D, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_370)
{
    // 1D787 0062;	
    // (𝞇) MATHEMATICAL SANS-SERIF BOLD SMALL PSI	[2045 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D787, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_371)
{
    // 1D7C1 0062;	
    // (𝟁) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL PSI	[2045 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C1, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_372)
{
    // 03A8 0062;	
    // (Ψ) GREEK CAPITAL LETTER PSI	[2045 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A8, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_373)
{
    // 1D6BF 0062;	
    // (𝚿) MATHEMATICAL BOLD CAPITAL PSI	[2045 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6BF, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_374)
{
    // 1D6F9 0062;	
    // (𝛹) MATHEMATICAL ITALIC CAPITAL PSI	[2045 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6F9, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_375)
{
    // 1D733 0062;	
    // (𝜳) MATHEMATICAL BOLD ITALIC CAPITAL PSI	[2045 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D733, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_376)
{
    // 1D76D 0062;	
    // (𝝭) MATHEMATICAL SANS-SERIF BOLD CAPITAL PSI	[2045 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76D, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_377)
{
    // 1D7A7 0062;	
    // (𝞧) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL PSI	[2045 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A7, 0x0062 };
    uint32_t const ces[9] = { 0x2045, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_378)
{
    // 1D2A 0021;	
    // (ᴪ) GREEK LETTER SMALL CAPITAL PSI	[2046 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2A, 0x0021 };
    uint32_t const ces[9] = { 0x2046, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_379)
{
    // 1D2A 003F;	
    // (ᴪ) GREEK LETTER SMALL CAPITAL PSI	[2046 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2A, 0x003F };
    uint32_t const ces[9] = { 0x2046, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_380)
{
    // 1D2A 0061;	
    // (ᴪ) GREEK LETTER SMALL CAPITAL PSI	[2046 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2A, 0x0061 };
    uint32_t const ces[9] = { 0x2046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_381)
{
    // 1D2A 0041;	
    // (ᴪ) GREEK LETTER SMALL CAPITAL PSI	[2046 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D2A, 0x0041 };
    uint32_t const ces[9] = { 0x2046, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_382)
{
    // 1D2A 0062;	
    // (ᴪ) GREEK LETTER SMALL CAPITAL PSI	[2046 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D2A, 0x0062 };
    uint32_t const ces[9] = { 0x2046, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_383)
{
    // 03C9 0313 0334;	
    // (ὠ) GREEK SMALL LETTER OMEGA, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_384)
{
    // 03C9 0334 0313;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_385)
{
    // 03C9 0334 0343;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0343 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_386)
{
    // 03C9 0343 0334;	
    // (ὠ) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS	[2047 | 0020 004A 0022 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_387)
{
    // 03A9 0313 0334;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0313, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_388)
{
    // 03A9 0334 0313;	
    // (Ω̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0334, 0x0313 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_389)
{
    // 03A9 0334 0343;	
    // (Ω̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0334, 0x0343 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_390)
{
    // 03A9 0343 0334;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA, COMBINING GREEK KORONIS	[2047 | 0020 004A 0022 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0343, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_391)
{
    // 03C9 0343 0334 0301;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0343, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_392)
{
    // 03C9 0343 0334 0341;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0343, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_393)
{
    // 1F60 0301 0334;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_394)
{
    // 1F60 0341 0334;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0022 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_395)
{
    // 1F68 0334 0301;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_396)
{
    // 1F68 0334 0341;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_397)
{
    // 2126 0334 0313 0301;	
    // (Ὠ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0313, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_398)
{
    // 2126 0334 0313 0341;	
    // (Ὠ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0313, 0x0341 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_399)
{
    // 1F64 0334 0345;	
    // (ὤ̴) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F64, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_400)
{
    // 1F64 0345 0334;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F64, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_401)
{
    // 1FA0 0301 0334;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FA0, 0x0301, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_402)
{
    // 1FF3 0313 0341 0334;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI, COMBINING COMMA ABOVE, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0022 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FF3, 0x0313, 0x0341, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_403)
{
    // 03A9 0313 0334 0345 0341;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0334, 0x0345, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_404)
{
    // 03A9 0343 0345 0341 0334;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING GREEK YPOGEGRAMMENI, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0343, 0x0345, 0x0341, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_405)
{
    // 1FFC 0343 0334 0341;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FFC, 0x0343, 0x0334, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_406)
{
    // 2126 0345 0313 0334 0341;	
    // (ᾨ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0345, 0x0313, 0x0334, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_407)
{
    // 03C9 0343 0334 0300;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0343, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_408)
{
    // 03C9 0343 0334 0340;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0343, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_409)
{
    // 1F60 0300 0334;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0300, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_410)
{
    // 1F60 0340 0334;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING GRAVE TONE MARK	[2047 | 0020 004A 0022 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0340, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_411)
{
    // 1F68 0334 0300;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_412)
{
    // 1F68 0334 0340;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_413)
{
    // 2126 0334 0313 0300;	
    // (Ὠ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0313, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_414)
{
    // 2126 0334 0313 0340;	
    // (Ὠ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0313, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_415)
{
    // 03C9 0334 0343 0300 0345;	
    // (ὢ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0334, 0x0343, 0x0300, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_416)
{
    // 03C9 0343 0334 0340 0345;	
    // (ὢ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY, COMBINING GRAVE TONE MARK	[2047 | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0343, 0x0334, 0x0340, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_417)
{
    // 03C9 0343 0345 0300 0334;	
    // (ᾢ) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING GREEK YPOGEGRAMMENI, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0343, 0x0345, 0x0300, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_418)
{
    // 1F62 0334 0345;	
    // (ὢ̴) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F62, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_419)
{
    // 03A9 0313 0334 0345 0340;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0334, 0x0345, 0x0340 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_420)
{
    // 03A9 0313 0340 0334 0345;	
    // (Ὢ̴) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING GRAVE TONE MARK, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0340, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_421)
{
    // 03A9 0313 0340 0345 0334;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING GRAVE TONE MARK, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0340, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_422)
{
    // 1FFC 0343 0334 0340;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FFC, 0x0343, 0x0334, 0x0340 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_423)
{
    // 03C9 0313 0342 0334;	
    // (ὦ) GREEK SMALL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0313, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_424)
{
    // 03C9 0343 0342 0334;	
    // (ὦ) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0343, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_425)
{
    // 1F60 0334 0342;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_426)
{
    // 1F60 0342 0334;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_427)
{
    // 1F68 0334 0342;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_428)
{
    // 1F6E 0334;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_429)
{
    // 2126 0313 0342 0334;	
    // (Ὦ) OHM SIGN, COMBINING COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0313, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_430)
{
    // 2126 0334 0313 0342;	
    // (Ὠ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0313, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_431)
{
    // 03C9 0343 0334 0342 0345;	
    // (ὦ̴) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING TILDE OVERLAY, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0343, 0x0334, 0x0342, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_432)
{
    // 03C9 0343 0345 0342 0334;	
    // (ᾦ) GREEK SMALL LETTER OMEGA, COMBINING GREEK KORONIS, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0343, 0x0345, 0x0342, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_433)
{
    // 1F66 0334 0345;	
    // (ὦ̴) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F66, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_434)
{
    // 1F66 0345 0334;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F66, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_435)
{
    // 03A9 0313 0334 0345 0342;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0334, 0x0345, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_436)
{
    // 03A9 0313 0342 0345 0334;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA, COMBINING COMMA ABOVE, COMBINING GREEK PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0313, 0x0342, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_437)
{
    // 03A9 0334 0343 0345 0342;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0334, 0x0343, 0x0345, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_438)
{
    // 1FFC 0334 0343 0342;	
    // (ᾨ̴) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[2047 | 0020 004A 0022 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1FFC, 0x0334, 0x0343, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_439)
{
    // 03C9 0334 0343 0345;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK KORONIS	[2047 | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0343, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_440)
{
    // 03C9 0345 0343 0334;	
    // (ᾠ) GREEK SMALL LETTER OMEGA, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK KORONIS	[2047 | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0345, 0x0343, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_441)
{
    // 1F60 0334 0345;	
    // (ὠ̴) GREEK SMALL LETTER OMEGA WITH PSILI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F60, 0x0334, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_442)
{
    // 1FF3 0334 0313;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0022 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FF3, 0x0334, 0x0313 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_443)
{
    // 03A9 0334 0313 0345;	
    // (Ὠ̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0334, 0x0313, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_444)
{
    // 03A9 0345 0313 0334;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA, COMBINING GREEK YPOGEGRAMMENI, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0345, 0x0313, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_445)
{
    // 1F68 0345 0334;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F68, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_446)
{
    // 1FFC 0313 0334;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI, COMBINING COMMA ABOVE	[2047 | 0020 004A 0022 004C | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFC, 0x0313, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0022, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_447)
{
    // 03C9 0314 0334;	
    // (ὡ) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_448)
{
    // 03C9 0334 0314;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_449)
{
    // 1F61 0334;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 | 0020 004A 0023 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F61, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_450)
{
    // 03A9 0314 0334;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0314, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_451)
{
    // 03A9 0334 0314;	
    // (Ω̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_452)
{
    // 1F69 0334;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F69, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_453)
{
    // 2126 0334 0314;	
    // (Ω̴) OHM SIGN, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x2126, 0x0334, 0x0314 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_454)
{
    // 1F61 0301 0334;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0301, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_455)
{
    // 1F61 0334 0301;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_456)
{
    // 1F61 0334 0341;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_457)
{
    // 1F61 0341 0334;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0023 0024 | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0341, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_458)
{
    // 1F69 0334 0301;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F69, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_459)
{
    // 1F69 0334 0341;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F69, 0x0334, 0x0341 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_460)
{
    // 1F6D 0334;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_461)
{
    // 2126 0314 0334 0301;	
    // (Ὡ̴) OHM SIGN, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0314, 0x0334, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_462)
{
    // 03C9 0314 0334 0301 0345;	
    // (ὥ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0314, 0x0334, 0x0301, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_463)
{
    // 1F61 0301 0345 0334;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING ACUTE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0301, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_464)
{
    // 1F61 0345 0334 0301;	
    // (ᾡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0345, 0x0334, 0x0301 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_465)
{
    // 1FA1 0341 0334;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0023 0024 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FA1, 0x0341, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_466)
{
    // 1FA9 0334 0341;	
    // (ᾩ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FA9, 0x0334, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_467)
{
    // 2126 0334 0345 0314 0341;	
    // (ᾩ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0334, 0x0345, 0x0314, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_468)
{
    // 2126 0345 0314 0334 0301;	
    // (ᾩ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0345, 0x0314, 0x0334, 0x0301 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_469)
{
    // 2126 0345 0334 0314 0341;	
    // (ᾩ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0024 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0345, 0x0334, 0x0314, 0x0341 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0024, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_470)
{
    // 03C9 0314 0334 0300;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0314, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_471)
{
    // 03C9 0314 0334 0340;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0314, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_472)
{
    // 03C9 0334 0314 0300;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0314, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_473)
{
    // 1F63 0334;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 | 0020 004A 0023 0025 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F63, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_474)
{
    // 03A9 0314 0334 0300;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0314, 0x0334, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_475)
{
    // 03A9 0314 0334 0340;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0314, 0x0334, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_476)
{
    // 03A9 0334 0314 0300;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0334, 0x0314, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_477)
{
    // 03A9 0334 0314 0340;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0025 | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03A9, 0x0334, 0x0314, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_478)
{
    // 03C9 0314 0300 0345 0334;	
    // (ᾣ) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING GRAVE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0314, 0x0300, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_479)
{
    // 03C9 0314 0334 0345 0300;	
    // (ᾡ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0314, 0x0334, 0x0345, 0x0300 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_480)
{
    // 1F61 0340 0334 0345;	
    // (ὣ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GRAVE TONE MARK, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0340, 0x0334, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_481)
{
    // 1F61 0345 0334 0300;	
    // (ᾡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0345, 0x0334, 0x0300 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_482)
{
    // 03A9 0314 0334 0300 0345;	
    // (Ὣ̴) GREEK CAPITAL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03A9, 0x0314, 0x0334, 0x0300, 0x0345 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_483)
{
    // 1FA9 0334 0340;	
    // (ᾩ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FA9, 0x0334, 0x0340 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_484)
{
    // 2126 0334 0345 0314 0340;	
    // (ᾩ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0334, 0x0345, 0x0314, 0x0340 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_485)
{
    // 2126 0345 0314 0334 0300;	
    // (ᾩ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 0025 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0345, 0x0314, 0x0334, 0x0300 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x0025, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_486)
{
    // 03C9 0314 0334 0342;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_487)
{
    // 03C9 0314 0342 0334;	
    // (ὧ) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0314, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_488)
{
    // 1F61 0334 0342;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_489)
{
    // 1F61 0342 0334;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 0023 002A | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_490)
{
    // 1F69 0334 0342;	
    // (Ὡ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F69, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_491)
{
    // 1F6F 0334;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_492)
{
    // 2126 0314 0334 0342;	
    // (Ὡ̴) OHM SIGN, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_493)
{
    // 2126 0334 0314 0342;	
    // (Ὡ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 002A | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0314, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_494)
{
    // 03C9 0314 0345 0334 0342;	
    // (ᾡ̴) GREEK SMALL LETTER OMEGA, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x03C9, 0x0314, 0x0345, 0x0334, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_495)
{
    // 1F61 0334 0345 0342;	
    // (ᾡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0334, 0x0345, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_496)
{
    // 1F61 0342 0345 0334;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GREEK PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x1F61, 0x0342, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_497)
{
    // 1F67 0345 0334;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 002A 004C | 0002 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F67, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_498)
{
    // 1F6F 0345 0334;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F6F, 0x0345, 0x0334 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_134_499)
{
    // 1FA9 0334 0342;	
    // (ᾩ̴) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FA9, 0x0334, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

