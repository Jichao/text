// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_393_000)
{
    // 4D9D 003F;	
    // (䶝) CJK UNIFIED IDEOGRAPH-4D9D	[FB80 CD9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_001)
{
    // 4D9D 0061;	
    // (䶝) CJK UNIFIED IDEOGRAPH-4D9D	[FB80 CD9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_002)
{
    // 4D9D 0041;	
    // (䶝) CJK UNIFIED IDEOGRAPH-4D9D	[FB80 CD9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_003)
{
    // 4D9D 0062;	
    // (䶝) CJK UNIFIED IDEOGRAPH-4D9D	[FB80 CD9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_004)
{
    // 4D9E 0021;	
    // (䶞) CJK UNIFIED IDEOGRAPH-4D9E	[FB80 CD9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_005)
{
    // 4D9E 003F;	
    // (䶞) CJK UNIFIED IDEOGRAPH-4D9E	[FB80 CD9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_006)
{
    // 4D9E 0061;	
    // (䶞) CJK UNIFIED IDEOGRAPH-4D9E	[FB80 CD9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_007)
{
    // 4D9E 0041;	
    // (䶞) CJK UNIFIED IDEOGRAPH-4D9E	[FB80 CD9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_008)
{
    // 4D9E 0062;	
    // (䶞) CJK UNIFIED IDEOGRAPH-4D9E	[FB80 CD9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_009)
{
    // 4D9F 0021;	
    // (䶟) CJK UNIFIED IDEOGRAPH-4D9F	[FB80 CD9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_010)
{
    // 4D9F 003F;	
    // (䶟) CJK UNIFIED IDEOGRAPH-4D9F	[FB80 CD9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCD9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_011)
{
    // 4D9F 0061;	
    // (䶟) CJK UNIFIED IDEOGRAPH-4D9F	[FB80 CD9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_012)
{
    // 4D9F 0041;	
    // (䶟) CJK UNIFIED IDEOGRAPH-4D9F	[FB80 CD9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4D9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_013)
{
    // 4D9F 0062;	
    // (䶟) CJK UNIFIED IDEOGRAPH-4D9F	[FB80 CD9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4D9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCD9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_014)
{
    // 4DA0 0021;	
    // (䶠) CJK UNIFIED IDEOGRAPH-4DA0	[FB80 CDA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_015)
{
    // 4DA0 003F;	
    // (䶠) CJK UNIFIED IDEOGRAPH-4DA0	[FB80 CDA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_016)
{
    // 4DA0 0061;	
    // (䶠) CJK UNIFIED IDEOGRAPH-4DA0	[FB80 CDA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_017)
{
    // 4DA0 0041;	
    // (䶠) CJK UNIFIED IDEOGRAPH-4DA0	[FB80 CDA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_018)
{
    // 4DA0 0062;	
    // (䶠) CJK UNIFIED IDEOGRAPH-4DA0	[FB80 CDA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_019)
{
    // 4DA1 0021;	
    // (䶡) CJK UNIFIED IDEOGRAPH-4DA1	[FB80 CDA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_020)
{
    // 4DA1 003F;	
    // (䶡) CJK UNIFIED IDEOGRAPH-4DA1	[FB80 CDA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_021)
{
    // 4DA1 0061;	
    // (䶡) CJK UNIFIED IDEOGRAPH-4DA1	[FB80 CDA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_022)
{
    // 4DA1 0041;	
    // (䶡) CJK UNIFIED IDEOGRAPH-4DA1	[FB80 CDA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_023)
{
    // 4DA1 0062;	
    // (䶡) CJK UNIFIED IDEOGRAPH-4DA1	[FB80 CDA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_024)
{
    // 4DA2 0021;	
    // (䶢) CJK UNIFIED IDEOGRAPH-4DA2	[FB80 CDA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_025)
{
    // 4DA2 003F;	
    // (䶢) CJK UNIFIED IDEOGRAPH-4DA2	[FB80 CDA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_026)
{
    // 4DA2 0061;	
    // (䶢) CJK UNIFIED IDEOGRAPH-4DA2	[FB80 CDA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_027)
{
    // 4DA2 0041;	
    // (䶢) CJK UNIFIED IDEOGRAPH-4DA2	[FB80 CDA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_028)
{
    // 4DA2 0062;	
    // (䶢) CJK UNIFIED IDEOGRAPH-4DA2	[FB80 CDA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_029)
{
    // 4DA3 0021;	
    // (䶣) CJK UNIFIED IDEOGRAPH-4DA3	[FB80 CDA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_030)
{
    // 4DA3 003F;	
    // (䶣) CJK UNIFIED IDEOGRAPH-4DA3	[FB80 CDA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_031)
{
    // 4DA3 0061;	
    // (䶣) CJK UNIFIED IDEOGRAPH-4DA3	[FB80 CDA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_032)
{
    // 4DA3 0041;	
    // (䶣) CJK UNIFIED IDEOGRAPH-4DA3	[FB80 CDA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_033)
{
    // 4DA3 0062;	
    // (䶣) CJK UNIFIED IDEOGRAPH-4DA3	[FB80 CDA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_034)
{
    // 4DA4 0021;	
    // (䶤) CJK UNIFIED IDEOGRAPH-4DA4	[FB80 CDA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_035)
{
    // 4DA4 003F;	
    // (䶤) CJK UNIFIED IDEOGRAPH-4DA4	[FB80 CDA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_036)
{
    // 4DA4 0061;	
    // (䶤) CJK UNIFIED IDEOGRAPH-4DA4	[FB80 CDA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_037)
{
    // 4DA4 0041;	
    // (䶤) CJK UNIFIED IDEOGRAPH-4DA4	[FB80 CDA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_038)
{
    // 4DA4 0062;	
    // (䶤) CJK UNIFIED IDEOGRAPH-4DA4	[FB80 CDA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_039)
{
    // 4DA5 0021;	
    // (䶥) CJK UNIFIED IDEOGRAPH-4DA5	[FB80 CDA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_040)
{
    // 4DA5 003F;	
    // (䶥) CJK UNIFIED IDEOGRAPH-4DA5	[FB80 CDA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_041)
{
    // 4DA5 0061;	
    // (䶥) CJK UNIFIED IDEOGRAPH-4DA5	[FB80 CDA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_042)
{
    // 4DA5 0041;	
    // (䶥) CJK UNIFIED IDEOGRAPH-4DA5	[FB80 CDA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_043)
{
    // 4DA5 0062;	
    // (䶥) CJK UNIFIED IDEOGRAPH-4DA5	[FB80 CDA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_044)
{
    // 4DA6 0021;	
    // (䶦) CJK UNIFIED IDEOGRAPH-4DA6	[FB80 CDA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_045)
{
    // 4DA6 003F;	
    // (䶦) CJK UNIFIED IDEOGRAPH-4DA6	[FB80 CDA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_046)
{
    // 4DA6 0061;	
    // (䶦) CJK UNIFIED IDEOGRAPH-4DA6	[FB80 CDA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_047)
{
    // 4DA6 0041;	
    // (䶦) CJK UNIFIED IDEOGRAPH-4DA6	[FB80 CDA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_048)
{
    // 4DA6 0062;	
    // (䶦) CJK UNIFIED IDEOGRAPH-4DA6	[FB80 CDA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_049)
{
    // 4DA7 0021;	
    // (䶧) CJK UNIFIED IDEOGRAPH-4DA7	[FB80 CDA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_050)
{
    // 4DA7 003F;	
    // (䶧) CJK UNIFIED IDEOGRAPH-4DA7	[FB80 CDA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_051)
{
    // 4DA7 0061;	
    // (䶧) CJK UNIFIED IDEOGRAPH-4DA7	[FB80 CDA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_052)
{
    // 4DA7 0041;	
    // (䶧) CJK UNIFIED IDEOGRAPH-4DA7	[FB80 CDA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_053)
{
    // 4DA7 0062;	
    // (䶧) CJK UNIFIED IDEOGRAPH-4DA7	[FB80 CDA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_054)
{
    // 4DA8 0021;	
    // (䶨) CJK UNIFIED IDEOGRAPH-4DA8	[FB80 CDA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_055)
{
    // 4DA8 003F;	
    // (䶨) CJK UNIFIED IDEOGRAPH-4DA8	[FB80 CDA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_056)
{
    // 4DA8 0061;	
    // (䶨) CJK UNIFIED IDEOGRAPH-4DA8	[FB80 CDA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_057)
{
    // 4DA8 0041;	
    // (䶨) CJK UNIFIED IDEOGRAPH-4DA8	[FB80 CDA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_058)
{
    // 4DA8 0062;	
    // (䶨) CJK UNIFIED IDEOGRAPH-4DA8	[FB80 CDA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_059)
{
    // 4DA9 0021;	
    // (䶩) CJK UNIFIED IDEOGRAPH-4DA9	[FB80 CDA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_060)
{
    // 4DA9 003F;	
    // (䶩) CJK UNIFIED IDEOGRAPH-4DA9	[FB80 CDA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_061)
{
    // 4DA9 0061;	
    // (䶩) CJK UNIFIED IDEOGRAPH-4DA9	[FB80 CDA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_062)
{
    // 4DA9 0041;	
    // (䶩) CJK UNIFIED IDEOGRAPH-4DA9	[FB80 CDA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_063)
{
    // 4DA9 0062;	
    // (䶩) CJK UNIFIED IDEOGRAPH-4DA9	[FB80 CDA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_064)
{
    // 4DAA 0021;	
    // (䶪) CJK UNIFIED IDEOGRAPH-4DAA	[FB80 CDAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_065)
{
    // 4DAA 003F;	
    // (䶪) CJK UNIFIED IDEOGRAPH-4DAA	[FB80 CDAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_066)
{
    // 4DAA 0061;	
    // (䶪) CJK UNIFIED IDEOGRAPH-4DAA	[FB80 CDAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_067)
{
    // 4DAA 0041;	
    // (䶪) CJK UNIFIED IDEOGRAPH-4DAA	[FB80 CDAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_068)
{
    // 4DAA 0062;	
    // (䶪) CJK UNIFIED IDEOGRAPH-4DAA	[FB80 CDAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_069)
{
    // 4DAB 0021;	
    // (䶫) CJK UNIFIED IDEOGRAPH-4DAB	[FB80 CDAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_070)
{
    // 4DAB 003F;	
    // (䶫) CJK UNIFIED IDEOGRAPH-4DAB	[FB80 CDAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_071)
{
    // 4DAB 0061;	
    // (䶫) CJK UNIFIED IDEOGRAPH-4DAB	[FB80 CDAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_072)
{
    // 4DAB 0041;	
    // (䶫) CJK UNIFIED IDEOGRAPH-4DAB	[FB80 CDAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_073)
{
    // 4DAB 0062;	
    // (䶫) CJK UNIFIED IDEOGRAPH-4DAB	[FB80 CDAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_074)
{
    // 4DAC 0021;	
    // (䶬) CJK UNIFIED IDEOGRAPH-4DAC	[FB80 CDAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_075)
{
    // 4DAC 003F;	
    // (䶬) CJK UNIFIED IDEOGRAPH-4DAC	[FB80 CDAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_076)
{
    // 4DAC 0061;	
    // (䶬) CJK UNIFIED IDEOGRAPH-4DAC	[FB80 CDAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_077)
{
    // 4DAC 0041;	
    // (䶬) CJK UNIFIED IDEOGRAPH-4DAC	[FB80 CDAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_078)
{
    // 4DAC 0062;	
    // (䶬) CJK UNIFIED IDEOGRAPH-4DAC	[FB80 CDAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_079)
{
    // 4DAD 0021;	
    // (䶭) CJK UNIFIED IDEOGRAPH-4DAD	[FB80 CDAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_080)
{
    // 4DAD 003F;	
    // (䶭) CJK UNIFIED IDEOGRAPH-4DAD	[FB80 CDAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_081)
{
    // 4DAD 0061;	
    // (䶭) CJK UNIFIED IDEOGRAPH-4DAD	[FB80 CDAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_082)
{
    // 4DAD 0041;	
    // (䶭) CJK UNIFIED IDEOGRAPH-4DAD	[FB80 CDAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_083)
{
    // 4DAD 0062;	
    // (䶭) CJK UNIFIED IDEOGRAPH-4DAD	[FB80 CDAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_084)
{
    // 4DAE 0021;	
    // (䶮) CJK UNIFIED IDEOGRAPH-4DAE	[FB80 CDAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_085)
{
    // 4DAE 003F;	
    // (䶮) CJK UNIFIED IDEOGRAPH-4DAE	[FB80 CDAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_086)
{
    // 4DAE 0061;	
    // (䶮) CJK UNIFIED IDEOGRAPH-4DAE	[FB80 CDAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_087)
{
    // 4DAE 0041;	
    // (䶮) CJK UNIFIED IDEOGRAPH-4DAE	[FB80 CDAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_088)
{
    // 4DAE 0062;	
    // (䶮) CJK UNIFIED IDEOGRAPH-4DAE	[FB80 CDAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_089)
{
    // 4DAF 0021;	
    // (䶯) CJK UNIFIED IDEOGRAPH-4DAF	[FB80 CDAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_090)
{
    // 4DAF 003F;	
    // (䶯) CJK UNIFIED IDEOGRAPH-4DAF	[FB80 CDAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_091)
{
    // 4DAF 0061;	
    // (䶯) CJK UNIFIED IDEOGRAPH-4DAF	[FB80 CDAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_092)
{
    // 4DAF 0041;	
    // (䶯) CJK UNIFIED IDEOGRAPH-4DAF	[FB80 CDAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_093)
{
    // 4DAF 0062;	
    // (䶯) CJK UNIFIED IDEOGRAPH-4DAF	[FB80 CDAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_094)
{
    // 4DB0 0021;	
    // (䶰) CJK UNIFIED IDEOGRAPH-4DB0	[FB80 CDB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_095)
{
    // 4DB0 003F;	
    // (䶰) CJK UNIFIED IDEOGRAPH-4DB0	[FB80 CDB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_096)
{
    // 4DB0 0061;	
    // (䶰) CJK UNIFIED IDEOGRAPH-4DB0	[FB80 CDB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_097)
{
    // 4DB0 0041;	
    // (䶰) CJK UNIFIED IDEOGRAPH-4DB0	[FB80 CDB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_098)
{
    // 4DB0 0062;	
    // (䶰) CJK UNIFIED IDEOGRAPH-4DB0	[FB80 CDB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_099)
{
    // 4DB1 0021;	
    // (䶱) CJK UNIFIED IDEOGRAPH-4DB1	[FB80 CDB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_100)
{
    // 4DB1 003F;	
    // (䶱) CJK UNIFIED IDEOGRAPH-4DB1	[FB80 CDB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_101)
{
    // 4DB1 0061;	
    // (䶱) CJK UNIFIED IDEOGRAPH-4DB1	[FB80 CDB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_102)
{
    // 4DB1 0041;	
    // (䶱) CJK UNIFIED IDEOGRAPH-4DB1	[FB80 CDB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_103)
{
    // 4DB1 0062;	
    // (䶱) CJK UNIFIED IDEOGRAPH-4DB1	[FB80 CDB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_104)
{
    // 4DB2 0021;	
    // (䶲) CJK UNIFIED IDEOGRAPH-4DB2	[FB80 CDB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_105)
{
    // 4DB2 003F;	
    // (䶲) CJK UNIFIED IDEOGRAPH-4DB2	[FB80 CDB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_106)
{
    // 4DB2 0061;	
    // (䶲) CJK UNIFIED IDEOGRAPH-4DB2	[FB80 CDB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_107)
{
    // 4DB2 0041;	
    // (䶲) CJK UNIFIED IDEOGRAPH-4DB2	[FB80 CDB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_108)
{
    // 4DB2 0062;	
    // (䶲) CJK UNIFIED IDEOGRAPH-4DB2	[FB80 CDB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_109)
{
    // 4DB3 0021;	
    // (䶳) CJK UNIFIED IDEOGRAPH-4DB3	[FB80 CDB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_110)
{
    // 4DB3 003F;	
    // (䶳) CJK UNIFIED IDEOGRAPH-4DB3	[FB80 CDB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_111)
{
    // 4DB3 0061;	
    // (䶳) CJK UNIFIED IDEOGRAPH-4DB3	[FB80 CDB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_112)
{
    // 4DB3 0041;	
    // (䶳) CJK UNIFIED IDEOGRAPH-4DB3	[FB80 CDB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_113)
{
    // 4DB3 0062;	
    // (䶳) CJK UNIFIED IDEOGRAPH-4DB3	[FB80 CDB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_114)
{
    // 4DB4 0021;	
    // (䶴) CJK UNIFIED IDEOGRAPH-4DB4	[FB80 CDB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_115)
{
    // 4DB4 003F;	
    // (䶴) CJK UNIFIED IDEOGRAPH-4DB4	[FB80 CDB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_116)
{
    // 4DB4 0061;	
    // (䶴) CJK UNIFIED IDEOGRAPH-4DB4	[FB80 CDB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_117)
{
    // 4DB4 0041;	
    // (䶴) CJK UNIFIED IDEOGRAPH-4DB4	[FB80 CDB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_118)
{
    // 4DB4 0062;	
    // (䶴) CJK UNIFIED IDEOGRAPH-4DB4	[FB80 CDB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_119)
{
    // 4DB5 0021;	
    // (䶵) CJK UNIFIED IDEOGRAPH-4DB5	[FB80 CDB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_120)
{
    // 4DB5 003F;	
    // (䶵) CJK UNIFIED IDEOGRAPH-4DB5	[FB80 CDB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCDB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_121)
{
    // 4DB5 0061;	
    // (䶵) CJK UNIFIED IDEOGRAPH-4DB5	[FB80 CDB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_122)
{
    // 4DB5 0041;	
    // (䶵) CJK UNIFIED IDEOGRAPH-4DB5	[FB80 CDB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4DB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_123)
{
    // 4DB5 0062;	
    // (䶵) CJK UNIFIED IDEOGRAPH-4DB5	[FB80 CDB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4DB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCDB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_124)
{
    // 20000 0021;	
    // (𠀀) CJK UNIFIED IDEOGRAPH-20000	[FB84 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20000, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_125)
{
    // 20000 003F;	
    // (𠀀) CJK UNIFIED IDEOGRAPH-20000	[FB84 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20000, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_126)
{
    // 20000 0061;	
    // (𠀀) CJK UNIFIED IDEOGRAPH-20000	[FB84 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20000, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_127)
{
    // 20000 0041;	
    // (𠀀) CJK UNIFIED IDEOGRAPH-20000	[FB84 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20000, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_128)
{
    // 20000 0062;	
    // (𠀀) CJK UNIFIED IDEOGRAPH-20000	[FB84 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20000, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_129)
{
    // 20001 0021;	
    // (𠀁) CJK UNIFIED IDEOGRAPH-20001	[FB84 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20001, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_130)
{
    // 20001 003F;	
    // (𠀁) CJK UNIFIED IDEOGRAPH-20001	[FB84 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20001, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_131)
{
    // 20001 0061;	
    // (𠀁) CJK UNIFIED IDEOGRAPH-20001	[FB84 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20001, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_132)
{
    // 20001 0041;	
    // (𠀁) CJK UNIFIED IDEOGRAPH-20001	[FB84 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20001, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_133)
{
    // 20001 0062;	
    // (𠀁) CJK UNIFIED IDEOGRAPH-20001	[FB84 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20001, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_134)
{
    // 20002 0021;	
    // (𠀂) CJK UNIFIED IDEOGRAPH-20002	[FB84 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20002, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_135)
{
    // 20002 003F;	
    // (𠀂) CJK UNIFIED IDEOGRAPH-20002	[FB84 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20002, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_136)
{
    // 20002 0061;	
    // (𠀂) CJK UNIFIED IDEOGRAPH-20002	[FB84 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20002, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_137)
{
    // 20002 0041;	
    // (𠀂) CJK UNIFIED IDEOGRAPH-20002	[FB84 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20002, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_138)
{
    // 20002 0062;	
    // (𠀂) CJK UNIFIED IDEOGRAPH-20002	[FB84 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20002, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_139)
{
    // 20003 0021;	
    // (𠀃) CJK UNIFIED IDEOGRAPH-20003	[FB84 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20003, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_140)
{
    // 20003 003F;	
    // (𠀃) CJK UNIFIED IDEOGRAPH-20003	[FB84 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20003, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_141)
{
    // 20003 0061;	
    // (𠀃) CJK UNIFIED IDEOGRAPH-20003	[FB84 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20003, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_142)
{
    // 20003 0041;	
    // (𠀃) CJK UNIFIED IDEOGRAPH-20003	[FB84 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20003, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_143)
{
    // 20003 0062;	
    // (𠀃) CJK UNIFIED IDEOGRAPH-20003	[FB84 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20003, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_144)
{
    // 20004 0021;	
    // (𠀄) CJK UNIFIED IDEOGRAPH-20004	[FB84 8004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20004, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_145)
{
    // 20004 003F;	
    // (𠀄) CJK UNIFIED IDEOGRAPH-20004	[FB84 8004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20004, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_146)
{
    // 20004 0061;	
    // (𠀄) CJK UNIFIED IDEOGRAPH-20004	[FB84 8004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20004, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_147)
{
    // 20004 0041;	
    // (𠀄) CJK UNIFIED IDEOGRAPH-20004	[FB84 8004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20004, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_148)
{
    // 20004 0062;	
    // (𠀄) CJK UNIFIED IDEOGRAPH-20004	[FB84 8004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20004, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_149)
{
    // 20005 0021;	
    // (𠀅) CJK UNIFIED IDEOGRAPH-20005	[FB84 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20005, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_150)
{
    // 20005 003F;	
    // (𠀅) CJK UNIFIED IDEOGRAPH-20005	[FB84 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20005, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_151)
{
    // 20005 0061;	
    // (𠀅) CJK UNIFIED IDEOGRAPH-20005	[FB84 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20005, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_152)
{
    // 20005 0041;	
    // (𠀅) CJK UNIFIED IDEOGRAPH-20005	[FB84 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x20005, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_153)
{
    // 20005 0062;	
    // (𠀅) CJK UNIFIED IDEOGRAPH-20005	[FB84 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x20005, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_154)
{
    // 2F803 0021;	
    // (𠄢) CJK COMPATIBILITY IDEOGRAPH-2F803	[FB84 8122 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F803, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8122, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_155)
{
    // 2F803 003F;	
    // (𠄢) CJK COMPATIBILITY IDEOGRAPH-2F803	[FB84 8122 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F803, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8122, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_156)
{
    // 2F803 0061;	
    // (𠄢) CJK COMPATIBILITY IDEOGRAPH-2F803	[FB84 8122 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F803, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_157)
{
    // 2F803 0041;	
    // (𠄢) CJK COMPATIBILITY IDEOGRAPH-2F803	[FB84 8122 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F803, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8122, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_158)
{
    // 2F803 0062;	
    // (𠄢) CJK COMPATIBILITY IDEOGRAPH-2F803	[FB84 8122 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F803, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8122, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_159)
{
    // 2F812 0021;	
    // (𠔜) CJK COMPATIBILITY IDEOGRAPH-2F812	[FB84 851C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F812, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x851C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_160)
{
    // 2F812 003F;	
    // (𠔜) CJK COMPATIBILITY IDEOGRAPH-2F812	[FB84 851C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F812, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x851C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_161)
{
    // 2F812 0061;	
    // (𠔜) CJK COMPATIBILITY IDEOGRAPH-2F812	[FB84 851C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F812, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x851C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_162)
{
    // 2F812 0041;	
    // (𠔜) CJK COMPATIBILITY IDEOGRAPH-2F812	[FB84 851C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F812, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x851C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_163)
{
    // 2F812 0062;	
    // (𠔜) CJK COMPATIBILITY IDEOGRAPH-2F812	[FB84 851C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F812, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x851C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_164)
{
    // 2F91B 0021;	
    // (𠔥) CJK COMPATIBILITY IDEOGRAPH-2F91B	[FB84 8525 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91B, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8525, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_165)
{
    // 2F91B 003F;	
    // (𠔥) CJK COMPATIBILITY IDEOGRAPH-2F91B	[FB84 8525 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91B, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8525, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_166)
{
    // 2F91B 0061;	
    // (𠔥) CJK COMPATIBILITY IDEOGRAPH-2F91B	[FB84 8525 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91B, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_167)
{
    // 2F91B 0041;	
    // (𠔥) CJK COMPATIBILITY IDEOGRAPH-2F91B	[FB84 8525 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91B, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8525, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_168)
{
    // 2F91B 0062;	
    // (𠔥) CJK COMPATIBILITY IDEOGRAPH-2F91B	[FB84 8525 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91B, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8525, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_169)
{
    // 2F816 0021;	
    // (𠕋) CJK COMPATIBILITY IDEOGRAPH-2F816	[FB84 854B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F816, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x854B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_170)
{
    // 2F816 003F;	
    // (𠕋) CJK COMPATIBILITY IDEOGRAPH-2F816	[FB84 854B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F816, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x854B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_171)
{
    // 2F816 0061;	
    // (𠕋) CJK COMPATIBILITY IDEOGRAPH-2F816	[FB84 854B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F816, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x854B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_172)
{
    // 2F816 0041;	
    // (𠕋) CJK COMPATIBILITY IDEOGRAPH-2F816	[FB84 854B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F816, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x854B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_173)
{
    // 2F816 0062;	
    // (𠕋) CJK COMPATIBILITY IDEOGRAPH-2F816	[FB84 854B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F816, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x854B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_174)
{
    // 2F80D 0021;	
    // (𠘺) CJK COMPATIBILITY IDEOGRAPH-2F80D	[FB84 863A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x863A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_175)
{
    // 2F80D 003F;	
    // (𠘺) CJK COMPATIBILITY IDEOGRAPH-2F80D	[FB84 863A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x863A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_176)
{
    // 2F80D 0061;	
    // (𠘺) CJK COMPATIBILITY IDEOGRAPH-2F80D	[FB84 863A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x863A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_177)
{
    // 2F80D 0041;	
    // (𠘺) CJK COMPATIBILITY IDEOGRAPH-2F80D	[FB84 863A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F80D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x863A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_178)
{
    // 2F80D 0062;	
    // (𠘺) CJK COMPATIBILITY IDEOGRAPH-2F80D	[FB84 863A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F80D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x863A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_179)
{
    // 2F9D9 0021;	
    // (𠠄) CJK COMPATIBILITY IDEOGRAPH-2F9D9	[FB84 8804 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8804, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_180)
{
    // 2F9D9 003F;	
    // (𠠄) CJK COMPATIBILITY IDEOGRAPH-2F9D9	[FB84 8804 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D9, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8804, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_181)
{
    // 2F9D9 0061;	
    // (𠠄) CJK COMPATIBILITY IDEOGRAPH-2F9D9	[FB84 8804 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_182)
{
    // 2F9D9 0041;	
    // (𠠄) CJK COMPATIBILITY IDEOGRAPH-2F9D9	[FB84 8804 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8804, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_183)
{
    // 2F9D9 0062;	
    // (𠠄) CJK COMPATIBILITY IDEOGRAPH-2F9D9	[FB84 8804 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8804, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_184)
{
    // 2F9DD 0021;	
    // (𠣞) CJK COMPATIBILITY IDEOGRAPH-2F9DD	[FB84 88DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x88DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_185)
{
    // 2F9DD 003F;	
    // (𠣞) CJK COMPATIBILITY IDEOGRAPH-2F9DD	[FB84 88DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9DD, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x88DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_186)
{
    // 2F9DD 0061;	
    // (𠣞) CJK COMPATIBILITY IDEOGRAPH-2F9DD	[FB84 88DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x88DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_187)
{
    // 2F9DD 0041;	
    // (𠣞) CJK COMPATIBILITY IDEOGRAPH-2F9DD	[FB84 88DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x88DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_188)
{
    // 2F9DD 0062;	
    // (𠣞) CJK COMPATIBILITY IDEOGRAPH-2F9DD	[FB84 88DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x88DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_189)
{
    // 2F834 0021;	
    // (𠨬) CJK COMPATIBILITY IDEOGRAPH-2F834	[FB84 8A2C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F834, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8A2C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_190)
{
    // 2F834 003F;	
    // (𠨬) CJK COMPATIBILITY IDEOGRAPH-2F834	[FB84 8A2C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F834, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8A2C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_191)
{
    // 2F834 0061;	
    // (𠨬) CJK COMPATIBILITY IDEOGRAPH-2F834	[FB84 8A2C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F834, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_192)
{
    // 2F834 0041;	
    // (𠨬) CJK COMPATIBILITY IDEOGRAPH-2F834	[FB84 8A2C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F834, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8A2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_193)
{
    // 2F834 0062;	
    // (𠨬) CJK COMPATIBILITY IDEOGRAPH-2F834	[FB84 8A2C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F834, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8A2C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_194)
{
    // 2F838 0021;	
    // (𠭣) CJK COMPATIBILITY IDEOGRAPH-2F838	[FB84 8B63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F838, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x8B63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_195)
{
    // 2F838 003F;	
    // (𠭣) CJK COMPATIBILITY IDEOGRAPH-2F838	[FB84 8B63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F838, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x8B63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_196)
{
    // 2F838 0061;	
    // (𠭣) CJK COMPATIBILITY IDEOGRAPH-2F838	[FB84 8B63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F838, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x8B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_197)
{
    // 2F838 0041;	
    // (𠭣) CJK COMPATIBILITY IDEOGRAPH-2F838	[FB84 8B63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F838, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x8B63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_198)
{
    // 2F838 0062;	
    // (𠭣) CJK COMPATIBILITY IDEOGRAPH-2F838	[FB84 8B63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F838, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x8B63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_199)
{
    // 2F859 0021;	
    // (𡓤) CJK COMPATIBILITY IDEOGRAPH-2F859	[FB84 94E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F859, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x94E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_200)
{
    // 2F859 003F;	
    // (𡓤) CJK COMPATIBILITY IDEOGRAPH-2F859	[FB84 94E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F859, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x94E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_201)
{
    // 2F859 0061;	
    // (𡓤) CJK COMPATIBILITY IDEOGRAPH-2F859	[FB84 94E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F859, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x94E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_202)
{
    // 2F859 0041;	
    // (𡓤) CJK COMPATIBILITY IDEOGRAPH-2F859	[FB84 94E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F859, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x94E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_203)
{
    // 2F859 0062;	
    // (𡓤) CJK COMPATIBILITY IDEOGRAPH-2F859	[FB84 94E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F859, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x94E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_204)
{
    // 2F860 0021;	
    // (𡚨) CJK COMPATIBILITY IDEOGRAPH-2F860	[FB84 96A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F860, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x96A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_205)
{
    // 2F860 003F;	
    // (𡚨) CJK COMPATIBILITY IDEOGRAPH-2F860	[FB84 96A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F860, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x96A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_206)
{
    // 2F860 0061;	
    // (𡚨) CJK COMPATIBILITY IDEOGRAPH-2F860	[FB84 96A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F860, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x96A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_207)
{
    // 2F860 0041;	
    // (𡚨) CJK COMPATIBILITY IDEOGRAPH-2F860	[FB84 96A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F860, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x96A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_208)
{
    // 2F860 0062;	
    // (𡚨) CJK COMPATIBILITY IDEOGRAPH-2F860	[FB84 96A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F860, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x96A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_209)
{
    // 2F861 0021;	
    // (𡛪) CJK COMPATIBILITY IDEOGRAPH-2F861	[FB84 96EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F861, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x96EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_210)
{
    // 2F861 003F;	
    // (𡛪) CJK COMPATIBILITY IDEOGRAPH-2F861	[FB84 96EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F861, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x96EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_211)
{
    // 2F861 0061;	
    // (𡛪) CJK COMPATIBILITY IDEOGRAPH-2F861	[FB84 96EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F861, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x96EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_212)
{
    // 2F861 0041;	
    // (𡛪) CJK COMPATIBILITY IDEOGRAPH-2F861	[FB84 96EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F861, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x96EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_213)
{
    // 2F861 0062;	
    // (𡛪) CJK COMPATIBILITY IDEOGRAPH-2F861	[FB84 96EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F861, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x96EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_214)
{
    // 2F86C 0021;	
    // (𡧈) CJK COMPATIBILITY IDEOGRAPH-2F86C	[FB84 99C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86C, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x99C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_215)
{
    // 2F86C 003F;	
    // (𡧈) CJK COMPATIBILITY IDEOGRAPH-2F86C	[FB84 99C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86C, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x99C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_216)
{
    // 2F86C 0061;	
    // (𡧈) CJK COMPATIBILITY IDEOGRAPH-2F86C	[FB84 99C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86C, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x99C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_217)
{
    // 2F86C 0041;	
    // (𡧈) CJK COMPATIBILITY IDEOGRAPH-2F86C	[FB84 99C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F86C, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x99C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_218)
{
    // 2F86C 0062;	
    // (𡧈) CJK COMPATIBILITY IDEOGRAPH-2F86C	[FB84 99C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F86C, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x99C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_219)
{
    // 2F871 0021;	
    // (𡬘) CJK COMPATIBILITY IDEOGRAPH-2F871	[FB84 9B18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F871, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x9B18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_220)
{
    // 2F871 003F;	
    // (𡬘) CJK COMPATIBILITY IDEOGRAPH-2F871	[FB84 9B18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F871, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x9B18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_221)
{
    // 2F871 0061;	
    // (𡬘) CJK COMPATIBILITY IDEOGRAPH-2F871	[FB84 9B18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F871, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x9B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_222)
{
    // 2F871 0041;	
    // (𡬘) CJK COMPATIBILITY IDEOGRAPH-2F871	[FB84 9B18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F871, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x9B18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_223)
{
    // 2F871 0062;	
    // (𡬘) CJK COMPATIBILITY IDEOGRAPH-2F871	[FB84 9B18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F871, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x9B18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_224)
{
    // 2F8F8 0021;	
    // (𡴋) CJK COMPATIBILITY IDEOGRAPH-2F8F8	[FB84 9D0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x9D0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_225)
{
    // 2F8F8 003F;	
    // (𡴋) CJK COMPATIBILITY IDEOGRAPH-2F8F8	[FB84 9D0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F8, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x9D0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_226)
{
    // 2F8F8 0061;	
    // (𡴋) CJK COMPATIBILITY IDEOGRAPH-2F8F8	[FB84 9D0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x9D0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_227)
{
    // 2F8F8 0041;	
    // (𡴋) CJK COMPATIBILITY IDEOGRAPH-2F8F8	[FB84 9D0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x9D0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_228)
{
    // 2F8F8 0062;	
    // (𡴋) CJK COMPATIBILITY IDEOGRAPH-2F8F8	[FB84 9D0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x9D0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_229)
{
    // 2F87B 0021;	
    // (𡷤) CJK COMPATIBILITY IDEOGRAPH-2F87B	[FB84 9DE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87B, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_230)
{
    // 2F87B 003F;	
    // (𡷤) CJK COMPATIBILITY IDEOGRAPH-2F87B	[FB84 9DE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87B, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x9DE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_231)
{
    // 2F87B 0061;	
    // (𡷤) CJK COMPATIBILITY IDEOGRAPH-2F87B	[FB84 9DE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87B, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_232)
{
    // 2F87B 0041;	
    // (𡷤) CJK COMPATIBILITY IDEOGRAPH-2F87B	[FB84 9DE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87B, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_233)
{
    // 2F87B 0062;	
    // (𡷤) CJK COMPATIBILITY IDEOGRAPH-2F87B	[FB84 9DE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87B, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_234)
{
    // 2F87D 0021;	
    // (𡷦) CJK COMPATIBILITY IDEOGRAPH-2F87D	[FB84 9DE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_235)
{
    // 2F87D 003F;	
    // (𡷦) CJK COMPATIBILITY IDEOGRAPH-2F87D	[FB84 9DE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0x9DE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_236)
{
    // 2F87D 0061;	
    // (𡷦) CJK COMPATIBILITY IDEOGRAPH-2F87D	[FB84 9DE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_237)
{
    // 2F87D 0041;	
    // (𡷦) CJK COMPATIBILITY IDEOGRAPH-2F87D	[FB84 9DE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F87D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_238)
{
    // 2F87D 0062;	
    // (𡷦) CJK COMPATIBILITY IDEOGRAPH-2F87D	[FB84 9DE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F87D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0x9DE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_239)
{
    // 2F889 0021;	
    // (𢆃) CJK COMPATIBILITY IDEOGRAPH-2F889	[FB84 A183 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F889, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA183, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_240)
{
    // 2F889 003F;	
    // (𢆃) CJK COMPATIBILITY IDEOGRAPH-2F889	[FB84 A183 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F889, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA183, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_241)
{
    // 2F889 0061;	
    // (𢆃) CJK COMPATIBILITY IDEOGRAPH-2F889	[FB84 A183 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F889, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_242)
{
    // 2F889 0041;	
    // (𢆃) CJK COMPATIBILITY IDEOGRAPH-2F889	[FB84 A183 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F889, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA183, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_243)
{
    // 2F889 0062;	
    // (𢆃) CJK COMPATIBILITY IDEOGRAPH-2F889	[FB84 A183 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F889, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA183, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_244)
{
    // 2F939 0021;	
    // (𢆟) CJK COMPATIBILITY IDEOGRAPH-2F939	[FB84 A19F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F939, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA19F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_245)
{
    // 2F939 003F;	
    // (𢆟) CJK COMPATIBILITY IDEOGRAPH-2F939	[FB84 A19F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F939, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA19F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_246)
{
    // 2F939 0061;	
    // (𢆟) CJK COMPATIBILITY IDEOGRAPH-2F939	[FB84 A19F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F939, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA19F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_247)
{
    // 2F939 0041;	
    // (𢆟) CJK COMPATIBILITY IDEOGRAPH-2F939	[FB84 A19F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F939, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA19F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_248)
{
    // 2F939 0062;	
    // (𢆟) CJK COMPATIBILITY IDEOGRAPH-2F939	[FB84 A19F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F939, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA19F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_249)
{
    // 2F891 0021;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F891	[FB84 A331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F891, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_250)
{
    // 2F892 0021;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F892	[FB84 A331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F892, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_251)
{
    // 2F891 003F;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F891	[FB84 A331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F891, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_252)
{
    // 2F892 003F;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F892	[FB84 A331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F892, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_253)
{
    // 2F891 0061;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F891	[FB84 A331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F891, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_254)
{
    // 2F892 0061;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F892	[FB84 A331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F892, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_255)
{
    // 2F891 0041;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F891	[FB84 A331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F891, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_256)
{
    // 2F892 0041;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F892	[FB84 A331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F892, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_257)
{
    // 2F891 0062;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F891	[FB84 A331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F891, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_258)
{
    // 2F892 0062;	
    // (𢌱) CJK COMPATIBILITY IDEOGRAPH-2F892	[FB84 A331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F892, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_259)
{
    // 2F8A4 0021;	
    // (𢛔) CJK COMPATIBILITY IDEOGRAPH-2F8A4	[FB84 A6D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA6D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_260)
{
    // 2F8A4 003F;	
    // (𢛔) CJK COMPATIBILITY IDEOGRAPH-2F8A4	[FB84 A6D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A4, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA6D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_261)
{
    // 2F8A4 0061;	
    // (𢛔) CJK COMPATIBILITY IDEOGRAPH-2F8A4	[FB84 A6D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_262)
{
    // 2F8A4 0041;	
    // (𢛔) CJK COMPATIBILITY IDEOGRAPH-2F8A4	[FB84 A6D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_263)
{
    // 2F8A4 0062;	
    // (𢛔) CJK COMPATIBILITY IDEOGRAPH-2F8A4	[FB84 A6D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA6D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_264)
{
    // FAD0 0021;	
    // (𢡄) CJK COMPATIBILITY IDEOGRAPH-FAD0	[FB84 A844 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA844, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_265)
{
    // FAD0 003F;	
    // (𢡄) CJK COMPATIBILITY IDEOGRAPH-FAD0	[FB84 A844 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD0, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA844, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_266)
{
    // FAD0 0061;	
    // (𢡄) CJK COMPATIBILITY IDEOGRAPH-FAD0	[FB84 A844 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_267)
{
    // FAD0 0041;	
    // (𢡄) CJK COMPATIBILITY IDEOGRAPH-FAD0	[FB84 A844 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA844, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_268)
{
    // FAD0 0062;	
    // (𢡄) CJK COMPATIBILITY IDEOGRAPH-FAD0	[FB84 A844 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA844, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_269)
{
    // FACF 0021;	
    // (𢡊) CJK COMPATIBILITY IDEOGRAPH-FACF	[FB84 A84A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACF, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xA84A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_270)
{
    // FACF 003F;	
    // (𢡊) CJK COMPATIBILITY IDEOGRAPH-FACF	[FB84 A84A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACF, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xA84A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_271)
{
    // FACF 0061;	
    // (𢡊) CJK COMPATIBILITY IDEOGRAPH-FACF	[FB84 A84A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACF, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xA84A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_272)
{
    // FACF 0041;	
    // (𢡊) CJK COMPATIBILITY IDEOGRAPH-FACF	[FB84 A84A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFACF, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xA84A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_273)
{
    // FACF 0062;	
    // (𢡊) CJK COMPATIBILITY IDEOGRAPH-FACF	[FB84 A84A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFACF, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xA84A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_274)
{
    // 2F8B8 0021;	
    // (𢬌) CJK COMPATIBILITY IDEOGRAPH-2F8B8	[FB84 AB0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xAB0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_275)
{
    // 2F8B8 003F;	
    // (𢬌) CJK COMPATIBILITY IDEOGRAPH-2F8B8	[FB84 AB0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B8, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xAB0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_276)
{
    // 2F8B8 0061;	
    // (𢬌) CJK COMPATIBILITY IDEOGRAPH-2F8B8	[FB84 AB0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xAB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_277)
{
    // 2F8B8 0041;	
    // (𢬌) CJK COMPATIBILITY IDEOGRAPH-2F8B8	[FB84 AB0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xAB0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_278)
{
    // 2F8B8 0062;	
    // (𢬌) CJK COMPATIBILITY IDEOGRAPH-2F8B8	[FB84 AB0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xAB0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_279)
{
    // 2F8BE 0021;	
    // (𢯱) CJK COMPATIBILITY IDEOGRAPH-2F8BE	[FB84 ABF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xABF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_280)
{
    // 2F8BE 003F;	
    // (𢯱) CJK COMPATIBILITY IDEOGRAPH-2F8BE	[FB84 ABF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BE, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xABF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_281)
{
    // 2F8BE 0061;	
    // (𢯱) CJK COMPATIBILITY IDEOGRAPH-2F8BE	[FB84 ABF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xABF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_282)
{
    // 2F8BE 0041;	
    // (𢯱) CJK COMPATIBILITY IDEOGRAPH-2F8BE	[FB84 ABF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xABF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_283)
{
    // 2F8BE 0062;	
    // (𢯱) CJK COMPATIBILITY IDEOGRAPH-2F8BE	[FB84 ABF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xABF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_284)
{
    // 2F8CA 0021;	
    // (𣀊) CJK COMPATIBILITY IDEOGRAPH-2F8CA	[FB84 B00A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB00A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_285)
{
    // 2F8CA 003F;	
    // (𣀊) CJK COMPATIBILITY IDEOGRAPH-2F8CA	[FB84 B00A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CA, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB00A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_286)
{
    // 2F8CA 0061;	
    // (𣀊) CJK COMPATIBILITY IDEOGRAPH-2F8CA	[FB84 B00A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB00A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_287)
{
    // 2F8CA 0041;	
    // (𣀊) CJK COMPATIBILITY IDEOGRAPH-2F8CA	[FB84 B00A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB00A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_288)
{
    // 2F8CA 0062;	
    // (𣀊) CJK COMPATIBILITY IDEOGRAPH-2F8CA	[FB84 B00A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB00A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_289)
{
    // 2F897 0021;	
    // (𣊸) CJK COMPATIBILITY IDEOGRAPH-2F897	[FB84 B2B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F897, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB2B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_290)
{
    // 2F897 003F;	
    // (𣊸) CJK COMPATIBILITY IDEOGRAPH-2F897	[FB84 B2B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F897, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB2B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_291)
{
    // 2F897 0061;	
    // (𣊸) CJK COMPATIBILITY IDEOGRAPH-2F897	[FB84 B2B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F897, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB2B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_292)
{
    // 2F897 0041;	
    // (𣊸) CJK COMPATIBILITY IDEOGRAPH-2F897	[FB84 B2B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F897, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB2B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_293)
{
    // 2F897 0062;	
    // (𣊸) CJK COMPATIBILITY IDEOGRAPH-2F897	[FB84 B2B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F897, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB2B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_294)
{
    // 2F980 0021;	
    // (𣍟) CJK COMPATIBILITY IDEOGRAPH-2F980	[FB84 B35F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F980, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB35F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_295)
{
    // 2F980 003F;	
    // (𣍟) CJK COMPATIBILITY IDEOGRAPH-2F980	[FB84 B35F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F980, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB35F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_296)
{
    // 2F980 0061;	
    // (𣍟) CJK COMPATIBILITY IDEOGRAPH-2F980	[FB84 B35F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F980, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB35F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_297)
{
    // 2F980 0041;	
    // (𣍟) CJK COMPATIBILITY IDEOGRAPH-2F980	[FB84 B35F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F980, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB35F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_298)
{
    // 2F980 0062;	
    // (𣍟) CJK COMPATIBILITY IDEOGRAPH-2F980	[FB84 B35F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F980, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB35F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_299)
{
    // 2F989 0021;	
    // (𣎓) CJK COMPATIBILITY IDEOGRAPH-2F989	[FB84 B393 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F989, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB393, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_300)
{
    // 2F989 003F;	
    // (𣎓) CJK COMPATIBILITY IDEOGRAPH-2F989	[FB84 B393 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F989, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB393, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_301)
{
    // 2F989 0061;	
    // (𣎓) CJK COMPATIBILITY IDEOGRAPH-2F989	[FB84 B393 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F989, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_302)
{
    // 2F989 0041;	
    // (𣎓) CJK COMPATIBILITY IDEOGRAPH-2F989	[FB84 B393 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F989, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB393, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_303)
{
    // 2F989 0062;	
    // (𣎓) CJK COMPATIBILITY IDEOGRAPH-2F989	[FB84 B393 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F989, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB393, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_304)
{
    // 2F98A 0021;	
    // (𣎜) CJK COMPATIBILITY IDEOGRAPH-2F98A	[FB84 B39C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98A, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB39C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_305)
{
    // 2F98A 003F;	
    // (𣎜) CJK COMPATIBILITY IDEOGRAPH-2F98A	[FB84 B39C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98A, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB39C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_306)
{
    // 2F98A 0061;	
    // (𣎜) CJK COMPATIBILITY IDEOGRAPH-2F98A	[FB84 B39C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98A, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB39C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_307)
{
    // 2F98A 0041;	
    // (𣎜) CJK COMPATIBILITY IDEOGRAPH-2F98A	[FB84 B39C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F98A, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB39C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_308)
{
    // 2F98A 0062;	
    // (𣎜) CJK COMPATIBILITY IDEOGRAPH-2F98A	[FB84 B39C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F98A, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB39C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_309)
{
    // 2F8DD 0021;	
    // (𣏃) CJK COMPATIBILITY IDEOGRAPH-2F8DD	[FB84 B3C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB3C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_310)
{
    // 2F8DD 003F;	
    // (𣏃) CJK COMPATIBILITY IDEOGRAPH-2F8DD	[FB84 B3C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DD, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB3C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_311)
{
    // 2F8DD 0061;	
    // (𣏃) CJK COMPATIBILITY IDEOGRAPH-2F8DD	[FB84 B3C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_312)
{
    // 2F8DD 0041;	
    // (𣏃) CJK COMPATIBILITY IDEOGRAPH-2F8DD	[FB84 B3C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB3C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_313)
{
    // 2F8DD 0062;	
    // (𣏃) CJK COMPATIBILITY IDEOGRAPH-2F8DD	[FB84 B3C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB3C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_314)
{
    // FAD1 0021;	
    // (𣏕) CJK COMPATIBILITY IDEOGRAPH-FAD1	[FB84 B3D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB3D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_315)
{
    // FAD1 003F;	
    // (𣏕) CJK COMPATIBILITY IDEOGRAPH-FAD1	[FB84 B3D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD1, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB3D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_316)
{
    // FAD1 0061;	
    // (𣏕) CJK COMPATIBILITY IDEOGRAPH-FAD1	[FB84 B3D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_317)
{
    // FAD1 0041;	
    // (𣏕) CJK COMPATIBILITY IDEOGRAPH-FAD1	[FB84 B3D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB3D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_318)
{
    // FAD1 0062;	
    // (𣏕) CJK COMPATIBILITY IDEOGRAPH-FAD1	[FB84 B3D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB3D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_319)
{
    // 2F8E3 0021;	
    // (𣑭) CJK COMPATIBILITY IDEOGRAPH-2F8E3	[FB84 B46D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB46D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_320)
{
    // 2F8E3 003F;	
    // (𣑭) CJK COMPATIBILITY IDEOGRAPH-2F8E3	[FB84 B46D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E3, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB46D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_321)
{
    // 2F8E3 0061;	
    // (𣑭) CJK COMPATIBILITY IDEOGRAPH-2F8E3	[FB84 B46D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_322)
{
    // 2F8E3 0041;	
    // (𣑭) CJK COMPATIBILITY IDEOGRAPH-2F8E3	[FB84 B46D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB46D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_323)
{
    // 2F8E3 0062;	
    // (𣑭) CJK COMPATIBILITY IDEOGRAPH-2F8E3	[FB84 B46D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB46D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_324)
{
    // 2F8EC 0021;	
    // (𣚣) CJK COMPATIBILITY IDEOGRAPH-2F8EC	[FB84 B6A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB6A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_325)
{
    // 2F8EC 003F;	
    // (𣚣) CJK COMPATIBILITY IDEOGRAPH-2F8EC	[FB84 B6A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EC, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB6A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_326)
{
    // 2F8EC 0061;	
    // (𣚣) CJK COMPATIBILITY IDEOGRAPH-2F8EC	[FB84 B6A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_327)
{
    // 2F8EC 0041;	
    // (𣚣) CJK COMPATIBILITY IDEOGRAPH-2F8EC	[FB84 B6A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_328)
{
    // 2F8EC 0062;	
    // (𣚣) CJK COMPATIBILITY IDEOGRAPH-2F8EC	[FB84 B6A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB6A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_329)
{
    // 2F8F0 0021;	
    // (𣢧) CJK COMPATIBILITY IDEOGRAPH-2F8F0	[FB84 B8A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xB8A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_330)
{
    // 2F8F0 003F;	
    // (𣢧) CJK COMPATIBILITY IDEOGRAPH-2F8F0	[FB84 B8A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F0, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xB8A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_331)
{
    // 2F8F0 0061;	
    // (𣢧) CJK COMPATIBILITY IDEOGRAPH-2F8F0	[FB84 B8A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xB8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_332)
{
    // 2F8F0 0041;	
    // (𣢧) CJK COMPATIBILITY IDEOGRAPH-2F8F0	[FB84 B8A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xB8A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_333)
{
    // 2F8F0 0062;	
    // (𣢧) CJK COMPATIBILITY IDEOGRAPH-2F8F0	[FB84 B8A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xB8A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_334)
{
    // 2F8F7 0021;	
    // (𣪍) CJK COMPATIBILITY IDEOGRAPH-2F8F7	[FB84 BA8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBA8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_335)
{
    // 2F8F7 003F;	
    // (𣪍) CJK COMPATIBILITY IDEOGRAPH-2F8F7	[FB84 BA8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F7, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBA8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_336)
{
    // 2F8F7 0061;	
    // (𣪍) CJK COMPATIBILITY IDEOGRAPH-2F8F7	[FB84 BA8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBA8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_337)
{
    // 2F8F7 0041;	
    // (𣪍) CJK COMPATIBILITY IDEOGRAPH-2F8F7	[FB84 BA8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBA8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_338)
{
    // 2F8F7 0062;	
    // (𣪍) CJK COMPATIBILITY IDEOGRAPH-2F8F7	[FB84 BA8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBA8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_339)
{
    // 2F8F9 0021;	
    // (𣫺) CJK COMPATIBILITY IDEOGRAPH-2F8F9	[FB84 BAFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBAFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_340)
{
    // 2F8F9 003F;	
    // (𣫺) CJK COMPATIBILITY IDEOGRAPH-2F8F9	[FB84 BAFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F9, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBAFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_341)
{
    // 2F8F9 0061;	
    // (𣫺) CJK COMPATIBILITY IDEOGRAPH-2F8F9	[FB84 BAFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_342)
{
    // 2F8F9 0041;	
    // (𣫺) CJK COMPATIBILITY IDEOGRAPH-2F8F9	[FB84 BAFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBAFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_343)
{
    // 2F8F9 0062;	
    // (𣫺) CJK COMPATIBILITY IDEOGRAPH-2F8F9	[FB84 BAFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBAFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_344)
{
    // 2F8FB 0021;	
    // (𣲼) CJK COMPATIBILITY IDEOGRAPH-2F8FB	[FB84 BCBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBCBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_345)
{
    // 2F8FB 003F;	
    // (𣲼) CJK COMPATIBILITY IDEOGRAPH-2F8FB	[FB84 BCBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FB, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBCBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_346)
{
    // 2F8FB 0061;	
    // (𣲼) CJK COMPATIBILITY IDEOGRAPH-2F8FB	[FB84 BCBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_347)
{
    // 2F8FB 0041;	
    // (𣲼) CJK COMPATIBILITY IDEOGRAPH-2F8FB	[FB84 BCBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_348)
{
    // 2F8FB 0062;	
    // (𣲼) CJK COMPATIBILITY IDEOGRAPH-2F8FB	[FB84 BCBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBCBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_349)
{
    // 2F906 0021;	
    // (𣴞) CJK COMPATIBILITY IDEOGRAPH-2F906	[FB84 BD1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F906, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBD1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_350)
{
    // 2F906 003F;	
    // (𣴞) CJK COMPATIBILITY IDEOGRAPH-2F906	[FB84 BD1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F906, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBD1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_351)
{
    // 2F906 0061;	
    // (𣴞) CJK COMPATIBILITY IDEOGRAPH-2F906	[FB84 BD1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F906, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBD1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_352)
{
    // 2F906 0041;	
    // (𣴞) CJK COMPATIBILITY IDEOGRAPH-2F906	[FB84 BD1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F906, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBD1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_353)
{
    // 2F906 0062;	
    // (𣴞) CJK COMPATIBILITY IDEOGRAPH-2F906	[FB84 BD1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F906, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBD1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_354)
{
    // 2F90D 0021;	
    // (𣻑) CJK COMPATIBILITY IDEOGRAPH-2F90D	[FB84 BED1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBED1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_355)
{
    // 2F90D 003F;	
    // (𣻑) CJK COMPATIBILITY IDEOGRAPH-2F90D	[FB84 BED1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBED1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_356)
{
    // 2F90D 0061;	
    // (𣻑) CJK COMPATIBILITY IDEOGRAPH-2F90D	[FB84 BED1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_357)
{
    // 2F90D 0041;	
    // (𣻑) CJK COMPATIBILITY IDEOGRAPH-2F90D	[FB84 BED1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBED1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_358)
{
    // 2F90D 0062;	
    // (𣻑) CJK COMPATIBILITY IDEOGRAPH-2F90D	[FB84 BED1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBED1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_359)
{
    // 2F910 0021;	
    // (𣽞) CJK COMPATIBILITY IDEOGRAPH-2F910	[FB84 BF5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F910, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBF5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_360)
{
    // 2F910 003F;	
    // (𣽞) CJK COMPATIBILITY IDEOGRAPH-2F910	[FB84 BF5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F910, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBF5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_361)
{
    // 2F910 0061;	
    // (𣽞) CJK COMPATIBILITY IDEOGRAPH-2F910	[FB84 BF5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F910, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBF5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_362)
{
    // 2F910 0041;	
    // (𣽞) CJK COMPATIBILITY IDEOGRAPH-2F910	[FB84 BF5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F910, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBF5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_363)
{
    // 2F910 0062;	
    // (𣽞) CJK COMPATIBILITY IDEOGRAPH-2F910	[FB84 BF5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F910, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBF5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_364)
{
    // 2F911 0021;	
    // (𣾎) CJK COMPATIBILITY IDEOGRAPH-2F911	[FB84 BF8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F911, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xBF8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_365)
{
    // 2F911 003F;	
    // (𣾎) CJK COMPATIBILITY IDEOGRAPH-2F911	[FB84 BF8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F911, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xBF8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_366)
{
    // 2F911 0061;	
    // (𣾎) CJK COMPATIBILITY IDEOGRAPH-2F911	[FB84 BF8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F911, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xBF8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_367)
{
    // 2F911 0041;	
    // (𣾎) CJK COMPATIBILITY IDEOGRAPH-2F911	[FB84 BF8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F911, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xBF8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_368)
{
    // 2F911 0062;	
    // (𣾎) CJK COMPATIBILITY IDEOGRAPH-2F911	[FB84 BF8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F911, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xBF8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_369)
{
    // 2F91D 0021;	
    // (𤉣) CJK COMPATIBILITY IDEOGRAPH-2F91D	[FB84 C263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_370)
{
    // 2F91D 003F;	
    // (𤉣) CJK COMPATIBILITY IDEOGRAPH-2F91D	[FB84 C263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_371)
{
    // 2F91D 0061;	
    // (𤉣) CJK COMPATIBILITY IDEOGRAPH-2F91D	[FB84 C263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_372)
{
    // 2F91D 0041;	
    // (𤉣) CJK COMPATIBILITY IDEOGRAPH-2F91D	[FB84 C263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_373)
{
    // 2F91D 0062;	
    // (𤉣) CJK COMPATIBILITY IDEOGRAPH-2F91D	[FB84 C263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_374)
{
    // FA6C 0021;	
    // (𤋮) CJK COMPATIBILITY IDEOGRAPH-FA6C	[FB84 C2EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC2EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_375)
{
    // FA6C 003F;	
    // (𤋮) CJK COMPATIBILITY IDEOGRAPH-FA6C	[FB84 C2EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6C, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC2EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_376)
{
    // FA6C 0061;	
    // (𤋮) CJK COMPATIBILITY IDEOGRAPH-FA6C	[FB84 C2EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC2EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_377)
{
    // FA6C 0041;	
    // (𤋮) CJK COMPATIBILITY IDEOGRAPH-FA6C	[FB84 C2EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC2EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_378)
{
    // FA6C 0062;	
    // (𤋮) CJK COMPATIBILITY IDEOGRAPH-FA6C	[FB84 C2EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC2EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_379)
{
    // 2F91F 0021;	
    // (𤎫) CJK COMPATIBILITY IDEOGRAPH-2F91F	[FB84 C3AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91F, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC3AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_380)
{
    // 2F91F 003F;	
    // (𤎫) CJK COMPATIBILITY IDEOGRAPH-2F91F	[FB84 C3AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91F, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC3AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_381)
{
    // 2F91F 0061;	
    // (𤎫) CJK COMPATIBILITY IDEOGRAPH-2F91F	[FB84 C3AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91F, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC3AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_382)
{
    // 2F91F 0041;	
    // (𤎫) CJK COMPATIBILITY IDEOGRAPH-2F91F	[FB84 C3AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F91F, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC3AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_383)
{
    // 2F91F 0062;	
    // (𤎫) CJK COMPATIBILITY IDEOGRAPH-2F91F	[FB84 C3AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F91F, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC3AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_384)
{
    // 2F923 0021;	
    // (𤘈) CJK COMPATIBILITY IDEOGRAPH-2F923	[FB84 C608 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F923, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC608, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_385)
{
    // 2F923 003F;	
    // (𤘈) CJK COMPATIBILITY IDEOGRAPH-2F923	[FB84 C608 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F923, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC608, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_386)
{
    // 2F923 0061;	
    // (𤘈) CJK COMPATIBILITY IDEOGRAPH-2F923	[FB84 C608 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F923, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_387)
{
    // 2F923 0041;	
    // (𤘈) CJK COMPATIBILITY IDEOGRAPH-2F923	[FB84 C608 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F923, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC608, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_388)
{
    // 2F923 0062;	
    // (𤘈) CJK COMPATIBILITY IDEOGRAPH-2F923	[FB84 C608 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F923, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC608, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_389)
{
    // 2F926 0021;	
    // (𤜵) CJK COMPATIBILITY IDEOGRAPH-2F926	[FB84 C735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F926, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_390)
{
    // 2F926 003F;	
    // (𤜵) CJK COMPATIBILITY IDEOGRAPH-2F926	[FB84 C735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F926, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_391)
{
    // 2F926 0061;	
    // (𤜵) CJK COMPATIBILITY IDEOGRAPH-2F926	[FB84 C735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F926, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_392)
{
    // 2F926 0041;	
    // (𤜵) CJK COMPATIBILITY IDEOGRAPH-2F926	[FB84 C735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F926, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_393)
{
    // 2F926 0062;	
    // (𤜵) CJK COMPATIBILITY IDEOGRAPH-2F926	[FB84 C735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F926, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_394)
{
    // 2F927 0021;	
    // (𤠔) CJK COMPATIBILITY IDEOGRAPH-2F927	[FB84 C814 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F927, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xC814, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_395)
{
    // 2F927 003F;	
    // (𤠔) CJK COMPATIBILITY IDEOGRAPH-2F927	[FB84 C814 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F927, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xC814, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_396)
{
    // 2F927 0061;	
    // (𤠔) CJK COMPATIBILITY IDEOGRAPH-2F927	[FB84 C814 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F927, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xC814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_397)
{
    // 2F927 0041;	
    // (𤠔) CJK COMPATIBILITY IDEOGRAPH-2F927	[FB84 C814 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F927, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xC814, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_398)
{
    // 2F927 0062;	
    // (𤠔) CJK COMPATIBILITY IDEOGRAPH-2F927	[FB84 C814 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F927, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xC814, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_399)
{
    // 2F935 0021;	
    // (𤰶) CJK COMPATIBILITY IDEOGRAPH-2F935	[FB84 CC36 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F935, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xCC36, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_400)
{
    // 2F935 003F;	
    // (𤰶) CJK COMPATIBILITY IDEOGRAPH-2F935	[FB84 CC36 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F935, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xCC36, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_401)
{
    // 2F935 0061;	
    // (𤰶) CJK COMPATIBILITY IDEOGRAPH-2F935	[FB84 CC36 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F935, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xCC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_402)
{
    // 2F935 0041;	
    // (𤰶) CJK COMPATIBILITY IDEOGRAPH-2F935	[FB84 CC36 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F935, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xCC36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_403)
{
    // 2F935 0062;	
    // (𤰶) CJK COMPATIBILITY IDEOGRAPH-2F935	[FB84 CC36 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F935, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xCC36, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_404)
{
    // 2F937 0021;	
    // (𤲒) CJK COMPATIBILITY IDEOGRAPH-2F937	[FB84 CC92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F937, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xCC92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_405)
{
    // 2F937 003F;	
    // (𤲒) CJK COMPATIBILITY IDEOGRAPH-2F937	[FB84 CC92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F937, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xCC92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_406)
{
    // 2F937 0061;	
    // (𤲒) CJK COMPATIBILITY IDEOGRAPH-2F937	[FB84 CC92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F937, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xCC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_407)
{
    // 2F937 0041;	
    // (𤲒) CJK COMPATIBILITY IDEOGRAPH-2F937	[FB84 CC92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F937, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xCC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_408)
{
    // 2F937 0062;	
    // (𤲒) CJK COMPATIBILITY IDEOGRAPH-2F937	[FB84 CC92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F937, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xCC92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_409)
{
    // 2F93B 0021;	
    // (𤾡) CJK COMPATIBILITY IDEOGRAPH-2F93B	[FB84 CFA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93B, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xCFA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_410)
{
    // 2F93B 003F;	
    // (𤾡) CJK COMPATIBILITY IDEOGRAPH-2F93B	[FB84 CFA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93B, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xCFA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_411)
{
    // 2F93B 0061;	
    // (𤾡) CJK COMPATIBILITY IDEOGRAPH-2F93B	[FB84 CFA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93B, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xCFA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_412)
{
    // 2F93B 0041;	
    // (𤾡) CJK COMPATIBILITY IDEOGRAPH-2F93B	[FB84 CFA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F93B, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xCFA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_413)
{
    // 2F93B 0062;	
    // (𤾡) CJK COMPATIBILITY IDEOGRAPH-2F93B	[FB84 CFA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93B, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xCFA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_414)
{
    // 2F93C 0021;	
    // (𤾸) CJK COMPATIBILITY IDEOGRAPH-2F93C	[FB84 CFB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93C, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xCFB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_415)
{
    // 2F93C 003F;	
    // (𤾸) CJK COMPATIBILITY IDEOGRAPH-2F93C	[FB84 CFB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93C, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xCFB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_416)
{
    // 2F93C 0061;	
    // (𤾸) CJK COMPATIBILITY IDEOGRAPH-2F93C	[FB84 CFB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93C, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xCFB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_417)
{
    // 2F93C 0041;	
    // (𤾸) CJK COMPATIBILITY IDEOGRAPH-2F93C	[FB84 CFB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F93C, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xCFB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_418)
{
    // 2F93C 0062;	
    // (𤾸) CJK COMPATIBILITY IDEOGRAPH-2F93C	[FB84 CFB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93C, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xCFB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_419)
{
    // 2F93D 0021;	
    // (𥁄) CJK COMPATIBILITY IDEOGRAPH-2F93D	[FB84 D044 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD044, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_420)
{
    // 2F93D 003F;	
    // (𥁄) CJK COMPATIBILITY IDEOGRAPH-2F93D	[FB84 D044 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD044, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_421)
{
    // 2F93D 0061;	
    // (𥁄) CJK COMPATIBILITY IDEOGRAPH-2F93D	[FB84 D044 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_422)
{
    // 2F93D 0041;	
    // (𥁄) CJK COMPATIBILITY IDEOGRAPH-2F93D	[FB84 D044 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F93D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD044, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_423)
{
    // 2F93D 0062;	
    // (𥁄) CJK COMPATIBILITY IDEOGRAPH-2F93D	[FB84 D044 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F93D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD044, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_424)
{
    // 2F942 0021;	
    // (𥃲) CJK COMPATIBILITY IDEOGRAPH-2F942	[FB84 D0F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F942, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_425)
{
    // 2F942 003F;	
    // (𥃲) CJK COMPATIBILITY IDEOGRAPH-2F942	[FB84 D0F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F942, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD0F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_426)
{
    // 2F942 0061;	
    // (𥃲) CJK COMPATIBILITY IDEOGRAPH-2F942	[FB84 D0F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F942, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_427)
{
    // 2F942 0041;	
    // (𥃲) CJK COMPATIBILITY IDEOGRAPH-2F942	[FB84 D0F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F942, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_428)
{
    // 2F942 0062;	
    // (𥃲) CJK COMPATIBILITY IDEOGRAPH-2F942	[FB84 D0F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F942, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_429)
{
    // 2F941 0021;	
    // (𥃳) CJK COMPATIBILITY IDEOGRAPH-2F941	[FB84 D0F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F941, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_430)
{
    // 2F941 003F;	
    // (𥃳) CJK COMPATIBILITY IDEOGRAPH-2F941	[FB84 D0F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F941, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD0F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_431)
{
    // 2F941 0061;	
    // (𥃳) CJK COMPATIBILITY IDEOGRAPH-2F941	[FB84 D0F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F941, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_432)
{
    // 2F941 0041;	
    // (𥃳) CJK COMPATIBILITY IDEOGRAPH-2F941	[FB84 D0F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F941, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_433)
{
    // 2F941 0062;	
    // (𥃳) CJK COMPATIBILITY IDEOGRAPH-2F941	[FB84 D0F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F941, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD0F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_434)
{
    // 2F943 0021;	
    // (𥄙) CJK COMPATIBILITY IDEOGRAPH-2F943	[FB84 D119 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F943, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD119, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_435)
{
    // 2F943 003F;	
    // (𥄙) CJK COMPATIBILITY IDEOGRAPH-2F943	[FB84 D119 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F943, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD119, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_436)
{
    // 2F943 0061;	
    // (𥄙) CJK COMPATIBILITY IDEOGRAPH-2F943	[FB84 D119 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F943, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_437)
{
    // 2F943 0041;	
    // (𥄙) CJK COMPATIBILITY IDEOGRAPH-2F943	[FB84 D119 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F943, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD119, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_438)
{
    // 2F943 0062;	
    // (𥄙) CJK COMPATIBILITY IDEOGRAPH-2F943	[FB84 D119 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F943, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD119, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_439)
{
    // 2F944 0021;	
    // (𥄳) CJK COMPATIBILITY IDEOGRAPH-2F944	[FB84 D133 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F944, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD133, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_440)
{
    // 2F944 003F;	
    // (𥄳) CJK COMPATIBILITY IDEOGRAPH-2F944	[FB84 D133 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F944, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD133, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_441)
{
    // 2F944 0061;	
    // (𥄳) CJK COMPATIBILITY IDEOGRAPH-2F944	[FB84 D133 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F944, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_442)
{
    // 2F944 0041;	
    // (𥄳) CJK COMPATIBILITY IDEOGRAPH-2F944	[FB84 D133 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F944, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD133, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_443)
{
    // 2F944 0062;	
    // (𥄳) CJK COMPATIBILITY IDEOGRAPH-2F944	[FB84 D133 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F944, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD133, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_444)
{
    // FAD5 0021;	
    // (𥉉) CJK COMPATIBILITY IDEOGRAPH-FAD5	[FB84 D249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_445)
{
    // FAD5 003F;	
    // (𥉉) CJK COMPATIBILITY IDEOGRAPH-FAD5	[FB84 D249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD5, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_446)
{
    // FAD5 0061;	
    // (𥉉) CJK COMPATIBILITY IDEOGRAPH-FAD5	[FB84 D249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_447)
{
    // FAD5 0041;	
    // (𥉉) CJK COMPATIBILITY IDEOGRAPH-FAD5	[FB84 D249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_448)
{
    // FAD5 0062;	
    // (𥉉) CJK COMPATIBILITY IDEOGRAPH-FAD5	[FB84 D249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_449)
{
    // 2F94D 0021;	
    // (𥐝) CJK COMPATIBILITY IDEOGRAPH-2F94D	[FB84 D41D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD41D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_450)
{
    // 2F94D 003F;	
    // (𥐝) CJK COMPATIBILITY IDEOGRAPH-2F94D	[FB84 D41D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD41D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_451)
{
    // 2F94D 0061;	
    // (𥐝) CJK COMPATIBILITY IDEOGRAPH-2F94D	[FB84 D41D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_452)
{
    // 2F94D 0041;	
    // (𥐝) CJK COMPATIBILITY IDEOGRAPH-2F94D	[FB84 D41D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F94D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD41D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_453)
{
    // 2F94D 0062;	
    // (𥐝) CJK COMPATIBILITY IDEOGRAPH-2F94D	[FB84 D41D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F94D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD41D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_454)
{
    // 2F952 0021;	
    // (𥘦) CJK COMPATIBILITY IDEOGRAPH-2F952	[FB84 D626 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F952, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD626, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_455)
{
    // 2F952 003F;	
    // (𥘦) CJK COMPATIBILITY IDEOGRAPH-2F952	[FB84 D626 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F952, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD626, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_456)
{
    // 2F952 0061;	
    // (𥘦) CJK COMPATIBILITY IDEOGRAPH-2F952	[FB84 D626 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F952, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_457)
{
    // 2F952 0041;	
    // (𥘦) CJK COMPATIBILITY IDEOGRAPH-2F952	[FB84 D626 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F952, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD626, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_458)
{
    // 2F952 0062;	
    // (𥘦) CJK COMPATIBILITY IDEOGRAPH-2F952	[FB84 D626 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F952, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD626, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_459)
{
    // 2F954 0021;	
    // (𥚚) CJK COMPATIBILITY IDEOGRAPH-2F954	[FB84 D69A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F954, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD69A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_460)
{
    // 2F954 003F;	
    // (𥚚) CJK COMPATIBILITY IDEOGRAPH-2F954	[FB84 D69A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F954, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD69A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_461)
{
    // 2F954 0061;	
    // (𥚚) CJK COMPATIBILITY IDEOGRAPH-2F954	[FB84 D69A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F954, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_462)
{
    // 2F954 0041;	
    // (𥚚) CJK COMPATIBILITY IDEOGRAPH-2F954	[FB84 D69A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F954, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD69A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_463)
{
    // 2F954 0062;	
    // (𥚚) CJK COMPATIBILITY IDEOGRAPH-2F954	[FB84 D69A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F954, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD69A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_464)
{
    // 2F955 0021;	
    // (𥛅) CJK COMPATIBILITY IDEOGRAPH-2F955	[FB84 D6C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F955, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD6C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_465)
{
    // 2F955 003F;	
    // (𥛅) CJK COMPATIBILITY IDEOGRAPH-2F955	[FB84 D6C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F955, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD6C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_466)
{
    // 2F955 0061;	
    // (𥛅) CJK COMPATIBILITY IDEOGRAPH-2F955	[FB84 D6C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F955, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_467)
{
    // 2F955 0041;	
    // (𥛅) CJK COMPATIBILITY IDEOGRAPH-2F955	[FB84 D6C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F955, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_468)
{
    // 2F955 0062;	
    // (𥛅) CJK COMPATIBILITY IDEOGRAPH-2F955	[FB84 D6C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F955, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD6C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_469)
{
    // 2F95C 0021;	
    // (𥥼) CJK COMPATIBILITY IDEOGRAPH-2F95C	[FB84 D97C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95C, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xD97C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_470)
{
    // 2F95C 003F;	
    // (𥥼) CJK COMPATIBILITY IDEOGRAPH-2F95C	[FB84 D97C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95C, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xD97C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_471)
{
    // 2F95C 0061;	
    // (𥥼) CJK COMPATIBILITY IDEOGRAPH-2F95C	[FB84 D97C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95C, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xD97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_472)
{
    // 2F95C 0041;	
    // (𥥼) CJK COMPATIBILITY IDEOGRAPH-2F95C	[FB84 D97C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F95C, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xD97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_473)
{
    // 2F95C 0062;	
    // (𥥼) CJK COMPATIBILITY IDEOGRAPH-2F95C	[FB84 D97C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95C, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xD97C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_474)
{
    // 2F95D 0021;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95D	[FB84 DAA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95D, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_475)
{
    // 2F95E 0021;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95E	[FB84 DAA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95E, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_476)
{
    // 2F95D 003F;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95D	[FB84 DAA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95D, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_477)
{
    // 2F95E 003F;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95E	[FB84 DAA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95E, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_478)
{
    // 2F95D 0061;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95D	[FB84 DAA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95D, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_479)
{
    // 2F95E 0061;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95E	[FB84 DAA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95E, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_480)
{
    // 2F95D 0041;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95D	[FB84 DAA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F95D, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_481)
{
    // 2F95E 0041;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95E	[FB84 DAA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F95E, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_482)
{
    // 2F95D 0062;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95D	[FB84 DAA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95D, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_483)
{
    // 2F95E 0062;	
    // (𥪧) CJK COMPATIBILITY IDEOGRAPH-2F95E	[FB84 DAA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F95E, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xDAA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_484)
{
    // 2F961 0021;	
    // (𥮫) CJK COMPATIBILITY IDEOGRAPH-2F961	[FB84 DBAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F961, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDBAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_485)
{
    // 2F961 003F;	
    // (𥮫) CJK COMPATIBILITY IDEOGRAPH-2F961	[FB84 DBAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F961, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xDBAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_486)
{
    // 2F961 0061;	
    // (𥮫) CJK COMPATIBILITY IDEOGRAPH-2F961	[FB84 DBAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F961, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xDBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_487)
{
    // 2F961 0041;	
    // (𥮫) CJK COMPATIBILITY IDEOGRAPH-2F961	[FB84 DBAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F961, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xDBAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_488)
{
    // 2F961 0062;	
    // (𥮫) CJK COMPATIBILITY IDEOGRAPH-2F961	[FB84 DBAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F961, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xDBAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_489)
{
    // 2F965 0021;	
    // (𥲀) CJK COMPATIBILITY IDEOGRAPH-2F965	[FB84 DC80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F965, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDC80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_490)
{
    // 2F965 003F;	
    // (𥲀) CJK COMPATIBILITY IDEOGRAPH-2F965	[FB84 DC80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F965, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xDC80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_491)
{
    // 2F965 0061;	
    // (𥲀) CJK COMPATIBILITY IDEOGRAPH-2F965	[FB84 DC80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F965, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xDC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_492)
{
    // 2F965 0041;	
    // (𥲀) CJK COMPATIBILITY IDEOGRAPH-2F965	[FB84 DC80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F965, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xDC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_493)
{
    // 2F965 0062;	
    // (𥲀) CJK COMPATIBILITY IDEOGRAPH-2F965	[FB84 DC80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F965, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xDC80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_494)
{
    // FAD6 0021;	
    // (𥳐) CJK COMPATIBILITY IDEOGRAPH-FAD6	[FB84 DCD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDCD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_495)
{
    // FAD6 003F;	
    // (𥳐) CJK COMPATIBILITY IDEOGRAPH-FAD6	[FB84 DCD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD6, 0x003F };
    uint32_t const ces[10] = { 0xFB84, 0xDCD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_496)
{
    // FAD6 0061;	
    // (𥳐) CJK COMPATIBILITY IDEOGRAPH-FAD6	[FB84 DCD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB84, 0xDCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_497)
{
    // FAD6 0041;	
    // (𥳐) CJK COMPATIBILITY IDEOGRAPH-FAD6	[FB84 DCD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB84, 0xDCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_498)
{
    // FAD6 0062;	
    // (𥳐) CJK COMPATIBILITY IDEOGRAPH-FAD6	[FB84 DCD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB84, 0xDCD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_393_499)
{
    // 2F96B 0021;	
    // (𥾆) CJK COMPATIBILITY IDEOGRAPH-2F96B	[FB84 DF86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F96B, 0x0021 };
    uint32_t const ces[10] = { 0xFB84, 0xDF86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

